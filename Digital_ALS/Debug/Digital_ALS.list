
Digital_ALS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080098f0  080098f0  0000a8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d48  08009d48  0000ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009d58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200001dc  08009f34  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08009f34  0000b3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0a8  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d6  00000000  00000000  000172ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00019388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000871  00000000  00000000  00019e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fba  00000000  00000000  0001a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddff  00000000  00000000  0003169b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089435  00000000  00000000  0003f49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c88cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  000c8914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	080098d8 	.word	0x080098d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	080098d8 	.word	0x080098d8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmpun>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001068:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800106c:	d102      	bne.n	8001074 <__aeabi_fcmpun+0x14>
 800106e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001072:	d108      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001074:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x20>
 800107a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107e:	d102      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	4770      	bx	lr
 8001086:	f04f 0001 	mov.w	r0, #1
 800108a:	4770      	bx	lr

0800108c <__aeabi_uldivmod>:
 800108c:	b953      	cbnz	r3, 80010a4 <__aeabi_uldivmod+0x18>
 800108e:	b94a      	cbnz	r2, 80010a4 <__aeabi_uldivmod+0x18>
 8001090:	2900      	cmp	r1, #0
 8001092:	bf08      	it	eq
 8001094:	2800      	cmpeq	r0, #0
 8001096:	bf1c      	itt	ne
 8001098:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800109c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80010a0:	f000 b968 	b.w	8001374 <__aeabi_idiv0>
 80010a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ac:	f000 f806 	bl	80010bc <__udivmoddi4>
 80010b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b8:	b004      	add	sp, #16
 80010ba:	4770      	bx	lr

080010bc <__udivmoddi4>:
 80010bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c0:	9d08      	ldr	r5, [sp, #32]
 80010c2:	460c      	mov	r4, r1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d14e      	bne.n	8001166 <__udivmoddi4+0xaa>
 80010c8:	4694      	mov	ip, r2
 80010ca:	458c      	cmp	ip, r1
 80010cc:	4686      	mov	lr, r0
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	d962      	bls.n	800119a <__udivmoddi4+0xde>
 80010d4:	b14a      	cbz	r2, 80010ea <__udivmoddi4+0x2e>
 80010d6:	f1c2 0320 	rsb	r3, r2, #32
 80010da:	4091      	lsls	r1, r2
 80010dc:	fa20 f303 	lsr.w	r3, r0, r3
 80010e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e4:	4319      	orrs	r1, r3
 80010e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80010f2:	fb07 1114 	mls	r1, r7, r4, r1
 80010f6:	fa1f f68c 	uxth.w	r6, ip
 80010fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001102:	fb04 f106 	mul.w	r1, r4, r6
 8001106:	4299      	cmp	r1, r3
 8001108:	d90a      	bls.n	8001120 <__udivmoddi4+0x64>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001112:	f080 8110 	bcs.w	8001336 <__udivmoddi4+0x27a>
 8001116:	4299      	cmp	r1, r3
 8001118:	f240 810d 	bls.w	8001336 <__udivmoddi4+0x27a>
 800111c:	3c02      	subs	r4, #2
 800111e:	4463      	add	r3, ip
 8001120:	1a59      	subs	r1, r3, r1
 8001122:	fbb1 f0f7 	udiv	r0, r1, r7
 8001126:	fb07 1110 	mls	r1, r7, r0, r1
 800112a:	fb00 f606 	mul.w	r6, r0, r6
 800112e:	fa1f f38e 	uxth.w	r3, lr
 8001132:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001136:	429e      	cmp	r6, r3
 8001138:	d90a      	bls.n	8001150 <__udivmoddi4+0x94>
 800113a:	eb1c 0303 	adds.w	r3, ip, r3
 800113e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001142:	f080 80fa 	bcs.w	800133a <__udivmoddi4+0x27e>
 8001146:	429e      	cmp	r6, r3
 8001148:	f240 80f7 	bls.w	800133a <__udivmoddi4+0x27e>
 800114c:	4463      	add	r3, ip
 800114e:	3802      	subs	r0, #2
 8001150:	2100      	movs	r1, #0
 8001152:	1b9b      	subs	r3, r3, r6
 8001154:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001158:	b11d      	cbz	r5, 8001162 <__udivmoddi4+0xa6>
 800115a:	40d3      	lsrs	r3, r2
 800115c:	2200      	movs	r2, #0
 800115e:	e9c5 3200 	strd	r3, r2, [r5]
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	428b      	cmp	r3, r1
 8001168:	d905      	bls.n	8001176 <__udivmoddi4+0xba>
 800116a:	b10d      	cbz	r5, 8001170 <__udivmoddi4+0xb4>
 800116c:	e9c5 0100 	strd	r0, r1, [r5]
 8001170:	2100      	movs	r1, #0
 8001172:	4608      	mov	r0, r1
 8001174:	e7f5      	b.n	8001162 <__udivmoddi4+0xa6>
 8001176:	fab3 f183 	clz	r1, r3
 800117a:	2900      	cmp	r1, #0
 800117c:	d146      	bne.n	800120c <__udivmoddi4+0x150>
 800117e:	42a3      	cmp	r3, r4
 8001180:	d302      	bcc.n	8001188 <__udivmoddi4+0xcc>
 8001182:	4290      	cmp	r0, r2
 8001184:	f0c0 80ee 	bcc.w	8001364 <__udivmoddi4+0x2a8>
 8001188:	1a86      	subs	r6, r0, r2
 800118a:	eb64 0303 	sbc.w	r3, r4, r3
 800118e:	2001      	movs	r0, #1
 8001190:	2d00      	cmp	r5, #0
 8001192:	d0e6      	beq.n	8001162 <__udivmoddi4+0xa6>
 8001194:	e9c5 6300 	strd	r6, r3, [r5]
 8001198:	e7e3      	b.n	8001162 <__udivmoddi4+0xa6>
 800119a:	2a00      	cmp	r2, #0
 800119c:	f040 808f 	bne.w	80012be <__udivmoddi4+0x202>
 80011a0:	eba1 040c 	sub.w	r4, r1, ip
 80011a4:	2101      	movs	r1, #1
 80011a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011aa:	fa1f f78c 	uxth.w	r7, ip
 80011ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80011b2:	fb08 4416 	mls	r4, r8, r6, r4
 80011b6:	fb07 f006 	mul.w	r0, r7, r6
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011c2:	4298      	cmp	r0, r3
 80011c4:	d908      	bls.n	80011d8 <__udivmoddi4+0x11c>
 80011c6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80011ce:	d202      	bcs.n	80011d6 <__udivmoddi4+0x11a>
 80011d0:	4298      	cmp	r0, r3
 80011d2:	f200 80cb 	bhi.w	800136c <__udivmoddi4+0x2b0>
 80011d6:	4626      	mov	r6, r4
 80011d8:	1a1c      	subs	r4, r3, r0
 80011da:	fbb4 f0f8 	udiv	r0, r4, r8
 80011de:	fb08 4410 	mls	r4, r8, r0, r4
 80011e2:	fb00 f707 	mul.w	r7, r0, r7
 80011e6:	fa1f f38e 	uxth.w	r3, lr
 80011ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ee:	429f      	cmp	r7, r3
 80011f0:	d908      	bls.n	8001204 <__udivmoddi4+0x148>
 80011f2:	eb1c 0303 	adds.w	r3, ip, r3
 80011f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80011fa:	d202      	bcs.n	8001202 <__udivmoddi4+0x146>
 80011fc:	429f      	cmp	r7, r3
 80011fe:	f200 80ae 	bhi.w	800135e <__udivmoddi4+0x2a2>
 8001202:	4620      	mov	r0, r4
 8001204:	1bdb      	subs	r3, r3, r7
 8001206:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800120a:	e7a5      	b.n	8001158 <__udivmoddi4+0x9c>
 800120c:	f1c1 0720 	rsb	r7, r1, #32
 8001210:	408b      	lsls	r3, r1
 8001212:	fa22 fc07 	lsr.w	ip, r2, r7
 8001216:	ea4c 0c03 	orr.w	ip, ip, r3
 800121a:	fa24 f607 	lsr.w	r6, r4, r7
 800121e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001222:	fbb6 f8f9 	udiv	r8, r6, r9
 8001226:	fa1f fe8c 	uxth.w	lr, ip
 800122a:	fb09 6618 	mls	r6, r9, r8, r6
 800122e:	fa20 f307 	lsr.w	r3, r0, r7
 8001232:	408c      	lsls	r4, r1
 8001234:	fa00 fa01 	lsl.w	sl, r0, r1
 8001238:	fb08 f00e 	mul.w	r0, r8, lr
 800123c:	431c      	orrs	r4, r3
 800123e:	0c23      	lsrs	r3, r4, #16
 8001240:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001244:	4298      	cmp	r0, r3
 8001246:	fa02 f201 	lsl.w	r2, r2, r1
 800124a:	d90a      	bls.n	8001262 <__udivmoddi4+0x1a6>
 800124c:	eb1c 0303 	adds.w	r3, ip, r3
 8001250:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8001254:	f080 8081 	bcs.w	800135a <__udivmoddi4+0x29e>
 8001258:	4298      	cmp	r0, r3
 800125a:	d97e      	bls.n	800135a <__udivmoddi4+0x29e>
 800125c:	f1a8 0802 	sub.w	r8, r8, #2
 8001260:	4463      	add	r3, ip
 8001262:	1a1e      	subs	r6, r3, r0
 8001264:	fbb6 f3f9 	udiv	r3, r6, r9
 8001268:	fb09 6613 	mls	r6, r9, r3, r6
 800126c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001276:	45a6      	cmp	lr, r4
 8001278:	d908      	bls.n	800128c <__udivmoddi4+0x1d0>
 800127a:	eb1c 0404 	adds.w	r4, ip, r4
 800127e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001282:	d266      	bcs.n	8001352 <__udivmoddi4+0x296>
 8001284:	45a6      	cmp	lr, r4
 8001286:	d964      	bls.n	8001352 <__udivmoddi4+0x296>
 8001288:	3b02      	subs	r3, #2
 800128a:	4464      	add	r4, ip
 800128c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001290:	fba0 8302 	umull	r8, r3, r0, r2
 8001294:	eba4 040e 	sub.w	r4, r4, lr
 8001298:	429c      	cmp	r4, r3
 800129a:	46c6      	mov	lr, r8
 800129c:	461e      	mov	r6, r3
 800129e:	d350      	bcc.n	8001342 <__udivmoddi4+0x286>
 80012a0:	d04d      	beq.n	800133e <__udivmoddi4+0x282>
 80012a2:	b155      	cbz	r5, 80012ba <__udivmoddi4+0x1fe>
 80012a4:	ebba 030e 	subs.w	r3, sl, lr
 80012a8:	eb64 0406 	sbc.w	r4, r4, r6
 80012ac:	fa04 f707 	lsl.w	r7, r4, r7
 80012b0:	40cb      	lsrs	r3, r1
 80012b2:	431f      	orrs	r7, r3
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ba:	2100      	movs	r1, #0
 80012bc:	e751      	b.n	8001162 <__udivmoddi4+0xa6>
 80012be:	fa0c fc02 	lsl.w	ip, ip, r2
 80012c2:	f1c2 0320 	rsb	r3, r2, #32
 80012c6:	40d9      	lsrs	r1, r3
 80012c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012cc:	fa20 f303 	lsr.w	r3, r0, r3
 80012d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012d8:	fb08 1110 	mls	r1, r8, r0, r1
 80012dc:	4094      	lsls	r4, r2
 80012de:	431c      	orrs	r4, r3
 80012e0:	fa1f f78c 	uxth.w	r7, ip
 80012e4:	0c23      	lsrs	r3, r4, #16
 80012e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012ea:	fb00 f107 	mul.w	r1, r0, r7
 80012ee:	4299      	cmp	r1, r3
 80012f0:	d908      	bls.n	8001304 <__udivmoddi4+0x248>
 80012f2:	eb1c 0303 	adds.w	r3, ip, r3
 80012f6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80012fa:	d22c      	bcs.n	8001356 <__udivmoddi4+0x29a>
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d92a      	bls.n	8001356 <__udivmoddi4+0x29a>
 8001300:	3802      	subs	r0, #2
 8001302:	4463      	add	r3, ip
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	fbb3 f1f8 	udiv	r1, r3, r8
 800130a:	fb08 3311 	mls	r3, r8, r1, r3
 800130e:	b2a4      	uxth	r4, r4
 8001310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001314:	fb01 f307 	mul.w	r3, r1, r7
 8001318:	42a3      	cmp	r3, r4
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0x272>
 800131c:	eb1c 0404 	adds.w	r4, ip, r4
 8001320:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001324:	d213      	bcs.n	800134e <__udivmoddi4+0x292>
 8001326:	42a3      	cmp	r3, r4
 8001328:	d911      	bls.n	800134e <__udivmoddi4+0x292>
 800132a:	3902      	subs	r1, #2
 800132c:	4464      	add	r4, ip
 800132e:	1ae4      	subs	r4, r4, r3
 8001330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001334:	e73b      	b.n	80011ae <__udivmoddi4+0xf2>
 8001336:	4604      	mov	r4, r0
 8001338:	e6f2      	b.n	8001120 <__udivmoddi4+0x64>
 800133a:	4608      	mov	r0, r1
 800133c:	e708      	b.n	8001150 <__udivmoddi4+0x94>
 800133e:	45c2      	cmp	sl, r8
 8001340:	d2af      	bcs.n	80012a2 <__udivmoddi4+0x1e6>
 8001342:	ebb8 0e02 	subs.w	lr, r8, r2
 8001346:	eb63 060c 	sbc.w	r6, r3, ip
 800134a:	3801      	subs	r0, #1
 800134c:	e7a9      	b.n	80012a2 <__udivmoddi4+0x1e6>
 800134e:	4631      	mov	r1, r6
 8001350:	e7ed      	b.n	800132e <__udivmoddi4+0x272>
 8001352:	4603      	mov	r3, r0
 8001354:	e79a      	b.n	800128c <__udivmoddi4+0x1d0>
 8001356:	4630      	mov	r0, r6
 8001358:	e7d4      	b.n	8001304 <__udivmoddi4+0x248>
 800135a:	46b0      	mov	r8, r6
 800135c:	e781      	b.n	8001262 <__udivmoddi4+0x1a6>
 800135e:	4463      	add	r3, ip
 8001360:	3802      	subs	r0, #2
 8001362:	e74f      	b.n	8001204 <__udivmoddi4+0x148>
 8001364:	4606      	mov	r6, r0
 8001366:	4623      	mov	r3, r4
 8001368:	4608      	mov	r0, r1
 800136a:	e711      	b.n	8001190 <__udivmoddi4+0xd4>
 800136c:	3e02      	subs	r6, #2
 800136e:	4463      	add	r3, ip
 8001370:	e732      	b.n	80011d8 <__udivmoddi4+0x11c>
 8001372:	bf00      	nop

08001374 <__aeabi_idiv0>:
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <BMP280_Init>:
#include "BMP280.h"
#include <math.h>

static I2C_HandleTypeDef *bmp_hi2c;

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	6078      	str	r0, [r7, #4]
    bmp_hi2c = hi2c;
 8001380:	4a11      	ldr	r2, [pc, #68]	@ (80013c8 <BMP280_Init+0x50>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
    uint8_t ctrl_meas[2] = {0xF4, 0x27};
 8001386:	f242 73f4 	movw	r3, #10228	@ 0x27f4
 800138a:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Transmit(bmp_hi2c, 0x76 << 1, ctrl_meas, 2, HAL_MAX_DELAY);
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <BMP280_Init+0x50>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	f107 020c 	add.w	r2, r7, #12
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2302      	movs	r3, #2
 800139c:	21ec      	movs	r1, #236	@ 0xec
 800139e:	f001 fae7 	bl	8002970 <HAL_I2C_Master_Transmit>
    uint8_t config[2] = {0xF5, 0xA0};
 80013a2:	f24a 03f5 	movw	r3, #41205	@ 0xa0f5
 80013a6:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Master_Transmit(bmp_hi2c, 0x76 << 1, config, 2, HAL_MAX_DELAY);
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <BMP280_Init+0x50>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f107 0208 	add.w	r2, r7, #8
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2302      	movs	r3, #2
 80013b8:	21ec      	movs	r1, #236	@ 0xec
 80013ba:	f001 fad9 	bl	8002970 <HAL_I2C_Master_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f8 	.word	0x200001f8

080013cc <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af04      	add	r7, sp, #16
    uint8_t data[3];
    HAL_I2C_Mem_Read(bmp_hi2c, 0x76 << 1, 0xFA, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <BMP280_ReadTemperature+0x50>)
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2303      	movs	r3, #3
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	463b      	mov	r3, r7
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	22fa      	movs	r2, #250	@ 0xfa
 80013e8:	21ec      	movs	r1, #236	@ 0xec
 80013ea:	f001 fbbf 	bl	8002b6c <HAL_I2C_Mem_Read>
    int32_t adc_T = ((int32_t)(data[0] << 12)) | ((int32_t)(data[1] << 4)) | (data[2] >> 4);
 80013ee:	783b      	ldrb	r3, [r7, #0]
 80013f0:	031a      	lsls	r2, r3, #12
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4313      	orrs	r3, r2
 80013f8:	78ba      	ldrb	r2, [r7, #2]
 80013fa:	0912      	lsrs	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	4313      	orrs	r3, r2
 8001400:	607b      	str	r3, [r7, #4]
    return (adc_T / 5120.0f);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fc12 	bl	8000c2c <__aeabi_i2f>
 8001408:	4603      	mov	r3, r0
 800140a:	4905      	ldr	r1, [pc, #20]	@ (8001420 <BMP280_ReadTemperature+0x54>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd15 	bl	8000e3c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200001f8 	.word	0x200001f8
 8001420:	45a00000 	.word	0x45a00000

08001424 <BMP280_ReadPressure>:

float BMP280_ReadPressure(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af04      	add	r7, sp, #16
    uint8_t data[3];
    HAL_I2C_Mem_Read(bmp_hi2c, 0x76 << 1, 0xF7, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <BMP280_ReadPressure+0x54>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2303      	movs	r3, #3
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	463b      	mov	r3, r7
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	22f7      	movs	r2, #247	@ 0xf7
 8001440:	21ec      	movs	r1, #236	@ 0xec
 8001442:	f001 fb93 	bl	8002b6c <HAL_I2C_Mem_Read>
    int32_t adc_P = ((int32_t)(data[0] << 12)) | ((int32_t)(data[1] << 4)) | (data[2] >> 4);
 8001446:	783b      	ldrb	r3, [r7, #0]
 8001448:	031a      	lsls	r2, r3, #12
 800144a:	787b      	ldrb	r3, [r7, #1]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4313      	orrs	r3, r2
 8001450:	78ba      	ldrb	r2, [r7, #2]
 8001452:	0912      	lsrs	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	4313      	orrs	r3, r2
 8001458:	607b      	str	r3, [r7, #4]
    return adc_P * 0.25f;
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fbe6 	bl	8000c2c <__aeabi_i2f>
 8001460:	4603      	mov	r3, r0
 8001462:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fc34 	bl	8000cd4 <__aeabi_fmul>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001f8 	.word	0x200001f8

0800147c <BMP280_ReadAltitude>:

float BMP280_ReadAltitude(float seaLevelhPa) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    float pressure = BMP280_ReadPressure() / 100.0f;
 8001484:	f7ff ffce 	bl	8001424 <BMP280_ReadPressure>
 8001488:	4603      	mov	r3, r0
 800148a:	490f      	ldr	r1, [pc, #60]	@ (80014c8 <BMP280_ReadAltitude+0x4c>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fcd5 	bl	8000e3c <__aeabi_fdiv>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
    return 44330.0f * (1.0f - powf(pressure / seaLevelhPa, 0.1903f));
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fccf 	bl	8000e3c <__aeabi_fdiv>
 800149e:	4603      	mov	r3, r0
 80014a0:	490a      	ldr	r1, [pc, #40]	@ (80014cc <BMP280_ReadAltitude+0x50>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f007 fd86 	bl	8008fb4 <powf>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80014b0:	f7ff fb06 	bl	8000ac0 <__aeabi_fsub>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4906      	ldr	r1, [pc, #24]	@ (80014d0 <BMP280_ReadAltitude+0x54>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fc0b 	bl	8000cd4 <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	42c80000 	.word	0x42c80000
 80014cc:	3e42de01 	.word	0x3e42de01
 80014d0:	472d2a00 	.word	0x472d2a00

080014d4 <LCD_SendInternal>:
#define LCD_COMMAND 0
#define LCD_DATA 1

extern I2C_HandleTypeDef hi2c1;

static void LCD_SendInternal(uint8_t data, uint8_t flags) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
    uint8_t up = data & 0xF0;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f023 030f 	bic.w	r3, r3, #15
 80014ea:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	73bb      	strb	r3, [r7, #14]
    uint8_t data_arr[4];
    data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_ENABLE;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 030c 	orr.w	r3, r3, #12
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up | flags | LCD_BACKLIGHT;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	4313      	orrs	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	b2db      	uxtb	r3, r3
 8001510:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_ENABLE;
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4313      	orrs	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 030c 	orr.w	r3, r3, #12
 800151e:	b2db      	uxtb	r3, r3
 8001520:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo | flags | LCD_BACKLIGHT;
 8001522:	7bba      	ldrb	r2, [r7, #14]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4313      	orrs	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	b2db      	uxtb	r3, r3
 8001530:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8001532:	f107 0208 	add.w	r2, r7, #8
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2304      	movs	r3, #4
 800153e:	214e      	movs	r1, #78	@ 0x4e
 8001540:	4803      	ldr	r0, [pc, #12]	@ (8001550 <LCD_SendInternal+0x7c>)
 8001542:	f001 fa15 	bl	8002970 <HAL_I2C_Master_Transmit>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001fc 	.word	0x200001fc

08001554 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t cmd) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(cmd, LCD_COMMAND);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffb6 	bl	80014d4 <LCD_SendInternal>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LCD_SendData>:

static void LCD_SendData(uint8_t data) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(data, LCD_DATA);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2101      	movs	r1, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffa8 	bl	80014d4 <LCD_SendInternal>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <LCD_Init>:

void LCD_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001590:	2032      	movs	r0, #50	@ 0x32
 8001592:	f000 fd6f 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x30);
 8001596:	2030      	movs	r0, #48	@ 0x30
 8001598:	f7ff ffdc 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(5);
 800159c:	2005      	movs	r0, #5
 800159e:	f000 fd69 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x30);
 80015a2:	2030      	movs	r0, #48	@ 0x30
 80015a4:	f7ff ffd6 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f000 fd63 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x30);
 80015ae:	2030      	movs	r0, #48	@ 0x30
 80015b0:	f7ff ffd0 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(10);
 80015b4:	200a      	movs	r0, #10
 80015b6:	f000 fd5d 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x20);
 80015ba:	2020      	movs	r0, #32
 80015bc:	f7ff ffca 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(10);
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 fd57 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x28);
 80015c6:	2028      	movs	r0, #40	@ 0x28
 80015c8:	f7ff ffc4 	bl	8001554 <LCD_SendCommand>
    LCD_SendCommand(0x08);
 80015cc:	2008      	movs	r0, #8
 80015ce:	f7ff ffc1 	bl	8001554 <LCD_SendCommand>
    LCD_SendCommand(0x01);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff ffbe 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(2);
 80015d8:	2002      	movs	r0, #2
 80015da:	f000 fd4b 	bl	8002074 <HAL_Delay>
    LCD_SendCommand(0x06);
 80015de:	2006      	movs	r0, #6
 80015e0:	f7ff ffb8 	bl	8001554 <LCD_SendCommand>
    LCD_SendCommand(0x0C);
 80015e4:	200c      	movs	r0, #12
 80015e6:	f7ff ffb5 	bl	8001554 <LCD_SendCommand>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LCD_Clear>:

void LCD_Clear(void) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff ffae 	bl	8001554 <LCD_SendCommand>
    HAL_Delay(2);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f000 fd3b 	bl	8002074 <HAL_Delay>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	460a      	mov	r2, r1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	4613      	mov	r3, r2
 8001610:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40};
 8001612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001616:	81bb      	strh	r3, [r7, #12]
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	3310      	adds	r3, #16
 800161c:	443b      	add	r3, r7
 800161e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4413      	add	r3, r2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b25b      	sxtb	r3, r3
 800162a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff8e 	bl	8001554 <LCD_SendCommand>
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <LCD_Print>:

void LCD_Print(char *str) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001648:	e007      	b.n	800165a <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff8e 	bl	8001570 <LCD_SendData>
        str++;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3301      	adds	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
    while (*str) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f3      	bne.n	800164a <LCD_Print+0xa>
    }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <VEML7700_WriteRegister>:
#include "VEML7700.h"

static void VEML7700_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint16_t value) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
 8001678:	4613      	mov	r3, r2
 800167a:	803b      	strh	r3, [r7, #0]
    uint8_t data[3] = {reg, value & 0xFF, (value >> 8) & 0xFF};
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	733b      	strb	r3, [r7, #12]
 8001680:	883b      	ldrh	r3, [r7, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	737b      	strb	r3, [r7, #13]
 8001686:	883b      	ldrh	r3, [r7, #0]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(hi2c, VEML7700_ADDR, data, 3, HAL_MAX_DELAY);
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2303      	movs	r3, #3
 800169c:	2120      	movs	r1, #32
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f966 	bl	8002970 <HAL_I2C_Master_Transmit>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <VEML7700_ReadRegister>:

static uint16_t VEML7700_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML7700_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2302      	movs	r3, #2
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	2120      	movs	r1, #32
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f001 fa4b 	bl	8002b6c <HAL_I2C_Mem_Read>
    return (data[1] << 8) | data[0];
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	b29b      	uxth	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <VEML7700_Init>:

void VEML7700_Init(I2C_HandleTypeDef *hi2c) {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
    VEML7700_WriteRegister(hi2c, 0x00, 0x0000);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb6 	bl	800166c <VEML7700_WriteRegister>
    HAL_Delay(10);
 8001700:	200a      	movs	r0, #10
 8001702:	f000 fcb7 	bl	8002074 <HAL_Delay>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <VEML7700_GetLux>:

float VEML7700_GetLux(I2C_HandleTypeDef *hi2c) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    uint16_t raw = VEML7700_ReadRegister(hi2c, 0x04);
 8001718:	2104      	movs	r1, #4
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffc6 	bl	80016ac <VEML7700_ReadRegister>
 8001720:	4603      	mov	r3, r0
 8001722:	81fb      	strh	r3, [r7, #14]
    return raw * 0.0036f;
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa80 	bl	8000c2c <__aeabi_i2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4904      	ldr	r1, [pc, #16]	@ (8001740 <VEML7700_GetLux+0x30>)
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff facf 	bl	8000cd4 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	3b6bedfa 	.word	0x3b6bedfa

08001744 <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	@ 0x30
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
    char msg[32];
    uint8_t found = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    HAL_UART_Transmit(huart, (uint8_t*)"Scanning I2C...\r\n", 17, HAL_MAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001758:	2211      	movs	r2, #17
 800175a:	4927      	ldr	r1, [pc, #156]	@ (80017f8 <I2C_Scan+0xb4>)
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f004 fbeb 	bl	8005f38 <HAL_UART_Transmit>

    for (uint8_t i = 1; i < 128; i++) {
 8001762:	2301      	movs	r3, #1
 8001764:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001768:	e02b      	b.n	80017c2 <I2C_Scan+0x7e>
        if (HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, HAL_MAX_DELAY) == HAL_OK) {
 800176a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800176e:	b29b      	uxth	r3, r3
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b299      	uxth	r1, r3
 8001774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001778:	2201      	movs	r2, #1
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f001 fc1c 	bl	8002fb8 <HAL_I2C_IsDeviceReady>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <I2C_Scan+0x74>
            snprintf(msg, sizeof(msg), "Device found at 0x%X\r\n", i);
 8001786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800178a:	f107 000c 	add.w	r0, r7, #12
 800178e:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <I2C_Scan+0xb8>)
 8001790:	2120      	movs	r1, #32
 8001792:	f005 fac5 	bl	8006d20 <sniprintf>
            HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fcf0 	bl	8000180 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f107 010c 	add.w	r1, r7, #12
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f004 fbc3 	bl	8005f38 <HAL_UART_Transmit>
            found = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (uint8_t i = 1; i < 128; i++) {
 80017b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017bc:	3301      	adds	r3, #1
 80017be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80017c2:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dacf      	bge.n	800176a <I2C_Scan+0x26>
        }
    }

    if (!found) {
 80017ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <I2C_Scan+0x9c>
        HAL_UART_Transmit(huart, (uint8_t*)"No I2C device found!\r\n", 22, HAL_MAX_DELAY);
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d6:	2216      	movs	r2, #22
 80017d8:	4909      	ldr	r1, [pc, #36]	@ (8001800 <I2C_Scan+0xbc>)
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f004 fbac 	bl	8005f38 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(huart, (uint8_t*)"Scan Complete\r\n", 15, HAL_MAX_DELAY);
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e4:	220f      	movs	r2, #15
 80017e6:	4907      	ldr	r1, [pc, #28]	@ (8001804 <I2C_Scan+0xc0>)
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f004 fba5 	bl	8005f38 <HAL_UART_Transmit>
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	@ 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	080098f0 	.word	0x080098f0
 80017fc:	08009904 	.word	0x08009904
 8001800:	0800991c 	.word	0x0800991c
 8001804:	08009934 	.word	0x08009934

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b0b0      	sub	sp, #192	@ 0xc0
 800180e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f000 fbc1 	bl	8001f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f8b8 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f000 f95c 	bl	8001ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800181c:	f000 f930 	bl	8001a80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001820:	f000 f900 	bl	8001a24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  I2C_Scan(&hi2c1,&huart2);
 8001824:	4950      	ldr	r1, [pc, #320]	@ (8001968 <main+0x160>)
 8001826:	4851      	ldr	r0, [pc, #324]	@ (800196c <main+0x164>)
 8001828:	f7ff ff8c 	bl	8001744 <I2C_Scan>
  // Initialisation des capteurs et de l'écran
  VEML7700_Init(&hi2c1);
 800182c:	484f      	ldr	r0, [pc, #316]	@ (800196c <main+0x164>)
 800182e:	f7ff ff5e 	bl	80016ee <VEML7700_Init>
  BMP280_Init(&hi2c1);
 8001832:	484e      	ldr	r0, [pc, #312]	@ (800196c <main+0x164>)
 8001834:	f7ff fda0 	bl	8001378 <BMP280_Init>
  LCD_Init();
 8001838:	f7ff fea8 	bl	800158c <LCD_Init>
  LCD_Clear();
 800183c:	f7ff fed7 	bl	80015ee <LCD_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  float lux = VEML7700_GetLux(&hi2c1);
 8001840:	484a      	ldr	r0, [pc, #296]	@ (800196c <main+0x164>)
 8001842:	f7ff ff65 	bl	8001710 <VEML7700_GetLux>
 8001846:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

	  float temperature = BMP280_ReadTemperature();
 800184a:	f7ff fdbf 	bl	80013cc <BMP280_ReadTemperature>
 800184e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	  float pressure = BMP280_ReadPressure();
 8001852:	f7ff fde7 	bl	8001424 <BMP280_ReadPressure>
 8001856:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	  float altitude = BMP280_ReadAltitude(1013.25); // à ajuster selon ta pression locale
 800185a:	4845      	ldr	r0, [pc, #276]	@ (8001970 <main+0x168>)
 800185c:	f7ff fe0e 	bl	800147c <BMP280_ReadAltitude>
 8001860:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

	  char buffer[100];
	  snprintf(buffer, sizeof(buffer),
 8001864:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001868:	f7fe fdf6 	bl	8000458 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001874:	f7fe fdf0 	bl	8000458 <__aeabi_f2d>
 8001878:	4680      	mov	r8, r0
 800187a:	4689      	mov	r9, r1
 800187c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001880:	f7fe fdea 	bl	8000458 <__aeabi_f2d>
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b3a      	ldr	r3, [pc, #232]	@ (8001974 <main+0x16c>)
 800188a:	f7fe ff67 	bl	800075c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4692      	mov	sl, r2
 8001894:	469b      	mov	fp, r3
 8001896:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800189a:	f7fe fddd 	bl	8000458 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	1d38      	adds	r0, r7, #4
 80018a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80018ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018b0:	e9cd 4500 	strd	r4, r5, [sp]
 80018b4:	4a30      	ldr	r2, [pc, #192]	@ (8001978 <main+0x170>)
 80018b6:	2164      	movs	r1, #100	@ 0x64
 80018b8:	f005 fa32 	bl	8006d20 <sniprintf>
	           "Lux: %.2f lx\r\nT: %.2f C\r\nP: %.2f hPa\r\nAlt: %.2f m\r\n",
	           lux, temperature, pressure / 100.0, altitude);

	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fc5e 	bl	8000180 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	1d39      	adds	r1, r7, #4
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ce:	4826      	ldr	r0, [pc, #152]	@ (8001968 <main+0x160>)
 80018d0:	f004 fb32 	bl	8005f38 <HAL_UART_Transmit>

	  // Affichage sur LCD 16x2
	  LCD_SetCursor(0, 0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fe93 	bl	8001602 <LCD_SetCursor>
	  char line1[17];
	  snprintf(line1, sizeof(line1), "T:%.1fC P:%.0fh", temperature, pressure / 100);
 80018dc:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80018e0:	f7fe fdba 	bl	8000458 <__aeabi_f2d>
 80018e4:	4604      	mov	r4, r0
 80018e6:	460d      	mov	r5, r1
 80018e8:	4924      	ldr	r1, [pc, #144]	@ (800197c <main+0x174>)
 80018ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80018ee:	f7ff faa5 	bl	8000e3c <__aeabi_fdiv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fdaf 	bl	8000458 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001906:	e9cd 4500 	strd	r4, r5, [sp]
 800190a:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <main+0x178>)
 800190c:	2111      	movs	r1, #17
 800190e:	f005 fa07 	bl	8006d20 <sniprintf>
	  LCD_Print(line1);
 8001912:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe92 	bl	8001640 <LCD_Print>

	  LCD_SetCursor(0, 1);
 800191c:	2101      	movs	r1, #1
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fe6f 	bl	8001602 <LCD_SetCursor>
	  char line2[17];
	  snprintf(line2, sizeof(line2), "A:%.0fm L:%.0f%%", altitude, lux);
 8001924:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001928:	f7fe fd96 	bl	8000458 <__aeabi_f2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001934:	f7fe fd90 	bl	8000458 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001940:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001944:	e9cd 4500 	strd	r4, r5, [sp]
 8001948:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <main+0x17c>)
 800194a:	2111      	movs	r1, #17
 800194c:	f005 f9e8 	bl	8006d20 <sniprintf>
	  LCD_Print(line2);
 8001950:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fe73 	bl	8001640 <LCD_Print>

	  HAL_Delay(10000);
 800195a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800195e:	f000 fb89 	bl	8002074 <HAL_Delay>
  {
 8001962:	bf00      	nop
 8001964:	e76c      	b.n	8001840 <main+0x38>
 8001966:	bf00      	nop
 8001968:	20000250 	.word	0x20000250
 800196c:	200001fc 	.word	0x200001fc
 8001970:	447d5000 	.word	0x447d5000
 8001974:	40590000 	.word	0x40590000
 8001978:	08009944 	.word	0x08009944
 800197c:	42c80000 	.word	0x42c80000
 8001980:	08009978 	.word	0x08009978
 8001984:	08009988 	.word	0x08009988

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b092      	sub	sp, #72	@ 0x48
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2234      	movs	r2, #52	@ 0x34
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fa39 	bl	8006e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <SystemClock_Config+0x98>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80019b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <SystemClock_Config+0x98>)
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ba:	2302      	movs	r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c2:	2310      	movs	r3, #16
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80019d4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80019d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fc64 	bl	80052ac <HAL_RCC_OscConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019ea:	f000 f8d9 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ee:	230f      	movs	r3, #15
 80019f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f2:	2303      	movs	r3, #3
 80019f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 ff80 	bl	800590c <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a12:	f000 f8c5 	bl	8001ba0 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3748      	adds	r7, #72	@ 0x48
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40007000 	.word	0x40007000

08001a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <MX_I2C1_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <MX_I2C1_Init+0x58>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a62:	f000 fe2d 	bl	80026c0 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 f898 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	000186a0 	.word	0x000186a0

08001a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <MX_USART2_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f004 f9ee 	bl	8005e98 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f86d 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000250 	.word	0x20000250
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <MX_GPIO_Init+0xc0>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	4812      	ldr	r0, [pc, #72]	@ (8001b98 <MX_GPIO_Init+0xc4>)
 8001b50:	f000 fd9e 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <MX_GPIO_Init+0xc8>)
 8001b6c:	f000 fc00 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b70:	2320      	movs	r3, #32
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <MX_GPIO_Init+0xc4>)
 8001b88:	f000 fbf2 	bl	8002370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	@ 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bbe:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_MspInit+0x5c>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f000 fb28 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <HAL_I2C_MspInit+0x9c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d138      	bne.n	8001ca0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4813      	ldr	r0, [pc, #76]	@ (8001cb0 <HAL_I2C_MspInit+0xa4>)
 8001c64:	f000 fb84 	bl	8002370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c72:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_I2C_MspInit+0xa0>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	201f      	movs	r0, #31
 8001c86:	f000 faee 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c8a:	201f      	movs	r0, #31
 8001c8c:	f000 fb07 	bl	800229e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2020      	movs	r0, #32
 8001c96:	f000 fae6 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c9a:	2020      	movs	r0, #32
 8001c9c:	f000 faff 	bl	800229e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <HAL_UART_MspInit+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d127      	bne.n	8001d26 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_UART_MspInit+0x80>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d06:	230c      	movs	r3, #12
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d16:	2307      	movs	r3, #7
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_UART_MspInit+0x84>)
 8001d22:	f000 fb25 	bl	8002370 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	@ 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f956 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <I2C1_EV_IRQHandler+0x10>)
 8001d9a:	f001 fa3b 	bl	8003214 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200001fc 	.word	0x200001fc

08001da8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <I2C1_ER_IRQHandler+0x10>)
 8001dae:	f001 fb84 	bl	80034ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200001fc 	.word	0x200001fc

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <_kill>:

int _kill(int pid, int sig)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dd4:	f005 f86e 	bl	8006eb4 <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2216      	movs	r2, #22
 8001ddc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_exit>:

void _exit (int status)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffe7 	bl	8001dca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <_exit+0x12>

08001e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
  }

  return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
  }
  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e98:	605a      	str	r2, [r3, #4]
  return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f004 ffd6 	bl	8006eb4 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20014000 	.word	0x20014000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20000298 	.word	0x20000298
 8001f3c:	200003f0 	.word	0x200003f0

08001f40 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f4c:	f7ff fff8 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	@ (8001f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f52:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f54:	4a0c      	ldr	r2, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f68:	4c09      	ldr	r4, [pc, #36]	@ (8001f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f76:	f004 ffa3 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7a:	f7ff fc45 	bl	8001808 <main>
  bx lr
 8001f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f88:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 8001f8c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f90:	200003ec 	.word	0x200003ec

08001f94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_IRQHandler>

08001f96 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f955 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f80e 	bl	8001fc8 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	e001      	b.n	8001fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb8:	f7ff fdf8 	bl	8001bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <HAL_InitTick+0x68>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_InitTick+0x6c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_InitTick+0x68>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f962 	bl	80022ba <HAL_SYSTICK_Config>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10f      	bne.n	800201c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	d809      	bhi.n	8002016 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002002:	2200      	movs	r2, #0
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800200a:	f000 f92c 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <HAL_InitTick+0x70>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e007      	b.n	8002026 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e004      	b.n	8002026 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000008 	.word	0x20000008
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_IncTick+0x1c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x20>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4413      	add	r3, r2
 800204a:	4a03      	ldr	r2, [pc, #12]	@ (8002058 <HAL_IncTick+0x1c>)
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000029c 	.word	0x2000029c
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	2000029c 	.word	0x2000029c

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fff0 	bl	8002060 <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800208c:	d004      	beq.n	8002098 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_Delay+0x40>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002098:	bf00      	nop
 800209a:	f7ff ffe1 	bl	8002060 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d8f7      	bhi.n	800209a <HAL_Delay+0x26>
  {
  }
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000008 	.word	0x20000008

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4906      	ldr	r1, [pc, #24]	@ (8002150 <__NVIC_EnableIRQ+0x34>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	@ (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	@ (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	@ 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002230:	f7ff ff90 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff2d 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff42 	bl	8002100 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff90 	bl	80021a8 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5f 	bl	8002154 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff35 	bl	800211c <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffa2 	bl	800220c <SysTick_Config>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d005      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e029      	b.n	800234a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020e 	bic.w	r2, r2, #14
 8002304:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 021c 	and.w	r2, r3, #28
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
    }
  }
  return status;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002362:	b2db      	uxtb	r3, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
	...

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002386:	e160      	b.n	800264a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8152 	beq.w	8002644 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d005      	beq.n	80023b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d130      	bne.n	800241a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80023ee:	2201      	movs	r2, #1
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 0201 	and.w	r2, r3, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b03      	cmp	r3, #3
 8002424:	d017      	beq.n	8002456 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d123      	bne.n	80024aa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	6939      	ldr	r1, [r7, #16]
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80ac 	beq.w	8002644 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <HAL_GPIO_Init+0x2f8>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <HAL_GPIO_Init+0x2f8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <HAL_GPIO_Init+0x2f8>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002504:	4a59      	ldr	r2, [pc, #356]	@ (800266c <HAL_GPIO_Init+0x2fc>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a51      	ldr	r2, [pc, #324]	@ (8002670 <HAL_GPIO_Init+0x300>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d025      	beq.n	800257c <HAL_GPIO_Init+0x20c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a50      	ldr	r2, [pc, #320]	@ (8002674 <HAL_GPIO_Init+0x304>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01f      	beq.n	8002578 <HAL_GPIO_Init+0x208>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4f      	ldr	r2, [pc, #316]	@ (8002678 <HAL_GPIO_Init+0x308>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d019      	beq.n	8002574 <HAL_GPIO_Init+0x204>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a4e      	ldr	r2, [pc, #312]	@ (800267c <HAL_GPIO_Init+0x30c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x200>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4d      	ldr	r2, [pc, #308]	@ (8002680 <HAL_GPIO_Init+0x310>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1fc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a4c      	ldr	r2, [pc, #304]	@ (8002684 <HAL_GPIO_Init+0x314>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1f8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a4b      	ldr	r2, [pc, #300]	@ (8002688 <HAL_GPIO_Init+0x318>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1f4>
 8002560:	2306      	movs	r3, #6
 8002562:	e00c      	b.n	800257e <HAL_GPIO_Init+0x20e>
 8002564:	2307      	movs	r3, #7
 8002566:	e00a      	b.n	800257e <HAL_GPIO_Init+0x20e>
 8002568:	2305      	movs	r3, #5
 800256a:	e008      	b.n	800257e <HAL_GPIO_Init+0x20e>
 800256c:	2304      	movs	r3, #4
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x20e>
 8002570:	2303      	movs	r3, #3
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x20e>
 8002574:	2302      	movs	r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x20e>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x20e>
 800257c:	2300      	movs	r3, #0
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800258e:	4937      	ldr	r1, [pc, #220]	@ (800266c <HAL_GPIO_Init+0x2fc>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_GPIO_Init+0x31c>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025c0:	4a32      	ldr	r2, [pc, #200]	@ (800268c <HAL_GPIO_Init+0x31c>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c6:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_GPIO_Init+0x31c>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025ea:	4a28      	ldr	r2, [pc, #160]	@ (800268c <HAL_GPIO_Init+0x31c>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_GPIO_Init+0x31c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <HAL_GPIO_Init+0x31c>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <HAL_GPIO_Init+0x31c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_GPIO_Init+0x31c>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f ae97 	bne.w	8002388 <HAL_GPIO_Init+0x18>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40010000 	.word	0x40010000
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e12b      	b.n	800292a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fa90 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	@ 0x24
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002724:	f003 fb30 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a81      	ldr	r2, [pc, #516]	@ (8002934 <HAL_I2C_Init+0x274>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d807      	bhi.n	8002744 <HAL_I2C_Init+0x84>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a80      	ldr	r2, [pc, #512]	@ (8002938 <HAL_I2C_Init+0x278>)
 8002738:	4293      	cmp	r3, r2
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e006      	b.n	8002752 <HAL_I2C_Init+0x92>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a7d      	ldr	r2, [pc, #500]	@ (800293c <HAL_I2C_Init+0x27c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	bf94      	ite	ls
 800274c:	2301      	movls	r3, #1
 800274e:	2300      	movhi	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0e7      	b.n	800292a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a78      	ldr	r2, [pc, #480]	@ (8002940 <HAL_I2C_Init+0x280>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0c9b      	lsrs	r3, r3, #18
 8002764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a6a      	ldr	r2, [pc, #424]	@ (8002934 <HAL_I2C_Init+0x274>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d802      	bhi.n	8002794 <HAL_I2C_Init+0xd4>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	e009      	b.n	80027a8 <HAL_I2C_Init+0xe8>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	4a69      	ldr	r2, [pc, #420]	@ (8002944 <HAL_I2C_Init+0x284>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	3301      	adds	r3, #1
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	495c      	ldr	r1, [pc, #368]	@ (8002934 <HAL_I2C_Init+0x274>)
 80027c4:	428b      	cmp	r3, r1
 80027c6:	d819      	bhi.n	80027fc <HAL_I2C_Init+0x13c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e59      	subs	r1, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027dc:	400b      	ands	r3, r1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_I2C_Init+0x138>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1e59      	subs	r1, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	e051      	b.n	800289c <HAL_I2C_Init+0x1dc>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e04f      	b.n	800289c <HAL_I2C_Init+0x1dc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <HAL_I2C_Init+0x168>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e58      	subs	r0, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	440b      	add	r3, r1
 8002812:	fbb0 f3f3 	udiv	r3, r0, r3
 8002816:	3301      	adds	r3, #1
 8002818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e012      	b.n	800284e <HAL_I2C_Init+0x18e>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	0099      	lsls	r1, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	fbb0 f3f3 	udiv	r3, r0, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Init+0x196>
 8002852:	2301      	movs	r3, #1
 8002854:	e022      	b.n	800289c <HAL_I2C_Init+0x1dc>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10e      	bne.n	800287c <HAL_I2C_Init+0x1bc>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e58      	subs	r0, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	440b      	add	r3, r1
 800286c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800287a:	e00f      	b.n	800289c <HAL_I2C_Init+0x1dc>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	0099      	lsls	r1, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	6809      	ldr	r1, [r1, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6911      	ldr	r1, [r2, #16]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	4311      	orrs	r1, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	430b      	orrs	r3, r1
 80028de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	000186a0 	.word	0x000186a0
 8002938:	001e847f 	.word	0x001e847f
 800293c:	003d08ff 	.word	0x003d08ff
 8002940:	431bde83 	.word	0x431bde83
 8002944:	10624dd3 	.word	0x10624dd3

08002948 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b80      	cmp	r3, #128	@ 0x80
 800295c:	d103      	bne.n	8002966 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fb6c 	bl	8002060 <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	f040 80e0 	bne.w	8002b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2319      	movs	r3, #25
 800299e:	2201      	movs	r2, #1
 80029a0:	4970      	ldr	r1, [pc, #448]	@ (8002b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f002 fa00 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	e0d3      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x50>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0cc      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d007      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2221      	movs	r2, #33	@ 0x21
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2210      	movs	r2, #16
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a50      	ldr	r2, [pc, #320]	@ (8002b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 ffa8 	bl	8004984 <I2C_MasterRequestWrite>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e08d      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a54:	e066      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f002 fabe 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e06b      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d11b      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x188>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d017      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f002 fab5 	bl	800506c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d107      	bne.n	8002b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01a      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d194      	bne.n	8002a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e000      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
  }
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	00100002 	.word	0x00100002
 8002b68:	ffff0000 	.word	0xffff0000

08002b6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	@ 0x30
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	817b      	strh	r3, [r7, #10]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	813b      	strh	r3, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b86:	f7ff fa6b 	bl	8002060 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	f040 8208 	bne.w	8002faa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2319      	movs	r3, #25
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	497b      	ldr	r1, [pc, #492]	@ (8002d90 <HAL_I2C_Mem_Read+0x224>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f002 f8ff 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e1fb      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x56>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e1f4      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d007      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2222      	movs	r2, #34	@ 0x22
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a5b      	ldr	r2, [pc, #364]	@ (8002d94 <HAL_I2C_Mem_Read+0x228>)
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2a:	88f8      	ldrh	r0, [r7, #6]
 8002c2c:	893a      	ldrh	r2, [r7, #8]
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4603      	mov	r3, r0
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f001 ff24 	bl	8004a88 <I2C_RequestMemoryRead>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1b0      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d113      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e184      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d11b      	bne.n	8002cba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e164      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d11b      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	e144      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d10:	e138      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	f200 80f1 	bhi.w	8002efe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d123      	bne.n	8002d6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f002 fa19 	bl	8005160 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e139      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d6a:	e10b      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d14e      	bne.n	8002e12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4906      	ldr	r1, [pc, #24]	@ (8002d98 <HAL_I2C_Mem_Read+0x22c>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f002 f812 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e10e      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
 8002d8e:	bf00      	nop
 8002d90:	00100002 	.word	0x00100002
 8002d94:	ffff0000 	.word	0xffff0000
 8002d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e10:	e0b8      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4966      	ldr	r1, [pc, #408]	@ (8002fb4 <HAL_I2C_Mem_Read+0x448>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 ffc3 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0bf      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	494f      	ldr	r1, [pc, #316]	@ (8002fb4 <HAL_I2C_Mem_Read+0x448>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f001 ff95 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e091      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002efc:	e042      	b.n	8002f84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f002 f92c 	bl	8005160 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e04c      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d118      	bne.n	8002f84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f47f aec2 	bne.w	8002d12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	@ 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	00010004 	.word	0x00010004

08002fb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff f84a 	bl	8002060 <HAL_GetTick>
 8002fcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	f040 8111 	bne.w	8003202 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2319      	movs	r3, #25
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4988      	ldr	r1, [pc, #544]	@ (800320c <HAL_I2C_IsDeviceReady+0x254>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f001 fedc 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e104      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_I2C_IsDeviceReady+0x50>
 8003004:	2302      	movs	r3, #2
 8003006:	e0fd      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d007      	beq.n	800302e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800303c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2224      	movs	r2, #36	@ 0x24
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a70      	ldr	r2, [pc, #448]	@ (8003210 <HAL_I2C_IsDeviceReady+0x258>)
 8003050:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003060:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f001 fe9a 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003088:	d103      	bne.n	8003092 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0b6      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fe ffdb 	bl	8002060 <HAL_GetTick>
 80030aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030da:	e025      	b.n	8003128 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7fe ffc0 	bl	8002060 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <HAL_I2C_IsDeviceReady+0x13a>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	22a0      	movs	r2, #160	@ 0xa0
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2ba0      	cmp	r3, #160	@ 0xa0
 8003132:	d005      	beq.n	8003140 <HAL_I2C_IsDeviceReady+0x188>
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_I2C_IsDeviceReady+0x188>
 800313a:	7dbb      	ldrb	r3, [r7, #22]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0cd      	beq.n	80030dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d129      	bne.n	80031aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003164:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	4921      	ldr	r1, [pc, #132]	@ (800320c <HAL_I2C_IsDeviceReady+0x254>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f001 fe0e 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e036      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e02c      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	490f      	ldr	r1, [pc, #60]	@ (800320c <HAL_I2C_IsDeviceReady+0x254>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f001 fdea 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e012      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f4ff af32 	bcc.w	8003052 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00100002 	.word	0x00100002
 8003210:	ffff0000 	.word	0xffff0000

08003214 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003234:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d003      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0x38>
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b40      	cmp	r3, #64	@ 0x40
 8003248:	f040 80b1 	bne.w	80033ae <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_I2C_EV_IRQHandler+0x6e>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800326c:	d003      	beq.n	8003276 <HAL_I2C_EV_IRQHandler+0x62>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003274:	d101      	bne.n	800327a <HAL_I2C_EV_IRQHandler+0x66>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_EV_IRQHandler+0x68>
 800327a:	2300      	movs	r3, #0
 800327c:	2b01      	cmp	r3, #1
 800327e:	f000 8114 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x90>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f001 ffed 	bl	8005276 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd58 	bl	8003d52 <I2C_Master_SB>
 80032a2:	e083      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_I2C_EV_IRQHandler+0xac>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fdcf 	bl	8003e5c <I2C_Master_ADD10>
 80032be:	e075      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0xc8>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fdea 	bl	8003eae <I2C_Master_ADDR>
 80032da:	e067      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d036      	beq.n	8003354 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f4:	f000 80db 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x10a>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x10a>
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9cc 	bl	80036b4 <I2C_MasterTransmit_TXE>
 800331c:	e046      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80c2 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80bc 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	2b21      	cmp	r3, #33	@ 0x21
 800333a:	d103      	bne.n	8003344 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fa55 	bl	80037ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003342:	e0b4      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	f040 80b1 	bne.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fac3 	bl	80038d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003352:	e0ac      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003362:	f000 80a4 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_I2C_EV_IRQHandler+0x178>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_I2C_EV_IRQHandler+0x178>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fb3f 	bl	8003a08 <I2C_MasterReceive_RXNE>
 800338a:	e00f      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 808b 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8085 	beq.w	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fbea 	bl	8003b7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033aa:	e080      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
 80033ac:	e07f      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e007      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x1ea>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 ffa5 	bl	8004346 <I2C_Slave_ADDR>
 80033fc:	e05a      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x206>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ffe0 	bl	80043d8 <I2C_Slave_STOPF>
 8003418:	e04c      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	2b21      	cmp	r3, #33	@ 0x21
 800341e:	d002      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x212>
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	2b29      	cmp	r3, #41	@ 0x29
 8003424:	d120      	bne.n	8003468 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_I2C_EV_IRQHandler+0x238>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_I2C_EV_IRQHandler+0x238>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fec2 	bl	80041ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800344a:	e032      	b.n	80034b2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02d      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345c:	2b00      	cmp	r3, #0
 800345e:	d028      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fef1 	bl	8004248 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003466:	e024      	b.n	80034b2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0x27a>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0x27a>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fefe 	bl	8004288 <I2C_SlaveReceive_RXNE>
 800348c:	e012      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 ff2e 	bl	8004304 <I2C_SlaveReceive_BTF>
 80034a8:	e004      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b08a      	sub	sp, #40	@ 0x28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0x4a>
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003502:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x70>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003528:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03e      	beq.n	80035b2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d039      	beq.n	80035b2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800353e:	7efb      	ldrb	r3, [r7, #27]
 8003540:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003550:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003558:	7ebb      	ldrb	r3, [r7, #26]
 800355a:	2b20      	cmp	r3, #32
 800355c:	d112      	bne.n	8003584 <HAL_I2C_ER_IRQHandler+0xca>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10f      	bne.n	8003584 <HAL_I2C_ER_IRQHandler+0xca>
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b21      	cmp	r3, #33	@ 0x21
 8003568:	d008      	beq.n	800357c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b29      	cmp	r3, #41	@ 0x29
 800356e:	d005      	beq.n	800357c <HAL_I2C_ER_IRQHandler+0xc2>
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b28      	cmp	r3, #40	@ 0x28
 8003574:	d106      	bne.n	8003584 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b21      	cmp	r3, #33	@ 0x21
 800357a:	d103      	bne.n	8003584 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f001 f85b 	bl	8004638 <I2C_Slave_AF>
 8003582:	e016      	b.n	80035b2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003596:	7efb      	ldrb	r3, [r7, #27]
 8003598:	2b10      	cmp	r3, #16
 800359a:	d002      	beq.n	80035a2 <HAL_I2C_ER_IRQHandler+0xe8>
 800359c:	7efb      	ldrb	r3, [r7, #27]
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d107      	bne.n	80035b2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <HAL_I2C_ER_IRQHandler+0x11e>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80035d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 f898 	bl	8004720 <I2C_ITError>
  }
}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	@ 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	4613      	mov	r3, r2
 800364e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d150      	bne.n	800377c <I2C_MasterTransmit_TXE+0xc8>
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b21      	cmp	r3, #33	@ 0x21
 80036de:	d14d      	bne.n	800377c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d01d      	beq.n	8003722 <I2C_MasterTransmit_TXE+0x6e>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d01a      	beq.n	8003722 <I2C_MasterTransmit_TXE+0x6e>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036f2:	d016      	beq.n	8003722 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003702:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2211      	movs	r2, #17
 8003708:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ff6c 	bl	80035f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003720:	e060      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003730:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003740:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d107      	bne.n	800376c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff81 	bl	800366c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800376a:	e03b      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff3f 	bl	80035f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800377a:	e033      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b21      	cmp	r3, #33	@ 0x21
 8003780:	d005      	beq.n	800378e <I2C_MasterTransmit_TXE+0xda>
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b40      	cmp	r3, #64	@ 0x40
 8003786:	d12d      	bne.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b22      	cmp	r3, #34	@ 0x22
 800378c:	d12a      	bne.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037a8:	e01c      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d103      	bne.n	80037be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f88e 	bl	80038d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80037bc:	e012      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037e2:	e7ff      	b.n	80037e4 <I2C_MasterTransmit_TXE+0x130>
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b21      	cmp	r3, #33	@ 0x21
 8003804:	d164      	bne.n	80038d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003834:	e04c      	b.n	80038d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d01d      	beq.n	8003878 <I2C_MasterTransmit_BTF+0x8c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b20      	cmp	r3, #32
 8003840:	d01a      	beq.n	8003878 <I2C_MasterTransmit_BTF+0x8c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003848:	d016      	beq.n	8003878 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003858:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2211      	movs	r2, #17
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fec1 	bl	80035f8 <HAL_I2C_MasterTxCpltCallback>
}
 8003876:	e02b      	b.n	80038d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003886:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003896:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b40      	cmp	r3, #64	@ 0x40
 80038b0:	d107      	bne.n	80038c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fed6 	bl	800366c <HAL_I2C_MemTxCpltCallback>
}
 80038c0:	e006      	b.n	80038d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fe94 	bl	80035f8 <HAL_I2C_MasterTxCpltCallback>
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11d      	bne.n	800392c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10b      	bne.n	8003910 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800390e:	e077      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003914:	b29b      	uxth	r3, r3
 8003916:	121b      	asrs	r3, r3, #8
 8003918:	b2da      	uxtb	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800392a:	e069      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10b      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003938:	b2da      	uxtb	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800394a:	e059      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	2b02      	cmp	r3, #2
 8003952:	d152      	bne.n	80039fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b22      	cmp	r3, #34	@ 0x22
 8003958:	d10d      	bne.n	8003976 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003968:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003974:	e044      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b21      	cmp	r3, #33	@ 0x21
 8003984:	d112      	bne.n	80039ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039aa:	e029      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d124      	bne.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b21      	cmp	r3, #33	@ 0x21
 80039ba:	d121      	bne.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe3a 	bl	800366c <HAL_I2C_MemTxCpltCallback>
}
 80039f8:	e002      	b.n	8003a00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe ffa4 	bl	8002948 <I2C_Flush_DR>
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b22      	cmp	r3, #34	@ 0x22
 8003a1a:	f040 80ac 	bne.w	8003b76 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d921      	bls.n	8003a70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	f040 808c 	bne.w	8003b76 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a6e:	e082      	b.n	8003b76 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d075      	beq.n	8003b64 <I2C_MasterReceive_RXNE+0x15c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d002      	beq.n	8003a84 <I2C_MasterReceive_RXNE+0x7c>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d16f      	bne.n	8003b64 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f001 fb39 	bl	80050fc <I2C_WaitOnSTOPRequestThroughIT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d142      	bne.n	8003b16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b40      	cmp	r3, #64	@ 0x40
 8003ae8:	d10a      	bne.n	8003b00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fdc0 	bl	800367e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afe:	e03a      	b.n	8003b76 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2212      	movs	r2, #18
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fd7b 	bl	800360a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b14:	e02f      	b.n	8003b76 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fd97 	bl	8003690 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b62:	e008      	b.n	8003b76 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b72:	605a      	str	r2, [r3, #4]
}
 8003b74:	e7ff      	b.n	8003b76 <I2C_MasterReceive_RXNE+0x16e>
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d11b      	bne.n	8003bce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003bcc:	e0bd      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d129      	bne.n	8003c2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d00a      	beq.n	8003c04 <I2C_MasterReceive_BTF+0x86>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d007      	beq.n	8003c04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c2a:	e08e      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d176      	bne.n	8003d24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d002      	beq.n	8003c42 <I2C_MasterReceive_BTF+0xc4>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d108      	bne.n	8003c54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e019      	b.n	8003c88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d002      	beq.n	8003c60 <I2C_MasterReceive_BTF+0xe2>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d108      	bne.n	8003c72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e00a      	b.n	8003c88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d007      	beq.n	8003c88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ce2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d10a      	bne.n	8003d0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fcb9 	bl	800367e <HAL_I2C_MemRxCpltCallback>
}
 8003d0c:	e01d      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2212      	movs	r2, #18
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fc74 	bl	800360a <HAL_I2C_MasterRxCpltCallback>
}
 8003d22:	e012      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d117      	bne.n	8003d96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d80:	e067      	b.n	8003e52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
}
 8003d94:	e05d      	b.n	8003e52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9e:	d133      	bne.n	8003e08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b21      	cmp	r3, #33	@ 0x21
 8003daa:	d109      	bne.n	8003dc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e008      	b.n	8003dd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <I2C_Master_SB+0x92>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <I2C_Master_SB+0x100>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02d      	beq.n	8003e52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e04:	605a      	str	r2, [r3, #4]
}
 8003e06:	e024      	b.n	8003e52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	11db      	asrs	r3, r3, #7
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0306 	and.w	r3, r3, #6
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f063 030f 	orn	r3, r3, #15
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
}
 8003e2c:	e011      	b.n	8003e52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d10d      	bne.n	8003e52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	11db      	asrs	r3, r3, #7
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0306 	and.w	r3, r3, #6
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f063 030e 	orn	r3, r3, #14
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <I2C_Master_ADD10+0x26>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <I2C_Master_ADD10+0x48>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea2:	605a      	str	r2, [r3, #4]
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b091      	sub	sp, #68	@ 0x44
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ebc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b22      	cmp	r3, #34	@ 0x22
 8003ed6:	f040 8169 	bne.w	80041ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <I2C_Master_ADDR+0x54>
 8003ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d10b      	bne.n	8003f02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	e160      	b.n	80041c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11d      	bne.n	8003f46 <I2C_Master_ADDR+0x98>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f12:	d118      	bne.n	8003f46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f44:	e13e      	b.n	80041c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d113      	bne.n	8003f78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e115      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f040 808a 	bne.w	8004098 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f8a:	d137      	bne.n	8003ffc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d113      	bne.n	8003fd4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	e0e7      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e0d3      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d02e      	beq.n	8004060 <I2C_Master_ADDR+0x1b2>
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2b20      	cmp	r3, #32
 8004006:	d02b      	beq.n	8004060 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	2b12      	cmp	r3, #18
 800400c:	d102      	bne.n	8004014 <I2C_Master_ADDR+0x166>
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	2b01      	cmp	r3, #1
 8004012:	d125      	bne.n	8004060 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	2b04      	cmp	r3, #4
 8004018:	d00e      	beq.n	8004038 <I2C_Master_ADDR+0x18a>
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	2b02      	cmp	r3, #2
 800401e:	d00b      	beq.n	8004038 <I2C_Master_ADDR+0x18a>
 8004020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004022:	2b10      	cmp	r3, #16
 8004024:	d008      	beq.n	8004038 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e007      	b.n	8004048 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	e0a1      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e085      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d14d      	bne.n	800413e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d016      	beq.n	80040d6 <I2C_Master_ADDR+0x228>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d013      	beq.n	80040d6 <I2C_Master_ADDR+0x228>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d010      	beq.n	80040d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e007      	b.n	80040e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f4:	d117      	bne.n	8004126 <I2C_Master_ADDR+0x278>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040fc:	d00b      	beq.n	8004116 <I2C_Master_ADDR+0x268>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b01      	cmp	r3, #1
 8004102:	d008      	beq.n	8004116 <I2C_Master_ADDR+0x268>
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	2b08      	cmp	r3, #8
 8004108:	d005      	beq.n	8004116 <I2C_Master_ADDR+0x268>
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	2b10      	cmp	r3, #16
 800410e:	d002      	beq.n	8004116 <I2C_Master_ADDR+0x268>
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	2b20      	cmp	r3, #32
 8004114:	d107      	bne.n	8004126 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004124:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e032      	b.n	80041a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800414c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800415c:	d117      	bne.n	800418e <I2C_Master_ADDR+0x2e0>
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004164:	d00b      	beq.n	800417e <I2C_Master_ADDR+0x2d0>
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	2b01      	cmp	r3, #1
 800416a:	d008      	beq.n	800417e <I2C_Master_ADDR+0x2d0>
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	2b08      	cmp	r3, #8
 8004170:	d005      	beq.n	800417e <I2C_Master_ADDR+0x2d0>
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	2b10      	cmp	r3, #16
 8004176:	d002      	beq.n	800417e <I2C_Master_ADDR+0x2d0>
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	2b20      	cmp	r3, #32
 800417c:	d107      	bne.n	800418e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800418c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041aa:	e00b      	b.n	80041c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	e7ff      	b.n	80041c4 <I2C_Master_ADDR+0x316>
 80041c4:	bf00      	nop
 80041c6:	3744      	adds	r7, #68	@ 0x44
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02b      	beq.n	8004240 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d114      	bne.n	8004240 <I2C_SlaveTransmit_TXE+0x72>
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b29      	cmp	r3, #41	@ 0x29
 800421a:	d111      	bne.n	8004240 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2221      	movs	r2, #33	@ 0x21
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2228      	movs	r2, #40	@ 0x28
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f9ee 	bl	800361c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004296:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02c      	beq.n	80042fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d114      	bne.n	80042fc <I2C_SlaveReceive_RXNE+0x74>
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042d6:	d111      	bne.n	80042fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2222      	movs	r2, #34	@ 0x22
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2228      	movs	r2, #40	@ 0x28
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff f999 	bl	800362e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004360:	2b28      	cmp	r3, #40	@ 0x28
 8004362:	d125      	bne.n	80043b0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	81bb      	strh	r3, [r7, #12]
 8004392:	e002      	b.n	800439a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043a2:	89ba      	ldrh	r2, [r7, #12]
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	4619      	mov	r1, r3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff f949 	bl	8003640 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043ae:	e00e      	b.n	80043ce <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004424:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004434:	d172      	bne.n	800451c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b22      	cmp	r3, #34	@ 0x22
 800443a:	d002      	beq.n	8004442 <I2C_Slave_STOPF+0x6a>
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004440:	d135      	bne.n	80044ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004474:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd ff6a 	bl	8002354 <HAL_DMA_GetState>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d049      	beq.n	800451a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	4a69      	ldr	r2, [pc, #420]	@ (8004630 <I2C_Slave_STOPF+0x258>)
 800448c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd ff1d 	bl	80022d2 <HAL_DMA_Abort_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d03d      	beq.n	800451a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ac:	e035      	b.n	800451a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd ff34 	bl	8002354 <HAL_DMA_GetState>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d014      	beq.n	800451c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004630 <I2C_Slave_STOPF+0x258>)
 80044f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fee7 	bl	80022d2 <HAL_DMA_Abort_IT>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
 8004518:	e000      	b.n	800451c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800451a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03e      	beq.n	80045a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d112      	bne.n	800455a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d112      	bne.n	800458e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8b7 	bl	8004720 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045b2:	e039      	b.n	8004628 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b8:	d109      	bne.n	80045ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2228      	movs	r2, #40	@ 0x28
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff f830 	bl	800362e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b28      	cmp	r3, #40	@ 0x28
 80045d8:	d111      	bne.n	80045fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <I2C_Slave_STOPF+0x25c>)
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff f82f 	bl	800365a <HAL_I2C_ListenCpltCallback>
}
 80045fc:	e014      	b.n	8004628 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	2b22      	cmp	r3, #34	@ 0x22
 8004604:	d002      	beq.n	800460c <I2C_Slave_STOPF+0x234>
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b22      	cmp	r3, #34	@ 0x22
 800460a:	d10d      	bne.n	8004628 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff f803 	bl	800362e <HAL_I2C_SlaveRxCpltCallback>
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	08004c59 	.word	0x08004c59
 8004634:	ffff0000 	.word	0xffff0000

08004638 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d002      	beq.n	800465a <I2C_Slave_AF+0x22>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d129      	bne.n	80046ae <I2C_Slave_AF+0x76>
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b28      	cmp	r3, #40	@ 0x28
 800465e:	d126      	bne.n	80046ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a2e      	ldr	r2, [pc, #184]	@ (800471c <I2C_Slave_AF+0xe4>)
 8004664:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004674:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800467e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe ffd7 	bl	800365a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046ac:	e031      	b.n	8004712 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b21      	cmp	r3, #33	@ 0x21
 80046b2:	d129      	bne.n	8004708 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a19      	ldr	r2, [pc, #100]	@ (800471c <I2C_Slave_AF+0xe4>)
 80046b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2221      	movs	r2, #33	@ 0x21
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe f924 	bl	8002948 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fe ff8b 	bl	800361c <HAL_I2C_SlaveTxCpltCallback>
}
 8004706:	e004      	b.n	8004712 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004710:	615a      	str	r2, [r3, #20]
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	ffff0000 	.word	0xffff0000

08004720 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004736:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	2b10      	cmp	r3, #16
 800473c:	d002      	beq.n	8004744 <I2C_ITError+0x24>
 800473e:	7bbb      	ldrb	r3, [r7, #14]
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d10a      	bne.n	800475a <I2C_ITError+0x3a>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b22      	cmp	r3, #34	@ 0x22
 8004748:	d107      	bne.n	800475a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004758:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004760:	2b28      	cmp	r3, #40	@ 0x28
 8004762:	d107      	bne.n	8004774 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2228      	movs	r2, #40	@ 0x28
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004772:	e015      	b.n	80047a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004782:	d00a      	beq.n	800479a <I2C_ITError+0x7a>
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b60      	cmp	r3, #96	@ 0x60
 8004788:	d007      	beq.n	800479a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ae:	d162      	bne.n	8004876 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d020      	beq.n	8004810 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d2:	4a6a      	ldr	r2, [pc, #424]	@ (800497c <I2C_ITError+0x25c>)
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fd79 	bl	80022d2 <HAL_DMA_Abort_IT>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8089 	beq.w	80048fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800480a:	4610      	mov	r0, r2
 800480c:	4798      	blx	r3
 800480e:	e074      	b.n	80048fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	4a59      	ldr	r2, [pc, #356]	@ (800497c <I2C_ITError+0x25c>)
 8004816:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd fd58 	bl	80022d2 <HAL_DMA_Abort_IT>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d068      	beq.n	80048fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d10b      	bne.n	800484e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
 8004874:	e041      	b.n	80048fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b60      	cmp	r3, #96	@ 0x60
 8004880:	d125      	bne.n	80048ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d10b      	bne.n	80048b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe feeb 	bl	80036a2 <HAL_I2C_AbortCpltCallback>
 80048cc:	e015      	b.n	80048fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d10b      	bne.n	80048f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fe fecb 	bl	8003690 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10e      	bne.n	8004928 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d113      	bne.n	8004974 <I2C_ITError+0x254>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b28      	cmp	r3, #40	@ 0x28
 8004950:	d110      	bne.n	8004974 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a0a      	ldr	r2, [pc, #40]	@ (8004980 <I2C_ITError+0x260>)
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe fe73 	bl	800365a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08004c59 	.word	0x08004c59
 8004980:	ffff0000 	.word	0xffff0000

08004984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	460b      	mov	r3, r1
 8004992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d006      	beq.n	80049ae <I2C_MasterRequestWrite+0x2a>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d003      	beq.n	80049ae <I2C_MasterRequestWrite+0x2a>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049ac:	d108      	bne.n	80049c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e00b      	b.n	80049d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	2b12      	cmp	r3, #18
 80049c6:	d107      	bne.n	80049d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f9df 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fe:	d103      	bne.n	8004a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e035      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a14:	d108      	bne.n	8004a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a24:	611a      	str	r2, [r3, #16]
 8004a26:	e01b      	b.n	8004a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a28:	897b      	ldrh	r3, [r7, #10]
 8004a2a:	11db      	asrs	r3, r3, #7
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f063 030f 	orn	r3, r3, #15
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	490e      	ldr	r1, [pc, #56]	@ (8004a80 <I2C_MasterRequestWrite+0xfc>)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fa28 	bl	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e010      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4907      	ldr	r1, [pc, #28]	@ (8004a84 <I2C_MasterRequestWrite+0x100>)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa18 	bl	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	00010008 	.word	0x00010008
 8004a84:	00010002 	.word	0x00010002

08004a88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	461a      	mov	r2, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	817b      	strh	r3, [r7, #10]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	813b      	strh	r3, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f96a 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae8:	d103      	bne.n	8004af2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0aa      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	4952      	ldr	r1, [pc, #328]	@ (8004c54 <I2C_RequestMemoryRead+0x1cc>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f9c5 	bl	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e097      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fa50 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e076      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e021      	b.n	8004bb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	6a39      	ldr	r1, [r7, #32]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa2a 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e050      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004baa:	893b      	ldrh	r3, [r7, #8]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb6:	6a39      	ldr	r1, [r7, #32]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fa0f 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00d      	beq.n	8004be0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d107      	bne.n	8004bdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e035      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8d3 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c16:	d103      	bne.n	8004c20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e013      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c24:	897b      	ldrh	r3, [r7, #10]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	4906      	ldr	r1, [pc, #24]	@ (8004c54 <I2C_RequestMemoryRead+0x1cc>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f92e 	bl	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	00010002 	.word	0x00010002

08004c58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c72:	4b4b      	ldr	r3, [pc, #300]	@ (8004da0 <I2C_DMAAbort+0x148>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	08db      	lsrs	r3, r3, #3
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <I2C_DMAAbort+0x14c>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0a1a      	lsrs	r2, r3, #8
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	00da      	lsls	r2, r3, #3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c9e:	e00a      	b.n	8004cb6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb4:	d0ea      	beq.n	8004c8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	2200      	movs	r2, #0
 8004d0a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b60      	cmp	r3, #96	@ 0x60
 8004d26:	d10e      	bne.n	8004d46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7fe fcaf 	bl	80036a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d44:	e027      	b.n	8004d96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d4c:	2b28      	cmp	r3, #40	@ 0x28
 8004d4e:	d117      	bne.n	8004d80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2228      	movs	r2, #40	@ 0x28
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d7e:	e007      	b.n	8004d90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f7fe fc7d 	bl	8003690 <HAL_I2C_ErrorCallback>
}
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000000 	.word	0x20000000
 8004da4:	14f8b589 	.word	0x14f8b589

08004da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	e048      	b.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dc0:	d044      	beq.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fd f94d 	bl	8002060 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d139      	bne.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	0c1b      	lsrs	r3, r3, #16
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10d      	bne.n	8004dfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	43da      	mvns	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	e00c      	b.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d116      	bne.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e023      	b.n	8004e94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10d      	bne.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	e00c      	b.n	8004e8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d093      	beq.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eaa:	e071      	b.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eba:	d123      	bne.n	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ed4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e067      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f0a:	d041      	beq.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fd f8a8 	bl	8002060 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d136      	bne.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10c      	bne.n	8004f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e00b      	b.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e021      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d10c      	bne.n	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e00b      	b.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f47f af6d 	bne.w	8004eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe8:	e034      	b.n	8005054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f915 	bl	800521a <I2C_IsAcknowledgeFailed>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e034      	b.n	8005064 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005000:	d028      	beq.n	8005054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fd f82d 	bl	8002060 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11d      	bne.n	8005054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b80      	cmp	r3, #128	@ 0x80
 8005024:	d016      	beq.n	8005054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e007      	b.n	8005064 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b80      	cmp	r3, #128	@ 0x80
 8005060:	d1c3      	bne.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005078:	e034      	b.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f8cd 	bl	800521a <I2C_IsAcknowledgeFailed>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e034      	b.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005090:	d028      	beq.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fc ffe5 	bl	8002060 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11d      	bne.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d016      	beq.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e007      	b.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d1c3      	bne.n	800507a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005108:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	08db      	lsrs	r3, r3, #3
 800510e:	4a13      	ldr	r2, [pc, #76]	@ (800515c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	0a1a      	lsrs	r2, r3, #8
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b01      	subs	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e008      	b.n	800514c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d0e9      	beq.n	800511e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000000 	.word	0x20000000
 800515c:	14f8b589 	.word	0x14f8b589

08005160 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800516c:	e049      	b.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d119      	bne.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e030      	b.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fc ff56 	bl	8002060 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11d      	bne.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d016      	beq.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e007      	b.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d1ae      	bne.n	800516e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005230:	d11b      	bne.n	800526a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800523a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f043 0204 	orr.w	r2, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005286:	d103      	bne.n	8005290 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800528e:	e007      	b.n	80052a0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005298:	d102      	bne.n	80052a0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e31d      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052be:	4b94      	ldr	r3, [pc, #592]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c8:	4b91      	ldr	r3, [pc, #580]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d07b      	beq.n	80053d6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d006      	beq.n	80052f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d10f      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d10b      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f2:	4b87      	ldr	r3, [pc, #540]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d06a      	beq.n	80053d4 <HAL_RCC_OscConfig+0x128>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d166      	bne.n	80053d4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e2f7      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d106      	bne.n	8005320 <HAL_RCC_OscConfig+0x74>
 8005312:	4b7f      	ldr	r3, [pc, #508]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7e      	ldr	r2, [pc, #504]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e02d      	b.n	800537c <HAL_RCC_OscConfig+0xd0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <HAL_RCC_OscConfig+0x96>
 8005328:	4b79      	ldr	r3, [pc, #484]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a78      	ldr	r2, [pc, #480]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b76      	ldr	r3, [pc, #472]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a75      	ldr	r2, [pc, #468]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e01c      	b.n	800537c <HAL_RCC_OscConfig+0xd0>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b05      	cmp	r3, #5
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0xb8>
 800534a:	4b71      	ldr	r3, [pc, #452]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a70      	ldr	r2, [pc, #448]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b6e      	ldr	r3, [pc, #440]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6d      	ldr	r2, [pc, #436]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xd0>
 8005364:	4b6a      	ldr	r3, [pc, #424]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a69      	ldr	r2, [pc, #420]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b67      	ldr	r3, [pc, #412]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a66      	ldr	r2, [pc, #408]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fc fe6c 	bl	8002060 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fc fe68 	bl	8002060 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	@ 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e2ad      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539e:	4b5c      	ldr	r3, [pc, #368]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xe0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fc fe58 	bl	8002060 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fe54 	bl	8002060 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e299      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053c6:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x108>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05a      	beq.n	8005498 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b0c      	cmp	r3, #12
 80053ec:	d119      	bne.n	8005422 <HAL_RCC_OscConfig+0x176>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d116      	bne.n	8005422 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f4:	4b46      	ldr	r3, [pc, #280]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_OscConfig+0x160>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e276      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b40      	ldr	r3, [pc, #256]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	493d      	ldr	r1, [pc, #244]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005420:	e03a      	b.n	8005498 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800542a:	4b3a      	ldr	r3, [pc, #232]	@ (8005514 <HAL_RCC_OscConfig+0x268>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fc fe16 	bl	8002060 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fc fe12 	bl	8002060 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e257      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800544a:	4b31      	ldr	r3, [pc, #196]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005456:	4b2e      	ldr	r3, [pc, #184]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	492a      	ldr	r1, [pc, #168]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
 800546a:	e015      	b.n	8005498 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546c:	4b29      	ldr	r3, [pc, #164]	@ (8005514 <HAL_RCC_OscConfig+0x268>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fc fdf5 	bl	8002060 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547a:	f7fc fdf1 	bl	8002060 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e236      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800548c:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80b8 	beq.w	8005616 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d170      	bne.n	800558e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ac:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x218>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e21a      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d921      	bls.n	8005518 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fc7d 	bl	8005dd8 <RCC_SetFlashLatencyFromMSIRange>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e208      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e8:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4906      	ldr	r1, [pc, #24]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fa:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	4901      	ldr	r1, [pc, #4]	@ (8005510 <HAL_RCC_OscConfig+0x264>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
 800550e:	e020      	b.n	8005552 <HAL_RCC_OscConfig+0x2a6>
 8005510:	40023800 	.word	0x40023800
 8005514:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005518:	4b99      	ldr	r3, [pc, #612]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4996      	ldr	r1, [pc, #600]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800552a:	4b95      	ldr	r3, [pc, #596]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	4991      	ldr	r1, [pc, #580]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fc48 	bl	8005dd8 <RCC_SetFlashLatencyFromMSIRange>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e1d3      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	0b5b      	lsrs	r3, r3, #13
 8005558:	3301      	adds	r3, #1
 800555a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005562:	4a87      	ldr	r2, [pc, #540]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	0912      	lsrs	r2, r2, #4
 8005568:	f002 020f 	and.w	r2, r2, #15
 800556c:	4985      	ldr	r1, [pc, #532]	@ (8005784 <HAL_RCC_OscConfig+0x4d8>)
 800556e:	5c8a      	ldrb	r2, [r1, r2]
 8005570:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005572:	4a85      	ldr	r2, [pc, #532]	@ (8005788 <HAL_RCC_OscConfig+0x4dc>)
 8005574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005576:	4b85      	ldr	r3, [pc, #532]	@ (800578c <HAL_RCC_OscConfig+0x4e0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fc fd24 	bl	8001fc8 <HAL_InitTick>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d045      	beq.n	8005616 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	e1b5      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d029      	beq.n	80055ea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005596:	4b7e      	ldr	r3, [pc, #504]	@ (8005790 <HAL_RCC_OscConfig+0x4e4>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fc fd60 	bl	8002060 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a4:	f7fc fd5c 	bl	8002060 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e1a1      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055b6:	4b72      	ldr	r3, [pc, #456]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	496c      	ldr	r1, [pc, #432]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	4967      	ldr	r1, [pc, #412]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	e015      	b.n	8005616 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055ea:	4b69      	ldr	r3, [pc, #420]	@ (8005790 <HAL_RCC_OscConfig+0x4e4>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fc fd36 	bl	8002060 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055f8:	f7fc fd32 	bl	8002060 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e177      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800560a:	4b5d      	ldr	r3, [pc, #372]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d030      	beq.n	8005684 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562a:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <HAL_RCC_OscConfig+0x4e8>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005630:	f7fc fd16 	bl	8002060 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005638:	f7fc fd12 	bl	8002060 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e157      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800564a:	4b4d      	ldr	r3, [pc, #308]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800564c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x38c>
 8005656:	e015      	b.n	8005684 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005658:	4b4e      	ldr	r3, [pc, #312]	@ (8005794 <HAL_RCC_OscConfig+0x4e8>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565e:	f7fc fcff 	bl	8002060 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005666:	f7fc fcfb 	bl	8002060 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e140      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005678:	4b41      	ldr	r3, [pc, #260]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80b5 	beq.w	80057fc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005696:	4b3a      	ldr	r3, [pc, #232]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10d      	bne.n	80056be <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	4a36      	ldr	r2, [pc, #216]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80056a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80056ae:	4b34      	ldr	r3, [pc, #208]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ba:	2301      	movs	r3, #1
 80056bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056be:	4b36      	ldr	r3, [pc, #216]	@ (8005798 <HAL_RCC_OscConfig+0x4ec>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d118      	bne.n	80056fc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ca:	4b33      	ldr	r3, [pc, #204]	@ (8005798 <HAL_RCC_OscConfig+0x4ec>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a32      	ldr	r2, [pc, #200]	@ (8005798 <HAL_RCC_OscConfig+0x4ec>)
 80056d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d6:	f7fc fcc3 	bl	8002060 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056de:	f7fc fcbf 	bl	8002060 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b64      	cmp	r3, #100	@ 0x64
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e104      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	4b29      	ldr	r3, [pc, #164]	@ (8005798 <HAL_RCC_OscConfig+0x4ec>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x466>
 8005704:	4b1e      	ldr	r3, [pc, #120]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800570a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800570e:	6353      	str	r3, [r2, #52]	@ 0x34
 8005710:	e02d      	b.n	800576e <HAL_RCC_OscConfig+0x4c2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x488>
 800571a:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800571c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571e:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005724:	6353      	str	r3, [r2, #52]	@ 0x34
 8005726:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	4a15      	ldr	r2, [pc, #84]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800572c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005730:	6353      	str	r3, [r2, #52]	@ 0x34
 8005732:	e01c      	b.n	800576e <HAL_RCC_OscConfig+0x4c2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b05      	cmp	r3, #5
 800573a:	d10c      	bne.n	8005756 <HAL_RCC_OscConfig+0x4aa>
 800573c:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	4a0f      	ldr	r2, [pc, #60]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005746:	6353      	str	r3, [r2, #52]	@ 0x34
 8005748:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800574e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005752:	6353      	str	r3, [r2, #52]	@ 0x34
 8005754:	e00b      	b.n	800576e <HAL_RCC_OscConfig+0x4c2>
 8005756:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575a:	4a09      	ldr	r2, [pc, #36]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 800575c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005760:	6353      	str	r3, [r2, #52]	@ 0x34
 8005762:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005766:	4a06      	ldr	r2, [pc, #24]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800576c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d024      	beq.n	80057c0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005776:	f7fc fc73 	bl	8002060 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800577c:	e019      	b.n	80057b2 <HAL_RCC_OscConfig+0x506>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	080099a8 	.word	0x080099a8
 8005788:	20000000 	.word	0x20000000
 800578c:	20000004 	.word	0x20000004
 8005790:	42470020 	.word	0x42470020
 8005794:	42470680 	.word	0x42470680
 8005798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fc fc60 	bl	8002060 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0a3      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057b2:	4b54      	ldr	r3, [pc, #336]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80057b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <HAL_RCC_OscConfig+0x4f0>
 80057be:	e014      	b.n	80057ea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c0:	f7fc fc4e 	bl	8002060 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c6:	e00a      	b.n	80057de <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c8:	f7fc fc4a 	bl	8002060 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e08d      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057de:	4b49      	ldr	r3, [pc, #292]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ee      	bne.n	80057c8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f0:	4b44      	ldr	r3, [pc, #272]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	4a43      	ldr	r2, [pc, #268]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d079      	beq.n	80058f8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d056      	beq.n	80058b8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	2b02      	cmp	r3, #2
 8005810:	d13b      	bne.n	800588a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <HAL_RCC_OscConfig+0x65c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc fc22 	bl	8002060 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc fc1e 	bl	8002060 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e063      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005832:	4b34      	ldr	r3, [pc, #208]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	4319      	orrs	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	430b      	orrs	r3, r1
 8005856:	492b      	ldr	r1, [pc, #172]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 8005858:	4313      	orrs	r3, r2
 800585a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <HAL_RCC_OscConfig+0x65c>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fc fbfd 	bl	8002060 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586a:	f7fc fbf9 	bl	8002060 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e03e      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800587c:	4b21      	ldr	r3, [pc, #132]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x5be>
 8005888:	e036      	b.n	80058f8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588a:	4b1f      	ldr	r3, [pc, #124]	@ (8005908 <HAL_RCC_OscConfig+0x65c>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fc fbe6 	bl	8002060 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005898:	f7fc fbe2 	bl	8002060 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e027      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058aa:	4b16      	ldr	r3, [pc, #88]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x5ec>
 80058b6:	e01f      	b.n	80058f8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e01a      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <HAL_RCC_OscConfig+0x658>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d106      	bne.n	80058f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800
 8005908:	42470060 	.word	0x42470060

0800590c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e11a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005920:	4b8f      	ldr	r3, [pc, #572]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d919      	bls.n	8005962 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_RCC_ClockConfig+0x34>
 8005934:	4b8a      	ldr	r3, [pc, #552]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a89      	ldr	r2, [pc, #548]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 800593a:	f043 0304 	orr.w	r3, r3, #4
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b87      	ldr	r3, [pc, #540]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f023 0201 	bic.w	r2, r3, #1
 8005948:	4985      	ldr	r1, [pc, #532]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005950:	4b83      	ldr	r3, [pc, #524]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d001      	beq.n	8005962 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0f9      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	497a      	ldr	r1, [pc, #488]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 808e 	beq.w	8005aaa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005996:	4b73      	ldr	r3, [pc, #460]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d121      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e0d7      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d115      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0cb      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c6:	4b67      	ldr	r3, [pc, #412]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0bf      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80059d6:	4b63      	ldr	r3, [pc, #396]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0b7      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	495c      	ldr	r1, [pc, #368]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fc fb32 	bl	8002060 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a08:	f7fc fb2a 	bl	8002060 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e09b      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a1e:	4b51      	ldr	r3, [pc, #324]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d1ee      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xfc>
 8005a2a:	e03e      	b.n	8005aaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d112      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a36:	f7fc fb13 	bl	8002060 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e084      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a4c:	4b45      	ldr	r3, [pc, #276]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 030c 	and.w	r3, r3, #12
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d1ee      	bne.n	8005a36 <HAL_RCC_ClockConfig+0x12a>
 8005a58:	e027      	b.n	8005aaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d11d      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fc fafc 	bl	8002060 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e06d      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d1ee      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x158>
 8005a86:	e010      	b.n	8005aaa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a88:	f7fc faea 	bl	8002060 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e05b      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a9e:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1ee      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d219      	bcs.n	8005aec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d105      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1be>
 8005abe:	4b28      	ldr	r3, [pc, #160]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005ac4:	f043 0304 	orr.w	r3, r3, #4
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b25      	ldr	r3, [pc, #148]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	4923      	ldr	r1, [pc, #140]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b21      	ldr	r3, [pc, #132]	@ (8005b60 <HAL_RCC_ClockConfig+0x254>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e034      	b.n	8005b56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4917      	ldr	r1, [pc, #92]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b16:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	490f      	ldr	r1, [pc, #60]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b2a:	f000 f823 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <HAL_RCC_ClockConfig+0x258>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	490b      	ldr	r1, [pc, #44]	@ (8005b68 <HAL_RCC_ClockConfig+0x25c>)
 8005b3c:	5ccb      	ldrb	r3, [r1, r3]
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	4a0a      	ldr	r2, [pc, #40]	@ (8005b6c <HAL_RCC_ClockConfig+0x260>)
 8005b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <HAL_RCC_ClockConfig+0x264>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fc fa3c 	bl	8001fc8 <HAL_InitTick>
 8005b50:	4603      	mov	r3, r0
 8005b52:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40023c00 	.word	0x40023c00
 8005b64:	40023800 	.word	0x40023800
 8005b68:	080099a8 	.word	0x080099a8
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	20000004 	.word	0x20000004

08005b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b78:	b092      	sub	sp, #72	@ 0x48
 8005b7a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b7c:	4b79      	ldr	r3, [pc, #484]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	f200 80d5 	bhi.w	8005d3c <HAL_RCC_GetSysClockFreq+0x1c8>
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d002      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x28>
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x2e>
 8005b9a:	e0cf      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b9c:	4b72      	ldr	r3, [pc, #456]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005b9e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005ba0:	e0da      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ba2:	4b72      	ldr	r3, [pc, #456]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005ba4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005ba6:	e0d7      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005baa:	0c9b      	lsrs	r3, r3, #18
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bb2:	5c9b      	ldrb	r3, [r3, r2]
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb8:	0d9b      	lsrs	r3, r3, #22
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bc2:	4b68      	ldr	r3, [pc, #416]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d05d      	beq.n	8005c8a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	f04f 0000 	mov.w	r0, #0
 8005be2:	f04f 0100 	mov.w	r1, #0
 8005be6:	0159      	lsls	r1, r3, #5
 8005be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bec:	0150      	lsls	r0, r2, #5
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	1a51      	subs	r1, r2, r1
 8005bf6:	6139      	str	r1, [r7, #16]
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c0c:	4659      	mov	r1, fp
 8005c0e:	018b      	lsls	r3, r1, #6
 8005c10:	4651      	mov	r1, sl
 8005c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c16:	4651      	mov	r1, sl
 8005c18:	018a      	lsls	r2, r1, #6
 8005c1a:	46d4      	mov	ip, sl
 8005c1c:	ebb2 080c 	subs.w	r8, r2, ip
 8005c20:	4659      	mov	r1, fp
 8005c22:	eb63 0901 	sbc.w	r9, r3, r1
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c3a:	4690      	mov	r8, r2
 8005c3c:	4699      	mov	r9, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	eb18 0303 	adds.w	r3, r8, r3
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	462b      	mov	r3, r5
 8005c48:	eb49 0303 	adc.w	r3, r9, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	024b      	lsls	r3, r1, #9
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	4604      	mov	r4, r0
 8005c64:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005c68:	4601      	mov	r1, r0
 8005c6a:	024a      	lsls	r2, r1, #9
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c72:	2200      	movs	r2, #0
 8005c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c7c:	f7fb fa06 	bl	800108c <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4613      	mov	r3, r2
 8005c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c88:	e055      	b.n	8005d36 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c92:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	f04f 0000 	mov.w	r0, #0
 8005c9e:	f04f 0100 	mov.w	r1, #0
 8005ca2:	0159      	lsls	r1, r3, #5
 8005ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ca8:	0150      	lsls	r0, r2, #5
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	46c4      	mov	ip, r8
 8005cb0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	468c      	mov	ip, r1
 8005cba:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cd2:	ebb2 040a 	subs.w	r4, r2, sl
 8005cd6:	eb63 050b 	sbc.w	r5, r3, fp
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	00eb      	lsls	r3, r5, #3
 8005ce4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ce8:	00e2      	lsls	r2, r4, #3
 8005cea:	4614      	mov	r4, r2
 8005cec:	461d      	mov	r5, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	18e3      	adds	r3, r4, r3
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	eb45 0303 	adc.w	r3, r5, r3
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d08:	4629      	mov	r1, r5
 8005d0a:	028b      	lsls	r3, r1, #10
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4604      	mov	r4, r0
 8005d12:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005d16:	4601      	mov	r1, r0
 8005d18:	028a      	lsls	r2, r1, #10
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	2200      	movs	r2, #0
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	61fa      	str	r2, [r7, #28]
 8005d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d2a:	f7fb f9af 	bl	800108c <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4613      	mov	r3, r2
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8005d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005d3a:	e00d      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d3c:	4b09      	ldr	r3, [pc, #36]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0b5b      	lsrs	r3, r3, #13
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3748      	adds	r7, #72	@ 0x48
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	007a1200 	.word	0x007a1200
 8005d70:	0800999c 	.word	0x0800999c

08005d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d78:	4b02      	ldr	r3, [pc, #8]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	20000000 	.word	0x20000000

08005d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d8c:	f7ff fff2 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	@ (8005dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	080099b8 	.word	0x080099b8

08005db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005db4:	f7ff ffde 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0adb      	lsrs	r3, r3, #11
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4903      	ldr	r1, [pc, #12]	@ (8005dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	080099b8 	.word	0x080099b8

08005dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005de4:	4b29      	ldr	r3, [pc, #164]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d12c      	bne.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005df0:	4b26      	ldr	r3, [pc, #152]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005dfc:	4b24      	ldr	r3, [pc, #144]	@ (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e016      	b.n	8005e36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e08:	4b20      	ldr	r3, [pc, #128]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	6253      	str	r3, [r2, #36]	@ 0x24
 8005e14:	4b1d      	ldr	r3, [pc, #116]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005e20:	4b1b      	ldr	r3, [pc, #108]	@ (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005e28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2a:	4b18      	ldr	r3, [pc, #96]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005e3c:	d105      	bne.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e44:	d101      	bne.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005e46:	2301      	movs	r3, #1
 8005e48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005e50:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	@ (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e56:	f043 0304 	orr.w	r3, r3, #4
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 0201 	bic.w	r2, r3, #1
 8005e64:	490b      	ldr	r1, [pc, #44]	@ (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e6c:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d001      	beq.n	8005e7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000
 8005e94:	40023c00 	.word	0x40023c00

08005e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e042      	b.n	8005f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb fef8 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	@ 0x24
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f91d 	bl	800611c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	@ 0x28
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d16d      	bne.n	8006034 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_Transmit+0x2c>
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e066      	b.n	8006036 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2221      	movs	r2, #33	@ 0x21
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f76:	f7fc f873 	bl	8002060 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f90:	d108      	bne.n	8005fa4 <HAL_UART_Transmit+0x6c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	e003      	b.n	8005fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fac:	e02a      	b.n	8006004 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	@ 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f840 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e036      	b.n	8006036 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e007      	b.n	8005ff6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1cf      	bne.n	8005fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	@ 0x40
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f810 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b090      	sub	sp, #64	@ 0x40
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	e050      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006056:	d04c      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0x30>
 800605e:	f7fb ffff 	bl	8002060 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800606a:	429a      	cmp	r2, r3
 800606c:	d241      	bcs.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800608e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006090:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060c2:	623a      	str	r2, [r7, #32]
 80060c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00f      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	d09f      	beq.n	8006050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3740      	adds	r7, #64	@ 0x40
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800615c:	f023 030c 	bic.w	r3, r3, #12
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	430b      	orrs	r3, r1
 8006168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a55      	ldr	r2, [pc, #340]	@ (80062dc <UART_SetConfig+0x1c0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d103      	bne.n	8006192 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800618a:	f7ff fe11 	bl	8005db0 <HAL_RCC_GetPCLK2Freq>
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	e002      	b.n	8006198 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006192:	f7ff fdf9 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 8006196:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a0:	d14c      	bne.n	800623c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009a      	lsls	r2, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	4a49      	ldr	r2, [pc, #292]	@ (80062e0 <UART_SetConfig+0x1c4>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	0119      	lsls	r1, r3, #4
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009a      	lsls	r2, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d8:	4b41      	ldr	r3, [pc, #260]	@ (80062e0 <UART_SetConfig+0x1c4>)
 80061da:	fba3 0302 	umull	r0, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2064      	movs	r0, #100	@ 0x64
 80061e2:	fb00 f303 	mul.w	r3, r0, r3
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	3332      	adds	r3, #50	@ 0x32
 80061ec:	4a3c      	ldr	r2, [pc, #240]	@ (80062e0 <UART_SetConfig+0x1c4>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061fa:	4419      	add	r1, r3
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009a      	lsls	r2, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006212:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <UART_SetConfig+0x1c4>)
 8006214:	fba3 0302 	umull	r0, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2064      	movs	r0, #100	@ 0x64
 800621c:	fb00 f303 	mul.w	r3, r0, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	@ 0x32
 8006226:	4a2e      	ldr	r2, [pc, #184]	@ (80062e0 <UART_SetConfig+0x1c4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	440a      	add	r2, r1
 8006238:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800623a:	e04a      	b.n	80062d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009a      	lsls	r2, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	4a23      	ldr	r2, [pc, #140]	@ (80062e0 <UART_SetConfig+0x1c4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	0119      	lsls	r1, r3, #4
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009a      	lsls	r2, r3, #2
 8006266:	441a      	add	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <UART_SetConfig+0x1c4>)
 8006274:	fba3 0302 	umull	r0, r3, r3, r2
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	2064      	movs	r0, #100	@ 0x64
 800627c:	fb00 f303 	mul.w	r3, r0, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	3332      	adds	r3, #50	@ 0x32
 8006286:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <UART_SetConfig+0x1c4>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006292:	4419      	add	r1, r3
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009a      	lsls	r2, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <UART_SetConfig+0x1c4>)
 80062ac:	fba3 0302 	umull	r0, r3, r3, r2
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	2064      	movs	r0, #100	@ 0x64
 80062b4:	fb00 f303 	mul.w	r3, r0, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	3332      	adds	r3, #50	@ 0x32
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <UART_SetConfig+0x1c4>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	440a      	add	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40013800 	.word	0x40013800
 80062e0:	51eb851f 	.word	0x51eb851f

080062e4 <__cvt>:
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ea:	461d      	mov	r5, r3
 80062ec:	bfbb      	ittet	lt
 80062ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80062f2:	461d      	movlt	r5, r3
 80062f4:	2300      	movge	r3, #0
 80062f6:	232d      	movlt	r3, #45	@ 0x2d
 80062f8:	b088      	sub	sp, #32
 80062fa:	4614      	mov	r4, r2
 80062fc:	bfb8      	it	lt
 80062fe:	4614      	movlt	r4, r2
 8006300:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006302:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006304:	7013      	strb	r3, [r2, #0]
 8006306:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006308:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800630c:	f023 0820 	bic.w	r8, r3, #32
 8006310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006314:	d005      	beq.n	8006322 <__cvt+0x3e>
 8006316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800631a:	d100      	bne.n	800631e <__cvt+0x3a>
 800631c:	3601      	adds	r6, #1
 800631e:	2302      	movs	r3, #2
 8006320:	e000      	b.n	8006324 <__cvt+0x40>
 8006322:	2303      	movs	r3, #3
 8006324:	aa07      	add	r2, sp, #28
 8006326:	9204      	str	r2, [sp, #16]
 8006328:	aa06      	add	r2, sp, #24
 800632a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800632e:	e9cd 3600 	strd	r3, r6, [sp]
 8006332:	4622      	mov	r2, r4
 8006334:	462b      	mov	r3, r5
 8006336:	f000 fe83 	bl	8007040 <_dtoa_r>
 800633a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800633e:	4607      	mov	r7, r0
 8006340:	d119      	bne.n	8006376 <__cvt+0x92>
 8006342:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d50e      	bpl.n	8006366 <__cvt+0x82>
 8006348:	eb00 0906 	add.w	r9, r0, r6
 800634c:	2200      	movs	r2, #0
 800634e:	2300      	movs	r3, #0
 8006350:	4620      	mov	r0, r4
 8006352:	4629      	mov	r1, r5
 8006354:	f7fa fb40 	bl	80009d8 <__aeabi_dcmpeq>
 8006358:	b108      	cbz	r0, 800635e <__cvt+0x7a>
 800635a:	f8cd 901c 	str.w	r9, [sp, #28]
 800635e:	2230      	movs	r2, #48	@ 0x30
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	454b      	cmp	r3, r9
 8006364:	d31e      	bcc.n	80063a4 <__cvt+0xc0>
 8006366:	4638      	mov	r0, r7
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800636c:	1bdb      	subs	r3, r3, r7
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	b008      	add	sp, #32
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800637a:	eb00 0906 	add.w	r9, r0, r6
 800637e:	d1e5      	bne.n	800634c <__cvt+0x68>
 8006380:	7803      	ldrb	r3, [r0, #0]
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d10a      	bne.n	800639c <__cvt+0xb8>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fb23 	bl	80009d8 <__aeabi_dcmpeq>
 8006392:	b918      	cbnz	r0, 800639c <__cvt+0xb8>
 8006394:	f1c6 0601 	rsb	r6, r6, #1
 8006398:	f8ca 6000 	str.w	r6, [sl]
 800639c:	f8da 3000 	ldr.w	r3, [sl]
 80063a0:	4499      	add	r9, r3
 80063a2:	e7d3      	b.n	800634c <__cvt+0x68>
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	9107      	str	r1, [sp, #28]
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e7d9      	b.n	8006360 <__cvt+0x7c>

080063ac <__exponent>:
 80063ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ae:	2900      	cmp	r1, #0
 80063b0:	bfb6      	itet	lt
 80063b2:	232d      	movlt	r3, #45	@ 0x2d
 80063b4:	232b      	movge	r3, #43	@ 0x2b
 80063b6:	4249      	neglt	r1, r1
 80063b8:	2909      	cmp	r1, #9
 80063ba:	7002      	strb	r2, [r0, #0]
 80063bc:	7043      	strb	r3, [r0, #1]
 80063be:	dd29      	ble.n	8006414 <__exponent+0x68>
 80063c0:	f10d 0307 	add.w	r3, sp, #7
 80063c4:	461d      	mov	r5, r3
 80063c6:	270a      	movs	r7, #10
 80063c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063cc:	461a      	mov	r2, r3
 80063ce:	fb07 1416 	mls	r4, r7, r6, r1
 80063d2:	3430      	adds	r4, #48	@ 0x30
 80063d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063d8:	460c      	mov	r4, r1
 80063da:	2c63      	cmp	r4, #99	@ 0x63
 80063dc:	4631      	mov	r1, r6
 80063de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80063e2:	dcf1      	bgt.n	80063c8 <__exponent+0x1c>
 80063e4:	3130      	adds	r1, #48	@ 0x30
 80063e6:	1e94      	subs	r4, r2, #2
 80063e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063ec:	4623      	mov	r3, r4
 80063ee:	1c41      	adds	r1, r0, #1
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	d30a      	bcc.n	800640a <__exponent+0x5e>
 80063f4:	f10d 0309 	add.w	r3, sp, #9
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	42ac      	cmp	r4, r5
 80063fc:	bf88      	it	hi
 80063fe:	2300      	movhi	r3, #0
 8006400:	3302      	adds	r3, #2
 8006402:	4403      	add	r3, r0
 8006404:	1a18      	subs	r0, r3, r0
 8006406:	b003      	add	sp, #12
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800640e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006412:	e7ed      	b.n	80063f0 <__exponent+0x44>
 8006414:	2330      	movs	r3, #48	@ 0x30
 8006416:	3130      	adds	r1, #48	@ 0x30
 8006418:	7083      	strb	r3, [r0, #2]
 800641a:	70c1      	strb	r1, [r0, #3]
 800641c:	1d03      	adds	r3, r0, #4
 800641e:	e7f1      	b.n	8006404 <__exponent+0x58>

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b091      	sub	sp, #68	@ 0x44
 8006426:	460c      	mov	r4, r1
 8006428:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	4605      	mov	r5, r0
 8006432:	f000 fcf5 	bl	8006e20 <_localeconv_r>
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	9308      	str	r3, [sp, #32]
 800643c:	f7f9 fea0 	bl	8000180 <strlen>
 8006440:	2300      	movs	r3, #0
 8006442:	930e      	str	r3, [sp, #56]	@ 0x38
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	9009      	str	r0, [sp, #36]	@ 0x24
 800644a:	3307      	adds	r3, #7
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006458:	f8d4 b000 	ldr.w	fp, [r4]
 800645c:	f8c8 2000 	str.w	r2, [r8]
 8006460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800646a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800646e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800647a:	4b9c      	ldr	r3, [pc, #624]	@ (80066ec <_printf_float+0x2cc>)
 800647c:	f7fa fade 	bl	8000a3c <__aeabi_dcmpun>
 8006480:	bb70      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006486:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648a:	4b98      	ldr	r3, [pc, #608]	@ (80066ec <_printf_float+0x2cc>)
 800648c:	f7fa fab8 	bl	8000a00 <__aeabi_dcmple>
 8006490:	bb30      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa faa7 	bl	80009ec <__aeabi_dcmplt>
 800649e:	b110      	cbz	r0, 80064a6 <_printf_float+0x86>
 80064a0:	232d      	movs	r3, #45	@ 0x2d
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a6:	4a92      	ldr	r2, [pc, #584]	@ (80066f0 <_printf_float+0x2d0>)
 80064a8:	4b92      	ldr	r3, [pc, #584]	@ (80066f4 <_printf_float+0x2d4>)
 80064aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ae:	bf94      	ite	ls
 80064b0:	4690      	movls	r8, r2
 80064b2:	4698      	movhi	r8, r3
 80064b4:	2303      	movs	r3, #3
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f02b 0304 	bic.w	r3, fp, #4
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	4633      	mov	r3, r6
 80064c4:	4621      	mov	r1, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	9700      	str	r7, [sp, #0]
 80064ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064cc:	f000 f9d4 	bl	8006878 <_printf_common>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f040 8090 	bne.w	80065f6 <_printf_float+0x1d6>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064da:	b011      	add	sp, #68	@ 0x44
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7fa faa8 	bl	8000a3c <__aeabi_dcmpun>
 80064ec:	b148      	cbz	r0, 8006502 <_printf_float+0xe2>
 80064ee:	464b      	mov	r3, r9
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfb8      	it	lt
 80064f4:	232d      	movlt	r3, #45	@ 0x2d
 80064f6:	4a80      	ldr	r2, [pc, #512]	@ (80066f8 <_printf_float+0x2d8>)
 80064f8:	bfb8      	it	lt
 80064fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064fe:	4b7f      	ldr	r3, [pc, #508]	@ (80066fc <_printf_float+0x2dc>)
 8006500:	e7d3      	b.n	80064aa <_printf_float+0x8a>
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	d13f      	bne.n	800658c <_printf_float+0x16c>
 800650c:	2306      	movs	r3, #6
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	9206      	str	r2, [sp, #24]
 800651a:	aa0e      	add	r2, sp, #56	@ 0x38
 800651c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006520:	aa0d      	add	r2, sp, #52	@ 0x34
 8006522:	9203      	str	r2, [sp, #12]
 8006524:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006528:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	4642      	mov	r2, r8
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4628      	mov	r0, r5
 8006534:	464b      	mov	r3, r9
 8006536:	910a      	str	r1, [sp, #40]	@ 0x28
 8006538:	f7ff fed4 	bl	80062e4 <__cvt>
 800653c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800653e:	4680      	mov	r8, r0
 8006540:	2947      	cmp	r1, #71	@ 0x47
 8006542:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006544:	d128      	bne.n	8006598 <_printf_float+0x178>
 8006546:	1cc8      	adds	r0, r1, #3
 8006548:	db02      	blt.n	8006550 <_printf_float+0x130>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	dd40      	ble.n	80065d2 <_printf_float+0x1b2>
 8006550:	f1aa 0a02 	sub.w	sl, sl, #2
 8006554:	fa5f fa8a 	uxtb.w	sl, sl
 8006558:	4652      	mov	r2, sl
 800655a:	3901      	subs	r1, #1
 800655c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006560:	910d      	str	r1, [sp, #52]	@ 0x34
 8006562:	f7ff ff23 	bl	80063ac <__exponent>
 8006566:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006568:	4681      	mov	r9, r0
 800656a:	1813      	adds	r3, r2, r0
 800656c:	2a01      	cmp	r2, #1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	dc02      	bgt.n	8006578 <_printf_float+0x158>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	07d2      	lsls	r2, r2, #31
 8006576:	d501      	bpl.n	800657c <_printf_float+0x15c>
 8006578:	3301      	adds	r3, #1
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006580:	2b00      	cmp	r3, #0
 8006582:	d09e      	beq.n	80064c2 <_printf_float+0xa2>
 8006584:	232d      	movs	r3, #45	@ 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658a:	e79a      	b.n	80064c2 <_printf_float+0xa2>
 800658c:	2947      	cmp	r1, #71	@ 0x47
 800658e:	d1bf      	bne.n	8006510 <_printf_float+0xf0>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1bd      	bne.n	8006510 <_printf_float+0xf0>
 8006594:	2301      	movs	r3, #1
 8006596:	e7ba      	b.n	800650e <_printf_float+0xee>
 8006598:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800659c:	d9dc      	bls.n	8006558 <_printf_float+0x138>
 800659e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065a2:	d118      	bne.n	80065d6 <_printf_float+0x1b6>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	dd0b      	ble.n	80065c2 <_printf_float+0x1a2>
 80065aa:	6121      	str	r1, [r4, #16]
 80065ac:	b913      	cbnz	r3, 80065b4 <_printf_float+0x194>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d502      	bpl.n	80065ba <_printf_float+0x19a>
 80065b4:	3301      	adds	r3, #1
 80065b6:	440b      	add	r3, r1
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065c0:	e7dc      	b.n	800657c <_printf_float+0x15c>
 80065c2:	b913      	cbnz	r3, 80065ca <_printf_float+0x1aa>
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	07d2      	lsls	r2, r2, #31
 80065c8:	d501      	bpl.n	80065ce <_printf_float+0x1ae>
 80065ca:	3302      	adds	r3, #2
 80065cc:	e7f4      	b.n	80065b8 <_printf_float+0x198>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7f2      	b.n	80065b8 <_printf_float+0x198>
 80065d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d8:	4299      	cmp	r1, r3
 80065da:	db05      	blt.n	80065e8 <_printf_float+0x1c8>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	6121      	str	r1, [r4, #16]
 80065e0:	07d8      	lsls	r0, r3, #31
 80065e2:	d5ea      	bpl.n	80065ba <_printf_float+0x19a>
 80065e4:	1c4b      	adds	r3, r1, #1
 80065e6:	e7e7      	b.n	80065b8 <_printf_float+0x198>
 80065e8:	2900      	cmp	r1, #0
 80065ea:	bfcc      	ite	gt
 80065ec:	2201      	movgt	r2, #1
 80065ee:	f1c1 0202 	rsble	r2, r1, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	e7e0      	b.n	80065b8 <_printf_float+0x198>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	055a      	lsls	r2, r3, #21
 80065fa:	d407      	bmi.n	800660c <_printf_float+0x1ec>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	4642      	mov	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d12b      	bne.n	8006662 <_printf_float+0x242>
 800660a:	e764      	b.n	80064d6 <_printf_float+0xb6>
 800660c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006610:	f240 80dc 	bls.w	80067cc <_printf_float+0x3ac>
 8006614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	f7fa f9dc 	bl	80009d8 <__aeabi_dcmpeq>
 8006620:	2800      	cmp	r0, #0
 8006622:	d033      	beq.n	800668c <_printf_float+0x26c>
 8006624:	2301      	movs	r3, #1
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <_printf_float+0x2e0>)
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af51 	beq.w	80064d6 <_printf_float+0xb6>
 8006634:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006638:	4543      	cmp	r3, r8
 800663a:	db02      	blt.n	8006642 <_printf_float+0x222>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	07d8      	lsls	r0, r3, #31
 8006640:	d50f      	bpl.n	8006662 <_printf_float+0x242>
 8006642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f af42 	beq.w	80064d6 <_printf_float+0xb6>
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800665a:	f104 0a1a 	add.w	sl, r4, #26
 800665e:	45c8      	cmp	r8, r9
 8006660:	dc09      	bgt.n	8006676 <_printf_float+0x256>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	079b      	lsls	r3, r3, #30
 8006666:	f100 8102 	bmi.w	800686e <_printf_float+0x44e>
 800666a:	68e0      	ldr	r0, [r4, #12]
 800666c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666e:	4298      	cmp	r0, r3
 8006670:	bfb8      	it	lt
 8006672:	4618      	movlt	r0, r3
 8006674:	e731      	b.n	80064da <_printf_float+0xba>
 8006676:	2301      	movs	r3, #1
 8006678:	4652      	mov	r2, sl
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f af28 	beq.w	80064d6 <_printf_float+0xb6>
 8006686:	f109 0901 	add.w	r9, r9, #1
 800668a:	e7e8      	b.n	800665e <_printf_float+0x23e>
 800668c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc38      	bgt.n	8006704 <_printf_float+0x2e4>
 8006692:	2301      	movs	r3, #1
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	4a19      	ldr	r2, [pc, #100]	@ (8006700 <_printf_float+0x2e0>)
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f af1a 	beq.w	80064d6 <_printf_float+0xb6>
 80066a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80066a6:	ea59 0303 	orrs.w	r3, r9, r3
 80066aa:	d102      	bne.n	80066b2 <_printf_float+0x292>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d5d7      	bpl.n	8006662 <_printf_float+0x242>
 80066b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f af0a 	beq.w	80064d6 <_printf_float+0xb6>
 80066c2:	f04f 0a00 	mov.w	sl, #0
 80066c6:	f104 0b1a 	add.w	fp, r4, #26
 80066ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066cc:	425b      	negs	r3, r3
 80066ce:	4553      	cmp	r3, sl
 80066d0:	dc01      	bgt.n	80066d6 <_printf_float+0x2b6>
 80066d2:	464b      	mov	r3, r9
 80066d4:	e793      	b.n	80065fe <_printf_float+0x1de>
 80066d6:	2301      	movs	r3, #1
 80066d8:	465a      	mov	r2, fp
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f aef8 	beq.w	80064d6 <_printf_float+0xb6>
 80066e6:	f10a 0a01 	add.w	sl, sl, #1
 80066ea:	e7ee      	b.n	80066ca <_printf_float+0x2aa>
 80066ec:	7fefffff 	.word	0x7fefffff
 80066f0:	080099c0 	.word	0x080099c0
 80066f4:	080099c4 	.word	0x080099c4
 80066f8:	080099c8 	.word	0x080099c8
 80066fc:	080099cc 	.word	0x080099cc
 8006700:	080099d0 	.word	0x080099d0
 8006704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006706:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800670a:	4553      	cmp	r3, sl
 800670c:	bfa8      	it	ge
 800670e:	4653      	movge	r3, sl
 8006710:	2b00      	cmp	r3, #0
 8006712:	4699      	mov	r9, r3
 8006714:	dc36      	bgt.n	8006784 <_printf_float+0x364>
 8006716:	f04f 0b00 	mov.w	fp, #0
 800671a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671e:	f104 021a 	add.w	r2, r4, #26
 8006722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006724:	930a      	str	r3, [sp, #40]	@ 0x28
 8006726:	eba3 0309 	sub.w	r3, r3, r9
 800672a:	455b      	cmp	r3, fp
 800672c:	dc31      	bgt.n	8006792 <_printf_float+0x372>
 800672e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006730:	459a      	cmp	sl, r3
 8006732:	dc3a      	bgt.n	80067aa <_printf_float+0x38a>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07da      	lsls	r2, r3, #31
 8006738:	d437      	bmi.n	80067aa <_printf_float+0x38a>
 800673a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800673c:	ebaa 0903 	sub.w	r9, sl, r3
 8006740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006742:	ebaa 0303 	sub.w	r3, sl, r3
 8006746:	4599      	cmp	r9, r3
 8006748:	bfa8      	it	ge
 800674a:	4699      	movge	r9, r3
 800674c:	f1b9 0f00 	cmp.w	r9, #0
 8006750:	dc33      	bgt.n	80067ba <_printf_float+0x39a>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675a:	f104 0b1a 	add.w	fp, r4, #26
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	ebaa 0303 	sub.w	r3, sl, r3
 8006764:	eba3 0309 	sub.w	r3, r3, r9
 8006768:	4543      	cmp	r3, r8
 800676a:	f77f af7a 	ble.w	8006662 <_printf_float+0x242>
 800676e:	2301      	movs	r3, #1
 8006770:	465a      	mov	r2, fp
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f aeac 	beq.w	80064d6 <_printf_float+0xb6>
 800677e:	f108 0801 	add.w	r8, r8, #1
 8006782:	e7ec      	b.n	800675e <_printf_float+0x33e>
 8006784:	4642      	mov	r2, r8
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	d1c2      	bne.n	8006716 <_printf_float+0x2f6>
 8006790:	e6a1      	b.n	80064d6 <_printf_float+0xb6>
 8006792:	2301      	movs	r3, #1
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	920a      	str	r2, [sp, #40]	@ 0x28
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f ae9a 	beq.w	80064d6 <_printf_float+0xb6>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067a4:	f10b 0b01 	add.w	fp, fp, #1
 80067a8:	e7bb      	b.n	8006722 <_printf_float+0x302>
 80067aa:	4631      	mov	r1, r6
 80067ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1c0      	bne.n	800673a <_printf_float+0x31a>
 80067b8:	e68d      	b.n	80064d6 <_printf_float+0xb6>
 80067ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067bc:	464b      	mov	r3, r9
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	4442      	add	r2, r8
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c3      	bne.n	8006752 <_printf_float+0x332>
 80067ca:	e684      	b.n	80064d6 <_printf_float+0xb6>
 80067cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067d0:	f1ba 0f01 	cmp.w	sl, #1
 80067d4:	dc01      	bgt.n	80067da <_printf_float+0x3ba>
 80067d6:	07db      	lsls	r3, r3, #31
 80067d8:	d536      	bpl.n	8006848 <_printf_float+0x428>
 80067da:	2301      	movs	r3, #1
 80067dc:	4642      	mov	r2, r8
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f ae76 	beq.w	80064d6 <_printf_float+0xb6>
 80067ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f ae6e 	beq.w	80064d6 <_printf_float+0xb6>
 80067fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006806:	f7fa f8e7 	bl	80009d8 <__aeabi_dcmpeq>
 800680a:	b9c0      	cbnz	r0, 800683e <_printf_float+0x41e>
 800680c:	4653      	mov	r3, sl
 800680e:	f108 0201 	add.w	r2, r8, #1
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	d10c      	bne.n	8006836 <_printf_float+0x416>
 800681c:	e65b      	b.n	80064d6 <_printf_float+0xb6>
 800681e:	2301      	movs	r3, #1
 8006820:	465a      	mov	r2, fp
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae54 	beq.w	80064d6 <_printf_float+0xb6>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	45d0      	cmp	r8, sl
 8006834:	dbf3      	blt.n	800681e <_printf_float+0x3fe>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800683c:	e6e0      	b.n	8006600 <_printf_float+0x1e0>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0b1a 	add.w	fp, r4, #26
 8006846:	e7f4      	b.n	8006832 <_printf_float+0x412>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7e1      	b.n	8006812 <_printf_float+0x3f2>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae3c 	beq.w	80064d6 <_printf_float+0xb6>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x42e>
 800686c:	e6fd      	b.n	800666a <_printf_float+0x24a>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x442>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4698      	mov	r8, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	4607      	mov	r7, r0
 8006886:	4293      	cmp	r3, r2
 8006888:	bfb8      	it	lt
 800688a:	4613      	movlt	r3, r2
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006892:	460c      	mov	r4, r1
 8006894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc2b      	bgt.n	8006918 <_printf_common+0xa0>
 80068c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	3b00      	subs	r3, #0
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d430      	bmi.n	8006932 <_printf_common+0xba>
 80068d0:	4641      	mov	r1, r8
 80068d2:	4638      	mov	r0, r7
 80068d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d8:	47c8      	blx	r9
 80068da:	3001      	adds	r0, #1
 80068dc:	d023      	beq.n	8006926 <_printf_common+0xae>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6922      	ldr	r2, [r4, #16]
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf14      	ite	ne
 80068ea:	2500      	movne	r5, #0
 80068ec:	6833      	ldreq	r3, [r6, #0]
 80068ee:	f04f 0600 	mov.w	r6, #0
 80068f2:	bf08      	it	eq
 80068f4:	68e5      	ldreq	r5, [r4, #12]
 80068f6:	f104 041a 	add.w	r4, r4, #26
 80068fa:	bf08      	it	eq
 80068fc:	1aed      	subeq	r5, r5, r3
 80068fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006902:	bf08      	it	eq
 8006904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006908:	4293      	cmp	r3, r2
 800690a:	bfc4      	itt	gt
 800690c:	1a9b      	subgt	r3, r3, r2
 800690e:	18ed      	addgt	r5, r5, r3
 8006910:	42b5      	cmp	r5, r6
 8006912:	d11a      	bne.n	800694a <_printf_common+0xd2>
 8006914:	2000      	movs	r0, #0
 8006916:	e008      	b.n	800692a <_printf_common+0xb2>
 8006918:	2301      	movs	r3, #1
 800691a:	4652      	mov	r2, sl
 800691c:	4641      	mov	r1, r8
 800691e:	4638      	mov	r0, r7
 8006920:	47c8      	blx	r9
 8006922:	3001      	adds	r0, #1
 8006924:	d103      	bne.n	800692e <_printf_common+0xb6>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	3501      	adds	r5, #1
 8006930:	e7c1      	b.n	80068b6 <_printf_common+0x3e>
 8006932:	2030      	movs	r0, #48	@ 0x30
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006940:	4422      	add	r2, r4
 8006942:	3302      	adds	r3, #2
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006948:	e7c2      	b.n	80068d0 <_printf_common+0x58>
 800694a:	2301      	movs	r3, #1
 800694c:	4622      	mov	r2, r4
 800694e:	4641      	mov	r1, r8
 8006950:	4638      	mov	r0, r7
 8006952:	47c8      	blx	r9
 8006954:	3001      	adds	r0, #1
 8006956:	d0e6      	beq.n	8006926 <_printf_common+0xae>
 8006958:	3601      	adds	r6, #1
 800695a:	e7d9      	b.n	8006910 <_printf_common+0x98>

0800695c <_printf_i>:
 800695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	7e0f      	ldrb	r7, [r1, #24]
 8006962:	4691      	mov	r9, r2
 8006964:	2f78      	cmp	r7, #120	@ 0x78
 8006966:	4680      	mov	r8, r0
 8006968:	460c      	mov	r4, r1
 800696a:	469a      	mov	sl, r3
 800696c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800696e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006972:	d807      	bhi.n	8006984 <_printf_i+0x28>
 8006974:	2f62      	cmp	r7, #98	@ 0x62
 8006976:	d80a      	bhi.n	800698e <_printf_i+0x32>
 8006978:	2f00      	cmp	r7, #0
 800697a:	f000 80d3 	beq.w	8006b24 <_printf_i+0x1c8>
 800697e:	2f58      	cmp	r7, #88	@ 0x58
 8006980:	f000 80ba 	beq.w	8006af8 <_printf_i+0x19c>
 8006984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800698c:	e03a      	b.n	8006a04 <_printf_i+0xa8>
 800698e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006992:	2b15      	cmp	r3, #21
 8006994:	d8f6      	bhi.n	8006984 <_printf_i+0x28>
 8006996:	a101      	add	r1, pc, #4	@ (adr r1, 800699c <_printf_i+0x40>)
 8006998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a09 	.word	0x08006a09
 80069a4:	08006985 	.word	0x08006985
 80069a8:	08006985 	.word	0x08006985
 80069ac:	08006985 	.word	0x08006985
 80069b0:	08006985 	.word	0x08006985
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006985 	.word	0x08006985
 80069bc:	08006985 	.word	0x08006985
 80069c0:	08006985 	.word	0x08006985
 80069c4:	08006985 	.word	0x08006985
 80069c8:	08006b0b 	.word	0x08006b0b
 80069cc:	08006a33 	.word	0x08006a33
 80069d0:	08006ac5 	.word	0x08006ac5
 80069d4:	08006985 	.word	0x08006985
 80069d8:	08006985 	.word	0x08006985
 80069dc:	08006b2d 	.word	0x08006b2d
 80069e0:	08006985 	.word	0x08006985
 80069e4:	08006a33 	.word	0x08006a33
 80069e8:	08006985 	.word	0x08006985
 80069ec:	08006985 	.word	0x08006985
 80069f0:	08006acd 	.word	0x08006acd
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6032      	str	r2, [r6, #0]
 80069fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e09e      	b.n	8006b46 <_printf_i+0x1ea>
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	1d19      	adds	r1, r3, #4
 8006a0e:	6031      	str	r1, [r6, #0]
 8006a10:	0606      	lsls	r6, r0, #24
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0xbc>
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	e003      	b.n	8006a20 <_printf_i+0xc4>
 8006a18:	0645      	lsls	r5, r0, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0xb8>
 8006a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	da03      	bge.n	8006a2c <_printf_i+0xd0>
 8006a24:	232d      	movs	r3, #45	@ 0x2d
 8006a26:	426d      	negs	r5, r5
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2c:	230a      	movs	r3, #10
 8006a2e:	4859      	ldr	r0, [pc, #356]	@ (8006b94 <_printf_i+0x238>)
 8006a30:	e011      	b.n	8006a56 <_printf_i+0xfa>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	6833      	ldr	r3, [r6, #0]
 8006a36:	0608      	lsls	r0, r1, #24
 8006a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a3c:	d402      	bmi.n	8006a44 <_printf_i+0xe8>
 8006a3e:	0649      	lsls	r1, r1, #25
 8006a40:	bf48      	it	mi
 8006a42:	b2ad      	uxthmi	r5, r5
 8006a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a46:	6033      	str	r3, [r6, #0]
 8006a48:	bf14      	ite	ne
 8006a4a:	230a      	movne	r3, #10
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	4851      	ldr	r0, [pc, #324]	@ (8006b94 <_printf_i+0x238>)
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a56:	6866      	ldr	r6, [r4, #4]
 8006a58:	2e00      	cmp	r6, #0
 8006a5a:	bfa8      	it	ge
 8006a5c:	6821      	ldrge	r1, [r4, #0]
 8006a5e:	60a6      	str	r6, [r4, #8]
 8006a60:	bfa4      	itt	ge
 8006a62:	f021 0104 	bicge.w	r1, r1, #4
 8006a66:	6021      	strge	r1, [r4, #0]
 8006a68:	b90d      	cbnz	r5, 8006a6e <_printf_i+0x112>
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d04b      	beq.n	8006b06 <_printf_i+0x1aa>
 8006a6e:	4616      	mov	r6, r2
 8006a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a74:	fb03 5711 	mls	r7, r3, r1, r5
 8006a78:	5dc7      	ldrb	r7, [r0, r7]
 8006a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a7e:	462f      	mov	r7, r5
 8006a80:	42bb      	cmp	r3, r7
 8006a82:	460d      	mov	r5, r1
 8006a84:	d9f4      	bls.n	8006a70 <_printf_i+0x114>
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d10b      	bne.n	8006aa2 <_printf_i+0x146>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	07df      	lsls	r7, r3, #31
 8006a8e:	d508      	bpl.n	8006aa2 <_printf_i+0x146>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	6861      	ldr	r1, [r4, #4]
 8006a94:	4299      	cmp	r1, r3
 8006a96:	bfde      	ittt	le
 8006a98:	2330      	movle	r3, #48	@ 0x30
 8006a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006aa2:	1b92      	subs	r2, r2, r6
 8006aa4:	6122      	str	r2, [r4, #16]
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f8cd a000 	str.w	sl, [sp]
 8006ab0:	aa03      	add	r2, sp, #12
 8006ab2:	f7ff fee1 	bl	8006878 <_printf_common>
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d14a      	bne.n	8006b50 <_printf_i+0x1f4>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006abe:	b004      	add	sp, #16
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f043 0320 	orr.w	r3, r3, #32
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	2778      	movs	r7, #120	@ 0x78
 8006ace:	4832      	ldr	r0, [pc, #200]	@ (8006b98 <_printf_i+0x23c>)
 8006ad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	061f      	lsls	r7, r3, #24
 8006ada:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ade:	d402      	bmi.n	8006ae6 <_printf_i+0x18a>
 8006ae0:	065f      	lsls	r7, r3, #25
 8006ae2:	bf48      	it	mi
 8006ae4:	b2ad      	uxthmi	r5, r5
 8006ae6:	6031      	str	r1, [r6, #0]
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	bf44      	itt	mi
 8006aec:	f043 0320 	orrmi.w	r3, r3, #32
 8006af0:	6023      	strmi	r3, [r4, #0]
 8006af2:	b11d      	cbz	r5, 8006afc <_printf_i+0x1a0>
 8006af4:	2310      	movs	r3, #16
 8006af6:	e7ab      	b.n	8006a50 <_printf_i+0xf4>
 8006af8:	4826      	ldr	r0, [pc, #152]	@ (8006b94 <_printf_i+0x238>)
 8006afa:	e7e9      	b.n	8006ad0 <_printf_i+0x174>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	e7f6      	b.n	8006af4 <_printf_i+0x198>
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bd      	b.n	8006a86 <_printf_i+0x12a>
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	1d18      	adds	r0, r3, #4
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	6030      	str	r0, [r6, #0]
 8006b14:	062e      	lsls	r6, r5, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0x1c2>
 8006b1a:	6019      	str	r1, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <_printf_i+0x1c8>
 8006b1e:	0668      	lsls	r0, r5, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0x1be>
 8006b22:	8019      	strh	r1, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	4616      	mov	r6, r2
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	e7bc      	b.n	8006aa6 <_printf_i+0x14a>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	2100      	movs	r1, #0
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	6032      	str	r2, [r6, #0]
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 f9e8 	bl	8006f0e <memchr>
 8006b3e:	b108      	cbz	r0, 8006b44 <_printf_i+0x1e8>
 8006b40:	1b80      	subs	r0, r0, r6
 8006b42:	6060      	str	r0, [r4, #4]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b4e:	e7aa      	b.n	8006aa6 <_printf_i+0x14a>
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	47d0      	blx	sl
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0ad      	beq.n	8006aba <_printf_i+0x15e>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d413      	bmi.n	8006b8c <_printf_i+0x230>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e7a6      	b.n	8006abe <_printf_i+0x162>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4632      	mov	r2, r6
 8006b74:	4649      	mov	r1, r9
 8006b76:	4640      	mov	r0, r8
 8006b78:	47d0      	blx	sl
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d09d      	beq.n	8006aba <_printf_i+0x15e>
 8006b7e:	3501      	adds	r5, #1
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	9903      	ldr	r1, [sp, #12]
 8006b84:	1a5b      	subs	r3, r3, r1
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	dcf2      	bgt.n	8006b70 <_printf_i+0x214>
 8006b8a:	e7eb      	b.n	8006b64 <_printf_i+0x208>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	f104 0619 	add.w	r6, r4, #25
 8006b92:	e7f5      	b.n	8006b80 <_printf_i+0x224>
 8006b94:	080099d2 	.word	0x080099d2
 8006b98:	080099e3 	.word	0x080099e3

08006b9c <std>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006baa:	6083      	str	r3, [r0, #8]
 8006bac:	8181      	strh	r1, [r0, #12]
 8006bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb0:	81c2      	strh	r2, [r0, #14]
 8006bb2:	6183      	str	r3, [r0, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	305c      	adds	r0, #92	@ 0x5c
 8006bba:	f000 f928 	bl	8006e0e <memset>
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <std+0x58>)
 8006bc0:	6224      	str	r4, [r4, #32]
 8006bc2:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <std+0x5c>)
 8006bc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <std+0x60>)
 8006bca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <std+0x64>)
 8006bce:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <std+0x68>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d006      	beq.n	8006be4 <std+0x48>
 8006bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bda:	4294      	cmp	r4, r2
 8006bdc:	d002      	beq.n	8006be4 <std+0x48>
 8006bde:	33d0      	adds	r3, #208	@ 0xd0
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d105      	bne.n	8006bf0 <std+0x54>
 8006be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f000 b98c 	b.w	8006f08 <__retarget_lock_init_recursive>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08006d89 	.word	0x08006d89
 8006bf8:	08006dab 	.word	0x08006dab
 8006bfc:	08006de3 	.word	0x08006de3
 8006c00:	08006e07 	.word	0x08006e07
 8006c04:	200002a0 	.word	0x200002a0

08006c08 <stdio_exit_handler>:
 8006c08:	4a02      	ldr	r2, [pc, #8]	@ (8006c14 <stdio_exit_handler+0xc>)
 8006c0a:	4903      	ldr	r1, [pc, #12]	@ (8006c18 <stdio_exit_handler+0x10>)
 8006c0c:	4803      	ldr	r0, [pc, #12]	@ (8006c1c <stdio_exit_handler+0x14>)
 8006c0e:	f000 b869 	b.w	8006ce4 <_fwalk_sglue>
 8006c12:	bf00      	nop
 8006c14:	2000000c 	.word	0x2000000c
 8006c18:	0800887d 	.word	0x0800887d
 8006c1c:	2000001c 	.word	0x2000001c

08006c20 <cleanup_stdio>:
 8006c20:	6841      	ldr	r1, [r0, #4]
 8006c22:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <cleanup_stdio+0x34>)
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4299      	cmp	r1, r3
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d001      	beq.n	8006c30 <cleanup_stdio+0x10>
 8006c2c:	f001 fe26 	bl	800887c <_fflush_r>
 8006c30:	68a1      	ldr	r1, [r4, #8]
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <cleanup_stdio+0x38>)
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <cleanup_stdio+0x1e>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f001 fe1f 	bl	800887c <_fflush_r>
 8006c3e:	68e1      	ldr	r1, [r4, #12]
 8006c40:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <cleanup_stdio+0x3c>)
 8006c42:	4299      	cmp	r1, r3
 8006c44:	d004      	beq.n	8006c50 <cleanup_stdio+0x30>
 8006c46:	4620      	mov	r0, r4
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c4c:	f001 be16 	b.w	800887c <_fflush_r>
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	200002a0 	.word	0x200002a0
 8006c58:	20000308 	.word	0x20000308
 8006c5c:	20000370 	.word	0x20000370

08006c60 <global_stdio_init.part.0>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <global_stdio_init.part.0+0x30>)
 8006c64:	4c0b      	ldr	r4, [pc, #44]	@ (8006c94 <global_stdio_init.part.0+0x34>)
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <global_stdio_init.part.0+0x38>)
 8006c68:	4620      	mov	r0, r4
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	2104      	movs	r1, #4
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f7ff ff94 	bl	8006b9c <std>
 8006c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2109      	movs	r1, #9
 8006c7c:	f7ff ff8e 	bl	8006b9c <std>
 8006c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c84:	2202      	movs	r2, #2
 8006c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8a:	2112      	movs	r1, #18
 8006c8c:	f7ff bf86 	b.w	8006b9c <std>
 8006c90:	200003d8 	.word	0x200003d8
 8006c94:	200002a0 	.word	0x200002a0
 8006c98:	08006c09 	.word	0x08006c09

08006c9c <__sfp_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	@ (8006ca4 <__sfp_lock_acquire+0x8>)
 8006c9e:	f000 b934 	b.w	8006f0a <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	200003e1 	.word	0x200003e1

08006ca8 <__sfp_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__sfp_lock_release+0x8>)
 8006caa:	f000 b92f 	b.w	8006f0c <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200003e1 	.word	0x200003e1

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sfp_lock_acquire>
 8006cbc:	6a23      	ldr	r3, [r4, #32]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sfp_lock_release>
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <__sinit+0x28>)
 8006cca:	6223      	str	r3, [r4, #32]
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__sinit+0x2c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <__sinit+0xc>
 8006cd4:	f7ff ffc4 	bl	8006c60 <global_stdio_init.part.0>
 8006cd8:	e7f2      	b.n	8006cc0 <__sinit+0xc>
 8006cda:	bf00      	nop
 8006cdc:	08006c21 	.word	0x08006c21
 8006ce0:	200003d8 	.word	0x200003d8

08006ce4 <_fwalk_sglue>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4607      	mov	r7, r0
 8006cea:	4688      	mov	r8, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf8:	d505      	bpl.n	8006d06 <_fwalk_sglue+0x22>
 8006cfa:	6824      	ldr	r4, [r4, #0]
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d1f7      	bne.n	8006cf0 <_fwalk_sglue+0xc>
 8006d00:	4630      	mov	r0, r6
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d907      	bls.n	8006d1c <_fwalk_sglue+0x38>
 8006d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d10:	3301      	adds	r3, #1
 8006d12:	d003      	beq.n	8006d1c <_fwalk_sglue+0x38>
 8006d14:	4629      	mov	r1, r5
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c0      	blx	r8
 8006d1a:	4306      	orrs	r6, r0
 8006d1c:	3568      	adds	r5, #104	@ 0x68
 8006d1e:	e7e9      	b.n	8006cf4 <_fwalk_sglue+0x10>

08006d20 <sniprintf>:
 8006d20:	b40c      	push	{r2, r3}
 8006d22:	b530      	push	{r4, r5, lr}
 8006d24:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <sniprintf+0x64>)
 8006d26:	1e0c      	subs	r4, r1, #0
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	b09d      	sub	sp, #116	@ 0x74
 8006d2c:	da08      	bge.n	8006d40 <sniprintf+0x20>
 8006d2e:	238b      	movs	r3, #139	@ 0x8b
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	b01d      	add	sp, #116	@ 0x74
 8006d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d3c:	b002      	add	sp, #8
 8006d3e:	4770      	bx	lr
 8006d40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d48:	bf0c      	ite	eq
 8006d4a:	4623      	moveq	r3, r4
 8006d4c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	9006      	str	r0, [sp, #24]
 8006d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d60:	4628      	mov	r0, r5
 8006d62:	ab21      	add	r3, sp, #132	@ 0x84
 8006d64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d66:	a902      	add	r1, sp, #8
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	f001 fc0b 	bl	8008584 <_svfiprintf_r>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	bfbc      	itt	lt
 8006d72:	238b      	movlt	r3, #139	@ 0x8b
 8006d74:	602b      	strlt	r3, [r5, #0]
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d0dd      	beq.n	8006d36 <sniprintf+0x16>
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e7d9      	b.n	8006d36 <sniprintf+0x16>
 8006d82:	bf00      	nop
 8006d84:	20000018 	.word	0x20000018

08006d88 <__sread>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d90:	f000 f86c 	bl	8006e6c <_read_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	bfab      	itete	ge
 8006d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d9c:	181b      	addge	r3, r3, r0
 8006d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006da2:	bfac      	ite	ge
 8006da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006da6:	81a3      	strhlt	r3, [r4, #12]
 8006da8:	bd10      	pop	{r4, pc}

08006daa <__swrite>:
 8006daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	461f      	mov	r7, r3
 8006db0:	898b      	ldrh	r3, [r1, #12]
 8006db2:	4605      	mov	r5, r0
 8006db4:	05db      	lsls	r3, r3, #23
 8006db6:	460c      	mov	r4, r1
 8006db8:	4616      	mov	r6, r2
 8006dba:	d505      	bpl.n	8006dc8 <__swrite+0x1e>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	f000 f840 	bl	8006e48 <_lseek_r>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	4632      	mov	r2, r6
 8006dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	f000 b857 	b.w	8006e90 <_write_r>

08006de2 <__sseek>:
 8006de2:	b510      	push	{r4, lr}
 8006de4:	460c      	mov	r4, r1
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 f82d 	bl	8006e48 <_lseek_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	bf15      	itete	ne
 8006df4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006df6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dfe:	81a3      	strheq	r3, [r4, #12]
 8006e00:	bf18      	it	ne
 8006e02:	81a3      	strhne	r3, [r4, #12]
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <__sclose>:
 8006e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0a:	f000 b80d 	b.w	8006e28 <_close_r>

08006e0e <memset>:
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4402      	add	r2, r0
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d100      	bne.n	8006e18 <memset+0xa>
 8006e16:	4770      	bx	lr
 8006e18:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1c:	e7f9      	b.n	8006e12 <memset+0x4>
	...

08006e20 <_localeconv_r>:
 8006e20:	4800      	ldr	r0, [pc, #0]	@ (8006e24 <_localeconv_r+0x4>)
 8006e22:	4770      	bx	lr
 8006e24:	20000158 	.word	0x20000158

08006e28 <_close_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4d05      	ldr	r5, [pc, #20]	@ (8006e44 <_close_r+0x1c>)
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	f7fb f81d 	bl	8001e72 <_close>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_close_r+0x1a>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_close_r+0x1a>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	200003dc 	.word	0x200003dc

08006e48 <_lseek_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	2200      	movs	r2, #0
 8006e52:	4d05      	ldr	r5, [pc, #20]	@ (8006e68 <_lseek_r+0x20>)
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fb f82f 	bl	8001eba <_lseek>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_lseek_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_lseek_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200003dc 	.word	0x200003dc

08006e6c <_read_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	4d05      	ldr	r5, [pc, #20]	@ (8006e8c <_read_r+0x20>)
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fa ffc0 	bl	8001e00 <_read>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_read_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_read_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	200003dc 	.word	0x200003dc

08006e90 <_write_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4d05      	ldr	r5, [pc, #20]	@ (8006eb0 <_write_r+0x20>)
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fa ffcb 	bl	8001e3a <_write>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_write_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_write_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	200003dc 	.word	0x200003dc

08006eb4 <__errno>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	@ (8006ebc <__errno+0x8>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000018 	.word	0x20000018

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	4d0c      	ldr	r5, [pc, #48]	@ (8006ef8 <__libc_init_array+0x38>)
 8006ec6:	4c0d      	ldr	r4, [pc, #52]	@ (8006efc <__libc_init_array+0x3c>)
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	f002 fd02 	bl	80098d8 <_init>
 8006ed4:	2600      	movs	r6, #0
 8006ed6:	4d0a      	ldr	r5, [pc, #40]	@ (8006f00 <__libc_init_array+0x40>)
 8006ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8006f04 <__libc_init_array+0x44>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08009d50 	.word	0x08009d50
 8006efc:	08009d50 	.word	0x08009d50
 8006f00:	08009d50 	.word	0x08009d50
 8006f04:	08009d54 	.word	0x08009d54

08006f08 <__retarget_lock_init_recursive>:
 8006f08:	4770      	bx	lr

08006f0a <__retarget_lock_acquire_recursive>:
 8006f0a:	4770      	bx	lr

08006f0c <__retarget_lock_release_recursive>:
 8006f0c:	4770      	bx	lr

08006f0e <memchr>:
 8006f0e:	4603      	mov	r3, r0
 8006f10:	b510      	push	{r4, lr}
 8006f12:	b2c9      	uxtb	r1, r1
 8006f14:	4402      	add	r2, r0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	d101      	bne.n	8006f20 <memchr+0x12>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e003      	b.n	8006f28 <memchr+0x1a>
 8006f20:	7804      	ldrb	r4, [r0, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	428c      	cmp	r4, r1
 8006f26:	d1f6      	bne.n	8006f16 <memchr+0x8>
 8006f28:	bd10      	pop	{r4, pc}

08006f2a <quorem>:
 8006f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2e:	6903      	ldr	r3, [r0, #16]
 8006f30:	690c      	ldr	r4, [r1, #16]
 8006f32:	4607      	mov	r7, r0
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	db7e      	blt.n	8007036 <quorem+0x10c>
 8006f38:	3c01      	subs	r4, #1
 8006f3a:	00a3      	lsls	r3, r4, #2
 8006f3c:	f100 0514 	add.w	r5, r0, #20
 8006f40:	f101 0814 	add.w	r8, r1, #20
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f54:	3301      	adds	r3, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f60:	d32e      	bcc.n	8006fc0 <quorem+0x96>
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	46c4      	mov	ip, r8
 8006f68:	46ae      	mov	lr, r5
 8006f6a:	46d3      	mov	fp, sl
 8006f6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f70:	b298      	uxth	r0, r3
 8006f72:	fb06 a000 	mla	r0, r6, r0, sl
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	0c02      	lsrs	r2, r0, #16
 8006f7a:	fb06 2303 	mla	r3, r6, r3, r2
 8006f7e:	f8de 2000 	ldr.w	r2, [lr]
 8006f82:	b280      	uxth	r0, r0
 8006f84:	b292      	uxth	r2, r2
 8006f86:	1a12      	subs	r2, r2, r0
 8006f88:	445a      	add	r2, fp
 8006f8a:	f8de 0000 	ldr.w	r0, [lr]
 8006f8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f9c:	b292      	uxth	r2, r2
 8006f9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fa2:	45e1      	cmp	r9, ip
 8006fa4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fa8:	f84e 2b04 	str.w	r2, [lr], #4
 8006fac:	d2de      	bcs.n	8006f6c <quorem+0x42>
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	58eb      	ldr	r3, [r5, r3]
 8006fb2:	b92b      	cbnz	r3, 8006fc0 <quorem+0x96>
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	3b04      	subs	r3, #4
 8006fb8:	429d      	cmp	r5, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	d32f      	bcc.n	800701e <quorem+0xf4>
 8006fbe:	613c      	str	r4, [r7, #16]
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f001 f97b 	bl	80082bc <__mcmp>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	db25      	blt.n	8007016 <quorem+0xec>
 8006fca:	4629      	mov	r1, r5
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fd2:	f8d1 c000 	ldr.w	ip, [r1]
 8006fd6:	fa1f fe82 	uxth.w	lr, r2
 8006fda:	fa1f f38c 	uxth.w	r3, ip
 8006fde:	eba3 030e 	sub.w	r3, r3, lr
 8006fe2:	4403      	add	r3, r0
 8006fe4:	0c12      	lsrs	r2, r2, #16
 8006fe6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ff4:	45c1      	cmp	r9, r8
 8006ff6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ffa:	f841 3b04 	str.w	r3, [r1], #4
 8006ffe:	d2e6      	bcs.n	8006fce <quorem+0xa4>
 8007000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007008:	b922      	cbnz	r2, 8007014 <quorem+0xea>
 800700a:	3b04      	subs	r3, #4
 800700c:	429d      	cmp	r5, r3
 800700e:	461a      	mov	r2, r3
 8007010:	d30b      	bcc.n	800702a <quorem+0x100>
 8007012:	613c      	str	r4, [r7, #16]
 8007014:	3601      	adds	r6, #1
 8007016:	4630      	mov	r0, r6
 8007018:	b003      	add	sp, #12
 800701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	3b04      	subs	r3, #4
 8007022:	2a00      	cmp	r2, #0
 8007024:	d1cb      	bne.n	8006fbe <quorem+0x94>
 8007026:	3c01      	subs	r4, #1
 8007028:	e7c6      	b.n	8006fb8 <quorem+0x8e>
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	3b04      	subs	r3, #4
 800702e:	2a00      	cmp	r2, #0
 8007030:	d1ef      	bne.n	8007012 <quorem+0xe8>
 8007032:	3c01      	subs	r4, #1
 8007034:	e7ea      	b.n	800700c <quorem+0xe2>
 8007036:	2000      	movs	r0, #0
 8007038:	e7ee      	b.n	8007018 <quorem+0xee>
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <_dtoa_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	69c7      	ldr	r7, [r0, #28]
 800704a:	b097      	sub	sp, #92	@ 0x5c
 800704c:	4683      	mov	fp, r0
 800704e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007052:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007054:	b97f      	cbnz	r7, 8007076 <_dtoa_r+0x36>
 8007056:	2010      	movs	r0, #16
 8007058:	f000 fe02 	bl	8007c60 <malloc>
 800705c:	4602      	mov	r2, r0
 800705e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007062:	b920      	cbnz	r0, 800706e <_dtoa_r+0x2e>
 8007064:	21ef      	movs	r1, #239	@ 0xef
 8007066:	4ba8      	ldr	r3, [pc, #672]	@ (8007308 <_dtoa_r+0x2c8>)
 8007068:	48a8      	ldr	r0, [pc, #672]	@ (800730c <_dtoa_r+0x2cc>)
 800706a:	f001 fc67 	bl	800893c <__assert_func>
 800706e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007072:	6007      	str	r7, [r0, #0]
 8007074:	60c7      	str	r7, [r0, #12]
 8007076:	f8db 301c 	ldr.w	r3, [fp, #28]
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	b159      	cbz	r1, 8007096 <_dtoa_r+0x56>
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	2301      	movs	r3, #1
 8007082:	4093      	lsls	r3, r2
 8007084:	604a      	str	r2, [r1, #4]
 8007086:	608b      	str	r3, [r1, #8]
 8007088:	4658      	mov	r0, fp
 800708a:	f000 fedf 	bl	8007e4c <_Bfree>
 800708e:	2200      	movs	r2, #0
 8007090:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	1e2b      	subs	r3, r5, #0
 8007098:	bfaf      	iteee	ge
 800709a:	2300      	movge	r3, #0
 800709c:	2201      	movlt	r2, #1
 800709e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070a2:	9303      	strlt	r3, [sp, #12]
 80070a4:	bfa8      	it	ge
 80070a6:	6033      	strge	r3, [r6, #0]
 80070a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070ac:	4b98      	ldr	r3, [pc, #608]	@ (8007310 <_dtoa_r+0x2d0>)
 80070ae:	bfb8      	it	lt
 80070b0:	6032      	strlt	r2, [r6, #0]
 80070b2:	ea33 0308 	bics.w	r3, r3, r8
 80070b6:	d112      	bne.n	80070de <_dtoa_r+0x9e>
 80070b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80070c4:	4323      	orrs	r3, r4
 80070c6:	f000 8550 	beq.w	8007b6a <_dtoa_r+0xb2a>
 80070ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007314 <_dtoa_r+0x2d4>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8552 	beq.w	8007b7a <_dtoa_r+0xb3a>
 80070d6:	f10a 0303 	add.w	r3, sl, #3
 80070da:	f000 bd4c 	b.w	8007b76 <_dtoa_r+0xb36>
 80070de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80070e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ea:	2200      	movs	r2, #0
 80070ec:	2300      	movs	r3, #0
 80070ee:	f7f9 fc73 	bl	80009d8 <__aeabi_dcmpeq>
 80070f2:	4607      	mov	r7, r0
 80070f4:	b158      	cbz	r0, 800710e <_dtoa_r+0xce>
 80070f6:	2301      	movs	r3, #1
 80070f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070fe:	b113      	cbz	r3, 8007106 <_dtoa_r+0xc6>
 8007100:	4b85      	ldr	r3, [pc, #532]	@ (8007318 <_dtoa_r+0x2d8>)
 8007102:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800731c <_dtoa_r+0x2dc>
 800710a:	f000 bd36 	b.w	8007b7a <_dtoa_r+0xb3a>
 800710e:	ab14      	add	r3, sp, #80	@ 0x50
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	ab15      	add	r3, sp, #84	@ 0x54
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4658      	mov	r0, fp
 8007118:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800711c:	f001 f97e 	bl	800841c <__d2b>
 8007120:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007124:	4681      	mov	r9, r0
 8007126:	2e00      	cmp	r6, #0
 8007128:	d077      	beq.n	800721a <_dtoa_r+0x1da>
 800712a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800712e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007130:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007138:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800713c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007140:	9712      	str	r7, [sp, #72]	@ 0x48
 8007142:	4619      	mov	r1, r3
 8007144:	2200      	movs	r2, #0
 8007146:	4b76      	ldr	r3, [pc, #472]	@ (8007320 <_dtoa_r+0x2e0>)
 8007148:	f7f9 f826 	bl	8000198 <__aeabi_dsub>
 800714c:	a368      	add	r3, pc, #416	@ (adr r3, 80072f0 <_dtoa_r+0x2b0>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 f9d9 	bl	8000508 <__aeabi_dmul>
 8007156:	a368      	add	r3, pc, #416	@ (adr r3, 80072f8 <_dtoa_r+0x2b8>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 f81e 	bl	800019c <__adddf3>
 8007160:	4604      	mov	r4, r0
 8007162:	4630      	mov	r0, r6
 8007164:	460d      	mov	r5, r1
 8007166:	f7f9 f965 	bl	8000434 <__aeabi_i2d>
 800716a:	a365      	add	r3, pc, #404	@ (adr r3, 8007300 <_dtoa_r+0x2c0>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 f9ca 	bl	8000508 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 f80e 	bl	800019c <__adddf3>
 8007180:	4604      	mov	r4, r0
 8007182:	460d      	mov	r5, r1
 8007184:	f7f9 fc70 	bl	8000a68 <__aeabi_d2iz>
 8007188:	2200      	movs	r2, #0
 800718a:	4607      	mov	r7, r0
 800718c:	2300      	movs	r3, #0
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 fc2b 	bl	80009ec <__aeabi_dcmplt>
 8007196:	b140      	cbz	r0, 80071aa <_dtoa_r+0x16a>
 8007198:	4638      	mov	r0, r7
 800719a:	f7f9 f94b 	bl	8000434 <__aeabi_i2d>
 800719e:	4622      	mov	r2, r4
 80071a0:	462b      	mov	r3, r5
 80071a2:	f7f9 fc19 	bl	80009d8 <__aeabi_dcmpeq>
 80071a6:	b900      	cbnz	r0, 80071aa <_dtoa_r+0x16a>
 80071a8:	3f01      	subs	r7, #1
 80071aa:	2f16      	cmp	r7, #22
 80071ac:	d853      	bhi.n	8007256 <_dtoa_r+0x216>
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071b2:	4b5c      	ldr	r3, [pc, #368]	@ (8007324 <_dtoa_r+0x2e4>)
 80071b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 fc16 	bl	80009ec <__aeabi_dcmplt>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d04a      	beq.n	800725a <_dtoa_r+0x21a>
 80071c4:	2300      	movs	r3, #0
 80071c6:	3f01      	subs	r7, #1
 80071c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071cc:	1b9b      	subs	r3, r3, r6
 80071ce:	1e5a      	subs	r2, r3, #1
 80071d0:	bf46      	itte	mi
 80071d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80071d6:	2300      	movmi	r3, #0
 80071d8:	f04f 0800 	movpl.w	r8, #0
 80071dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071de:	bf48      	it	mi
 80071e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80071e2:	2f00      	cmp	r7, #0
 80071e4:	db3b      	blt.n	800725e <_dtoa_r+0x21e>
 80071e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80071ea:	443b      	add	r3, r7
 80071ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ee:	2300      	movs	r3, #0
 80071f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	d866      	bhi.n	80072c6 <_dtoa_r+0x286>
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	bfc4      	itt	gt
 80071fc:	3b04      	subgt	r3, #4
 80071fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007200:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007202:	bfc8      	it	gt
 8007204:	2400      	movgt	r4, #0
 8007206:	f1a3 0302 	sub.w	r3, r3, #2
 800720a:	bfd8      	it	le
 800720c:	2401      	movle	r4, #1
 800720e:	2b03      	cmp	r3, #3
 8007210:	d864      	bhi.n	80072dc <_dtoa_r+0x29c>
 8007212:	e8df f003 	tbb	[pc, r3]
 8007216:	382b      	.short	0x382b
 8007218:	5636      	.short	0x5636
 800721a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800721e:	441e      	add	r6, r3
 8007220:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007224:	2b20      	cmp	r3, #32
 8007226:	bfc1      	itttt	gt
 8007228:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800722c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007230:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007234:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007238:	bfd6      	itet	le
 800723a:	f1c3 0320 	rsble	r3, r3, #32
 800723e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007242:	fa04 f003 	lslle.w	r0, r4, r3
 8007246:	f7f9 f8e5 	bl	8000414 <__aeabi_ui2d>
 800724a:	2201      	movs	r2, #1
 800724c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007250:	3e01      	subs	r6, #1
 8007252:	9212      	str	r2, [sp, #72]	@ 0x48
 8007254:	e775      	b.n	8007142 <_dtoa_r+0x102>
 8007256:	2301      	movs	r3, #1
 8007258:	e7b6      	b.n	80071c8 <_dtoa_r+0x188>
 800725a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800725c:	e7b5      	b.n	80071ca <_dtoa_r+0x18a>
 800725e:	427b      	negs	r3, r7
 8007260:	930a      	str	r3, [sp, #40]	@ 0x28
 8007262:	2300      	movs	r3, #0
 8007264:	eba8 0807 	sub.w	r8, r8, r7
 8007268:	930e      	str	r3, [sp, #56]	@ 0x38
 800726a:	e7c2      	b.n	80071f2 <_dtoa_r+0x1b2>
 800726c:	2300      	movs	r3, #0
 800726e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007270:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc35      	bgt.n	80072e2 <_dtoa_r+0x2a2>
 8007276:	2301      	movs	r3, #1
 8007278:	461a      	mov	r2, r3
 800727a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800727e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007280:	e00b      	b.n	800729a <_dtoa_r+0x25a>
 8007282:	2301      	movs	r3, #1
 8007284:	e7f3      	b.n	800726e <_dtoa_r+0x22e>
 8007286:	2300      	movs	r3, #0
 8007288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800728a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	9308      	str	r3, [sp, #32]
 8007290:	3301      	adds	r3, #1
 8007292:	2b01      	cmp	r3, #1
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	bfb8      	it	lt
 8007298:	2301      	movlt	r3, #1
 800729a:	2100      	movs	r1, #0
 800729c:	2204      	movs	r2, #4
 800729e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072a2:	f102 0514 	add.w	r5, r2, #20
 80072a6:	429d      	cmp	r5, r3
 80072a8:	d91f      	bls.n	80072ea <_dtoa_r+0x2aa>
 80072aa:	6041      	str	r1, [r0, #4]
 80072ac:	4658      	mov	r0, fp
 80072ae:	f000 fd8d 	bl	8007dcc <_Balloc>
 80072b2:	4682      	mov	sl, r0
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d139      	bne.n	800732c <_dtoa_r+0x2ec>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80072be:	4b1a      	ldr	r3, [pc, #104]	@ (8007328 <_dtoa_r+0x2e8>)
 80072c0:	e6d2      	b.n	8007068 <_dtoa_r+0x28>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e7e0      	b.n	8007288 <_dtoa_r+0x248>
 80072c6:	2401      	movs	r4, #1
 80072c8:	2300      	movs	r3, #0
 80072ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80072ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072d2:	2200      	movs	r2, #0
 80072d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80072d8:	2312      	movs	r3, #18
 80072da:	e7d0      	b.n	800727e <_dtoa_r+0x23e>
 80072dc:	2301      	movs	r3, #1
 80072de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072e0:	e7f5      	b.n	80072ce <_dtoa_r+0x28e>
 80072e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80072e8:	e7d7      	b.n	800729a <_dtoa_r+0x25a>
 80072ea:	3101      	adds	r1, #1
 80072ec:	0052      	lsls	r2, r2, #1
 80072ee:	e7d8      	b.n	80072a2 <_dtoa_r+0x262>
 80072f0:	636f4361 	.word	0x636f4361
 80072f4:	3fd287a7 	.word	0x3fd287a7
 80072f8:	8b60c8b3 	.word	0x8b60c8b3
 80072fc:	3fc68a28 	.word	0x3fc68a28
 8007300:	509f79fb 	.word	0x509f79fb
 8007304:	3fd34413 	.word	0x3fd34413
 8007308:	08009a01 	.word	0x08009a01
 800730c:	08009a18 	.word	0x08009a18
 8007310:	7ff00000 	.word	0x7ff00000
 8007314:	080099fd 	.word	0x080099fd
 8007318:	080099d1 	.word	0x080099d1
 800731c:	080099d0 	.word	0x080099d0
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	08009b10 	.word	0x08009b10
 8007328:	08009a70 	.word	0x08009a70
 800732c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007330:	6018      	str	r0, [r3, #0]
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	2b0e      	cmp	r3, #14
 8007336:	f200 80a4 	bhi.w	8007482 <_dtoa_r+0x442>
 800733a:	2c00      	cmp	r4, #0
 800733c:	f000 80a1 	beq.w	8007482 <_dtoa_r+0x442>
 8007340:	2f00      	cmp	r7, #0
 8007342:	dd33      	ble.n	80073ac <_dtoa_r+0x36c>
 8007344:	4b86      	ldr	r3, [pc, #536]	@ (8007560 <_dtoa_r+0x520>)
 8007346:	f007 020f 	and.w	r2, r7, #15
 800734a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734e:	05f8      	lsls	r0, r7, #23
 8007350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007354:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800735c:	d516      	bpl.n	800738c <_dtoa_r+0x34c>
 800735e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007362:	4b80      	ldr	r3, [pc, #512]	@ (8007564 <_dtoa_r+0x524>)
 8007364:	2603      	movs	r6, #3
 8007366:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800736a:	f7f9 f9f7 	bl	800075c <__aeabi_ddiv>
 800736e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007372:	f004 040f 	and.w	r4, r4, #15
 8007376:	4d7b      	ldr	r5, [pc, #492]	@ (8007564 <_dtoa_r+0x524>)
 8007378:	b954      	cbnz	r4, 8007390 <_dtoa_r+0x350>
 800737a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007382:	f7f9 f9eb 	bl	800075c <__aeabi_ddiv>
 8007386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800738a:	e028      	b.n	80073de <_dtoa_r+0x39e>
 800738c:	2602      	movs	r6, #2
 800738e:	e7f2      	b.n	8007376 <_dtoa_r+0x336>
 8007390:	07e1      	lsls	r1, r4, #31
 8007392:	d508      	bpl.n	80073a6 <_dtoa_r+0x366>
 8007394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800739c:	f7f9 f8b4 	bl	8000508 <__aeabi_dmul>
 80073a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a4:	3601      	adds	r6, #1
 80073a6:	1064      	asrs	r4, r4, #1
 80073a8:	3508      	adds	r5, #8
 80073aa:	e7e5      	b.n	8007378 <_dtoa_r+0x338>
 80073ac:	f000 80d2 	beq.w	8007554 <_dtoa_r+0x514>
 80073b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073b4:	427c      	negs	r4, r7
 80073b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007560 <_dtoa_r+0x520>)
 80073b8:	f004 020f 	and.w	r2, r4, #15
 80073bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f7f9 f8a0 	bl	8000508 <__aeabi_dmul>
 80073c8:	2602      	movs	r6, #2
 80073ca:	2300      	movs	r3, #0
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	4d64      	ldr	r5, [pc, #400]	@ (8007564 <_dtoa_r+0x524>)
 80073d2:	1124      	asrs	r4, r4, #4
 80073d4:	2c00      	cmp	r4, #0
 80073d6:	f040 80b2 	bne.w	800753e <_dtoa_r+0x4fe>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1d3      	bne.n	8007386 <_dtoa_r+0x346>
 80073de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 80b7 	beq.w	8007558 <_dtoa_r+0x518>
 80073ea:	2200      	movs	r2, #0
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007568 <_dtoa_r+0x528>)
 80073f2:	f7f9 fafb 	bl	80009ec <__aeabi_dcmplt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f000 80ae 	beq.w	8007558 <_dtoa_r+0x518>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80aa 	beq.w	8007558 <_dtoa_r+0x518>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	dd37      	ble.n	800747a <_dtoa_r+0x43a>
 800740a:	1e7b      	subs	r3, r7, #1
 800740c:	4620      	mov	r0, r4
 800740e:	9304      	str	r3, [sp, #16]
 8007410:	2200      	movs	r2, #0
 8007412:	4629      	mov	r1, r5
 8007414:	4b55      	ldr	r3, [pc, #340]	@ (800756c <_dtoa_r+0x52c>)
 8007416:	f7f9 f877 	bl	8000508 <__aeabi_dmul>
 800741a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800741e:	9c08      	ldr	r4, [sp, #32]
 8007420:	3601      	adds	r6, #1
 8007422:	4630      	mov	r0, r6
 8007424:	f7f9 f806 	bl	8000434 <__aeabi_i2d>
 8007428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800742c:	f7f9 f86c 	bl	8000508 <__aeabi_dmul>
 8007430:	2200      	movs	r2, #0
 8007432:	4b4f      	ldr	r3, [pc, #316]	@ (8007570 <_dtoa_r+0x530>)
 8007434:	f7f8 feb2 	bl	800019c <__adddf3>
 8007438:	4605      	mov	r5, r0
 800743a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800743e:	2c00      	cmp	r4, #0
 8007440:	f040 809a 	bne.w	8007578 <_dtoa_r+0x538>
 8007444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	4b4a      	ldr	r3, [pc, #296]	@ (8007574 <_dtoa_r+0x534>)
 800744c:	f7f8 fea4 	bl	8000198 <__aeabi_dsub>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007458:	462a      	mov	r2, r5
 800745a:	4633      	mov	r3, r6
 800745c:	f7f9 fae4 	bl	8000a28 <__aeabi_dcmpgt>
 8007460:	2800      	cmp	r0, #0
 8007462:	f040 828e 	bne.w	8007982 <_dtoa_r+0x942>
 8007466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746a:	462a      	mov	r2, r5
 800746c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007470:	f7f9 fabc 	bl	80009ec <__aeabi_dcmplt>
 8007474:	2800      	cmp	r0, #0
 8007476:	f040 8127 	bne.w	80076c8 <_dtoa_r+0x688>
 800747a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800747e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007482:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007484:	2b00      	cmp	r3, #0
 8007486:	f2c0 8163 	blt.w	8007750 <_dtoa_r+0x710>
 800748a:	2f0e      	cmp	r7, #14
 800748c:	f300 8160 	bgt.w	8007750 <_dtoa_r+0x710>
 8007490:	4b33      	ldr	r3, [pc, #204]	@ (8007560 <_dtoa_r+0x520>)
 8007492:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800749a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800749e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da03      	bge.n	80074ac <_dtoa_r+0x46c>
 80074a4:	9b07      	ldr	r3, [sp, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f340 8100 	ble.w	80076ac <_dtoa_r+0x66c>
 80074ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074b0:	4656      	mov	r6, sl
 80074b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 f94f 	bl	800075c <__aeabi_ddiv>
 80074be:	f7f9 fad3 	bl	8000a68 <__aeabi_d2iz>
 80074c2:	4680      	mov	r8, r0
 80074c4:	f7f8 ffb6 	bl	8000434 <__aeabi_i2d>
 80074c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074cc:	f7f9 f81c 	bl	8000508 <__aeabi_dmul>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7f8 fe5e 	bl	8000198 <__aeabi_dsub>
 80074dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074e0:	9d07      	ldr	r5, [sp, #28]
 80074e2:	f806 4b01 	strb.w	r4, [r6], #1
 80074e6:	eba6 040a 	sub.w	r4, r6, sl
 80074ea:	42a5      	cmp	r5, r4
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	f040 8116 	bne.w	8007720 <_dtoa_r+0x6e0>
 80074f4:	f7f8 fe52 	bl	800019c <__adddf3>
 80074f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	f7f9 fa92 	bl	8000a28 <__aeabi_dcmpgt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 80f8 	bne.w	80076fa <_dtoa_r+0x6ba>
 800750a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f9 fa61 	bl	80009d8 <__aeabi_dcmpeq>
 8007516:	b118      	cbz	r0, 8007520 <_dtoa_r+0x4e0>
 8007518:	f018 0f01 	tst.w	r8, #1
 800751c:	f040 80ed 	bne.w	80076fa <_dtoa_r+0x6ba>
 8007520:	4649      	mov	r1, r9
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fc92 	bl	8007e4c <_Bfree>
 8007528:	2300      	movs	r3, #0
 800752a:	7033      	strb	r3, [r6, #0]
 800752c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800752e:	3701      	adds	r7, #1
 8007530:	601f      	str	r7, [r3, #0]
 8007532:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8320 	beq.w	8007b7a <_dtoa_r+0xb3a>
 800753a:	601e      	str	r6, [r3, #0]
 800753c:	e31d      	b.n	8007b7a <_dtoa_r+0xb3a>
 800753e:	07e2      	lsls	r2, r4, #31
 8007540:	d505      	bpl.n	800754e <_dtoa_r+0x50e>
 8007542:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007546:	f7f8 ffdf 	bl	8000508 <__aeabi_dmul>
 800754a:	2301      	movs	r3, #1
 800754c:	3601      	adds	r6, #1
 800754e:	1064      	asrs	r4, r4, #1
 8007550:	3508      	adds	r5, #8
 8007552:	e73f      	b.n	80073d4 <_dtoa_r+0x394>
 8007554:	2602      	movs	r6, #2
 8007556:	e742      	b.n	80073de <_dtoa_r+0x39e>
 8007558:	9c07      	ldr	r4, [sp, #28]
 800755a:	9704      	str	r7, [sp, #16]
 800755c:	e761      	b.n	8007422 <_dtoa_r+0x3e2>
 800755e:	bf00      	nop
 8007560:	08009b10 	.word	0x08009b10
 8007564:	08009ae8 	.word	0x08009ae8
 8007568:	3ff00000 	.word	0x3ff00000
 800756c:	40240000 	.word	0x40240000
 8007570:	401c0000 	.word	0x401c0000
 8007574:	40140000 	.word	0x40140000
 8007578:	4b70      	ldr	r3, [pc, #448]	@ (800773c <_dtoa_r+0x6fc>)
 800757a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800757c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007580:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007584:	4454      	add	r4, sl
 8007586:	2900      	cmp	r1, #0
 8007588:	d045      	beq.n	8007616 <_dtoa_r+0x5d6>
 800758a:	2000      	movs	r0, #0
 800758c:	496c      	ldr	r1, [pc, #432]	@ (8007740 <_dtoa_r+0x700>)
 800758e:	f7f9 f8e5 	bl	800075c <__aeabi_ddiv>
 8007592:	4633      	mov	r3, r6
 8007594:	462a      	mov	r2, r5
 8007596:	f7f8 fdff 	bl	8000198 <__aeabi_dsub>
 800759a:	4656      	mov	r6, sl
 800759c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a4:	f7f9 fa60 	bl	8000a68 <__aeabi_d2iz>
 80075a8:	4605      	mov	r5, r0
 80075aa:	f7f8 ff43 	bl	8000434 <__aeabi_i2d>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b6:	f7f8 fdef 	bl	8000198 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	3530      	adds	r5, #48	@ 0x30
 80075c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075c8:	f806 5b01 	strb.w	r5, [r6], #1
 80075cc:	f7f9 fa0e 	bl	80009ec <__aeabi_dcmplt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d163      	bne.n	800769c <_dtoa_r+0x65c>
 80075d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d8:	2000      	movs	r0, #0
 80075da:	495a      	ldr	r1, [pc, #360]	@ (8007744 <_dtoa_r+0x704>)
 80075dc:	f7f8 fddc 	bl	8000198 <__aeabi_dsub>
 80075e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075e4:	f7f9 fa02 	bl	80009ec <__aeabi_dcmplt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f040 8087 	bne.w	80076fc <_dtoa_r+0x6bc>
 80075ee:	42a6      	cmp	r6, r4
 80075f0:	f43f af43 	beq.w	800747a <_dtoa_r+0x43a>
 80075f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075f8:	2200      	movs	r2, #0
 80075fa:	4b53      	ldr	r3, [pc, #332]	@ (8007748 <_dtoa_r+0x708>)
 80075fc:	f7f8 ff84 	bl	8000508 <__aeabi_dmul>
 8007600:	2200      	movs	r2, #0
 8007602:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760a:	4b4f      	ldr	r3, [pc, #316]	@ (8007748 <_dtoa_r+0x708>)
 800760c:	f7f8 ff7c 	bl	8000508 <__aeabi_dmul>
 8007610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007614:	e7c4      	b.n	80075a0 <_dtoa_r+0x560>
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	f7f8 ff75 	bl	8000508 <__aeabi_dmul>
 800761e:	4656      	mov	r6, sl
 8007620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007624:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762a:	f7f9 fa1d 	bl	8000a68 <__aeabi_d2iz>
 800762e:	4605      	mov	r5, r0
 8007630:	f7f8 ff00 	bl	8000434 <__aeabi_i2d>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800763c:	f7f8 fdac 	bl	8000198 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	3530      	adds	r5, #48	@ 0x30
 8007646:	f806 5b01 	strb.w	r5, [r6], #1
 800764a:	42a6      	cmp	r6, r4
 800764c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	d124      	bne.n	80076a0 <_dtoa_r+0x660>
 8007656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800765a:	4b39      	ldr	r3, [pc, #228]	@ (8007740 <_dtoa_r+0x700>)
 800765c:	f7f8 fd9e 	bl	800019c <__adddf3>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007668:	f7f9 f9de 	bl	8000a28 <__aeabi_dcmpgt>
 800766c:	2800      	cmp	r0, #0
 800766e:	d145      	bne.n	80076fc <_dtoa_r+0x6bc>
 8007670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007674:	2000      	movs	r0, #0
 8007676:	4932      	ldr	r1, [pc, #200]	@ (8007740 <_dtoa_r+0x700>)
 8007678:	f7f8 fd8e 	bl	8000198 <__aeabi_dsub>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007684:	f7f9 f9b2 	bl	80009ec <__aeabi_dcmplt>
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f aef6 	beq.w	800747a <_dtoa_r+0x43a>
 800768e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007690:	1e73      	subs	r3, r6, #1
 8007692:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007694:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007698:	2b30      	cmp	r3, #48	@ 0x30
 800769a:	d0f8      	beq.n	800768e <_dtoa_r+0x64e>
 800769c:	9f04      	ldr	r7, [sp, #16]
 800769e:	e73f      	b.n	8007520 <_dtoa_r+0x4e0>
 80076a0:	4b29      	ldr	r3, [pc, #164]	@ (8007748 <_dtoa_r+0x708>)
 80076a2:	f7f8 ff31 	bl	8000508 <__aeabi_dmul>
 80076a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076aa:	e7bc      	b.n	8007626 <_dtoa_r+0x5e6>
 80076ac:	d10c      	bne.n	80076c8 <_dtoa_r+0x688>
 80076ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4b25      	ldr	r3, [pc, #148]	@ (800774c <_dtoa_r+0x70c>)
 80076b6:	f7f8 ff27 	bl	8000508 <__aeabi_dmul>
 80076ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076be:	f7f9 f9a9 	bl	8000a14 <__aeabi_dcmpge>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f000 815b 	beq.w	800797e <_dtoa_r+0x93e>
 80076c8:	2400      	movs	r4, #0
 80076ca:	4625      	mov	r5, r4
 80076cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076ce:	4656      	mov	r6, sl
 80076d0:	43db      	mvns	r3, r3
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	2700      	movs	r7, #0
 80076d6:	4621      	mov	r1, r4
 80076d8:	4658      	mov	r0, fp
 80076da:	f000 fbb7 	bl	8007e4c <_Bfree>
 80076de:	2d00      	cmp	r5, #0
 80076e0:	d0dc      	beq.n	800769c <_dtoa_r+0x65c>
 80076e2:	b12f      	cbz	r7, 80076f0 <_dtoa_r+0x6b0>
 80076e4:	42af      	cmp	r7, r5
 80076e6:	d003      	beq.n	80076f0 <_dtoa_r+0x6b0>
 80076e8:	4639      	mov	r1, r7
 80076ea:	4658      	mov	r0, fp
 80076ec:	f000 fbae 	bl	8007e4c <_Bfree>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fbaa 	bl	8007e4c <_Bfree>
 80076f8:	e7d0      	b.n	800769c <_dtoa_r+0x65c>
 80076fa:	9704      	str	r7, [sp, #16]
 80076fc:	4633      	mov	r3, r6
 80076fe:	461e      	mov	r6, r3
 8007700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007704:	2a39      	cmp	r2, #57	@ 0x39
 8007706:	d107      	bne.n	8007718 <_dtoa_r+0x6d8>
 8007708:	459a      	cmp	sl, r3
 800770a:	d1f8      	bne.n	80076fe <_dtoa_r+0x6be>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	3201      	adds	r2, #1
 8007710:	9204      	str	r2, [sp, #16]
 8007712:	2230      	movs	r2, #48	@ 0x30
 8007714:	f88a 2000 	strb.w	r2, [sl]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	3201      	adds	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e7bd      	b.n	800769c <_dtoa_r+0x65c>
 8007720:	2200      	movs	r2, #0
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <_dtoa_r+0x708>)
 8007724:	f7f8 fef0 	bl	8000508 <__aeabi_dmul>
 8007728:	2200      	movs	r2, #0
 800772a:	2300      	movs	r3, #0
 800772c:	4604      	mov	r4, r0
 800772e:	460d      	mov	r5, r1
 8007730:	f7f9 f952 	bl	80009d8 <__aeabi_dcmpeq>
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f aebc 	beq.w	80074b2 <_dtoa_r+0x472>
 800773a:	e6f1      	b.n	8007520 <_dtoa_r+0x4e0>
 800773c:	08009b10 	.word	0x08009b10
 8007740:	3fe00000 	.word	0x3fe00000
 8007744:	3ff00000 	.word	0x3ff00000
 8007748:	40240000 	.word	0x40240000
 800774c:	40140000 	.word	0x40140000
 8007750:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007752:	2a00      	cmp	r2, #0
 8007754:	f000 80db 	beq.w	800790e <_dtoa_r+0x8ce>
 8007758:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800775a:	2a01      	cmp	r2, #1
 800775c:	f300 80bf 	bgt.w	80078de <_dtoa_r+0x89e>
 8007760:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007762:	2a00      	cmp	r2, #0
 8007764:	f000 80b7 	beq.w	80078d6 <_dtoa_r+0x896>
 8007768:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800776c:	4646      	mov	r6, r8
 800776e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007772:	2101      	movs	r1, #1
 8007774:	441a      	add	r2, r3
 8007776:	4658      	mov	r0, fp
 8007778:	4498      	add	r8, r3
 800777a:	9209      	str	r2, [sp, #36]	@ 0x24
 800777c:	f000 fc1a 	bl	8007fb4 <__i2b>
 8007780:	4605      	mov	r5, r0
 8007782:	b15e      	cbz	r6, 800779c <_dtoa_r+0x75c>
 8007784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd08      	ble.n	800779c <_dtoa_r+0x75c>
 800778a:	42b3      	cmp	r3, r6
 800778c:	bfa8      	it	ge
 800778e:	4633      	movge	r3, r6
 8007790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007792:	eba8 0803 	sub.w	r8, r8, r3
 8007796:	1af6      	subs	r6, r6, r3
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	9309      	str	r3, [sp, #36]	@ 0x24
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	b1f3      	cbz	r3, 80077de <_dtoa_r+0x79e>
 80077a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80b7 	beq.w	8007916 <_dtoa_r+0x8d6>
 80077a8:	b18c      	cbz	r4, 80077ce <_dtoa_r+0x78e>
 80077aa:	4629      	mov	r1, r5
 80077ac:	4622      	mov	r2, r4
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fcbe 	bl	8008130 <__pow5mult>
 80077b4:	464a      	mov	r2, r9
 80077b6:	4601      	mov	r1, r0
 80077b8:	4605      	mov	r5, r0
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fc10 	bl	8007fe0 <__multiply>
 80077c0:	4649      	mov	r1, r9
 80077c2:	9004      	str	r0, [sp, #16]
 80077c4:	4658      	mov	r0, fp
 80077c6:	f000 fb41 	bl	8007e4c <_Bfree>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	4699      	mov	r9, r3
 80077ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d0:	1b1a      	subs	r2, r3, r4
 80077d2:	d004      	beq.n	80077de <_dtoa_r+0x79e>
 80077d4:	4649      	mov	r1, r9
 80077d6:	4658      	mov	r0, fp
 80077d8:	f000 fcaa 	bl	8008130 <__pow5mult>
 80077dc:	4681      	mov	r9, r0
 80077de:	2101      	movs	r1, #1
 80077e0:	4658      	mov	r0, fp
 80077e2:	f000 fbe7 	bl	8007fb4 <__i2b>
 80077e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e8:	4604      	mov	r4, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 81c9 	beq.w	8007b82 <_dtoa_r+0xb42>
 80077f0:	461a      	mov	r2, r3
 80077f2:	4601      	mov	r1, r0
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fc9b 	bl	8008130 <__pow5mult>
 80077fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077fc:	4604      	mov	r4, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	f300 808f 	bgt.w	8007922 <_dtoa_r+0x8e2>
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 8087 	bne.w	800791a <_dtoa_r+0x8da>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 8083 	bne.w	800791e <_dtoa_r+0x8de>
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800781e:	0d1b      	lsrs	r3, r3, #20
 8007820:	051b      	lsls	r3, r3, #20
 8007822:	b12b      	cbz	r3, 8007830 <_dtoa_r+0x7f0>
 8007824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007826:	f108 0801 	add.w	r8, r8, #1
 800782a:	3301      	adds	r3, #1
 800782c:	9309      	str	r3, [sp, #36]	@ 0x24
 800782e:	2301      	movs	r3, #1
 8007830:	930a      	str	r3, [sp, #40]	@ 0x28
 8007832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 81aa 	beq.w	8007b8e <_dtoa_r+0xb4e>
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007840:	6918      	ldr	r0, [r3, #16]
 8007842:	f000 fb6b 	bl	8007f1c <__hi0bits>
 8007846:	f1c0 0020 	rsb	r0, r0, #32
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	4418      	add	r0, r3
 800784e:	f010 001f 	ands.w	r0, r0, #31
 8007852:	d071      	beq.n	8007938 <_dtoa_r+0x8f8>
 8007854:	f1c0 0320 	rsb	r3, r0, #32
 8007858:	2b04      	cmp	r3, #4
 800785a:	dd65      	ble.n	8007928 <_dtoa_r+0x8e8>
 800785c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785e:	f1c0 001c 	rsb	r0, r0, #28
 8007862:	4403      	add	r3, r0
 8007864:	4480      	add	r8, r0
 8007866:	4406      	add	r6, r0
 8007868:	9309      	str	r3, [sp, #36]	@ 0x24
 800786a:	f1b8 0f00 	cmp.w	r8, #0
 800786e:	dd05      	ble.n	800787c <_dtoa_r+0x83c>
 8007870:	4649      	mov	r1, r9
 8007872:	4642      	mov	r2, r8
 8007874:	4658      	mov	r0, fp
 8007876:	f000 fcb5 	bl	80081e4 <__lshift>
 800787a:	4681      	mov	r9, r0
 800787c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd05      	ble.n	800788e <_dtoa_r+0x84e>
 8007882:	4621      	mov	r1, r4
 8007884:	461a      	mov	r2, r3
 8007886:	4658      	mov	r0, fp
 8007888:	f000 fcac 	bl	80081e4 <__lshift>
 800788c:	4604      	mov	r4, r0
 800788e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d053      	beq.n	800793c <_dtoa_r+0x8fc>
 8007894:	4621      	mov	r1, r4
 8007896:	4648      	mov	r0, r9
 8007898:	f000 fd10 	bl	80082bc <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	da4d      	bge.n	800793c <_dtoa_r+0x8fc>
 80078a0:	1e7b      	subs	r3, r7, #1
 80078a2:	4649      	mov	r1, r9
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	220a      	movs	r2, #10
 80078a8:	2300      	movs	r3, #0
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 faf0 	bl	8007e90 <__multadd>
 80078b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b2:	4681      	mov	r9, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 816c 	beq.w	8007b92 <_dtoa_r+0xb52>
 80078ba:	2300      	movs	r3, #0
 80078bc:	4629      	mov	r1, r5
 80078be:	220a      	movs	r2, #10
 80078c0:	4658      	mov	r0, fp
 80078c2:	f000 fae5 	bl	8007e90 <__multadd>
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	4605      	mov	r5, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dc61      	bgt.n	8007992 <_dtoa_r+0x952>
 80078ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	dc3b      	bgt.n	800794c <_dtoa_r+0x90c>
 80078d4:	e05d      	b.n	8007992 <_dtoa_r+0x952>
 80078d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078d8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078dc:	e746      	b.n	800776c <_dtoa_r+0x72c>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	1e5c      	subs	r4, r3, #1
 80078e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	bfbf      	itttt	lt
 80078e8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078ea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80078ec:	1ae3      	sublt	r3, r4, r3
 80078ee:	18d2      	addlt	r2, r2, r3
 80078f0:	bfa8      	it	ge
 80078f2:	1b1c      	subge	r4, r3, r4
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	bfbe      	ittt	lt
 80078f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078fa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80078fc:	2400      	movlt	r4, #0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bfb5      	itete	lt
 8007902:	eba8 0603 	sublt.w	r6, r8, r3
 8007906:	4646      	movge	r6, r8
 8007908:	2300      	movlt	r3, #0
 800790a:	9b07      	ldrge	r3, [sp, #28]
 800790c:	e730      	b.n	8007770 <_dtoa_r+0x730>
 800790e:	4646      	mov	r6, r8
 8007910:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007912:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007914:	e735      	b.n	8007782 <_dtoa_r+0x742>
 8007916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007918:	e75c      	b.n	80077d4 <_dtoa_r+0x794>
 800791a:	2300      	movs	r3, #0
 800791c:	e788      	b.n	8007830 <_dtoa_r+0x7f0>
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	e786      	b.n	8007830 <_dtoa_r+0x7f0>
 8007922:	2300      	movs	r3, #0
 8007924:	930a      	str	r3, [sp, #40]	@ 0x28
 8007926:	e788      	b.n	800783a <_dtoa_r+0x7fa>
 8007928:	d09f      	beq.n	800786a <_dtoa_r+0x82a>
 800792a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800792c:	331c      	adds	r3, #28
 800792e:	441a      	add	r2, r3
 8007930:	4498      	add	r8, r3
 8007932:	441e      	add	r6, r3
 8007934:	9209      	str	r2, [sp, #36]	@ 0x24
 8007936:	e798      	b.n	800786a <_dtoa_r+0x82a>
 8007938:	4603      	mov	r3, r0
 800793a:	e7f6      	b.n	800792a <_dtoa_r+0x8ea>
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	9704      	str	r7, [sp, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc20      	bgt.n	8007986 <_dtoa_r+0x946>
 8007944:	9308      	str	r3, [sp, #32]
 8007946:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007948:	2b02      	cmp	r3, #2
 800794a:	dd1e      	ble.n	800798a <_dtoa_r+0x94a>
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f47f aebc 	bne.w	80076cc <_dtoa_r+0x68c>
 8007954:	4621      	mov	r1, r4
 8007956:	2205      	movs	r2, #5
 8007958:	4658      	mov	r0, fp
 800795a:	f000 fa99 	bl	8007e90 <__multadd>
 800795e:	4601      	mov	r1, r0
 8007960:	4604      	mov	r4, r0
 8007962:	4648      	mov	r0, r9
 8007964:	f000 fcaa 	bl	80082bc <__mcmp>
 8007968:	2800      	cmp	r0, #0
 800796a:	f77f aeaf 	ble.w	80076cc <_dtoa_r+0x68c>
 800796e:	2331      	movs	r3, #49	@ 0x31
 8007970:	4656      	mov	r6, sl
 8007972:	f806 3b01 	strb.w	r3, [r6], #1
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	e6aa      	b.n	80076d4 <_dtoa_r+0x694>
 800797e:	9c07      	ldr	r4, [sp, #28]
 8007980:	9704      	str	r7, [sp, #16]
 8007982:	4625      	mov	r5, r4
 8007984:	e7f3      	b.n	800796e <_dtoa_r+0x92e>
 8007986:	9b07      	ldr	r3, [sp, #28]
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8104 	beq.w	8007b9a <_dtoa_r+0xb5a>
 8007992:	2e00      	cmp	r6, #0
 8007994:	dd05      	ble.n	80079a2 <_dtoa_r+0x962>
 8007996:	4629      	mov	r1, r5
 8007998:	4632      	mov	r2, r6
 800799a:	4658      	mov	r0, fp
 800799c:	f000 fc22 	bl	80081e4 <__lshift>
 80079a0:	4605      	mov	r5, r0
 80079a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05a      	beq.n	8007a5e <_dtoa_r+0xa1e>
 80079a8:	4658      	mov	r0, fp
 80079aa:	6869      	ldr	r1, [r5, #4]
 80079ac:	f000 fa0e 	bl	8007dcc <_Balloc>
 80079b0:	4606      	mov	r6, r0
 80079b2:	b928      	cbnz	r0, 80079c0 <_dtoa_r+0x980>
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079ba:	4b83      	ldr	r3, [pc, #524]	@ (8007bc8 <_dtoa_r+0xb88>)
 80079bc:	f7ff bb54 	b.w	8007068 <_dtoa_r+0x28>
 80079c0:	692a      	ldr	r2, [r5, #16]
 80079c2:	f105 010c 	add.w	r1, r5, #12
 80079c6:	3202      	adds	r2, #2
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	300c      	adds	r0, #12
 80079cc:	f000 ffa8 	bl	8008920 <memcpy>
 80079d0:	2201      	movs	r2, #1
 80079d2:	4631      	mov	r1, r6
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fc05 	bl	80081e4 <__lshift>
 80079da:	462f      	mov	r7, r5
 80079dc:	4605      	mov	r5, r0
 80079de:	f10a 0301 	add.w	r3, sl, #1
 80079e2:	9307      	str	r3, [sp, #28]
 80079e4:	9b08      	ldr	r3, [sp, #32]
 80079e6:	4453      	add	r3, sl
 80079e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079f2:	9b07      	ldr	r3, [sp, #28]
 80079f4:	4621      	mov	r1, r4
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4648      	mov	r0, r9
 80079fa:	9302      	str	r3, [sp, #8]
 80079fc:	f7ff fa95 	bl	8006f2a <quorem>
 8007a00:	4639      	mov	r1, r7
 8007a02:	9008      	str	r0, [sp, #32]
 8007a04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a08:	4648      	mov	r0, r9
 8007a0a:	f000 fc57 	bl	80082bc <__mcmp>
 8007a0e:	462a      	mov	r2, r5
 8007a10:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a12:	4621      	mov	r1, r4
 8007a14:	4658      	mov	r0, fp
 8007a16:	f000 fc6d 	bl	80082f4 <__mdiff>
 8007a1a:	68c2      	ldr	r2, [r0, #12]
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	bb02      	cbnz	r2, 8007a62 <_dtoa_r+0xa22>
 8007a20:	4601      	mov	r1, r0
 8007a22:	4648      	mov	r0, r9
 8007a24:	f000 fc4a 	bl	80082bc <__mcmp>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a30:	f000 fa0c 	bl	8007e4c <_Bfree>
 8007a34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a38:	9e07      	ldr	r6, [sp, #28]
 8007a3a:	ea43 0102 	orr.w	r1, r3, r2
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a40:	4319      	orrs	r1, r3
 8007a42:	d110      	bne.n	8007a66 <_dtoa_r+0xa26>
 8007a44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a48:	d029      	beq.n	8007a9e <_dtoa_r+0xa5e>
 8007a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dd02      	ble.n	8007a56 <_dtoa_r+0xa16>
 8007a50:	9b08      	ldr	r3, [sp, #32]
 8007a52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	f883 8000 	strb.w	r8, [r3]
 8007a5c:	e63b      	b.n	80076d6 <_dtoa_r+0x696>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	e7bb      	b.n	80079da <_dtoa_r+0x99a>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e7e1      	b.n	8007a2a <_dtoa_r+0x9ea>
 8007a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db04      	blt.n	8007a76 <_dtoa_r+0xa36>
 8007a6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a72:	430b      	orrs	r3, r1
 8007a74:	d120      	bne.n	8007ab8 <_dtoa_r+0xa78>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	dded      	ble.n	8007a56 <_dtoa_r+0xa16>
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	4658      	mov	r0, fp
 8007a80:	f000 fbb0 	bl	80081e4 <__lshift>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4681      	mov	r9, r0
 8007a88:	f000 fc18 	bl	80082bc <__mcmp>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	dc03      	bgt.n	8007a98 <_dtoa_r+0xa58>
 8007a90:	d1e1      	bne.n	8007a56 <_dtoa_r+0xa16>
 8007a92:	f018 0f01 	tst.w	r8, #1
 8007a96:	d0de      	beq.n	8007a56 <_dtoa_r+0xa16>
 8007a98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a9c:	d1d8      	bne.n	8007a50 <_dtoa_r+0xa10>
 8007a9e:	2339      	movs	r3, #57	@ 0x39
 8007aa0:	9a02      	ldr	r2, [sp, #8]
 8007aa2:	7013      	strb	r3, [r2, #0]
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	461e      	mov	r6, r3
 8007aa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	2a39      	cmp	r2, #57	@ 0x39
 8007ab0:	d052      	beq.n	8007b58 <_dtoa_r+0xb18>
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e60e      	b.n	80076d6 <_dtoa_r+0x696>
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	dd07      	ble.n	8007acc <_dtoa_r+0xa8c>
 8007abc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ac0:	d0ed      	beq.n	8007a9e <_dtoa_r+0xa5e>
 8007ac2:	9a02      	ldr	r2, [sp, #8]
 8007ac4:	f108 0301 	add.w	r3, r8, #1
 8007ac8:	7013      	strb	r3, [r2, #0]
 8007aca:	e604      	b.n	80076d6 <_dtoa_r+0x696>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	9a07      	ldr	r2, [sp, #28]
 8007ad0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d028      	beq.n	8007b2c <_dtoa_r+0xaec>
 8007ada:	4649      	mov	r1, r9
 8007adc:	2300      	movs	r3, #0
 8007ade:	220a      	movs	r2, #10
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	f000 f9d5 	bl	8007e90 <__multadd>
 8007ae6:	42af      	cmp	r7, r5
 8007ae8:	4681      	mov	r9, r0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	f04f 020a 	mov.w	r2, #10
 8007af2:	4639      	mov	r1, r7
 8007af4:	4658      	mov	r0, fp
 8007af6:	d107      	bne.n	8007b08 <_dtoa_r+0xac8>
 8007af8:	f000 f9ca 	bl	8007e90 <__multadd>
 8007afc:	4607      	mov	r7, r0
 8007afe:	4605      	mov	r5, r0
 8007b00:	9b07      	ldr	r3, [sp, #28]
 8007b02:	3301      	adds	r3, #1
 8007b04:	9307      	str	r3, [sp, #28]
 8007b06:	e774      	b.n	80079f2 <_dtoa_r+0x9b2>
 8007b08:	f000 f9c2 	bl	8007e90 <__multadd>
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4607      	mov	r7, r0
 8007b10:	2300      	movs	r3, #0
 8007b12:	220a      	movs	r2, #10
 8007b14:	4658      	mov	r0, fp
 8007b16:	f000 f9bb 	bl	8007e90 <__multadd>
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	e7f0      	b.n	8007b00 <_dtoa_r+0xac0>
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	2700      	movs	r7, #0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfcc      	ite	gt
 8007b26:	461e      	movgt	r6, r3
 8007b28:	2601      	movle	r6, #1
 8007b2a:	4456      	add	r6, sl
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	2201      	movs	r2, #1
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fb57 	bl	80081e4 <__lshift>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4681      	mov	r9, r0
 8007b3a:	f000 fbbf 	bl	80082bc <__mcmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	dcb0      	bgt.n	8007aa4 <_dtoa_r+0xa64>
 8007b42:	d102      	bne.n	8007b4a <_dtoa_r+0xb0a>
 8007b44:	f018 0f01 	tst.w	r8, #1
 8007b48:	d1ac      	bne.n	8007aa4 <_dtoa_r+0xa64>
 8007b4a:	4633      	mov	r3, r6
 8007b4c:	461e      	mov	r6, r3
 8007b4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b52:	2a30      	cmp	r2, #48	@ 0x30
 8007b54:	d0fa      	beq.n	8007b4c <_dtoa_r+0xb0c>
 8007b56:	e5be      	b.n	80076d6 <_dtoa_r+0x696>
 8007b58:	459a      	cmp	sl, r3
 8007b5a:	d1a4      	bne.n	8007aa6 <_dtoa_r+0xa66>
 8007b5c:	9b04      	ldr	r3, [sp, #16]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	2331      	movs	r3, #49	@ 0x31
 8007b64:	f88a 3000 	strb.w	r3, [sl]
 8007b68:	e5b5      	b.n	80076d6 <_dtoa_r+0x696>
 8007b6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007bcc <_dtoa_r+0xb8c>
 8007b70:	b11b      	cbz	r3, 8007b7a <_dtoa_r+0xb3a>
 8007b72:	f10a 0308 	add.w	r3, sl, #8
 8007b76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	b017      	add	sp, #92	@ 0x5c
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	f77f ae3d 	ble.w	8007804 <_dtoa_r+0x7c4>
 8007b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e65b      	b.n	800784a <_dtoa_r+0x80a>
 8007b92:	9b08      	ldr	r3, [sp, #32]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f77f aed6 	ble.w	8007946 <_dtoa_r+0x906>
 8007b9a:	4656      	mov	r6, sl
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4648      	mov	r0, r9
 8007ba0:	f7ff f9c3 	bl	8006f2a <quorem>
 8007ba4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ba8:	9b08      	ldr	r3, [sp, #32]
 8007baa:	f806 8b01 	strb.w	r8, [r6], #1
 8007bae:	eba6 020a 	sub.w	r2, r6, sl
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	ddb3      	ble.n	8007b1e <_dtoa_r+0xade>
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	2300      	movs	r3, #0
 8007bba:	220a      	movs	r2, #10
 8007bbc:	4658      	mov	r0, fp
 8007bbe:	f000 f967 	bl	8007e90 <__multadd>
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	e7ea      	b.n	8007b9c <_dtoa_r+0xb5c>
 8007bc6:	bf00      	nop
 8007bc8:	08009a70 	.word	0x08009a70
 8007bcc:	080099f4 	.word	0x080099f4

08007bd0 <_free_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d040      	beq.n	8007c5a <_free_r+0x8a>
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f0c      	subs	r4, r1, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	18e4      	addlt	r4, r4, r3
 8007be4:	f000 f8e6 	bl	8007db4 <__malloc_lock>
 8007be8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c5c <_free_r+0x8c>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	b933      	cbnz	r3, 8007bfc <_free_r+0x2c>
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	6014      	str	r4, [r2, #0]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf8:	f000 b8e2 	b.w	8007dc0 <__malloc_unlock>
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d908      	bls.n	8007c12 <_free_r+0x42>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	1821      	adds	r1, r4, r0
 8007c04:	428b      	cmp	r3, r1
 8007c06:	bf01      	itttt	eq
 8007c08:	6819      	ldreq	r1, [r3, #0]
 8007c0a:	685b      	ldreq	r3, [r3, #4]
 8007c0c:	1809      	addeq	r1, r1, r0
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	e7ed      	b.n	8007bee <_free_r+0x1e>
 8007c12:	461a      	mov	r2, r3
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b10b      	cbz	r3, 8007c1c <_free_r+0x4c>
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	d9fa      	bls.n	8007c12 <_free_r+0x42>
 8007c1c:	6811      	ldr	r1, [r2, #0]
 8007c1e:	1850      	adds	r0, r2, r1
 8007c20:	42a0      	cmp	r0, r4
 8007c22:	d10b      	bne.n	8007c3c <_free_r+0x6c>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	4401      	add	r1, r0
 8007c28:	1850      	adds	r0, r2, r1
 8007c2a:	4283      	cmp	r3, r0
 8007c2c:	6011      	str	r1, [r2, #0]
 8007c2e:	d1e0      	bne.n	8007bf2 <_free_r+0x22>
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4408      	add	r0, r1
 8007c36:	6010      	str	r0, [r2, #0]
 8007c38:	6053      	str	r3, [r2, #4]
 8007c3a:	e7da      	b.n	8007bf2 <_free_r+0x22>
 8007c3c:	d902      	bls.n	8007c44 <_free_r+0x74>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	602b      	str	r3, [r5, #0]
 8007c42:	e7d6      	b.n	8007bf2 <_free_r+0x22>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	1821      	adds	r1, r4, r0
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	bf01      	itttt	eq
 8007c4c:	6819      	ldreq	r1, [r3, #0]
 8007c4e:	685b      	ldreq	r3, [r3, #4]
 8007c50:	1809      	addeq	r1, r1, r0
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	6054      	str	r4, [r2, #4]
 8007c58:	e7cb      	b.n	8007bf2 <_free_r+0x22>
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	200003e8 	.word	0x200003e8

08007c60 <malloc>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	@ (8007c6c <malloc+0xc>)
 8007c62:	4601      	mov	r1, r0
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f000 b825 	b.w	8007cb4 <_malloc_r>
 8007c6a:	bf00      	nop
 8007c6c:	20000018 	.word	0x20000018

08007c70 <sbrk_aligned>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb0 <sbrk_aligned+0x40>)
 8007c74:	460c      	mov	r4, r1
 8007c76:	6831      	ldr	r1, [r6, #0]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	b911      	cbnz	r1, 8007c82 <sbrk_aligned+0x12>
 8007c7c:	f000 fe40 	bl	8008900 <_sbrk_r>
 8007c80:	6030      	str	r0, [r6, #0]
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 fe3b 	bl	8008900 <_sbrk_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d103      	bne.n	8007c96 <sbrk_aligned+0x26>
 8007c8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007c92:	4620      	mov	r0, r4
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	1cc4      	adds	r4, r0, #3
 8007c98:	f024 0403 	bic.w	r4, r4, #3
 8007c9c:	42a0      	cmp	r0, r4
 8007c9e:	d0f8      	beq.n	8007c92 <sbrk_aligned+0x22>
 8007ca0:	1a21      	subs	r1, r4, r0
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 fe2c 	bl	8008900 <_sbrk_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d1f2      	bne.n	8007c92 <sbrk_aligned+0x22>
 8007cac:	e7ef      	b.n	8007c8e <sbrk_aligned+0x1e>
 8007cae:	bf00      	nop
 8007cb0:	200003e4 	.word	0x200003e4

08007cb4 <_malloc_r>:
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	1ccd      	adds	r5, r1, #3
 8007cba:	f025 0503 	bic.w	r5, r5, #3
 8007cbe:	3508      	adds	r5, #8
 8007cc0:	2d0c      	cmp	r5, #12
 8007cc2:	bf38      	it	cc
 8007cc4:	250c      	movcc	r5, #12
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	4606      	mov	r6, r0
 8007cca:	db01      	blt.n	8007cd0 <_malloc_r+0x1c>
 8007ccc:	42a9      	cmp	r1, r5
 8007cce:	d904      	bls.n	8007cda <_malloc_r+0x26>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db0 <_malloc_r+0xfc>
 8007cde:	f000 f869 	bl	8007db4 <__malloc_lock>
 8007ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce6:	461c      	mov	r4, r3
 8007ce8:	bb44      	cbnz	r4, 8007d3c <_malloc_r+0x88>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff ffbf 	bl	8007c70 <sbrk_aligned>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	d158      	bne.n	8007daa <_malloc_r+0xf6>
 8007cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8007cfc:	4627      	mov	r7, r4
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d143      	bne.n	8007d8a <_malloc_r+0xd6>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	d04b      	beq.n	8007d9e <_malloc_r+0xea>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	eb04 0903 	add.w	r9, r4, r3
 8007d10:	f000 fdf6 	bl	8008900 <_sbrk_r>
 8007d14:	4581      	cmp	r9, r0
 8007d16:	d142      	bne.n	8007d9e <_malloc_r+0xea>
 8007d18:	6821      	ldr	r1, [r4, #0]
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	1a6d      	subs	r5, r5, r1
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7ff ffa6 	bl	8007c70 <sbrk_aligned>
 8007d24:	3001      	adds	r0, #1
 8007d26:	d03a      	beq.n	8007d9e <_malloc_r+0xea>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	442b      	add	r3, r5
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	bb62      	cbnz	r2, 8007d90 <_malloc_r+0xdc>
 8007d36:	f8c8 7000 	str.w	r7, [r8]
 8007d3a:	e00f      	b.n	8007d5c <_malloc_r+0xa8>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	1b52      	subs	r2, r2, r5
 8007d40:	d420      	bmi.n	8007d84 <_malloc_r+0xd0>
 8007d42:	2a0b      	cmp	r2, #11
 8007d44:	d917      	bls.n	8007d76 <_malloc_r+0xc2>
 8007d46:	1961      	adds	r1, r4, r5
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	6025      	str	r5, [r4, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	6059      	strne	r1, [r3, #4]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	bf08      	it	eq
 8007d54:	f8c8 1000 	streq.w	r1, [r8]
 8007d58:	5162      	str	r2, [r4, r5]
 8007d5a:	604b      	str	r3, [r1, #4]
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f82f 	bl	8007dc0 <__malloc_unlock>
 8007d62:	f104 000b 	add.w	r0, r4, #11
 8007d66:	1d23      	adds	r3, r4, #4
 8007d68:	f020 0007 	bic.w	r0, r0, #7
 8007d6c:	1ac2      	subs	r2, r0, r3
 8007d6e:	bf1c      	itt	ne
 8007d70:	1a1b      	subne	r3, r3, r0
 8007d72:	50a3      	strne	r3, [r4, r2]
 8007d74:	e7af      	b.n	8007cd6 <_malloc_r+0x22>
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	bf0c      	ite	eq
 8007d7c:	f8c8 2000 	streq.w	r2, [r8]
 8007d80:	605a      	strne	r2, [r3, #4]
 8007d82:	e7eb      	b.n	8007d5c <_malloc_r+0xa8>
 8007d84:	4623      	mov	r3, r4
 8007d86:	6864      	ldr	r4, [r4, #4]
 8007d88:	e7ae      	b.n	8007ce8 <_malloc_r+0x34>
 8007d8a:	463c      	mov	r4, r7
 8007d8c:	687f      	ldr	r7, [r7, #4]
 8007d8e:	e7b6      	b.n	8007cfe <_malloc_r+0x4a>
 8007d90:	461a      	mov	r2, r3
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d1fb      	bne.n	8007d90 <_malloc_r+0xdc>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6053      	str	r3, [r2, #4]
 8007d9c:	e7de      	b.n	8007d5c <_malloc_r+0xa8>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	4630      	mov	r0, r6
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	f000 f80c 	bl	8007dc0 <__malloc_unlock>
 8007da8:	e794      	b.n	8007cd4 <_malloc_r+0x20>
 8007daa:	6005      	str	r5, [r0, #0]
 8007dac:	e7d6      	b.n	8007d5c <_malloc_r+0xa8>
 8007dae:	bf00      	nop
 8007db0:	200003e8 	.word	0x200003e8

08007db4 <__malloc_lock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__malloc_lock+0x8>)
 8007db6:	f7ff b8a8 	b.w	8006f0a <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	200003e0 	.word	0x200003e0

08007dc0 <__malloc_unlock>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	@ (8007dc8 <__malloc_unlock+0x8>)
 8007dc2:	f7ff b8a3 	b.w	8006f0c <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	200003e0 	.word	0x200003e0

08007dcc <_Balloc>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	69c6      	ldr	r6, [r0, #28]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	b976      	cbnz	r6, 8007df4 <_Balloc+0x28>
 8007dd6:	2010      	movs	r0, #16
 8007dd8:	f7ff ff42 	bl	8007c60 <malloc>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	61e0      	str	r0, [r4, #28]
 8007de0:	b920      	cbnz	r0, 8007dec <_Balloc+0x20>
 8007de2:	216b      	movs	r1, #107	@ 0x6b
 8007de4:	4b17      	ldr	r3, [pc, #92]	@ (8007e44 <_Balloc+0x78>)
 8007de6:	4818      	ldr	r0, [pc, #96]	@ (8007e48 <_Balloc+0x7c>)
 8007de8:	f000 fda8 	bl	800893c <__assert_func>
 8007dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df0:	6006      	str	r6, [r0, #0]
 8007df2:	60c6      	str	r6, [r0, #12]
 8007df4:	69e6      	ldr	r6, [r4, #28]
 8007df6:	68f3      	ldr	r3, [r6, #12]
 8007df8:	b183      	cbz	r3, 8007e1c <_Balloc+0x50>
 8007dfa:	69e3      	ldr	r3, [r4, #28]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e02:	b9b8      	cbnz	r0, 8007e34 <_Balloc+0x68>
 8007e04:	2101      	movs	r1, #1
 8007e06:	fa01 f605 	lsl.w	r6, r1, r5
 8007e0a:	1d72      	adds	r2, r6, #5
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	0092      	lsls	r2, r2, #2
 8007e10:	f000 fdb2 	bl	8008978 <_calloc_r>
 8007e14:	b160      	cbz	r0, 8007e30 <_Balloc+0x64>
 8007e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e1a:	e00e      	b.n	8007e3a <_Balloc+0x6e>
 8007e1c:	2221      	movs	r2, #33	@ 0x21
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fda9 	bl	8008978 <_calloc_r>
 8007e26:	69e3      	ldr	r3, [r4, #28]
 8007e28:	60f0      	str	r0, [r6, #12]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e4      	bne.n	8007dfa <_Balloc+0x2e>
 8007e30:	2000      	movs	r0, #0
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	6802      	ldr	r2, [r0, #0]
 8007e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e40:	e7f7      	b.n	8007e32 <_Balloc+0x66>
 8007e42:	bf00      	nop
 8007e44:	08009a01 	.word	0x08009a01
 8007e48:	08009a81 	.word	0x08009a81

08007e4c <_Bfree>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	69c6      	ldr	r6, [r0, #28]
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b976      	cbnz	r6, 8007e74 <_Bfree+0x28>
 8007e56:	2010      	movs	r0, #16
 8007e58:	f7ff ff02 	bl	8007c60 <malloc>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	61e8      	str	r0, [r5, #28]
 8007e60:	b920      	cbnz	r0, 8007e6c <_Bfree+0x20>
 8007e62:	218f      	movs	r1, #143	@ 0x8f
 8007e64:	4b08      	ldr	r3, [pc, #32]	@ (8007e88 <_Bfree+0x3c>)
 8007e66:	4809      	ldr	r0, [pc, #36]	@ (8007e8c <_Bfree+0x40>)
 8007e68:	f000 fd68 	bl	800893c <__assert_func>
 8007e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e70:	6006      	str	r6, [r0, #0]
 8007e72:	60c6      	str	r6, [r0, #12]
 8007e74:	b13c      	cbz	r4, 8007e86 <_Bfree+0x3a>
 8007e76:	69eb      	ldr	r3, [r5, #28]
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e80:	6021      	str	r1, [r4, #0]
 8007e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	08009a01 	.word	0x08009a01
 8007e8c:	08009a81 	.word	0x08009a81

08007e90 <__multadd>:
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	4607      	mov	r7, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	461e      	mov	r6, r3
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	690d      	ldr	r5, [r1, #16]
 8007e9e:	f101 0c14 	add.w	ip, r1, #20
 8007ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	b299      	uxth	r1, r3
 8007eaa:	fb02 6101 	mla	r1, r2, r1, r6
 8007eae:	0c1e      	lsrs	r6, r3, #16
 8007eb0:	0c0b      	lsrs	r3, r1, #16
 8007eb2:	fb02 3306 	mla	r3, r2, r6, r3
 8007eb6:	b289      	uxth	r1, r1
 8007eb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ebc:	4285      	cmp	r5, r0
 8007ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ec6:	dcec      	bgt.n	8007ea2 <__multadd+0x12>
 8007ec8:	b30e      	cbz	r6, 8007f0e <__multadd+0x7e>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dc19      	bgt.n	8007f04 <__multadd+0x74>
 8007ed0:	6861      	ldr	r1, [r4, #4]
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	f7ff ff79 	bl	8007dcc <_Balloc>
 8007eda:	4680      	mov	r8, r0
 8007edc:	b928      	cbnz	r0, 8007eea <__multadd+0x5a>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	21ba      	movs	r1, #186	@ 0xba
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <__multadd+0x84>)
 8007ee4:	480c      	ldr	r0, [pc, #48]	@ (8007f18 <__multadd+0x88>)
 8007ee6:	f000 fd29 	bl	800893c <__assert_func>
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	f104 010c 	add.w	r1, r4, #12
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	300c      	adds	r0, #12
 8007ef6:	f000 fd13 	bl	8008920 <memcpy>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ffa5 	bl	8007e4c <_Bfree>
 8007f02:	4644      	mov	r4, r8
 8007f04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f08:	3501      	adds	r5, #1
 8007f0a:	615e      	str	r6, [r3, #20]
 8007f0c:	6125      	str	r5, [r4, #16]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	08009a70 	.word	0x08009a70
 8007f18:	08009a81 	.word	0x08009a81

08007f1c <__hi0bits>:
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f22:	bf3a      	itte	cc
 8007f24:	0403      	lslcc	r3, r0, #16
 8007f26:	2010      	movcc	r0, #16
 8007f28:	2000      	movcs	r0, #0
 8007f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f2e:	bf3c      	itt	cc
 8007f30:	021b      	lslcc	r3, r3, #8
 8007f32:	3008      	addcc	r0, #8
 8007f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f38:	bf3c      	itt	cc
 8007f3a:	011b      	lslcc	r3, r3, #4
 8007f3c:	3004      	addcc	r0, #4
 8007f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f42:	bf3c      	itt	cc
 8007f44:	009b      	lslcc	r3, r3, #2
 8007f46:	3002      	addcc	r0, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db05      	blt.n	8007f58 <__hi0bits+0x3c>
 8007f4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f50:	f100 0001 	add.w	r0, r0, #1
 8007f54:	bf08      	it	eq
 8007f56:	2020      	moveq	r0, #32
 8007f58:	4770      	bx	lr

08007f5a <__lo0bits>:
 8007f5a:	6803      	ldr	r3, [r0, #0]
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f013 0007 	ands.w	r0, r3, #7
 8007f62:	d00b      	beq.n	8007f7c <__lo0bits+0x22>
 8007f64:	07d9      	lsls	r1, r3, #31
 8007f66:	d421      	bmi.n	8007fac <__lo0bits+0x52>
 8007f68:	0798      	lsls	r0, r3, #30
 8007f6a:	bf49      	itett	mi
 8007f6c:	085b      	lsrmi	r3, r3, #1
 8007f6e:	089b      	lsrpl	r3, r3, #2
 8007f70:	2001      	movmi	r0, #1
 8007f72:	6013      	strmi	r3, [r2, #0]
 8007f74:	bf5c      	itt	pl
 8007f76:	2002      	movpl	r0, #2
 8007f78:	6013      	strpl	r3, [r2, #0]
 8007f7a:	4770      	bx	lr
 8007f7c:	b299      	uxth	r1, r3
 8007f7e:	b909      	cbnz	r1, 8007f84 <__lo0bits+0x2a>
 8007f80:	2010      	movs	r0, #16
 8007f82:	0c1b      	lsrs	r3, r3, #16
 8007f84:	b2d9      	uxtb	r1, r3
 8007f86:	b909      	cbnz	r1, 8007f8c <__lo0bits+0x32>
 8007f88:	3008      	adds	r0, #8
 8007f8a:	0a1b      	lsrs	r3, r3, #8
 8007f8c:	0719      	lsls	r1, r3, #28
 8007f8e:	bf04      	itt	eq
 8007f90:	091b      	lsreq	r3, r3, #4
 8007f92:	3004      	addeq	r0, #4
 8007f94:	0799      	lsls	r1, r3, #30
 8007f96:	bf04      	itt	eq
 8007f98:	089b      	lsreq	r3, r3, #2
 8007f9a:	3002      	addeq	r0, #2
 8007f9c:	07d9      	lsls	r1, r3, #31
 8007f9e:	d403      	bmi.n	8007fa8 <__lo0bits+0x4e>
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	f100 0001 	add.w	r0, r0, #1
 8007fa6:	d003      	beq.n	8007fb0 <__lo0bits+0x56>
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	4770      	bx	lr
 8007fac:	2000      	movs	r0, #0
 8007fae:	4770      	bx	lr
 8007fb0:	2020      	movs	r0, #32
 8007fb2:	4770      	bx	lr

08007fb4 <__i2b>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	2101      	movs	r1, #1
 8007fba:	f7ff ff07 	bl	8007dcc <_Balloc>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	b928      	cbnz	r0, 8007fce <__i2b+0x1a>
 8007fc2:	f240 1145 	movw	r1, #325	@ 0x145
 8007fc6:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__i2b+0x24>)
 8007fc8:	4804      	ldr	r0, [pc, #16]	@ (8007fdc <__i2b+0x28>)
 8007fca:	f000 fcb7 	bl	800893c <__assert_func>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	6144      	str	r4, [r0, #20]
 8007fd2:	6103      	str	r3, [r0, #16]
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08009a70 	.word	0x08009a70
 8007fdc:	08009a81 	.word	0x08009a81

08007fe0 <__multiply>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	690a      	ldr	r2, [r1, #16]
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	460f      	mov	r7, r1
 8007fec:	429a      	cmp	r2, r3
 8007fee:	bfa2      	ittt	ge
 8007ff0:	4623      	movge	r3, r4
 8007ff2:	460c      	movge	r4, r1
 8007ff4:	461f      	movge	r7, r3
 8007ff6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ffa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	6861      	ldr	r1, [r4, #4]
 8008002:	eb0a 0609 	add.w	r6, sl, r9
 8008006:	42b3      	cmp	r3, r6
 8008008:	b085      	sub	sp, #20
 800800a:	bfb8      	it	lt
 800800c:	3101      	addlt	r1, #1
 800800e:	f7ff fedd 	bl	8007dcc <_Balloc>
 8008012:	b930      	cbnz	r0, 8008022 <__multiply+0x42>
 8008014:	4602      	mov	r2, r0
 8008016:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800801a:	4b43      	ldr	r3, [pc, #268]	@ (8008128 <__multiply+0x148>)
 800801c:	4843      	ldr	r0, [pc, #268]	@ (800812c <__multiply+0x14c>)
 800801e:	f000 fc8d 	bl	800893c <__assert_func>
 8008022:	f100 0514 	add.w	r5, r0, #20
 8008026:	462b      	mov	r3, r5
 8008028:	2200      	movs	r2, #0
 800802a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800802e:	4543      	cmp	r3, r8
 8008030:	d321      	bcc.n	8008076 <__multiply+0x96>
 8008032:	f107 0114 	add.w	r1, r7, #20
 8008036:	f104 0214 	add.w	r2, r4, #20
 800803a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800803e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	1b13      	subs	r3, r2, r4
 8008046:	3b15      	subs	r3, #21
 8008048:	f023 0303 	bic.w	r3, r3, #3
 800804c:	3304      	adds	r3, #4
 800804e:	f104 0715 	add.w	r7, r4, #21
 8008052:	42ba      	cmp	r2, r7
 8008054:	bf38      	it	cc
 8008056:	2304      	movcc	r3, #4
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	9103      	str	r1, [sp, #12]
 800805e:	428b      	cmp	r3, r1
 8008060:	d80c      	bhi.n	800807c <__multiply+0x9c>
 8008062:	2e00      	cmp	r6, #0
 8008064:	dd03      	ble.n	800806e <__multiply+0x8e>
 8008066:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800806a:	2b00      	cmp	r3, #0
 800806c:	d05a      	beq.n	8008124 <__multiply+0x144>
 800806e:	6106      	str	r6, [r0, #16]
 8008070:	b005      	add	sp, #20
 8008072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008076:	f843 2b04 	str.w	r2, [r3], #4
 800807a:	e7d8      	b.n	800802e <__multiply+0x4e>
 800807c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	d023      	beq.n	80080ce <__multiply+0xee>
 8008086:	46a9      	mov	r9, r5
 8008088:	f04f 0c00 	mov.w	ip, #0
 800808c:	f104 0e14 	add.w	lr, r4, #20
 8008090:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008094:	f8d9 3000 	ldr.w	r3, [r9]
 8008098:	fa1f fb87 	uxth.w	fp, r7
 800809c:	b29b      	uxth	r3, r3
 800809e:	fb0a 330b 	mla	r3, sl, fp, r3
 80080a2:	4463      	add	r3, ip
 80080a4:	f8d9 c000 	ldr.w	ip, [r9]
 80080a8:	0c3f      	lsrs	r7, r7, #16
 80080aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080ae:	fb0a c707 	mla	r7, sl, r7, ip
 80080b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080bc:	4572      	cmp	r2, lr
 80080be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80080c2:	f849 3b04 	str.w	r3, [r9], #4
 80080c6:	d8e3      	bhi.n	8008090 <__multiply+0xb0>
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	f845 c003 	str.w	ip, [r5, r3]
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	3104      	adds	r1, #4
 80080d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80080d6:	f1b9 0f00 	cmp.w	r9, #0
 80080da:	d021      	beq.n	8008120 <__multiply+0x140>
 80080dc:	46ae      	mov	lr, r5
 80080de:	f04f 0a00 	mov.w	sl, #0
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	f104 0c14 	add.w	ip, r4, #20
 80080e8:	f8bc b000 	ldrh.w	fp, [ip]
 80080ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	fb09 770b 	mla	r7, r9, fp, r7
 80080f6:	4457      	add	r7, sl
 80080f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080fc:	f84e 3b04 	str.w	r3, [lr], #4
 8008100:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008108:	f8be 3000 	ldrh.w	r3, [lr]
 800810c:	4562      	cmp	r2, ip
 800810e:	fb09 330a 	mla	r3, r9, sl, r3
 8008112:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800811a:	d8e5      	bhi.n	80080e8 <__multiply+0x108>
 800811c:	9f01      	ldr	r7, [sp, #4]
 800811e:	51eb      	str	r3, [r5, r7]
 8008120:	3504      	adds	r5, #4
 8008122:	e79a      	b.n	800805a <__multiply+0x7a>
 8008124:	3e01      	subs	r6, #1
 8008126:	e79c      	b.n	8008062 <__multiply+0x82>
 8008128:	08009a70 	.word	0x08009a70
 800812c:	08009a81 	.word	0x08009a81

08008130 <__pow5mult>:
 8008130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008134:	4615      	mov	r5, r2
 8008136:	f012 0203 	ands.w	r2, r2, #3
 800813a:	4607      	mov	r7, r0
 800813c:	460e      	mov	r6, r1
 800813e:	d007      	beq.n	8008150 <__pow5mult+0x20>
 8008140:	4c25      	ldr	r4, [pc, #148]	@ (80081d8 <__pow5mult+0xa8>)
 8008142:	3a01      	subs	r2, #1
 8008144:	2300      	movs	r3, #0
 8008146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800814a:	f7ff fea1 	bl	8007e90 <__multadd>
 800814e:	4606      	mov	r6, r0
 8008150:	10ad      	asrs	r5, r5, #2
 8008152:	d03d      	beq.n	80081d0 <__pow5mult+0xa0>
 8008154:	69fc      	ldr	r4, [r7, #28]
 8008156:	b97c      	cbnz	r4, 8008178 <__pow5mult+0x48>
 8008158:	2010      	movs	r0, #16
 800815a:	f7ff fd81 	bl	8007c60 <malloc>
 800815e:	4602      	mov	r2, r0
 8008160:	61f8      	str	r0, [r7, #28]
 8008162:	b928      	cbnz	r0, 8008170 <__pow5mult+0x40>
 8008164:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008168:	4b1c      	ldr	r3, [pc, #112]	@ (80081dc <__pow5mult+0xac>)
 800816a:	481d      	ldr	r0, [pc, #116]	@ (80081e0 <__pow5mult+0xb0>)
 800816c:	f000 fbe6 	bl	800893c <__assert_func>
 8008170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008174:	6004      	str	r4, [r0, #0]
 8008176:	60c4      	str	r4, [r0, #12]
 8008178:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800817c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008180:	b94c      	cbnz	r4, 8008196 <__pow5mult+0x66>
 8008182:	f240 2171 	movw	r1, #625	@ 0x271
 8008186:	4638      	mov	r0, r7
 8008188:	f7ff ff14 	bl	8007fb4 <__i2b>
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	f8c8 0008 	str.w	r0, [r8, #8]
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	f04f 0900 	mov.w	r9, #0
 800819a:	07eb      	lsls	r3, r5, #31
 800819c:	d50a      	bpl.n	80081b4 <__pow5mult+0x84>
 800819e:	4631      	mov	r1, r6
 80081a0:	4622      	mov	r2, r4
 80081a2:	4638      	mov	r0, r7
 80081a4:	f7ff ff1c 	bl	8007fe0 <__multiply>
 80081a8:	4680      	mov	r8, r0
 80081aa:	4631      	mov	r1, r6
 80081ac:	4638      	mov	r0, r7
 80081ae:	f7ff fe4d 	bl	8007e4c <_Bfree>
 80081b2:	4646      	mov	r6, r8
 80081b4:	106d      	asrs	r5, r5, #1
 80081b6:	d00b      	beq.n	80081d0 <__pow5mult+0xa0>
 80081b8:	6820      	ldr	r0, [r4, #0]
 80081ba:	b938      	cbnz	r0, 80081cc <__pow5mult+0x9c>
 80081bc:	4622      	mov	r2, r4
 80081be:	4621      	mov	r1, r4
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff ff0d 	bl	8007fe0 <__multiply>
 80081c6:	6020      	str	r0, [r4, #0]
 80081c8:	f8c0 9000 	str.w	r9, [r0]
 80081cc:	4604      	mov	r4, r0
 80081ce:	e7e4      	b.n	800819a <__pow5mult+0x6a>
 80081d0:	4630      	mov	r0, r6
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	bf00      	nop
 80081d8:	08009adc 	.word	0x08009adc
 80081dc:	08009a01 	.word	0x08009a01
 80081e0:	08009a81 	.word	0x08009a81

080081e4 <__lshift>:
 80081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	460c      	mov	r4, r1
 80081ea:	4607      	mov	r7, r0
 80081ec:	4691      	mov	r9, r2
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	6849      	ldr	r1, [r1, #4]
 80081f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081fc:	f108 0601 	add.w	r6, r8, #1
 8008200:	42b3      	cmp	r3, r6
 8008202:	db0b      	blt.n	800821c <__lshift+0x38>
 8008204:	4638      	mov	r0, r7
 8008206:	f7ff fde1 	bl	8007dcc <_Balloc>
 800820a:	4605      	mov	r5, r0
 800820c:	b948      	cbnz	r0, 8008222 <__lshift+0x3e>
 800820e:	4602      	mov	r2, r0
 8008210:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008214:	4b27      	ldr	r3, [pc, #156]	@ (80082b4 <__lshift+0xd0>)
 8008216:	4828      	ldr	r0, [pc, #160]	@ (80082b8 <__lshift+0xd4>)
 8008218:	f000 fb90 	bl	800893c <__assert_func>
 800821c:	3101      	adds	r1, #1
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	e7ee      	b.n	8008200 <__lshift+0x1c>
 8008222:	2300      	movs	r3, #0
 8008224:	f100 0114 	add.w	r1, r0, #20
 8008228:	f100 0210 	add.w	r2, r0, #16
 800822c:	4618      	mov	r0, r3
 800822e:	4553      	cmp	r3, sl
 8008230:	db33      	blt.n	800829a <__lshift+0xb6>
 8008232:	6920      	ldr	r0, [r4, #16]
 8008234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008238:	f104 0314 	add.w	r3, r4, #20
 800823c:	f019 091f 	ands.w	r9, r9, #31
 8008240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008248:	d02b      	beq.n	80082a2 <__lshift+0xbe>
 800824a:	468a      	mov	sl, r1
 800824c:	2200      	movs	r2, #0
 800824e:	f1c9 0e20 	rsb	lr, r9, #32
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	fa00 f009 	lsl.w	r0, r0, r9
 8008258:	4310      	orrs	r0, r2
 800825a:	f84a 0b04 	str.w	r0, [sl], #4
 800825e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008262:	459c      	cmp	ip, r3
 8008264:	fa22 f20e 	lsr.w	r2, r2, lr
 8008268:	d8f3      	bhi.n	8008252 <__lshift+0x6e>
 800826a:	ebac 0304 	sub.w	r3, ip, r4
 800826e:	3b15      	subs	r3, #21
 8008270:	f023 0303 	bic.w	r3, r3, #3
 8008274:	3304      	adds	r3, #4
 8008276:	f104 0015 	add.w	r0, r4, #21
 800827a:	4584      	cmp	ip, r0
 800827c:	bf38      	it	cc
 800827e:	2304      	movcc	r3, #4
 8008280:	50ca      	str	r2, [r1, r3]
 8008282:	b10a      	cbz	r2, 8008288 <__lshift+0xa4>
 8008284:	f108 0602 	add.w	r6, r8, #2
 8008288:	3e01      	subs	r6, #1
 800828a:	4638      	mov	r0, r7
 800828c:	4621      	mov	r1, r4
 800828e:	612e      	str	r6, [r5, #16]
 8008290:	f7ff fddc 	bl	8007e4c <_Bfree>
 8008294:	4628      	mov	r0, r5
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	f842 0f04 	str.w	r0, [r2, #4]!
 800829e:	3301      	adds	r3, #1
 80082a0:	e7c5      	b.n	800822e <__lshift+0x4a>
 80082a2:	3904      	subs	r1, #4
 80082a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a8:	459c      	cmp	ip, r3
 80082aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ae:	d8f9      	bhi.n	80082a4 <__lshift+0xc0>
 80082b0:	e7ea      	b.n	8008288 <__lshift+0xa4>
 80082b2:	bf00      	nop
 80082b4:	08009a70 	.word	0x08009a70
 80082b8:	08009a81 	.word	0x08009a81

080082bc <__mcmp>:
 80082bc:	4603      	mov	r3, r0
 80082be:	690a      	ldr	r2, [r1, #16]
 80082c0:	6900      	ldr	r0, [r0, #16]
 80082c2:	b530      	push	{r4, r5, lr}
 80082c4:	1a80      	subs	r0, r0, r2
 80082c6:	d10e      	bne.n	80082e6 <__mcmp+0x2a>
 80082c8:	3314      	adds	r3, #20
 80082ca:	3114      	adds	r1, #20
 80082cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082dc:	4295      	cmp	r5, r2
 80082de:	d003      	beq.n	80082e8 <__mcmp+0x2c>
 80082e0:	d205      	bcs.n	80082ee <__mcmp+0x32>
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	d3f3      	bcc.n	80082d4 <__mcmp+0x18>
 80082ec:	e7fb      	b.n	80082e6 <__mcmp+0x2a>
 80082ee:	2001      	movs	r0, #1
 80082f0:	e7f9      	b.n	80082e6 <__mcmp+0x2a>
	...

080082f4 <__mdiff>:
 80082f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	4689      	mov	r9, r1
 80082fa:	4606      	mov	r6, r0
 80082fc:	4611      	mov	r1, r2
 80082fe:	4648      	mov	r0, r9
 8008300:	4614      	mov	r4, r2
 8008302:	f7ff ffdb 	bl	80082bc <__mcmp>
 8008306:	1e05      	subs	r5, r0, #0
 8008308:	d112      	bne.n	8008330 <__mdiff+0x3c>
 800830a:	4629      	mov	r1, r5
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff fd5d 	bl	8007dcc <_Balloc>
 8008312:	4602      	mov	r2, r0
 8008314:	b928      	cbnz	r0, 8008322 <__mdiff+0x2e>
 8008316:	f240 2137 	movw	r1, #567	@ 0x237
 800831a:	4b3e      	ldr	r3, [pc, #248]	@ (8008414 <__mdiff+0x120>)
 800831c:	483e      	ldr	r0, [pc, #248]	@ (8008418 <__mdiff+0x124>)
 800831e:	f000 fb0d 	bl	800893c <__assert_func>
 8008322:	2301      	movs	r3, #1
 8008324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008328:	4610      	mov	r0, r2
 800832a:	b003      	add	sp, #12
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	bfbc      	itt	lt
 8008332:	464b      	movlt	r3, r9
 8008334:	46a1      	movlt	r9, r4
 8008336:	4630      	mov	r0, r6
 8008338:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800833c:	bfba      	itte	lt
 800833e:	461c      	movlt	r4, r3
 8008340:	2501      	movlt	r5, #1
 8008342:	2500      	movge	r5, #0
 8008344:	f7ff fd42 	bl	8007dcc <_Balloc>
 8008348:	4602      	mov	r2, r0
 800834a:	b918      	cbnz	r0, 8008354 <__mdiff+0x60>
 800834c:	f240 2145 	movw	r1, #581	@ 0x245
 8008350:	4b30      	ldr	r3, [pc, #192]	@ (8008414 <__mdiff+0x120>)
 8008352:	e7e3      	b.n	800831c <__mdiff+0x28>
 8008354:	f100 0b14 	add.w	fp, r0, #20
 8008358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800835c:	f109 0310 	add.w	r3, r9, #16
 8008360:	60c5      	str	r5, [r0, #12]
 8008362:	f04f 0c00 	mov.w	ip, #0
 8008366:	f109 0514 	add.w	r5, r9, #20
 800836a:	46d9      	mov	r9, fp
 800836c:	6926      	ldr	r6, [r4, #16]
 800836e:	f104 0e14 	add.w	lr, r4, #20
 8008372:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008376:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008382:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008386:	b281      	uxth	r1, r0
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	fa1f f38a 	uxth.w	r3, sl
 800838e:	1a5b      	subs	r3, r3, r1
 8008390:	0c00      	lsrs	r0, r0, #16
 8008392:	4463      	add	r3, ip
 8008394:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008398:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083a2:	4576      	cmp	r6, lr
 80083a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083a8:	f849 3b04 	str.w	r3, [r9], #4
 80083ac:	d8e6      	bhi.n	800837c <__mdiff+0x88>
 80083ae:	1b33      	subs	r3, r6, r4
 80083b0:	3b15      	subs	r3, #21
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	3415      	adds	r4, #21
 80083b8:	3304      	adds	r3, #4
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	bf38      	it	cc
 80083be:	2304      	movcc	r3, #4
 80083c0:	441d      	add	r5, r3
 80083c2:	445b      	add	r3, fp
 80083c4:	461e      	mov	r6, r3
 80083c6:	462c      	mov	r4, r5
 80083c8:	4544      	cmp	r4, r8
 80083ca:	d30e      	bcc.n	80083ea <__mdiff+0xf6>
 80083cc:	f108 0103 	add.w	r1, r8, #3
 80083d0:	1b49      	subs	r1, r1, r5
 80083d2:	f021 0103 	bic.w	r1, r1, #3
 80083d6:	3d03      	subs	r5, #3
 80083d8:	45a8      	cmp	r8, r5
 80083da:	bf38      	it	cc
 80083dc:	2100      	movcc	r1, #0
 80083de:	440b      	add	r3, r1
 80083e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083e4:	b199      	cbz	r1, 800840e <__mdiff+0x11a>
 80083e6:	6117      	str	r7, [r2, #16]
 80083e8:	e79e      	b.n	8008328 <__mdiff+0x34>
 80083ea:	46e6      	mov	lr, ip
 80083ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80083f0:	fa1f fc81 	uxth.w	ip, r1
 80083f4:	44f4      	add	ip, lr
 80083f6:	0c08      	lsrs	r0, r1, #16
 80083f8:	4471      	add	r1, lr
 80083fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083fe:	b289      	uxth	r1, r1
 8008400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008404:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008408:	f846 1b04 	str.w	r1, [r6], #4
 800840c:	e7dc      	b.n	80083c8 <__mdiff+0xd4>
 800840e:	3f01      	subs	r7, #1
 8008410:	e7e6      	b.n	80083e0 <__mdiff+0xec>
 8008412:	bf00      	nop
 8008414:	08009a70 	.word	0x08009a70
 8008418:	08009a81 	.word	0x08009a81

0800841c <__d2b>:
 800841c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008420:	2101      	movs	r1, #1
 8008422:	4690      	mov	r8, r2
 8008424:	4699      	mov	r9, r3
 8008426:	9e08      	ldr	r6, [sp, #32]
 8008428:	f7ff fcd0 	bl	8007dcc <_Balloc>
 800842c:	4604      	mov	r4, r0
 800842e:	b930      	cbnz	r0, 800843e <__d2b+0x22>
 8008430:	4602      	mov	r2, r0
 8008432:	f240 310f 	movw	r1, #783	@ 0x30f
 8008436:	4b23      	ldr	r3, [pc, #140]	@ (80084c4 <__d2b+0xa8>)
 8008438:	4823      	ldr	r0, [pc, #140]	@ (80084c8 <__d2b+0xac>)
 800843a:	f000 fa7f 	bl	800893c <__assert_func>
 800843e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008442:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008446:	b10d      	cbz	r5, 800844c <__d2b+0x30>
 8008448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f1b8 0300 	subs.w	r3, r8, #0
 8008452:	d024      	beq.n	800849e <__d2b+0x82>
 8008454:	4668      	mov	r0, sp
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	f7ff fd7f 	bl	8007f5a <__lo0bits>
 800845c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008460:	b1d8      	cbz	r0, 800849a <__d2b+0x7e>
 8008462:	f1c0 0320 	rsb	r3, r0, #32
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	430b      	orrs	r3, r1
 800846c:	40c2      	lsrs	r2, r0
 800846e:	6163      	str	r3, [r4, #20]
 8008470:	9201      	str	r2, [sp, #4]
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf0c      	ite	eq
 8008478:	2201      	moveq	r2, #1
 800847a:	2202      	movne	r2, #2
 800847c:	61a3      	str	r3, [r4, #24]
 800847e:	6122      	str	r2, [r4, #16]
 8008480:	b1ad      	cbz	r5, 80084ae <__d2b+0x92>
 8008482:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008486:	4405      	add	r5, r0
 8008488:	6035      	str	r5, [r6, #0]
 800848a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800848e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	4620      	mov	r0, r4
 8008494:	b002      	add	sp, #8
 8008496:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800849a:	6161      	str	r1, [r4, #20]
 800849c:	e7e9      	b.n	8008472 <__d2b+0x56>
 800849e:	a801      	add	r0, sp, #4
 80084a0:	f7ff fd5b 	bl	8007f5a <__lo0bits>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	6163      	str	r3, [r4, #20]
 80084aa:	3020      	adds	r0, #32
 80084ac:	e7e7      	b.n	800847e <__d2b+0x62>
 80084ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084b6:	6030      	str	r0, [r6, #0]
 80084b8:	6918      	ldr	r0, [r3, #16]
 80084ba:	f7ff fd2f 	bl	8007f1c <__hi0bits>
 80084be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084c2:	e7e4      	b.n	800848e <__d2b+0x72>
 80084c4:	08009a70 	.word	0x08009a70
 80084c8:	08009a81 	.word	0x08009a81

080084cc <__ssputs_r>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	461f      	mov	r7, r3
 80084d2:	688e      	ldr	r6, [r1, #8]
 80084d4:	4682      	mov	sl, r0
 80084d6:	42be      	cmp	r6, r7
 80084d8:	460c      	mov	r4, r1
 80084da:	4690      	mov	r8, r2
 80084dc:	680b      	ldr	r3, [r1, #0]
 80084de:	d82d      	bhi.n	800853c <__ssputs_r+0x70>
 80084e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e8:	d026      	beq.n	8008538 <__ssputs_r+0x6c>
 80084ea:	6965      	ldr	r5, [r4, #20]
 80084ec:	6909      	ldr	r1, [r1, #16]
 80084ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f2:	eba3 0901 	sub.w	r9, r3, r1
 80084f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084fa:	1c7b      	adds	r3, r7, #1
 80084fc:	444b      	add	r3, r9
 80084fe:	106d      	asrs	r5, r5, #1
 8008500:	429d      	cmp	r5, r3
 8008502:	bf38      	it	cc
 8008504:	461d      	movcc	r5, r3
 8008506:	0553      	lsls	r3, r2, #21
 8008508:	d527      	bpl.n	800855a <__ssputs_r+0x8e>
 800850a:	4629      	mov	r1, r5
 800850c:	f7ff fbd2 	bl	8007cb4 <_malloc_r>
 8008510:	4606      	mov	r6, r0
 8008512:	b360      	cbz	r0, 800856e <__ssputs_r+0xa2>
 8008514:	464a      	mov	r2, r9
 8008516:	6921      	ldr	r1, [r4, #16]
 8008518:	f000 fa02 	bl	8008920 <memcpy>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	6126      	str	r6, [r4, #16]
 800852a:	444e      	add	r6, r9
 800852c:	6026      	str	r6, [r4, #0]
 800852e:	463e      	mov	r6, r7
 8008530:	6165      	str	r5, [r4, #20]
 8008532:	eba5 0509 	sub.w	r5, r5, r9
 8008536:	60a5      	str	r5, [r4, #8]
 8008538:	42be      	cmp	r6, r7
 800853a:	d900      	bls.n	800853e <__ssputs_r+0x72>
 800853c:	463e      	mov	r6, r7
 800853e:	4632      	mov	r2, r6
 8008540:	4641      	mov	r1, r8
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	f000 f9c2 	bl	80088cc <memmove>
 8008548:	2000      	movs	r0, #0
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	60a3      	str	r3, [r4, #8]
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	4433      	add	r3, r6
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855a:	462a      	mov	r2, r5
 800855c:	f000 fa32 	bl	80089c4 <_realloc_r>
 8008560:	4606      	mov	r6, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d1e0      	bne.n	8008528 <__ssputs_r+0x5c>
 8008566:	4650      	mov	r0, sl
 8008568:	6921      	ldr	r1, [r4, #16]
 800856a:	f7ff fb31 	bl	8007bd0 <_free_r>
 800856e:	230c      	movs	r3, #12
 8008570:	f8ca 3000 	str.w	r3, [sl]
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800857a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	e7e9      	b.n	8008556 <__ssputs_r+0x8a>
	...

08008584 <_svfiprintf_r>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4698      	mov	r8, r3
 800858a:	898b      	ldrh	r3, [r1, #12]
 800858c:	4607      	mov	r7, r0
 800858e:	061b      	lsls	r3, r3, #24
 8008590:	460d      	mov	r5, r1
 8008592:	4614      	mov	r4, r2
 8008594:	b09d      	sub	sp, #116	@ 0x74
 8008596:	d510      	bpl.n	80085ba <_svfiprintf_r+0x36>
 8008598:	690b      	ldr	r3, [r1, #16]
 800859a:	b973      	cbnz	r3, 80085ba <_svfiprintf_r+0x36>
 800859c:	2140      	movs	r1, #64	@ 0x40
 800859e:	f7ff fb89 	bl	8007cb4 <_malloc_r>
 80085a2:	6028      	str	r0, [r5, #0]
 80085a4:	6128      	str	r0, [r5, #16]
 80085a6:	b930      	cbnz	r0, 80085b6 <_svfiprintf_r+0x32>
 80085a8:	230c      	movs	r3, #12
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085b0:	b01d      	add	sp, #116	@ 0x74
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	2340      	movs	r3, #64	@ 0x40
 80085b8:	616b      	str	r3, [r5, #20]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	2320      	movs	r3, #32
 80085c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c4:	2330      	movs	r3, #48	@ 0x30
 80085c6:	f04f 0901 	mov.w	r9, #1
 80085ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008768 <_svfiprintf_r+0x1e4>
 80085d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d6:	4623      	mov	r3, r4
 80085d8:	469a      	mov	sl, r3
 80085da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085de:	b10a      	cbz	r2, 80085e4 <_svfiprintf_r+0x60>
 80085e0:	2a25      	cmp	r2, #37	@ 0x25
 80085e2:	d1f9      	bne.n	80085d8 <_svfiprintf_r+0x54>
 80085e4:	ebba 0b04 	subs.w	fp, sl, r4
 80085e8:	d00b      	beq.n	8008602 <_svfiprintf_r+0x7e>
 80085ea:	465b      	mov	r3, fp
 80085ec:	4622      	mov	r2, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ff6b 	bl	80084cc <__ssputs_r>
 80085f6:	3001      	adds	r0, #1
 80085f8:	f000 80a7 	beq.w	800874a <_svfiprintf_r+0x1c6>
 80085fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fe:	445a      	add	r2, fp
 8008600:	9209      	str	r2, [sp, #36]	@ 0x24
 8008602:	f89a 3000 	ldrb.w	r3, [sl]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 809f 	beq.w	800874a <_svfiprintf_r+0x1c6>
 800860c:	2300      	movs	r3, #0
 800860e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008616:	f10a 0a01 	add.w	sl, sl, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	9307      	str	r3, [sp, #28]
 800861e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008622:	931a      	str	r3, [sp, #104]	@ 0x68
 8008624:	4654      	mov	r4, sl
 8008626:	2205      	movs	r2, #5
 8008628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862c:	484e      	ldr	r0, [pc, #312]	@ (8008768 <_svfiprintf_r+0x1e4>)
 800862e:	f7fe fc6e 	bl	8006f0e <memchr>
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	b9d8      	cbnz	r0, 800866e <_svfiprintf_r+0xea>
 8008636:	06d0      	lsls	r0, r2, #27
 8008638:	bf44      	itt	mi
 800863a:	2320      	movmi	r3, #32
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008640:	0711      	lsls	r1, r2, #28
 8008642:	bf44      	itt	mi
 8008644:	232b      	movmi	r3, #43	@ 0x2b
 8008646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800864a:	f89a 3000 	ldrb.w	r3, [sl]
 800864e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008650:	d015      	beq.n	800867e <_svfiprintf_r+0xfa>
 8008652:	4654      	mov	r4, sl
 8008654:	2000      	movs	r0, #0
 8008656:	f04f 0c0a 	mov.w	ip, #10
 800865a:	9a07      	ldr	r2, [sp, #28]
 800865c:	4621      	mov	r1, r4
 800865e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008662:	3b30      	subs	r3, #48	@ 0x30
 8008664:	2b09      	cmp	r3, #9
 8008666:	d94b      	bls.n	8008700 <_svfiprintf_r+0x17c>
 8008668:	b1b0      	cbz	r0, 8008698 <_svfiprintf_r+0x114>
 800866a:	9207      	str	r2, [sp, #28]
 800866c:	e014      	b.n	8008698 <_svfiprintf_r+0x114>
 800866e:	eba0 0308 	sub.w	r3, r0, r8
 8008672:	fa09 f303 	lsl.w	r3, r9, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	46a2      	mov	sl, r4
 800867a:	9304      	str	r3, [sp, #16]
 800867c:	e7d2      	b.n	8008624 <_svfiprintf_r+0xa0>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9103      	str	r1, [sp, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfbb      	ittet	lt
 800868a:	425b      	neglt	r3, r3
 800868c:	f042 0202 	orrlt.w	r2, r2, #2
 8008690:	9307      	strge	r3, [sp, #28]
 8008692:	9307      	strlt	r3, [sp, #28]
 8008694:	bfb8      	it	lt
 8008696:	9204      	strlt	r2, [sp, #16]
 8008698:	7823      	ldrb	r3, [r4, #0]
 800869a:	2b2e      	cmp	r3, #46	@ 0x2e
 800869c:	d10a      	bne.n	80086b4 <_svfiprintf_r+0x130>
 800869e:	7863      	ldrb	r3, [r4, #1]
 80086a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a2:	d132      	bne.n	800870a <_svfiprintf_r+0x186>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	3402      	adds	r4, #2
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	9203      	str	r2, [sp, #12]
 80086ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800876c <_svfiprintf_r+0x1e8>
 80086b8:	2203      	movs	r2, #3
 80086ba:	4650      	mov	r0, sl
 80086bc:	7821      	ldrb	r1, [r4, #0]
 80086be:	f7fe fc26 	bl	8006f0e <memchr>
 80086c2:	b138      	cbz	r0, 80086d4 <_svfiprintf_r+0x150>
 80086c4:	2240      	movs	r2, #64	@ 0x40
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	eba0 000a 	sub.w	r0, r0, sl
 80086cc:	4082      	lsls	r2, r0
 80086ce:	4313      	orrs	r3, r2
 80086d0:	3401      	adds	r4, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	2206      	movs	r2, #6
 80086da:	4825      	ldr	r0, [pc, #148]	@ (8008770 <_svfiprintf_r+0x1ec>)
 80086dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086e0:	f7fe fc15 	bl	8006f0e <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d036      	beq.n	8008756 <_svfiprintf_r+0x1d2>
 80086e8:	4b22      	ldr	r3, [pc, #136]	@ (8008774 <_svfiprintf_r+0x1f0>)
 80086ea:	bb1b      	cbnz	r3, 8008734 <_svfiprintf_r+0x1b0>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	3308      	adds	r3, #8
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fa:	4433      	add	r3, r6
 80086fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fe:	e76a      	b.n	80085d6 <_svfiprintf_r+0x52>
 8008700:	460c      	mov	r4, r1
 8008702:	2001      	movs	r0, #1
 8008704:	fb0c 3202 	mla	r2, ip, r2, r3
 8008708:	e7a8      	b.n	800865c <_svfiprintf_r+0xd8>
 800870a:	2300      	movs	r3, #0
 800870c:	f04f 0c0a 	mov.w	ip, #10
 8008710:	4619      	mov	r1, r3
 8008712:	3401      	adds	r4, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	4620      	mov	r0, r4
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	@ 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_svfiprintf_r+0x1a6>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c6      	beq.n	80086b4 <_svfiprintf_r+0x130>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c4      	b.n	80086b4 <_svfiprintf_r+0x130>
 800872a:	4604      	mov	r4, r0
 800872c:	2301      	movs	r3, #1
 800872e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008732:	e7f0      	b.n	8008716 <_svfiprintf_r+0x192>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	462a      	mov	r2, r5
 800873a:	4638      	mov	r0, r7
 800873c:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <_svfiprintf_r+0x1f4>)
 800873e:	a904      	add	r1, sp, #16
 8008740:	f7fd fe6e 	bl	8006420 <_printf_float>
 8008744:	1c42      	adds	r2, r0, #1
 8008746:	4606      	mov	r6, r0
 8008748:	d1d6      	bne.n	80086f8 <_svfiprintf_r+0x174>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	065b      	lsls	r3, r3, #25
 800874e:	f53f af2d 	bmi.w	80085ac <_svfiprintf_r+0x28>
 8008752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008754:	e72c      	b.n	80085b0 <_svfiprintf_r+0x2c>
 8008756:	ab03      	add	r3, sp, #12
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	462a      	mov	r2, r5
 800875c:	4638      	mov	r0, r7
 800875e:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <_svfiprintf_r+0x1f4>)
 8008760:	a904      	add	r1, sp, #16
 8008762:	f7fe f8fb 	bl	800695c <_printf_i>
 8008766:	e7ed      	b.n	8008744 <_svfiprintf_r+0x1c0>
 8008768:	08009bd8 	.word	0x08009bd8
 800876c:	08009bde 	.word	0x08009bde
 8008770:	08009be2 	.word	0x08009be2
 8008774:	08006421 	.word	0x08006421
 8008778:	080084cd 	.word	0x080084cd

0800877c <__sflush_r>:
 800877c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	0716      	lsls	r6, r2, #28
 8008784:	4605      	mov	r5, r0
 8008786:	460c      	mov	r4, r1
 8008788:	d454      	bmi.n	8008834 <__sflush_r+0xb8>
 800878a:	684b      	ldr	r3, [r1, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dc02      	bgt.n	8008796 <__sflush_r+0x1a>
 8008790:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd48      	ble.n	8008828 <__sflush_r+0xac>
 8008796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008798:	2e00      	cmp	r6, #0
 800879a:	d045      	beq.n	8008828 <__sflush_r+0xac>
 800879c:	2300      	movs	r3, #0
 800879e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087a2:	682f      	ldr	r7, [r5, #0]
 80087a4:	6a21      	ldr	r1, [r4, #32]
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	d030      	beq.n	800880c <__sflush_r+0x90>
 80087aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	0759      	lsls	r1, r3, #29
 80087b0:	d505      	bpl.n	80087be <__sflush_r+0x42>
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087b8:	b10b      	cbz	r3, 80087be <__sflush_r+0x42>
 80087ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	2300      	movs	r3, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	47b0      	blx	r6
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	d106      	bne.n	80087dc <__sflush_r+0x60>
 80087ce:	6829      	ldr	r1, [r5, #0]
 80087d0:	291d      	cmp	r1, #29
 80087d2:	d82b      	bhi.n	800882c <__sflush_r+0xb0>
 80087d4:	4a28      	ldr	r2, [pc, #160]	@ (8008878 <__sflush_r+0xfc>)
 80087d6:	410a      	asrs	r2, r1
 80087d8:	07d6      	lsls	r6, r2, #31
 80087da:	d427      	bmi.n	800882c <__sflush_r+0xb0>
 80087dc:	2200      	movs	r2, #0
 80087de:	6062      	str	r2, [r4, #4]
 80087e0:	6922      	ldr	r2, [r4, #16]
 80087e2:	04d9      	lsls	r1, r3, #19
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	d504      	bpl.n	80087f2 <__sflush_r+0x76>
 80087e8:	1c42      	adds	r2, r0, #1
 80087ea:	d101      	bne.n	80087f0 <__sflush_r+0x74>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b903      	cbnz	r3, 80087f2 <__sflush_r+0x76>
 80087f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80087f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087f4:	602f      	str	r7, [r5, #0]
 80087f6:	b1b9      	cbz	r1, 8008828 <__sflush_r+0xac>
 80087f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087fc:	4299      	cmp	r1, r3
 80087fe:	d002      	beq.n	8008806 <__sflush_r+0x8a>
 8008800:	4628      	mov	r0, r5
 8008802:	f7ff f9e5 	bl	8007bd0 <_free_r>
 8008806:	2300      	movs	r3, #0
 8008808:	6363      	str	r3, [r4, #52]	@ 0x34
 800880a:	e00d      	b.n	8008828 <__sflush_r+0xac>
 800880c:	2301      	movs	r3, #1
 800880e:	4628      	mov	r0, r5
 8008810:	47b0      	blx	r6
 8008812:	4602      	mov	r2, r0
 8008814:	1c50      	adds	r0, r2, #1
 8008816:	d1c9      	bne.n	80087ac <__sflush_r+0x30>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0c6      	beq.n	80087ac <__sflush_r+0x30>
 800881e:	2b1d      	cmp	r3, #29
 8008820:	d001      	beq.n	8008826 <__sflush_r+0xaa>
 8008822:	2b16      	cmp	r3, #22
 8008824:	d11d      	bne.n	8008862 <__sflush_r+0xe6>
 8008826:	602f      	str	r7, [r5, #0]
 8008828:	2000      	movs	r0, #0
 800882a:	e021      	b.n	8008870 <__sflush_r+0xf4>
 800882c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008830:	b21b      	sxth	r3, r3
 8008832:	e01a      	b.n	800886a <__sflush_r+0xee>
 8008834:	690f      	ldr	r7, [r1, #16]
 8008836:	2f00      	cmp	r7, #0
 8008838:	d0f6      	beq.n	8008828 <__sflush_r+0xac>
 800883a:	0793      	lsls	r3, r2, #30
 800883c:	bf18      	it	ne
 800883e:	2300      	movne	r3, #0
 8008840:	680e      	ldr	r6, [r1, #0]
 8008842:	bf08      	it	eq
 8008844:	694b      	ldreq	r3, [r1, #20]
 8008846:	1bf6      	subs	r6, r6, r7
 8008848:	600f      	str	r7, [r1, #0]
 800884a:	608b      	str	r3, [r1, #8]
 800884c:	2e00      	cmp	r6, #0
 800884e:	ddeb      	ble.n	8008828 <__sflush_r+0xac>
 8008850:	4633      	mov	r3, r6
 8008852:	463a      	mov	r2, r7
 8008854:	4628      	mov	r0, r5
 8008856:	6a21      	ldr	r1, [r4, #32]
 8008858:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800885c:	47e0      	blx	ip
 800885e:	2800      	cmp	r0, #0
 8008860:	dc07      	bgt.n	8008872 <__sflush_r+0xf6>
 8008862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800886a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008872:	4407      	add	r7, r0
 8008874:	1a36      	subs	r6, r6, r0
 8008876:	e7e9      	b.n	800884c <__sflush_r+0xd0>
 8008878:	dfbffffe 	.word	0xdfbffffe

0800887c <_fflush_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	690b      	ldr	r3, [r1, #16]
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
 8008884:	b913      	cbnz	r3, 800888c <_fflush_r+0x10>
 8008886:	2500      	movs	r5, #0
 8008888:	4628      	mov	r0, r5
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	b118      	cbz	r0, 8008896 <_fflush_r+0x1a>
 800888e:	6a03      	ldr	r3, [r0, #32]
 8008890:	b90b      	cbnz	r3, 8008896 <_fflush_r+0x1a>
 8008892:	f7fe fa0f 	bl	8006cb4 <__sinit>
 8008896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f3      	beq.n	8008886 <_fflush_r+0xa>
 800889e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088a0:	07d0      	lsls	r0, r2, #31
 80088a2:	d404      	bmi.n	80088ae <_fflush_r+0x32>
 80088a4:	0599      	lsls	r1, r3, #22
 80088a6:	d402      	bmi.n	80088ae <_fflush_r+0x32>
 80088a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088aa:	f7fe fb2e 	bl	8006f0a <__retarget_lock_acquire_recursive>
 80088ae:	4628      	mov	r0, r5
 80088b0:	4621      	mov	r1, r4
 80088b2:	f7ff ff63 	bl	800877c <__sflush_r>
 80088b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088b8:	4605      	mov	r5, r0
 80088ba:	07da      	lsls	r2, r3, #31
 80088bc:	d4e4      	bmi.n	8008888 <_fflush_r+0xc>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	059b      	lsls	r3, r3, #22
 80088c2:	d4e1      	bmi.n	8008888 <_fflush_r+0xc>
 80088c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088c6:	f7fe fb21 	bl	8006f0c <__retarget_lock_release_recursive>
 80088ca:	e7dd      	b.n	8008888 <_fflush_r+0xc>

080088cc <memmove>:
 80088cc:	4288      	cmp	r0, r1
 80088ce:	b510      	push	{r4, lr}
 80088d0:	eb01 0402 	add.w	r4, r1, r2
 80088d4:	d902      	bls.n	80088dc <memmove+0x10>
 80088d6:	4284      	cmp	r4, r0
 80088d8:	4623      	mov	r3, r4
 80088da:	d807      	bhi.n	80088ec <memmove+0x20>
 80088dc:	1e43      	subs	r3, r0, #1
 80088de:	42a1      	cmp	r1, r4
 80088e0:	d008      	beq.n	80088f4 <memmove+0x28>
 80088e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ea:	e7f8      	b.n	80088de <memmove+0x12>
 80088ec:	4601      	mov	r1, r0
 80088ee:	4402      	add	r2, r0
 80088f0:	428a      	cmp	r2, r1
 80088f2:	d100      	bne.n	80088f6 <memmove+0x2a>
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088fe:	e7f7      	b.n	80088f0 <memmove+0x24>

08008900 <_sbrk_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	2300      	movs	r3, #0
 8008904:	4d05      	ldr	r5, [pc, #20]	@ (800891c <_sbrk_r+0x1c>)
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	f7f9 fae2 	bl	8001ed4 <_sbrk>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_sbrk_r+0x1a>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_sbrk_r+0x1a>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	200003dc 	.word	0x200003dc

08008920 <memcpy>:
 8008920:	440a      	add	r2, r1
 8008922:	4291      	cmp	r1, r2
 8008924:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008928:	d100      	bne.n	800892c <memcpy+0xc>
 800892a:	4770      	bx	lr
 800892c:	b510      	push	{r4, lr}
 800892e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008932:	4291      	cmp	r1, r2
 8008934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008938:	d1f9      	bne.n	800892e <memcpy+0xe>
 800893a:	bd10      	pop	{r4, pc}

0800893c <__assert_func>:
 800893c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800893e:	4614      	mov	r4, r2
 8008940:	461a      	mov	r2, r3
 8008942:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <__assert_func+0x2c>)
 8008944:	4605      	mov	r5, r0
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68d8      	ldr	r0, [r3, #12]
 800894a:	b954      	cbnz	r4, 8008962 <__assert_func+0x26>
 800894c:	4b07      	ldr	r3, [pc, #28]	@ (800896c <__assert_func+0x30>)
 800894e:	461c      	mov	r4, r3
 8008950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008954:	9100      	str	r1, [sp, #0]
 8008956:	462b      	mov	r3, r5
 8008958:	4905      	ldr	r1, [pc, #20]	@ (8008970 <__assert_func+0x34>)
 800895a:	f000 f86f 	bl	8008a3c <fiprintf>
 800895e:	f000 f87f 	bl	8008a60 <abort>
 8008962:	4b04      	ldr	r3, [pc, #16]	@ (8008974 <__assert_func+0x38>)
 8008964:	e7f4      	b.n	8008950 <__assert_func+0x14>
 8008966:	bf00      	nop
 8008968:	20000018 	.word	0x20000018
 800896c:	08009c2e 	.word	0x08009c2e
 8008970:	08009c00 	.word	0x08009c00
 8008974:	08009bf3 	.word	0x08009bf3

08008978 <_calloc_r>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	fba1 5402 	umull	r5, r4, r1, r2
 800897e:	b93c      	cbnz	r4, 8008990 <_calloc_r+0x18>
 8008980:	4629      	mov	r1, r5
 8008982:	f7ff f997 	bl	8007cb4 <_malloc_r>
 8008986:	4606      	mov	r6, r0
 8008988:	b928      	cbnz	r0, 8008996 <_calloc_r+0x1e>
 800898a:	2600      	movs	r6, #0
 800898c:	4630      	mov	r0, r6
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	220c      	movs	r2, #12
 8008992:	6002      	str	r2, [r0, #0]
 8008994:	e7f9      	b.n	800898a <_calloc_r+0x12>
 8008996:	462a      	mov	r2, r5
 8008998:	4621      	mov	r1, r4
 800899a:	f7fe fa38 	bl	8006e0e <memset>
 800899e:	e7f5      	b.n	800898c <_calloc_r+0x14>

080089a0 <__ascii_mbtowc>:
 80089a0:	b082      	sub	sp, #8
 80089a2:	b901      	cbnz	r1, 80089a6 <__ascii_mbtowc+0x6>
 80089a4:	a901      	add	r1, sp, #4
 80089a6:	b142      	cbz	r2, 80089ba <__ascii_mbtowc+0x1a>
 80089a8:	b14b      	cbz	r3, 80089be <__ascii_mbtowc+0x1e>
 80089aa:	7813      	ldrb	r3, [r2, #0]
 80089ac:	600b      	str	r3, [r1, #0]
 80089ae:	7812      	ldrb	r2, [r2, #0]
 80089b0:	1e10      	subs	r0, r2, #0
 80089b2:	bf18      	it	ne
 80089b4:	2001      	movne	r0, #1
 80089b6:	b002      	add	sp, #8
 80089b8:	4770      	bx	lr
 80089ba:	4610      	mov	r0, r2
 80089bc:	e7fb      	b.n	80089b6 <__ascii_mbtowc+0x16>
 80089be:	f06f 0001 	mvn.w	r0, #1
 80089c2:	e7f8      	b.n	80089b6 <__ascii_mbtowc+0x16>

080089c4 <_realloc_r>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	4680      	mov	r8, r0
 80089ca:	4615      	mov	r5, r2
 80089cc:	460c      	mov	r4, r1
 80089ce:	b921      	cbnz	r1, 80089da <_realloc_r+0x16>
 80089d0:	4611      	mov	r1, r2
 80089d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	f7ff b96d 	b.w	8007cb4 <_malloc_r>
 80089da:	b92a      	cbnz	r2, 80089e8 <_realloc_r+0x24>
 80089dc:	f7ff f8f8 	bl	8007bd0 <_free_r>
 80089e0:	2400      	movs	r4, #0
 80089e2:	4620      	mov	r0, r4
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	f000 f841 	bl	8008a6e <_malloc_usable_size_r>
 80089ec:	4285      	cmp	r5, r0
 80089ee:	4606      	mov	r6, r0
 80089f0:	d802      	bhi.n	80089f8 <_realloc_r+0x34>
 80089f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089f6:	d8f4      	bhi.n	80089e2 <_realloc_r+0x1e>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4640      	mov	r0, r8
 80089fc:	f7ff f95a 	bl	8007cb4 <_malloc_r>
 8008a00:	4607      	mov	r7, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0ec      	beq.n	80089e0 <_realloc_r+0x1c>
 8008a06:	42b5      	cmp	r5, r6
 8008a08:	462a      	mov	r2, r5
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	bf28      	it	cs
 8008a0e:	4632      	movcs	r2, r6
 8008a10:	f7ff ff86 	bl	8008920 <memcpy>
 8008a14:	4621      	mov	r1, r4
 8008a16:	4640      	mov	r0, r8
 8008a18:	f7ff f8da 	bl	8007bd0 <_free_r>
 8008a1c:	463c      	mov	r4, r7
 8008a1e:	e7e0      	b.n	80089e2 <_realloc_r+0x1e>

08008a20 <__ascii_wctomb>:
 8008a20:	4603      	mov	r3, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	b141      	cbz	r1, 8008a38 <__ascii_wctomb+0x18>
 8008a26:	2aff      	cmp	r2, #255	@ 0xff
 8008a28:	d904      	bls.n	8008a34 <__ascii_wctomb+0x14>
 8008a2a:	228a      	movs	r2, #138	@ 0x8a
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	4770      	bx	lr
 8008a34:	2001      	movs	r0, #1
 8008a36:	700a      	strb	r2, [r1, #0]
 8008a38:	4770      	bx	lr
	...

08008a3c <fiprintf>:
 8008a3c:	b40e      	push	{r1, r2, r3}
 8008a3e:	b503      	push	{r0, r1, lr}
 8008a40:	4601      	mov	r1, r0
 8008a42:	ab03      	add	r3, sp, #12
 8008a44:	4805      	ldr	r0, [pc, #20]	@ (8008a5c <fiprintf+0x20>)
 8008a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	f000 f83d 	bl	8008acc <_vfiprintf_r>
 8008a52:	b002      	add	sp, #8
 8008a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a58:	b003      	add	sp, #12
 8008a5a:	4770      	bx	lr
 8008a5c:	20000018 	.word	0x20000018

08008a60 <abort>:
 8008a60:	2006      	movs	r0, #6
 8008a62:	b508      	push	{r3, lr}
 8008a64:	f000 fa06 	bl	8008e74 <raise>
 8008a68:	2001      	movs	r0, #1
 8008a6a:	f7f9 f9be 	bl	8001dea <_exit>

08008a6e <_malloc_usable_size_r>:
 8008a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a72:	1f18      	subs	r0, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfbc      	itt	lt
 8008a78:	580b      	ldrlt	r3, [r1, r0]
 8008a7a:	18c0      	addlt	r0, r0, r3
 8008a7c:	4770      	bx	lr

08008a7e <__sfputc_r>:
 8008a7e:	6893      	ldr	r3, [r2, #8]
 8008a80:	b410      	push	{r4}
 8008a82:	3b01      	subs	r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	6093      	str	r3, [r2, #8]
 8008a88:	da07      	bge.n	8008a9a <__sfputc_r+0x1c>
 8008a8a:	6994      	ldr	r4, [r2, #24]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	db01      	blt.n	8008a94 <__sfputc_r+0x16>
 8008a90:	290a      	cmp	r1, #10
 8008a92:	d102      	bne.n	8008a9a <__sfputc_r+0x1c>
 8008a94:	bc10      	pop	{r4}
 8008a96:	f000 b931 	b.w	8008cfc <__swbuf_r>
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	1c58      	adds	r0, r3, #1
 8008a9e:	6010      	str	r0, [r2, #0]
 8008aa0:	7019      	strb	r1, [r3, #0]
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	bc10      	pop	{r4}
 8008aa6:	4770      	bx	lr

08008aa8 <__sfputs_r>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	4614      	mov	r4, r2
 8008ab0:	18d5      	adds	r5, r2, r3
 8008ab2:	42ac      	cmp	r4, r5
 8008ab4:	d101      	bne.n	8008aba <__sfputs_r+0x12>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e007      	b.n	8008aca <__sfputs_r+0x22>
 8008aba:	463a      	mov	r2, r7
 8008abc:	4630      	mov	r0, r6
 8008abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac2:	f7ff ffdc 	bl	8008a7e <__sfputc_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d1f3      	bne.n	8008ab2 <__sfputs_r+0xa>
 8008aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008acc <_vfiprintf_r>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	4614      	mov	r4, r2
 8008ad4:	4698      	mov	r8, r3
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	b09d      	sub	sp, #116	@ 0x74
 8008ada:	b118      	cbz	r0, 8008ae4 <_vfiprintf_r+0x18>
 8008adc:	6a03      	ldr	r3, [r0, #32]
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x18>
 8008ae0:	f7fe f8e8 	bl	8006cb4 <__sinit>
 8008ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae6:	07d9      	lsls	r1, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	059a      	lsls	r2, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008af2:	f7fe fa0a 	bl	8006f0a <__retarget_lock_acquire_recursive>
 8008af6:	89ab      	ldrh	r3, [r5, #12]
 8008af8:	071b      	lsls	r3, r3, #28
 8008afa:	d501      	bpl.n	8008b00 <_vfiprintf_r+0x34>
 8008afc:	692b      	ldr	r3, [r5, #16]
 8008afe:	b99b      	cbnz	r3, 8008b28 <_vfiprintf_r+0x5c>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f938 	bl	8008d78 <__swsetup_r>
 8008b08:	b170      	cbz	r0, 8008b28 <_vfiprintf_r+0x5c>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b0c:	07dc      	lsls	r4, r3, #31
 8008b0e:	d504      	bpl.n	8008b1a <_vfiprintf_r+0x4e>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b14:	b01d      	add	sp, #116	@ 0x74
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	0598      	lsls	r0, r3, #22
 8008b1e:	d4f7      	bmi.n	8008b10 <_vfiprintf_r+0x44>
 8008b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b22:	f7fe f9f3 	bl	8006f0c <__retarget_lock_release_recursive>
 8008b26:	e7f3      	b.n	8008b10 <_vfiprintf_r+0x44>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b32:	2330      	movs	r3, #48	@ 0x30
 8008b34:	f04f 0901 	mov.w	r9, #1
 8008b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ce8 <_vfiprintf_r+0x21c>
 8008b40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b44:	4623      	mov	r3, r4
 8008b46:	469a      	mov	sl, r3
 8008b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_vfiprintf_r+0x86>
 8008b4e:	2a25      	cmp	r2, #37	@ 0x25
 8008b50:	d1f9      	bne.n	8008b46 <_vfiprintf_r+0x7a>
 8008b52:	ebba 0b04 	subs.w	fp, sl, r4
 8008b56:	d00b      	beq.n	8008b70 <_vfiprintf_r+0xa4>
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ffa2 	bl	8008aa8 <__sfputs_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f000 80a7 	beq.w	8008cb8 <_vfiprintf_r+0x1ec>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b6c:	445a      	add	r2, fp
 8008b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 809f 	beq.w	8008cb8 <_vfiprintf_r+0x1ec>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b92:	4654      	mov	r4, sl
 8008b94:	2205      	movs	r2, #5
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4853      	ldr	r0, [pc, #332]	@ (8008ce8 <_vfiprintf_r+0x21c>)
 8008b9c:	f7fe f9b7 	bl	8006f0e <memchr>
 8008ba0:	9a04      	ldr	r2, [sp, #16]
 8008ba2:	b9d8      	cbnz	r0, 8008bdc <_vfiprintf_r+0x110>
 8008ba4:	06d1      	lsls	r1, r2, #27
 8008ba6:	bf44      	itt	mi
 8008ba8:	2320      	movmi	r3, #32
 8008baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bae:	0713      	lsls	r3, r2, #28
 8008bb0:	bf44      	itt	mi
 8008bb2:	232b      	movmi	r3, #43	@ 0x2b
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bbe:	d015      	beq.n	8008bec <_vfiprintf_r+0x120>
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f04f 0c0a 	mov.w	ip, #10
 8008bc8:	9a07      	ldr	r2, [sp, #28]
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd0:	3b30      	subs	r3, #48	@ 0x30
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d94b      	bls.n	8008c6e <_vfiprintf_r+0x1a2>
 8008bd6:	b1b0      	cbz	r0, 8008c06 <_vfiprintf_r+0x13a>
 8008bd8:	9207      	str	r2, [sp, #28]
 8008bda:	e014      	b.n	8008c06 <_vfiprintf_r+0x13a>
 8008bdc:	eba0 0308 	sub.w	r3, r0, r8
 8008be0:	fa09 f303 	lsl.w	r3, r9, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	46a2      	mov	sl, r4
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	e7d2      	b.n	8008b92 <_vfiprintf_r+0xc6>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d19      	adds	r1, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9103      	str	r1, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	425b      	neglt	r3, r3
 8008bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfe:	9307      	strge	r3, [sp, #28]
 8008c00:	9307      	strlt	r3, [sp, #28]
 8008c02:	bfb8      	it	lt
 8008c04:	9204      	strlt	r2, [sp, #16]
 8008c06:	7823      	ldrb	r3, [r4, #0]
 8008c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c0a:	d10a      	bne.n	8008c22 <_vfiprintf_r+0x156>
 8008c0c:	7863      	ldrb	r3, [r4, #1]
 8008c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c10:	d132      	bne.n	8008c78 <_vfiprintf_r+0x1ac>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	3402      	adds	r4, #2
 8008c16:	1d1a      	adds	r2, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	9203      	str	r2, [sp, #12]
 8008c1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008cec <_vfiprintf_r+0x220>
 8008c26:	2203      	movs	r2, #3
 8008c28:	4650      	mov	r0, sl
 8008c2a:	7821      	ldrb	r1, [r4, #0]
 8008c2c:	f7fe f96f 	bl	8006f0e <memchr>
 8008c30:	b138      	cbz	r0, 8008c42 <_vfiprintf_r+0x176>
 8008c32:	2240      	movs	r2, #64	@ 0x40
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	eba0 000a 	sub.w	r0, r0, sl
 8008c3a:	4082      	lsls	r2, r0
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	3401      	adds	r4, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	2206      	movs	r2, #6
 8008c48:	4829      	ldr	r0, [pc, #164]	@ (8008cf0 <_vfiprintf_r+0x224>)
 8008c4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c4e:	f7fe f95e 	bl	8006f0e <memchr>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d03f      	beq.n	8008cd6 <_vfiprintf_r+0x20a>
 8008c56:	4b27      	ldr	r3, [pc, #156]	@ (8008cf4 <_vfiprintf_r+0x228>)
 8008c58:	bb1b      	cbnz	r3, 8008ca2 <_vfiprintf_r+0x1d6>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	3307      	adds	r3, #7
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	3308      	adds	r3, #8
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c68:	443b      	add	r3, r7
 8008c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6c:	e76a      	b.n	8008b44 <_vfiprintf_r+0x78>
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2001      	movs	r0, #1
 8008c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c76:	e7a8      	b.n	8008bca <_vfiprintf_r+0xfe>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f04f 0c0a 	mov.w	ip, #10
 8008c7e:	4619      	mov	r1, r3
 8008c80:	3401      	adds	r4, #1
 8008c82:	9305      	str	r3, [sp, #20]
 8008c84:	4620      	mov	r0, r4
 8008c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8a:	3a30      	subs	r2, #48	@ 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d903      	bls.n	8008c98 <_vfiprintf_r+0x1cc>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c6      	beq.n	8008c22 <_vfiprintf_r+0x156>
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	e7c4      	b.n	8008c22 <_vfiprintf_r+0x156>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca0:	e7f0      	b.n	8008c84 <_vfiprintf_r+0x1b8>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4b13      	ldr	r3, [pc, #76]	@ (8008cf8 <_vfiprintf_r+0x22c>)
 8008cac:	a904      	add	r1, sp, #16
 8008cae:	f7fd fbb7 	bl	8006420 <_printf_float>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	1c78      	adds	r0, r7, #1
 8008cb6:	d1d6      	bne.n	8008c66 <_vfiprintf_r+0x19a>
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x1fe>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x1fe>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc6:	f7fe f921 	bl	8006f0c <__retarget_lock_release_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	065b      	lsls	r3, r3, #25
 8008cce:	f53f af1f 	bmi.w	8008b10 <_vfiprintf_r+0x44>
 8008cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cd4:	e71e      	b.n	8008b14 <_vfiprintf_r+0x48>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <_vfiprintf_r+0x22c>)
 8008ce0:	a904      	add	r1, sp, #16
 8008ce2:	f7fd fe3b 	bl	800695c <_printf_i>
 8008ce6:	e7e4      	b.n	8008cb2 <_vfiprintf_r+0x1e6>
 8008ce8:	08009bd8 	.word	0x08009bd8
 8008cec:	08009bde 	.word	0x08009bde
 8008cf0:	08009be2 	.word	0x08009be2
 8008cf4:	08006421 	.word	0x08006421
 8008cf8:	08008aa9 	.word	0x08008aa9

08008cfc <__swbuf_r>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	460e      	mov	r6, r1
 8008d00:	4614      	mov	r4, r2
 8008d02:	4605      	mov	r5, r0
 8008d04:	b118      	cbz	r0, 8008d0e <__swbuf_r+0x12>
 8008d06:	6a03      	ldr	r3, [r0, #32]
 8008d08:	b90b      	cbnz	r3, 8008d0e <__swbuf_r+0x12>
 8008d0a:	f7fd ffd3 	bl	8006cb4 <__sinit>
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d501      	bpl.n	8008d1c <__swbuf_r+0x20>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b943      	cbnz	r3, 8008d2e <__swbuf_r+0x32>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f82a 	bl	8008d78 <__swsetup_r>
 8008d24:	b118      	cbz	r0, 8008d2e <__swbuf_r+0x32>
 8008d26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	6922      	ldr	r2, [r4, #16]
 8008d32:	b2f6      	uxtb	r6, r6
 8008d34:	1a98      	subs	r0, r3, r2
 8008d36:	6963      	ldr	r3, [r4, #20]
 8008d38:	4637      	mov	r7, r6
 8008d3a:	4283      	cmp	r3, r0
 8008d3c:	dc05      	bgt.n	8008d4a <__swbuf_r+0x4e>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7ff fd9b 	bl	800887c <_fflush_r>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d1ed      	bne.n	8008d26 <__swbuf_r+0x2a>
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	60a3      	str	r3, [r4, #8]
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	6022      	str	r2, [r4, #0]
 8008d56:	701e      	strb	r6, [r3, #0]
 8008d58:	6962      	ldr	r2, [r4, #20]
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d004      	beq.n	8008d6a <__swbuf_r+0x6e>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	07db      	lsls	r3, r3, #31
 8008d64:	d5e1      	bpl.n	8008d2a <__swbuf_r+0x2e>
 8008d66:	2e0a      	cmp	r6, #10
 8008d68:	d1df      	bne.n	8008d2a <__swbuf_r+0x2e>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f7ff fd85 	bl	800887c <_fflush_r>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0d9      	beq.n	8008d2a <__swbuf_r+0x2e>
 8008d76:	e7d6      	b.n	8008d26 <__swbuf_r+0x2a>

08008d78 <__swsetup_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4b29      	ldr	r3, [pc, #164]	@ (8008e20 <__swsetup_r+0xa8>)
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	460c      	mov	r4, r1
 8008d82:	b118      	cbz	r0, 8008d8c <__swsetup_r+0x14>
 8008d84:	6a03      	ldr	r3, [r0, #32]
 8008d86:	b90b      	cbnz	r3, 8008d8c <__swsetup_r+0x14>
 8008d88:	f7fd ff94 	bl	8006cb4 <__sinit>
 8008d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d90:	0719      	lsls	r1, r3, #28
 8008d92:	d422      	bmi.n	8008dda <__swsetup_r+0x62>
 8008d94:	06da      	lsls	r2, r3, #27
 8008d96:	d407      	bmi.n	8008da8 <__swsetup_r+0x30>
 8008d98:	2209      	movs	r2, #9
 8008d9a:	602a      	str	r2, [r5, #0]
 8008d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008da4:	81a3      	strh	r3, [r4, #12]
 8008da6:	e033      	b.n	8008e10 <__swsetup_r+0x98>
 8008da8:	0758      	lsls	r0, r3, #29
 8008daa:	d512      	bpl.n	8008dd2 <__swsetup_r+0x5a>
 8008dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dae:	b141      	cbz	r1, 8008dc2 <__swsetup_r+0x4a>
 8008db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <__swsetup_r+0x46>
 8008db8:	4628      	mov	r0, r5
 8008dba:	f7fe ff09 	bl	8007bd0 <_free_r>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f043 0308 	orr.w	r3, r3, #8
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	b94b      	cbnz	r3, 8008df2 <__swsetup_r+0x7a>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de8:	d003      	beq.n	8008df2 <__swsetup_r+0x7a>
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f882 	bl	8008ef6 <__smakebuf_r>
 8008df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df6:	f013 0201 	ands.w	r2, r3, #1
 8008dfa:	d00a      	beq.n	8008e12 <__swsetup_r+0x9a>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	60a2      	str	r2, [r4, #8]
 8008e00:	6962      	ldr	r2, [r4, #20]
 8008e02:	4252      	negs	r2, r2
 8008e04:	61a2      	str	r2, [r4, #24]
 8008e06:	6922      	ldr	r2, [r4, #16]
 8008e08:	b942      	cbnz	r2, 8008e1c <__swsetup_r+0xa4>
 8008e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e0e:	d1c5      	bne.n	8008d9c <__swsetup_r+0x24>
 8008e10:	bd38      	pop	{r3, r4, r5, pc}
 8008e12:	0799      	lsls	r1, r3, #30
 8008e14:	bf58      	it	pl
 8008e16:	6962      	ldrpl	r2, [r4, #20]
 8008e18:	60a2      	str	r2, [r4, #8]
 8008e1a:	e7f4      	b.n	8008e06 <__swsetup_r+0x8e>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e7f7      	b.n	8008e10 <__swsetup_r+0x98>
 8008e20:	20000018 	.word	0x20000018

08008e24 <_raise_r>:
 8008e24:	291f      	cmp	r1, #31
 8008e26:	b538      	push	{r3, r4, r5, lr}
 8008e28:	4605      	mov	r5, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	d904      	bls.n	8008e38 <_raise_r+0x14>
 8008e2e:	2316      	movs	r3, #22
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e3a:	b112      	cbz	r2, 8008e42 <_raise_r+0x1e>
 8008e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e40:	b94b      	cbnz	r3, 8008e56 <_raise_r+0x32>
 8008e42:	4628      	mov	r0, r5
 8008e44:	f000 f830 	bl	8008ea8 <_getpid_r>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e52:	f000 b817 	b.w	8008e84 <_kill_r>
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d00a      	beq.n	8008e70 <_raise_r+0x4c>
 8008e5a:	1c59      	adds	r1, r3, #1
 8008e5c:	d103      	bne.n	8008e66 <_raise_r+0x42>
 8008e5e:	2316      	movs	r3, #22
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	2001      	movs	r0, #1
 8008e64:	e7e7      	b.n	8008e36 <_raise_r+0x12>
 8008e66:	2100      	movs	r1, #0
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e6e:	4798      	blx	r3
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7e0      	b.n	8008e36 <_raise_r+0x12>

08008e74 <raise>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	@ (8008e80 <raise+0xc>)
 8008e76:	4601      	mov	r1, r0
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f7ff bfd3 	b.w	8008e24 <_raise_r>
 8008e7e:	bf00      	nop
 8008e80:	20000018 	.word	0x20000018

08008e84 <_kill_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	2300      	movs	r3, #0
 8008e88:	4d06      	ldr	r5, [pc, #24]	@ (8008ea4 <_kill_r+0x20>)
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	4611      	mov	r1, r2
 8008e90:	602b      	str	r3, [r5, #0]
 8008e92:	f7f8 ff9a 	bl	8001dca <_kill>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d102      	bne.n	8008ea0 <_kill_r+0x1c>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b103      	cbz	r3, 8008ea0 <_kill_r+0x1c>
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200003dc 	.word	0x200003dc

08008ea8 <_getpid_r>:
 8008ea8:	f7f8 bf88 	b.w	8001dbc <_getpid>

08008eac <__swhatbuf_r>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	460c      	mov	r4, r1
 8008eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	461e      	mov	r6, r3
 8008eba:	b096      	sub	sp, #88	@ 0x58
 8008ebc:	da0c      	bge.n	8008ed8 <__swhatbuf_r+0x2c>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ec6:	bf14      	ite	ne
 8008ec8:	2340      	movne	r3, #64	@ 0x40
 8008eca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ece:	2000      	movs	r0, #0
 8008ed0:	6031      	str	r1, [r6, #0]
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	b016      	add	sp, #88	@ 0x58
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	466a      	mov	r2, sp
 8008eda:	f000 f849 	bl	8008f70 <_fstat_r>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	dbed      	blt.n	8008ebe <__swhatbuf_r+0x12>
 8008ee2:	9901      	ldr	r1, [sp, #4]
 8008ee4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ee8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008eec:	4259      	negs	r1, r3
 8008eee:	4159      	adcs	r1, r3
 8008ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ef4:	e7eb      	b.n	8008ece <__swhatbuf_r+0x22>

08008ef6 <__smakebuf_r>:
 8008ef6:	898b      	ldrh	r3, [r1, #12]
 8008ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008efa:	079d      	lsls	r5, r3, #30
 8008efc:	4606      	mov	r6, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	d507      	bpl.n	8008f12 <__smakebuf_r+0x1c>
 8008f02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	6123      	str	r3, [r4, #16]
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	6163      	str	r3, [r4, #20]
 8008f0e:	b003      	add	sp, #12
 8008f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f12:	466a      	mov	r2, sp
 8008f14:	ab01      	add	r3, sp, #4
 8008f16:	f7ff ffc9 	bl	8008eac <__swhatbuf_r>
 8008f1a:	9f00      	ldr	r7, [sp, #0]
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	4639      	mov	r1, r7
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7fe fec7 	bl	8007cb4 <_malloc_r>
 8008f26:	b948      	cbnz	r0, 8008f3c <__smakebuf_r+0x46>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d4ee      	bmi.n	8008f0e <__smakebuf_r+0x18>
 8008f30:	f023 0303 	bic.w	r3, r3, #3
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	e7e2      	b.n	8008f02 <__smakebuf_r+0xc>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	6020      	str	r0, [r4, #0]
 8008f4c:	b15b      	cbz	r3, 8008f66 <__smakebuf_r+0x70>
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f54:	f000 f81e 	bl	8008f94 <_isatty_r>
 8008f58:	b128      	cbz	r0, 8008f66 <__smakebuf_r+0x70>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	f043 0301 	orr.w	r3, r3, #1
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	431d      	orrs	r5, r3
 8008f6a:	81a5      	strh	r5, [r4, #12]
 8008f6c:	e7cf      	b.n	8008f0e <__smakebuf_r+0x18>
	...

08008f70 <_fstat_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	2300      	movs	r3, #0
 8008f74:	4d06      	ldr	r5, [pc, #24]	@ (8008f90 <_fstat_r+0x20>)
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f7f8 ff83 	bl	8001e88 <_fstat>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d102      	bne.n	8008f8c <_fstat_r+0x1c>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b103      	cbz	r3, 8008f8c <_fstat_r+0x1c>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	200003dc 	.word	0x200003dc

08008f94 <_isatty_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	2300      	movs	r3, #0
 8008f98:	4d05      	ldr	r5, [pc, #20]	@ (8008fb0 <_isatty_r+0x1c>)
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f8 ff81 	bl	8001ea6 <_isatty>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_isatty_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_isatty_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	200003dc 	.word	0x200003dc

08008fb4 <powf>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	4606      	mov	r6, r0
 8008fba:	f000 f851 	bl	8009060 <__ieee754_powf>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7f8 f84c 	bl	8001060 <__aeabi_fcmpun>
 8008fc8:	bb68      	cbnz	r0, 8009026 <powf+0x72>
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7f8 f815 	bl	8000ffc <__aeabi_fcmpeq>
 8008fd2:	b190      	cbz	r0, 8008ffa <powf+0x46>
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7f8 f810 	bl	8000ffc <__aeabi_fcmpeq>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d133      	bne.n	8009048 <powf+0x94>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 f834 	bl	800904e <finitef>
 8008fe6:	b1f0      	cbz	r0, 8009026 <powf+0x72>
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7f8 f810 	bl	8001010 <__aeabi_fcmplt>
 8008ff0:	b1c8      	cbz	r0, 8009026 <powf+0x72>
 8008ff2:	f7fd ff5f 	bl	8006eb4 <__errno>
 8008ff6:	2322      	movs	r3, #34	@ 0x22
 8008ff8:	e014      	b.n	8009024 <powf+0x70>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f827 	bl	800904e <finitef>
 8009000:	b998      	cbnz	r0, 800902a <powf+0x76>
 8009002:	4630      	mov	r0, r6
 8009004:	f000 f823 	bl	800904e <finitef>
 8009008:	b178      	cbz	r0, 800902a <powf+0x76>
 800900a:	4620      	mov	r0, r4
 800900c:	f000 f81f 	bl	800904e <finitef>
 8009010:	b158      	cbz	r0, 800902a <powf+0x76>
 8009012:	4629      	mov	r1, r5
 8009014:	4628      	mov	r0, r5
 8009016:	f7f8 f823 	bl	8001060 <__aeabi_fcmpun>
 800901a:	2800      	cmp	r0, #0
 800901c:	d0e9      	beq.n	8008ff2 <powf+0x3e>
 800901e:	f7fd ff49 	bl	8006eb4 <__errno>
 8009022:	2321      	movs	r3, #33	@ 0x21
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	4628      	mov	r0, r5
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	2100      	movs	r1, #0
 800902c:	4628      	mov	r0, r5
 800902e:	f7f7 ffe5 	bl	8000ffc <__aeabi_fcmpeq>
 8009032:	2800      	cmp	r0, #0
 8009034:	d0f7      	beq.n	8009026 <powf+0x72>
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f809 	bl	800904e <finitef>
 800903c:	2800      	cmp	r0, #0
 800903e:	d0f2      	beq.n	8009026 <powf+0x72>
 8009040:	4620      	mov	r0, r4
 8009042:	f000 f804 	bl	800904e <finitef>
 8009046:	e7d3      	b.n	8008ff0 <powf+0x3c>
 8009048:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800904c:	e7eb      	b.n	8009026 <powf+0x72>

0800904e <finitef>:
 800904e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009052:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009056:	bfac      	ite	ge
 8009058:	2000      	movge	r0, #0
 800905a:	2001      	movlt	r0, #1
 800905c:	4770      	bx	lr
	...

08009060 <__ieee754_powf>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8009068:	4680      	mov	r8, r0
 800906a:	460f      	mov	r7, r1
 800906c:	4606      	mov	r6, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b087      	sub	sp, #28
 8009072:	d10c      	bne.n	800908e <__ieee754_powf+0x2e>
 8009074:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8009078:	0076      	lsls	r6, r6, #1
 800907a:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800907e:	f240 8336 	bls.w	80096ee <__ieee754_powf+0x68e>
 8009082:	4639      	mov	r1, r7
 8009084:	4640      	mov	r0, r8
 8009086:	f7f7 fd1d 	bl	8000ac4 <__addsf3>
 800908a:	4601      	mov	r1, r0
 800908c:	e03e      	b.n	800910c <__ieee754_powf+0xac>
 800908e:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 8009092:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009096:	d802      	bhi.n	800909e <__ieee754_powf+0x3e>
 8009098:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800909c:	d908      	bls.n	80090b0 <__ieee754_powf+0x50>
 800909e:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80090a2:	d1ee      	bne.n	8009082 <__ieee754_powf+0x22>
 80090a4:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80090a8:	0064      	lsls	r4, r4, #1
 80090aa:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80090ae:	e7e6      	b.n	800907e <__ieee754_powf+0x1e>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	da1e      	bge.n	80090f2 <__ieee754_powf+0x92>
 80090b4:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80090b8:	d22c      	bcs.n	8009114 <__ieee754_powf+0xb4>
 80090ba:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80090be:	d333      	bcc.n	8009128 <__ieee754_powf+0xc8>
 80090c0:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80090c4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80090c8:	fa4b f503 	asr.w	r5, fp, r3
 80090cc:	fa05 f303 	lsl.w	r3, r5, r3
 80090d0:	455b      	cmp	r3, fp
 80090d2:	d127      	bne.n	8009124 <__ieee754_powf+0xc4>
 80090d4:	f005 0501 	and.w	r5, r5, #1
 80090d8:	f1c5 0502 	rsb	r5, r5, #2
 80090dc:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80090e0:	d123      	bne.n	800912a <__ieee754_powf+0xca>
 80090e2:	2c00      	cmp	r4, #0
 80090e4:	4641      	mov	r1, r8
 80090e6:	da11      	bge.n	800910c <__ieee754_powf+0xac>
 80090e8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80090ec:	f7f7 fea6 	bl	8000e3c <__aeabi_fdiv>
 80090f0:	e7cb      	b.n	800908a <__ieee754_powf+0x2a>
 80090f2:	2500      	movs	r5, #0
 80090f4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80090f8:	d1f0      	bne.n	80090dc <__ieee754_powf+0x7c>
 80090fa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80090fe:	f000 82f6 	beq.w	80096ee <__ieee754_powf+0x68e>
 8009102:	d909      	bls.n	8009118 <__ieee754_powf+0xb8>
 8009104:	2c00      	cmp	r4, #0
 8009106:	f2c0 82f5 	blt.w	80096f4 <__ieee754_powf+0x694>
 800910a:	4639      	mov	r1, r7
 800910c:	4608      	mov	r0, r1
 800910e:	b007      	add	sp, #28
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	2502      	movs	r5, #2
 8009116:	e7ed      	b.n	80090f4 <__ieee754_powf+0x94>
 8009118:	2c00      	cmp	r4, #0
 800911a:	f280 82eb 	bge.w	80096f4 <__ieee754_powf+0x694>
 800911e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8009122:	e7f3      	b.n	800910c <__ieee754_powf+0xac>
 8009124:	2500      	movs	r5, #0
 8009126:	e7d9      	b.n	80090dc <__ieee754_powf+0x7c>
 8009128:	2500      	movs	r5, #0
 800912a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800912e:	d104      	bne.n	800913a <__ieee754_powf+0xda>
 8009130:	4641      	mov	r1, r8
 8009132:	4640      	mov	r0, r8
 8009134:	f7f7 fdce 	bl	8000cd4 <__aeabi_fmul>
 8009138:	e7a7      	b.n	800908a <__ieee754_powf+0x2a>
 800913a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800913e:	d107      	bne.n	8009150 <__ieee754_powf+0xf0>
 8009140:	2e00      	cmp	r6, #0
 8009142:	db05      	blt.n	8009150 <__ieee754_powf+0xf0>
 8009144:	4640      	mov	r0, r8
 8009146:	b007      	add	sp, #28
 8009148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	f000 bb54 	b.w	80097f8 <__ieee754_sqrtf>
 8009150:	4640      	mov	r0, r8
 8009152:	f000 fae3 	bl	800971c <fabsf>
 8009156:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800915a:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800915e:	46ca      	mov	sl, r9
 8009160:	4601      	mov	r1, r0
 8009162:	d002      	beq.n	800916a <__ieee754_powf+0x10a>
 8009164:	f1b9 0f00 	cmp.w	r9, #0
 8009168:	d117      	bne.n	800919a <__ieee754_powf+0x13a>
 800916a:	2c00      	cmp	r4, #0
 800916c:	da04      	bge.n	8009178 <__ieee754_powf+0x118>
 800916e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009172:	f7f7 fe63 	bl	8000e3c <__aeabi_fdiv>
 8009176:	4601      	mov	r1, r0
 8009178:	2e00      	cmp	r6, #0
 800917a:	dac7      	bge.n	800910c <__ieee754_powf+0xac>
 800917c:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8009180:	ea59 0905 	orrs.w	r9, r9, r5
 8009184:	d104      	bne.n	8009190 <__ieee754_powf+0x130>
 8009186:	4608      	mov	r0, r1
 8009188:	f7f7 fc9a 	bl	8000ac0 <__aeabi_fsub>
 800918c:	4601      	mov	r1, r0
 800918e:	e7ad      	b.n	80090ec <__ieee754_powf+0x8c>
 8009190:	2d01      	cmp	r5, #1
 8009192:	d1bb      	bne.n	800910c <__ieee754_powf+0xac>
 8009194:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009198:	e777      	b.n	800908a <__ieee754_powf+0x2a>
 800919a:	0ff3      	lsrs	r3, r6, #31
 800919c:	3b01      	subs	r3, #1
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	432b      	orrs	r3, r5
 80091a2:	d101      	bne.n	80091a8 <__ieee754_powf+0x148>
 80091a4:	4641      	mov	r1, r8
 80091a6:	e7ee      	b.n	8009186 <__ieee754_powf+0x126>
 80091a8:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80091ac:	f240 809e 	bls.w	80092ec <__ieee754_powf+0x28c>
 80091b0:	4b47      	ldr	r3, [pc, #284]	@ (80092d0 <__ieee754_powf+0x270>)
 80091b2:	4599      	cmp	r9, r3
 80091b4:	d807      	bhi.n	80091c6 <__ieee754_powf+0x166>
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	da0a      	bge.n	80091d0 <__ieee754_powf+0x170>
 80091ba:	2000      	movs	r0, #0
 80091bc:	b007      	add	sp, #28
 80091be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c2:	f000 bb14 	b.w	80097ee <__math_oflowf>
 80091c6:	4b43      	ldr	r3, [pc, #268]	@ (80092d4 <__ieee754_powf+0x274>)
 80091c8:	4599      	cmp	r9, r3
 80091ca:	d907      	bls.n	80091dc <__ieee754_powf+0x17c>
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	dcf4      	bgt.n	80091ba <__ieee754_powf+0x15a>
 80091d0:	2000      	movs	r0, #0
 80091d2:	b007      	add	sp, #28
 80091d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	f000 bb05 	b.w	80097e6 <__math_uflowf>
 80091dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80091e0:	f7f7 fc6e 	bl	8000ac0 <__aeabi_fsub>
 80091e4:	493c      	ldr	r1, [pc, #240]	@ (80092d8 <__ieee754_powf+0x278>)
 80091e6:	4606      	mov	r6, r0
 80091e8:	f7f7 fd74 	bl	8000cd4 <__aeabi_fmul>
 80091ec:	493b      	ldr	r1, [pc, #236]	@ (80092dc <__ieee754_powf+0x27c>)
 80091ee:	4680      	mov	r8, r0
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7f7 fd6f 	bl	8000cd4 <__aeabi_fmul>
 80091f6:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80091fa:	4681      	mov	r9, r0
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7f7 fd69 	bl	8000cd4 <__aeabi_fmul>
 8009202:	4601      	mov	r1, r0
 8009204:	4836      	ldr	r0, [pc, #216]	@ (80092e0 <__ieee754_powf+0x280>)
 8009206:	f7f7 fc5b 	bl	8000ac0 <__aeabi_fsub>
 800920a:	4631      	mov	r1, r6
 800920c:	f7f7 fd62 	bl	8000cd4 <__aeabi_fmul>
 8009210:	4601      	mov	r1, r0
 8009212:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009216:	f7f7 fc53 	bl	8000ac0 <__aeabi_fsub>
 800921a:	4631      	mov	r1, r6
 800921c:	4682      	mov	sl, r0
 800921e:	4630      	mov	r0, r6
 8009220:	f7f7 fd58 	bl	8000cd4 <__aeabi_fmul>
 8009224:	4601      	mov	r1, r0
 8009226:	4650      	mov	r0, sl
 8009228:	f7f7 fd54 	bl	8000cd4 <__aeabi_fmul>
 800922c:	492d      	ldr	r1, [pc, #180]	@ (80092e4 <__ieee754_powf+0x284>)
 800922e:	f7f7 fd51 	bl	8000cd4 <__aeabi_fmul>
 8009232:	4601      	mov	r1, r0
 8009234:	4648      	mov	r0, r9
 8009236:	f7f7 fc43 	bl	8000ac0 <__aeabi_fsub>
 800923a:	4601      	mov	r1, r0
 800923c:	4606      	mov	r6, r0
 800923e:	4640      	mov	r0, r8
 8009240:	f7f7 fc40 	bl	8000ac4 <__addsf3>
 8009244:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009248:	f02b 0b0f 	bic.w	fp, fp, #15
 800924c:	4641      	mov	r1, r8
 800924e:	4658      	mov	r0, fp
 8009250:	f7f7 fc36 	bl	8000ac0 <__aeabi_fsub>
 8009254:	4601      	mov	r1, r0
 8009256:	4630      	mov	r0, r6
 8009258:	f7f7 fc32 	bl	8000ac0 <__aeabi_fsub>
 800925c:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	3d01      	subs	r5, #1
 8009264:	f024 040f 	bic.w	r4, r4, #15
 8009268:	431d      	orrs	r5, r3
 800926a:	4606      	mov	r6, r0
 800926c:	4621      	mov	r1, r4
 800926e:	4638      	mov	r0, r7
 8009270:	bf14      	ite	ne
 8009272:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8009276:	4d1c      	ldreq	r5, [pc, #112]	@ (80092e8 <__ieee754_powf+0x288>)
 8009278:	f7f7 fc22 	bl	8000ac0 <__aeabi_fsub>
 800927c:	4659      	mov	r1, fp
 800927e:	f7f7 fd29 	bl	8000cd4 <__aeabi_fmul>
 8009282:	4639      	mov	r1, r7
 8009284:	4680      	mov	r8, r0
 8009286:	4630      	mov	r0, r6
 8009288:	f7f7 fd24 	bl	8000cd4 <__aeabi_fmul>
 800928c:	4601      	mov	r1, r0
 800928e:	4640      	mov	r0, r8
 8009290:	f7f7 fc18 	bl	8000ac4 <__addsf3>
 8009294:	4621      	mov	r1, r4
 8009296:	4606      	mov	r6, r0
 8009298:	4658      	mov	r0, fp
 800929a:	f7f7 fd1b 	bl	8000cd4 <__aeabi_fmul>
 800929e:	4601      	mov	r1, r0
 80092a0:	4607      	mov	r7, r0
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7f7 fc0e 	bl	8000ac4 <__addsf3>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4680      	mov	r8, r0
 80092ae:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80092b2:	f340 8141 	ble.w	8009538 <__ieee754_powf+0x4d8>
 80092b6:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80092ba:	f240 812a 	bls.w	8009512 <__ieee754_powf+0x4b2>
 80092be:	2100      	movs	r1, #0
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7f7 fea5 	bl	8001010 <__aeabi_fcmplt>
 80092c6:	3800      	subs	r0, #0
 80092c8:	bf18      	it	ne
 80092ca:	2001      	movne	r0, #1
 80092cc:	e776      	b.n	80091bc <__ieee754_powf+0x15c>
 80092ce:	bf00      	nop
 80092d0:	3f7ffff3 	.word	0x3f7ffff3
 80092d4:	3f800007 	.word	0x3f800007
 80092d8:	3fb8aa00 	.word	0x3fb8aa00
 80092dc:	36eca570 	.word	0x36eca570
 80092e0:	3eaaaaab 	.word	0x3eaaaaab
 80092e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80092e8:	bf800000 	.word	0xbf800000
 80092ec:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80092f0:	f040 810b 	bne.w	800950a <__ieee754_powf+0x4aa>
 80092f4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80092f8:	f7f7 fcec 	bl	8000cd4 <__aeabi_fmul>
 80092fc:	f06f 0217 	mvn.w	r2, #23
 8009300:	4682      	mov	sl, r0
 8009302:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8009306:	3b7f      	subs	r3, #127	@ 0x7f
 8009308:	441a      	add	r2, r3
 800930a:	4b96      	ldr	r3, [pc, #600]	@ (8009564 <__ieee754_powf+0x504>)
 800930c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009310:	459a      	cmp	sl, r3
 8009312:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8009316:	dd06      	ble.n	8009326 <__ieee754_powf+0x2c6>
 8009318:	4b93      	ldr	r3, [pc, #588]	@ (8009568 <__ieee754_powf+0x508>)
 800931a:	459a      	cmp	sl, r3
 800931c:	f340 80f7 	ble.w	800950e <__ieee754_powf+0x4ae>
 8009320:	3201      	adds	r2, #1
 8009322:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8009326:	2300      	movs	r3, #0
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	9205      	str	r2, [sp, #20]
 800932c:	4b8f      	ldr	r3, [pc, #572]	@ (800956c <__ieee754_powf+0x50c>)
 800932e:	9a01      	ldr	r2, [sp, #4]
 8009330:	4630      	mov	r0, r6
 8009332:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8009336:	46b2      	mov	sl, r6
 8009338:	4659      	mov	r1, fp
 800933a:	f7f7 fbc1 	bl	8000ac0 <__aeabi_fsub>
 800933e:	4631      	mov	r1, r6
 8009340:	4681      	mov	r9, r0
 8009342:	4658      	mov	r0, fp
 8009344:	f7f7 fbbe 	bl	8000ac4 <__addsf3>
 8009348:	4601      	mov	r1, r0
 800934a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800934e:	f7f7 fd75 	bl	8000e3c <__aeabi_fdiv>
 8009352:	4601      	mov	r1, r0
 8009354:	9004      	str	r0, [sp, #16]
 8009356:	4648      	mov	r0, r9
 8009358:	f7f7 fcbc 	bl	8000cd4 <__aeabi_fmul>
 800935c:	9002      	str	r0, [sp, #8]
 800935e:	9b02      	ldr	r3, [sp, #8]
 8009360:	1076      	asrs	r6, r6, #1
 8009362:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 8009366:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8009370:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8009374:	f028 080f 	bic.w	r8, r8, #15
 8009378:	4631      	mov	r1, r6
 800937a:	4640      	mov	r0, r8
 800937c:	f7f7 fcaa 	bl	8000cd4 <__aeabi_fmul>
 8009380:	4601      	mov	r1, r0
 8009382:	4648      	mov	r0, r9
 8009384:	f7f7 fb9c 	bl	8000ac0 <__aeabi_fsub>
 8009388:	4659      	mov	r1, fp
 800938a:	4681      	mov	r9, r0
 800938c:	4630      	mov	r0, r6
 800938e:	f7f7 fb97 	bl	8000ac0 <__aeabi_fsub>
 8009392:	4601      	mov	r1, r0
 8009394:	4650      	mov	r0, sl
 8009396:	f7f7 fb93 	bl	8000ac0 <__aeabi_fsub>
 800939a:	4641      	mov	r1, r8
 800939c:	f7f7 fc9a 	bl	8000cd4 <__aeabi_fmul>
 80093a0:	4601      	mov	r1, r0
 80093a2:	4648      	mov	r0, r9
 80093a4:	f7f7 fb8c 	bl	8000ac0 <__aeabi_fsub>
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	4619      	mov	r1, r3
 80093ac:	f7f7 fc92 	bl	8000cd4 <__aeabi_fmul>
 80093b0:	9902      	ldr	r1, [sp, #8]
 80093b2:	4683      	mov	fp, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	f7f7 fc8d 	bl	8000cd4 <__aeabi_fmul>
 80093ba:	4606      	mov	r6, r0
 80093bc:	496c      	ldr	r1, [pc, #432]	@ (8009570 <__ieee754_powf+0x510>)
 80093be:	f7f7 fc89 	bl	8000cd4 <__aeabi_fmul>
 80093c2:	496c      	ldr	r1, [pc, #432]	@ (8009574 <__ieee754_powf+0x514>)
 80093c4:	f7f7 fb7e 	bl	8000ac4 <__addsf3>
 80093c8:	4631      	mov	r1, r6
 80093ca:	f7f7 fc83 	bl	8000cd4 <__aeabi_fmul>
 80093ce:	496a      	ldr	r1, [pc, #424]	@ (8009578 <__ieee754_powf+0x518>)
 80093d0:	f7f7 fb78 	bl	8000ac4 <__addsf3>
 80093d4:	4631      	mov	r1, r6
 80093d6:	f7f7 fc7d 	bl	8000cd4 <__aeabi_fmul>
 80093da:	4968      	ldr	r1, [pc, #416]	@ (800957c <__ieee754_powf+0x51c>)
 80093dc:	f7f7 fb72 	bl	8000ac4 <__addsf3>
 80093e0:	4631      	mov	r1, r6
 80093e2:	f7f7 fc77 	bl	8000cd4 <__aeabi_fmul>
 80093e6:	4966      	ldr	r1, [pc, #408]	@ (8009580 <__ieee754_powf+0x520>)
 80093e8:	f7f7 fb6c 	bl	8000ac4 <__addsf3>
 80093ec:	4631      	mov	r1, r6
 80093ee:	f7f7 fc71 	bl	8000cd4 <__aeabi_fmul>
 80093f2:	4964      	ldr	r1, [pc, #400]	@ (8009584 <__ieee754_powf+0x524>)
 80093f4:	f7f7 fb66 	bl	8000ac4 <__addsf3>
 80093f8:	4631      	mov	r1, r6
 80093fa:	4681      	mov	r9, r0
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7f7 fc69 	bl	8000cd4 <__aeabi_fmul>
 8009402:	4601      	mov	r1, r0
 8009404:	4648      	mov	r0, r9
 8009406:	f7f7 fc65 	bl	8000cd4 <__aeabi_fmul>
 800940a:	4606      	mov	r6, r0
 800940c:	4641      	mov	r1, r8
 800940e:	9802      	ldr	r0, [sp, #8]
 8009410:	f7f7 fb58 	bl	8000ac4 <__addsf3>
 8009414:	4659      	mov	r1, fp
 8009416:	f7f7 fc5d 	bl	8000cd4 <__aeabi_fmul>
 800941a:	4631      	mov	r1, r6
 800941c:	f7f7 fb52 	bl	8000ac4 <__addsf3>
 8009420:	4641      	mov	r1, r8
 8009422:	4681      	mov	r9, r0
 8009424:	4640      	mov	r0, r8
 8009426:	f7f7 fc55 	bl	8000cd4 <__aeabi_fmul>
 800942a:	4957      	ldr	r1, [pc, #348]	@ (8009588 <__ieee754_powf+0x528>)
 800942c:	4682      	mov	sl, r0
 800942e:	f7f7 fb49 	bl	8000ac4 <__addsf3>
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 fb46 	bl	8000ac4 <__addsf3>
 8009438:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800943c:	f026 060f 	bic.w	r6, r6, #15
 8009440:	4631      	mov	r1, r6
 8009442:	4640      	mov	r0, r8
 8009444:	f7f7 fc46 	bl	8000cd4 <__aeabi_fmul>
 8009448:	494f      	ldr	r1, [pc, #316]	@ (8009588 <__ieee754_powf+0x528>)
 800944a:	4680      	mov	r8, r0
 800944c:	4630      	mov	r0, r6
 800944e:	f7f7 fb37 	bl	8000ac0 <__aeabi_fsub>
 8009452:	4651      	mov	r1, sl
 8009454:	f7f7 fb34 	bl	8000ac0 <__aeabi_fsub>
 8009458:	4601      	mov	r1, r0
 800945a:	4648      	mov	r0, r9
 800945c:	f7f7 fb30 	bl	8000ac0 <__aeabi_fsub>
 8009460:	9902      	ldr	r1, [sp, #8]
 8009462:	f7f7 fc37 	bl	8000cd4 <__aeabi_fmul>
 8009466:	4631      	mov	r1, r6
 8009468:	4681      	mov	r9, r0
 800946a:	4658      	mov	r0, fp
 800946c:	f7f7 fc32 	bl	8000cd4 <__aeabi_fmul>
 8009470:	4601      	mov	r1, r0
 8009472:	4648      	mov	r0, r9
 8009474:	f7f7 fb26 	bl	8000ac4 <__addsf3>
 8009478:	4682      	mov	sl, r0
 800947a:	4601      	mov	r1, r0
 800947c:	4640      	mov	r0, r8
 800947e:	f7f7 fb21 	bl	8000ac4 <__addsf3>
 8009482:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009486:	f026 060f 	bic.w	r6, r6, #15
 800948a:	4630      	mov	r0, r6
 800948c:	493f      	ldr	r1, [pc, #252]	@ (800958c <__ieee754_powf+0x52c>)
 800948e:	f7f7 fc21 	bl	8000cd4 <__aeabi_fmul>
 8009492:	4641      	mov	r1, r8
 8009494:	4681      	mov	r9, r0
 8009496:	4630      	mov	r0, r6
 8009498:	f7f7 fb12 	bl	8000ac0 <__aeabi_fsub>
 800949c:	4601      	mov	r1, r0
 800949e:	4650      	mov	r0, sl
 80094a0:	f7f7 fb0e 	bl	8000ac0 <__aeabi_fsub>
 80094a4:	493a      	ldr	r1, [pc, #232]	@ (8009590 <__ieee754_powf+0x530>)
 80094a6:	f7f7 fc15 	bl	8000cd4 <__aeabi_fmul>
 80094aa:	493a      	ldr	r1, [pc, #232]	@ (8009594 <__ieee754_powf+0x534>)
 80094ac:	4680      	mov	r8, r0
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7f7 fc10 	bl	8000cd4 <__aeabi_fmul>
 80094b4:	4601      	mov	r1, r0
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7f7 fb04 	bl	8000ac4 <__addsf3>
 80094bc:	4b36      	ldr	r3, [pc, #216]	@ (8009598 <__ieee754_powf+0x538>)
 80094be:	9a01      	ldr	r2, [sp, #4]
 80094c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c4:	f7f7 fafe 	bl	8000ac4 <__addsf3>
 80094c8:	9a05      	ldr	r2, [sp, #20]
 80094ca:	4606      	mov	r6, r0
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7f7 fbad 	bl	8000c2c <__aeabi_i2f>
 80094d2:	4680      	mov	r8, r0
 80094d4:	4b31      	ldr	r3, [pc, #196]	@ (800959c <__ieee754_powf+0x53c>)
 80094d6:	9a01      	ldr	r2, [sp, #4]
 80094d8:	4631      	mov	r1, r6
 80094da:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 80094de:	4648      	mov	r0, r9
 80094e0:	f7f7 faf0 	bl	8000ac4 <__addsf3>
 80094e4:	4651      	mov	r1, sl
 80094e6:	f7f7 faed 	bl	8000ac4 <__addsf3>
 80094ea:	4641      	mov	r1, r8
 80094ec:	f7f7 faea 	bl	8000ac4 <__addsf3>
 80094f0:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80094f4:	f02b 0b0f 	bic.w	fp, fp, #15
 80094f8:	4641      	mov	r1, r8
 80094fa:	4658      	mov	r0, fp
 80094fc:	f7f7 fae0 	bl	8000ac0 <__aeabi_fsub>
 8009500:	4651      	mov	r1, sl
 8009502:	f7f7 fadd 	bl	8000ac0 <__aeabi_fsub>
 8009506:	4649      	mov	r1, r9
 8009508:	e6a2      	b.n	8009250 <__ieee754_powf+0x1f0>
 800950a:	2200      	movs	r2, #0
 800950c:	e6f9      	b.n	8009302 <__ieee754_powf+0x2a2>
 800950e:	2301      	movs	r3, #1
 8009510:	e70a      	b.n	8009328 <__ieee754_powf+0x2c8>
 8009512:	d149      	bne.n	80095a8 <__ieee754_powf+0x548>
 8009514:	4922      	ldr	r1, [pc, #136]	@ (80095a0 <__ieee754_powf+0x540>)
 8009516:	4630      	mov	r0, r6
 8009518:	f7f7 fad4 	bl	8000ac4 <__addsf3>
 800951c:	4639      	mov	r1, r7
 800951e:	4681      	mov	r9, r0
 8009520:	4620      	mov	r0, r4
 8009522:	f7f7 facd 	bl	8000ac0 <__aeabi_fsub>
 8009526:	4601      	mov	r1, r0
 8009528:	4648      	mov	r0, r9
 800952a:	f7f7 fd8f 	bl	800104c <__aeabi_fcmpgt>
 800952e:	2800      	cmp	r0, #0
 8009530:	f47f aec5 	bne.w	80092be <__ieee754_powf+0x25e>
 8009534:	2386      	movs	r3, #134	@ 0x86
 8009536:	e03c      	b.n	80095b2 <__ieee754_powf+0x552>
 8009538:	4a1a      	ldr	r2, [pc, #104]	@ (80095a4 <__ieee754_powf+0x544>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d907      	bls.n	800954e <__ieee754_powf+0x4ee>
 800953e:	2100      	movs	r1, #0
 8009540:	4628      	mov	r0, r5
 8009542:	f7f7 fd65 	bl	8001010 <__aeabi_fcmplt>
 8009546:	3800      	subs	r0, #0
 8009548:	bf18      	it	ne
 800954a:	2001      	movne	r0, #1
 800954c:	e641      	b.n	80091d2 <__ieee754_powf+0x172>
 800954e:	d12b      	bne.n	80095a8 <__ieee754_powf+0x548>
 8009550:	4639      	mov	r1, r7
 8009552:	f7f7 fab5 	bl	8000ac0 <__aeabi_fsub>
 8009556:	4631      	mov	r1, r6
 8009558:	f7f7 fd6e 	bl	8001038 <__aeabi_fcmpge>
 800955c:	2800      	cmp	r0, #0
 800955e:	d0e9      	beq.n	8009534 <__ieee754_powf+0x4d4>
 8009560:	e7ed      	b.n	800953e <__ieee754_powf+0x4de>
 8009562:	bf00      	nop
 8009564:	001cc471 	.word	0x001cc471
 8009568:	005db3d6 	.word	0x005db3d6
 800956c:	08009d40 	.word	0x08009d40
 8009570:	3e53f142 	.word	0x3e53f142
 8009574:	3e6c3255 	.word	0x3e6c3255
 8009578:	3e8ba305 	.word	0x3e8ba305
 800957c:	3eaaaaab 	.word	0x3eaaaaab
 8009580:	3edb6db7 	.word	0x3edb6db7
 8009584:	3f19999a 	.word	0x3f19999a
 8009588:	40400000 	.word	0x40400000
 800958c:	3f763800 	.word	0x3f763800
 8009590:	3f76384f 	.word	0x3f76384f
 8009594:	369dc3a0 	.word	0x369dc3a0
 8009598:	08009d30 	.word	0x08009d30
 800959c:	08009d38 	.word	0x08009d38
 80095a0:	3338aa3c 	.word	0x3338aa3c
 80095a4:	43160000 	.word	0x43160000
 80095a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80095ac:	f240 809b 	bls.w	80096e6 <__ieee754_powf+0x686>
 80095b0:	15db      	asrs	r3, r3, #23
 80095b2:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80095b6:	3b7e      	subs	r3, #126	@ 0x7e
 80095b8:	411c      	asrs	r4, r3
 80095ba:	4444      	add	r4, r8
 80095bc:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80095c0:	494d      	ldr	r1, [pc, #308]	@ (80096f8 <__ieee754_powf+0x698>)
 80095c2:	3b7f      	subs	r3, #127	@ 0x7f
 80095c4:	4119      	asrs	r1, r3
 80095c6:	4021      	ands	r1, r4
 80095c8:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80095cc:	f1c3 0317 	rsb	r3, r3, #23
 80095d0:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 80095d4:	4638      	mov	r0, r7
 80095d6:	411c      	asrs	r4, r3
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	bfb8      	it	lt
 80095de:	4264      	neglt	r4, r4
 80095e0:	f7f7 fa6e 	bl	8000ac0 <__aeabi_fsub>
 80095e4:	4607      	mov	r7, r0
 80095e6:	4631      	mov	r1, r6
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7f7 fa6b 	bl	8000ac4 <__addsf3>
 80095ee:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 80095f2:	f028 080f 	bic.w	r8, r8, #15
 80095f6:	4640      	mov	r0, r8
 80095f8:	4940      	ldr	r1, [pc, #256]	@ (80096fc <__ieee754_powf+0x69c>)
 80095fa:	f7f7 fb6b 	bl	8000cd4 <__aeabi_fmul>
 80095fe:	4639      	mov	r1, r7
 8009600:	4681      	mov	r9, r0
 8009602:	4640      	mov	r0, r8
 8009604:	f7f7 fa5c 	bl	8000ac0 <__aeabi_fsub>
 8009608:	4601      	mov	r1, r0
 800960a:	4630      	mov	r0, r6
 800960c:	f7f7 fa58 	bl	8000ac0 <__aeabi_fsub>
 8009610:	493b      	ldr	r1, [pc, #236]	@ (8009700 <__ieee754_powf+0x6a0>)
 8009612:	f7f7 fb5f 	bl	8000cd4 <__aeabi_fmul>
 8009616:	493b      	ldr	r1, [pc, #236]	@ (8009704 <__ieee754_powf+0x6a4>)
 8009618:	4606      	mov	r6, r0
 800961a:	4640      	mov	r0, r8
 800961c:	f7f7 fb5a 	bl	8000cd4 <__aeabi_fmul>
 8009620:	4601      	mov	r1, r0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f7 fa4e 	bl	8000ac4 <__addsf3>
 8009628:	4607      	mov	r7, r0
 800962a:	4601      	mov	r1, r0
 800962c:	4648      	mov	r0, r9
 800962e:	f7f7 fa49 	bl	8000ac4 <__addsf3>
 8009632:	4649      	mov	r1, r9
 8009634:	4606      	mov	r6, r0
 8009636:	f7f7 fa43 	bl	8000ac0 <__aeabi_fsub>
 800963a:	4601      	mov	r1, r0
 800963c:	4638      	mov	r0, r7
 800963e:	f7f7 fa3f 	bl	8000ac0 <__aeabi_fsub>
 8009642:	4631      	mov	r1, r6
 8009644:	4680      	mov	r8, r0
 8009646:	4630      	mov	r0, r6
 8009648:	f7f7 fb44 	bl	8000cd4 <__aeabi_fmul>
 800964c:	4607      	mov	r7, r0
 800964e:	492e      	ldr	r1, [pc, #184]	@ (8009708 <__ieee754_powf+0x6a8>)
 8009650:	f7f7 fb40 	bl	8000cd4 <__aeabi_fmul>
 8009654:	492d      	ldr	r1, [pc, #180]	@ (800970c <__ieee754_powf+0x6ac>)
 8009656:	f7f7 fa33 	bl	8000ac0 <__aeabi_fsub>
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 fb3a 	bl	8000cd4 <__aeabi_fmul>
 8009660:	492b      	ldr	r1, [pc, #172]	@ (8009710 <__ieee754_powf+0x6b0>)
 8009662:	f7f7 fa2f 	bl	8000ac4 <__addsf3>
 8009666:	4639      	mov	r1, r7
 8009668:	f7f7 fb34 	bl	8000cd4 <__aeabi_fmul>
 800966c:	4929      	ldr	r1, [pc, #164]	@ (8009714 <__ieee754_powf+0x6b4>)
 800966e:	f7f7 fa27 	bl	8000ac0 <__aeabi_fsub>
 8009672:	4639      	mov	r1, r7
 8009674:	f7f7 fb2e 	bl	8000cd4 <__aeabi_fmul>
 8009678:	4927      	ldr	r1, [pc, #156]	@ (8009718 <__ieee754_powf+0x6b8>)
 800967a:	f7f7 fa23 	bl	8000ac4 <__addsf3>
 800967e:	4639      	mov	r1, r7
 8009680:	f7f7 fb28 	bl	8000cd4 <__aeabi_fmul>
 8009684:	4601      	mov	r1, r0
 8009686:	4630      	mov	r0, r6
 8009688:	f7f7 fa1a 	bl	8000ac0 <__aeabi_fsub>
 800968c:	4607      	mov	r7, r0
 800968e:	4601      	mov	r1, r0
 8009690:	4630      	mov	r0, r6
 8009692:	f7f7 fb1f 	bl	8000cd4 <__aeabi_fmul>
 8009696:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800969a:	4681      	mov	r9, r0
 800969c:	4638      	mov	r0, r7
 800969e:	f7f7 fa0f 	bl	8000ac0 <__aeabi_fsub>
 80096a2:	4601      	mov	r1, r0
 80096a4:	4648      	mov	r0, r9
 80096a6:	f7f7 fbc9 	bl	8000e3c <__aeabi_fdiv>
 80096aa:	4641      	mov	r1, r8
 80096ac:	4607      	mov	r7, r0
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7f7 fb10 	bl	8000cd4 <__aeabi_fmul>
 80096b4:	4641      	mov	r1, r8
 80096b6:	f7f7 fa05 	bl	8000ac4 <__addsf3>
 80096ba:	4601      	mov	r1, r0
 80096bc:	4638      	mov	r0, r7
 80096be:	f7f7 f9ff 	bl	8000ac0 <__aeabi_fsub>
 80096c2:	4631      	mov	r1, r6
 80096c4:	f7f7 f9fc 	bl	8000ac0 <__aeabi_fsub>
 80096c8:	4601      	mov	r1, r0
 80096ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80096ce:	f7f7 f9f7 	bl	8000ac0 <__aeabi_fsub>
 80096d2:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80096d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096da:	da06      	bge.n	80096ea <__ieee754_powf+0x68a>
 80096dc:	4621      	mov	r1, r4
 80096de:	f000 f821 	bl	8009724 <scalbnf>
 80096e2:	4629      	mov	r1, r5
 80096e4:	e526      	b.n	8009134 <__ieee754_powf+0xd4>
 80096e6:	2400      	movs	r4, #0
 80096e8:	e77d      	b.n	80095e6 <__ieee754_powf+0x586>
 80096ea:	4618      	mov	r0, r3
 80096ec:	e7f9      	b.n	80096e2 <__ieee754_powf+0x682>
 80096ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80096f2:	e50b      	b.n	800910c <__ieee754_powf+0xac>
 80096f4:	2100      	movs	r1, #0
 80096f6:	e509      	b.n	800910c <__ieee754_powf+0xac>
 80096f8:	ff800000 	.word	0xff800000
 80096fc:	3f317200 	.word	0x3f317200
 8009700:	3f317218 	.word	0x3f317218
 8009704:	35bfbe8c 	.word	0x35bfbe8c
 8009708:	3331bb4c 	.word	0x3331bb4c
 800970c:	35ddea0e 	.word	0x35ddea0e
 8009710:	388ab355 	.word	0x388ab355
 8009714:	3b360b61 	.word	0x3b360b61
 8009718:	3e2aaaab 	.word	0x3e2aaaab

0800971c <fabsf>:
 800971c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009720:	4770      	bx	lr
	...

08009724 <scalbnf>:
 8009724:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4603      	mov	r3, r0
 800972c:	460d      	mov	r5, r1
 800972e:	4604      	mov	r4, r0
 8009730:	d02e      	beq.n	8009790 <scalbnf+0x6c>
 8009732:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009736:	d304      	bcc.n	8009742 <scalbnf+0x1e>
 8009738:	4601      	mov	r1, r0
 800973a:	f7f7 f9c3 	bl	8000ac4 <__addsf3>
 800973e:	4603      	mov	r3, r0
 8009740:	e026      	b.n	8009790 <scalbnf+0x6c>
 8009742:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8009746:	d118      	bne.n	800977a <scalbnf+0x56>
 8009748:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800974c:	f7f7 fac2 	bl	8000cd4 <__aeabi_fmul>
 8009750:	4a17      	ldr	r2, [pc, #92]	@ (80097b0 <scalbnf+0x8c>)
 8009752:	4603      	mov	r3, r0
 8009754:	4295      	cmp	r5, r2
 8009756:	db0c      	blt.n	8009772 <scalbnf+0x4e>
 8009758:	4604      	mov	r4, r0
 800975a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800975e:	3a19      	subs	r2, #25
 8009760:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009764:	428d      	cmp	r5, r1
 8009766:	dd0a      	ble.n	800977e <scalbnf+0x5a>
 8009768:	4912      	ldr	r1, [pc, #72]	@ (80097b4 <scalbnf+0x90>)
 800976a:	4618      	mov	r0, r3
 800976c:	f361 001e 	bfi	r0, r1, #0, #31
 8009770:	e000      	b.n	8009774 <scalbnf+0x50>
 8009772:	4911      	ldr	r1, [pc, #68]	@ (80097b8 <scalbnf+0x94>)
 8009774:	f7f7 faae 	bl	8000cd4 <__aeabi_fmul>
 8009778:	e7e1      	b.n	800973e <scalbnf+0x1a>
 800977a:	0dd2      	lsrs	r2, r2, #23
 800977c:	e7f0      	b.n	8009760 <scalbnf+0x3c>
 800977e:	1951      	adds	r1, r2, r5
 8009780:	29fe      	cmp	r1, #254	@ 0xfe
 8009782:	dcf1      	bgt.n	8009768 <scalbnf+0x44>
 8009784:	2900      	cmp	r1, #0
 8009786:	dd05      	ble.n	8009794 <scalbnf+0x70>
 8009788:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800978c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009790:	4618      	mov	r0, r3
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	f111 0f16 	cmn.w	r1, #22
 8009798:	da01      	bge.n	800979e <scalbnf+0x7a>
 800979a:	4907      	ldr	r1, [pc, #28]	@ (80097b8 <scalbnf+0x94>)
 800979c:	e7e5      	b.n	800976a <scalbnf+0x46>
 800979e:	f101 0019 	add.w	r0, r1, #25
 80097a2:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80097a6:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80097aa:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80097ae:	e7e1      	b.n	8009774 <scalbnf+0x50>
 80097b0:	ffff3cb0 	.word	0xffff3cb0
 80097b4:	7149f2ca 	.word	0x7149f2ca
 80097b8:	0da24260 	.word	0x0da24260

080097bc <with_errnof>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	f7fd fb77 	bl	8006eb4 <__errno>
 80097c6:	6005      	str	r5, [r0, #0]
 80097c8:	4620      	mov	r0, r4
 80097ca:	bd38      	pop	{r3, r4, r5, pc}

080097cc <xflowf>:
 80097cc:	b508      	push	{r3, lr}
 80097ce:	b140      	cbz	r0, 80097e2 <xflowf+0x16>
 80097d0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80097d4:	f7f7 fa7e 	bl	8000cd4 <__aeabi_fmul>
 80097d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097dc:	2122      	movs	r1, #34	@ 0x22
 80097de:	f7ff bfed 	b.w	80097bc <with_errnof>
 80097e2:	4608      	mov	r0, r1
 80097e4:	e7f6      	b.n	80097d4 <xflowf+0x8>

080097e6 <__math_uflowf>:
 80097e6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80097ea:	f7ff bfef 	b.w	80097cc <xflowf>

080097ee <__math_oflowf>:
 80097ee:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80097f2:	f7ff bfeb 	b.w	80097cc <xflowf>
	...

080097f8 <__ieee754_sqrtf>:
 80097f8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80097fc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009804:	4603      	mov	r3, r0
 8009806:	4604      	mov	r4, r0
 8009808:	d30a      	bcc.n	8009820 <__ieee754_sqrtf+0x28>
 800980a:	4601      	mov	r1, r0
 800980c:	f7f7 fa62 	bl	8000cd4 <__aeabi_fmul>
 8009810:	4601      	mov	r1, r0
 8009812:	4620      	mov	r0, r4
 8009814:	f7f7 f956 	bl	8000ac4 <__addsf3>
 8009818:	4604      	mov	r4, r0
 800981a:	4620      	mov	r0, r4
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	2a00      	cmp	r2, #0
 8009822:	d0fa      	beq.n	800981a <__ieee754_sqrtf+0x22>
 8009824:	2800      	cmp	r0, #0
 8009826:	da06      	bge.n	8009836 <__ieee754_sqrtf+0x3e>
 8009828:	4601      	mov	r1, r0
 800982a:	f7f7 f949 	bl	8000ac0 <__aeabi_fsub>
 800982e:	4601      	mov	r1, r0
 8009830:	f7f7 fb04 	bl	8000e3c <__aeabi_fdiv>
 8009834:	e7f0      	b.n	8009818 <__ieee754_sqrtf+0x20>
 8009836:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800983a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800983e:	d03e      	beq.n	80098be <__ieee754_sqrtf+0xc6>
 8009840:	2400      	movs	r4, #0
 8009842:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8009846:	07ca      	lsls	r2, r1, #31
 8009848:	f04f 0019 	mov.w	r0, #25
 800984c:	4626      	mov	r6, r4
 800984e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009852:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009856:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800985a:	bf58      	it	pl
 800985c:	005b      	lslpl	r3, r3, #1
 800985e:	106d      	asrs	r5, r5, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	1872      	adds	r2, r6, r1
 8009864:	429a      	cmp	r2, r3
 8009866:	bfcf      	iteee	gt
 8009868:	461a      	movgt	r2, r3
 800986a:	1856      	addle	r6, r2, r1
 800986c:	1864      	addle	r4, r4, r1
 800986e:	1a9a      	suble	r2, r3, r2
 8009870:	3801      	subs	r0, #1
 8009872:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009876:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800987a:	d1f2      	bne.n	8009862 <__ieee754_sqrtf+0x6a>
 800987c:	b1ba      	cbz	r2, 80098ae <__ieee754_sqrtf+0xb6>
 800987e:	4e14      	ldr	r6, [pc, #80]	@ (80098d0 <__ieee754_sqrtf+0xd8>)
 8009880:	4f14      	ldr	r7, [pc, #80]	@ (80098d4 <__ieee754_sqrtf+0xdc>)
 8009882:	6830      	ldr	r0, [r6, #0]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	f7f7 f91b 	bl	8000ac0 <__aeabi_fsub>
 800988a:	f8d6 8000 	ldr.w	r8, [r6]
 800988e:	4601      	mov	r1, r0
 8009890:	4640      	mov	r0, r8
 8009892:	f7f7 fbc7 	bl	8001024 <__aeabi_fcmple>
 8009896:	b150      	cbz	r0, 80098ae <__ieee754_sqrtf+0xb6>
 8009898:	6830      	ldr	r0, [r6, #0]
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	f7f7 f912 	bl	8000ac4 <__addsf3>
 80098a0:	6836      	ldr	r6, [r6, #0]
 80098a2:	4601      	mov	r1, r0
 80098a4:	4630      	mov	r0, r6
 80098a6:	f7f7 fbb3 	bl	8001010 <__aeabi_fcmplt>
 80098aa:	b168      	cbz	r0, 80098c8 <__ieee754_sqrtf+0xd0>
 80098ac:	3402      	adds	r4, #2
 80098ae:	1064      	asrs	r4, r4, #1
 80098b0:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80098b4:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80098b8:	e7af      	b.n	800981a <__ieee754_sqrtf+0x22>
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	3201      	adds	r2, #1
 80098be:	0218      	lsls	r0, r3, #8
 80098c0:	d5fb      	bpl.n	80098ba <__ieee754_sqrtf+0xc2>
 80098c2:	3a01      	subs	r2, #1
 80098c4:	1a89      	subs	r1, r1, r2
 80098c6:	e7bb      	b.n	8009840 <__ieee754_sqrtf+0x48>
 80098c8:	3401      	adds	r4, #1
 80098ca:	f024 0401 	bic.w	r4, r4, #1
 80098ce:	e7ee      	b.n	80098ae <__ieee754_sqrtf+0xb6>
 80098d0:	200001d8 	.word	0x200001d8
 80098d4:	200001d4 	.word	0x200001d4

080098d8 <_init>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr

080098e4 <_fini>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr
