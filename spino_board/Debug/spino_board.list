
spino_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a144  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a2e8  0800a2e8  0000b2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a768  0800a768  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a768  0800a768  0000b768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a770  0800a770  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a770  0800a770  0000b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a778  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001d4  0800a94c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800a94c  0000c440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d2d  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba3  00000000  00000000  0001df31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00020ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  00021988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dd2  00000000  00000000  000224cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132fb  00000000  00000000  000452a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf14  00000000  00000000  0005859c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001254b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  001254f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0012a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2cc 	.word	0x0800a2cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800a2cc 	.word	0x0800a2cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_frsub>:
 8000bb8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bbc:	e002      	b.n	8000bc4 <__addsf3>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fsub>:
 8000bc0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc4 <__addsf3>:
 8000bc4:	0042      	lsls	r2, r0, #1
 8000bc6:	bf1f      	itttt	ne
 8000bc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bcc:	ea92 0f03 	teqne	r2, r3
 8000bd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd8:	d06a      	beq.n	8000cb0 <__addsf3+0xec>
 8000bda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be2:	bfc1      	itttt	gt
 8000be4:	18d2      	addgt	r2, r2, r3
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	4048      	eorgt	r0, r1
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b19      	cmp	r3, #25
 8000bf2:	bf88      	it	hi
 8000bf4:	4770      	bxhi	lr
 8000bf6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4249      	negne	r1, r1
 8000c16:	ea92 0f03 	teq	r2, r3
 8000c1a:	d03f      	beq.n	8000c9c <__addsf3+0xd8>
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	fa41 fc03 	asr.w	ip, r1, r3
 8000c24:	eb10 000c 	adds.w	r0, r0, ip
 8000c28:	f1c3 0320 	rsb	r3, r3, #32
 8000c2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__addsf3+0x78>
 8000c36:	4249      	negs	r1, r1
 8000c38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c40:	d313      	bcc.n	8000c6a <__addsf3+0xa6>
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c46:	d306      	bcc.n	8000c56 <__addsf3+0x92>
 8000c48:	0840      	lsrs	r0, r0, #1
 8000c4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4e:	f102 0201 	add.w	r2, r2, #1
 8000c52:	2afe      	cmp	r2, #254	@ 0xfe
 8000c54:	d251      	bcs.n	8000cfa <__addsf3+0x136>
 8000c56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5e:	bf08      	it	eq
 8000c60:	f020 0001 	biceq.w	r0, r0, #1
 8000c64:	ea40 0003 	orr.w	r0, r0, r3
 8000c68:	4770      	bx	lr
 8000c6a:	0049      	lsls	r1, r1, #1
 8000c6c:	eb40 0000 	adc.w	r0, r0, r0
 8000c70:	3a01      	subs	r2, #1
 8000c72:	bf28      	it	cs
 8000c74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c78:	d2ed      	bcs.n	8000c56 <__addsf3+0x92>
 8000c7a:	fab0 fc80 	clz	ip, r0
 8000c7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c82:	ebb2 020c 	subs.w	r2, r2, ip
 8000c86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8a:	bfaa      	itet	ge
 8000c8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c90:	4252      	neglt	r2, r2
 8000c92:	4318      	orrge	r0, r3
 8000c94:	bfbc      	itt	lt
 8000c96:	40d0      	lsrlt	r0, r2
 8000c98:	4318      	orrlt	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	f092 0f00 	teq	r2, #0
 8000ca0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca4:	bf06      	itte	eq
 8000ca6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000caa:	3201      	addeq	r2, #1
 8000cac:	3b01      	subne	r3, #1
 8000cae:	e7b5      	b.n	8000c1c <__addsf3+0x58>
 8000cb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cbe:	d021      	beq.n	8000d04 <__addsf3+0x140>
 8000cc0:	ea92 0f03 	teq	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <__addsf3+0x10c>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	bf08      	it	eq
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	4770      	bx	lr
 8000cd0:	ea90 0f01 	teq	r0, r1
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	4770      	bxne	lr
 8000cda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cde:	d104      	bne.n	8000cea <__addsf3+0x126>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cee:	bf3c      	itt	cc
 8000cf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bxcc	lr
 8000cf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d02:	4770      	bx	lr
 8000d04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d08:	bf16      	itet	ne
 8000d0a:	4608      	movne	r0, r1
 8000d0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d10:	4601      	movne	r1, r0
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	bf06      	itte	eq
 8000d16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1a:	ea90 0f01 	teqeq	r0, r1
 8000d1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_ui2f>:
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e004      	b.n	8000d34 <__aeabi_i2f+0x8>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_i2f>:
 8000d2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d30:	bf48      	it	mi
 8000d32:	4240      	negmi	r0, r0
 8000d34:	ea5f 0c00 	movs.w	ip, r0
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d40:	4601      	mov	r1, r0
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	e01c      	b.n	8000d82 <__aeabi_l2f+0x2a>

08000d48 <__aeabi_ul2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e00a      	b.n	8000d6c <__aeabi_l2f+0x14>
 8000d56:	bf00      	nop

08000d58 <__aeabi_l2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_l2f+0x14>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	ea5f 0c01 	movs.w	ip, r1
 8000d70:	bf02      	ittt	eq
 8000d72:	4684      	moveq	ip, r0
 8000d74:	4601      	moveq	r1, r0
 8000d76:	2000      	moveq	r0, #0
 8000d78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d7c:	bf08      	it	eq
 8000d7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d86:	fabc f28c 	clz	r2, ip
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d90:	db10      	blt.n	8000db4 <__aeabi_l2f+0x5c>
 8000d92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da4:	fa20 f202 	lsr.w	r2, r0, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f102 0220 	add.w	r2, r2, #32
 8000db8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_ldivmod>:
 8000dd4:	b97b      	cbnz	r3, 8000df6 <__aeabi_ldivmod+0x22>
 8000dd6:	b972      	cbnz	r2, 8000df6 <__aeabi_ldivmod+0x22>
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bfbe      	ittt	lt
 8000ddc:	2000      	movlt	r0, #0
 8000dde:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000de2:	e006      	blt.n	8000df2 <__aeabi_ldivmod+0x1e>
 8000de4:	bf08      	it	eq
 8000de6:	2800      	cmpeq	r0, #0
 8000de8:	bf1c      	itt	ne
 8000dea:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dee:	f04f 30ff 	movne.w	r0, #4294967295
 8000df2:	f000 b9b5 	b.w	8001160 <__aeabi_idiv0>
 8000df6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dfa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	db09      	blt.n	8000e16 <__aeabi_ldivmod+0x42>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db1a      	blt.n	8000e3c <__aeabi_ldivmod+0x68>
 8000e06:	f000 f84d 	bl	8000ea4 <__udivmoddi4>
 8000e0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e12:	b004      	add	sp, #16
 8000e14:	4770      	bx	lr
 8000e16:	4240      	negs	r0, r0
 8000e18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db1b      	blt.n	8000e58 <__aeabi_ldivmod+0x84>
 8000e20:	f000 f840 	bl	8000ea4 <__udivmoddi4>
 8000e24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e2c:	b004      	add	sp, #16
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	4252      	negs	r2, r2
 8000e36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e3a:	4770      	bx	lr
 8000e3c:	4252      	negs	r2, r2
 8000e3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e42:	f000 f82f 	bl	8000ea4 <__udivmoddi4>
 8000e46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4e:	b004      	add	sp, #16
 8000e50:	4240      	negs	r0, r0
 8000e52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e56:	4770      	bx	lr
 8000e58:	4252      	negs	r2, r2
 8000e5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5e:	f000 f821 	bl	8000ea4 <__udivmoddi4>
 8000e62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6a:	b004      	add	sp, #16
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b96a 	b.w	8001160 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	460c      	mov	r4, r1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d14e      	bne.n	8000f4e <__udivmoddi4+0xaa>
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	458c      	cmp	ip, r1
 8000eb4:	4686      	mov	lr, r0
 8000eb6:	fab2 f282 	clz	r2, r2
 8000eba:	d962      	bls.n	8000f82 <__udivmoddi4+0xde>
 8000ebc:	b14a      	cbz	r2, 8000ed2 <__udivmoddi4+0x2e>
 8000ebe:	f1c2 0320 	rsb	r3, r2, #32
 8000ec2:	4091      	lsls	r1, r2
 8000ec4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	4319      	orrs	r1, r3
 8000ece:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f f68c 	uxth.w	r6, ip
 8000eda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ede:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ee2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb04 f106 	mul.w	r1, r4, r6
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x64>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000efa:	f080 8112 	bcs.w	8001122 <__udivmoddi4+0x27e>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 810f 	bls.w	8001122 <__udivmoddi4+0x27e>
 8000f04:	3c02      	subs	r4, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a59      	subs	r1, r3, r1
 8000f0a:	fa1f f38e 	uxth.w	r3, lr
 8000f0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f12:	fb07 1110 	mls	r1, r7, r0, r1
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f606 	mul.w	r6, r0, r6
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	d90a      	bls.n	8000f38 <__udivmoddi4+0x94>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f2a:	f080 80fc 	bcs.w	8001126 <__udivmoddi4+0x282>
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	f240 80f9 	bls.w	8001126 <__udivmoddi4+0x282>
 8000f34:	4463      	add	r3, ip
 8000f36:	3802      	subs	r0, #2
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f3e:	2100      	movs	r1, #0
 8000f40:	b11d      	cbz	r5, 8000f4a <__udivmoddi4+0xa6>
 8000f42:	40d3      	lsrs	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	e9c5 3200 	strd	r3, r2, [r5]
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d905      	bls.n	8000f5e <__udivmoddi4+0xba>
 8000f52:	b10d      	cbz	r5, 8000f58 <__udivmoddi4+0xb4>
 8000f54:	e9c5 0100 	strd	r0, r1, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e7f5      	b.n	8000f4a <__udivmoddi4+0xa6>
 8000f5e:	fab3 f183 	clz	r1, r3
 8000f62:	2900      	cmp	r1, #0
 8000f64:	d146      	bne.n	8000ff4 <__udivmoddi4+0x150>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d302      	bcc.n	8000f70 <__udivmoddi4+0xcc>
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	f0c0 80f0 	bcc.w	8001150 <__udivmoddi4+0x2ac>
 8000f70:	1a86      	subs	r6, r0, r2
 8000f72:	eb64 0303 	sbc.w	r3, r4, r3
 8000f76:	2001      	movs	r0, #1
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	d0e6      	beq.n	8000f4a <__udivmoddi4+0xa6>
 8000f7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f80:	e7e3      	b.n	8000f4a <__udivmoddi4+0xa6>
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	f040 8090 	bne.w	80010a8 <__udivmoddi4+0x204>
 8000f88:	eba1 040c 	sub.w	r4, r1, ip
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa1f f78c 	uxth.w	r7, ip
 8000f94:	2101      	movs	r1, #1
 8000f96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fa6:	fb07 f006 	mul.w	r0, r7, r6
 8000faa:	4298      	cmp	r0, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x11c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000fb6:	d202      	bcs.n	8000fbe <__udivmoddi4+0x11a>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f200 80cd 	bhi.w	8001158 <__udivmoddi4+0x2b4>
 8000fbe:	4626      	mov	r6, r4
 8000fc0:	1a1c      	subs	r4, r3, r0
 8000fc2:	fa1f f38e 	uxth.w	r3, lr
 8000fc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fca:	fb08 4410 	mls	r4, r8, r0, r4
 8000fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fd2:	fb00 f707 	mul.w	r7, r0, r7
 8000fd6:	429f      	cmp	r7, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x148>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fe2:	d202      	bcs.n	8000fea <__udivmoddi4+0x146>
 8000fe4:	429f      	cmp	r7, r3
 8000fe6:	f200 80b0 	bhi.w	800114a <__udivmoddi4+0x2a6>
 8000fea:	4620      	mov	r0, r4
 8000fec:	1bdb      	subs	r3, r3, r7
 8000fee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ff2:	e7a5      	b.n	8000f40 <__udivmoddi4+0x9c>
 8000ff4:	f1c1 0620 	rsb	r6, r1, #32
 8000ff8:	408b      	lsls	r3, r1
 8000ffa:	fa22 f706 	lsr.w	r7, r2, r6
 8000ffe:	431f      	orrs	r7, r3
 8001000:	fa20 fc06 	lsr.w	ip, r0, r6
 8001004:	fa04 f301 	lsl.w	r3, r4, r1
 8001008:	ea43 030c 	orr.w	r3, r3, ip
 800100c:	40f4      	lsrs	r4, r6
 800100e:	fa00 f801 	lsl.w	r8, r0, r1
 8001012:	0c38      	lsrs	r0, r7, #16
 8001014:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001018:	fbb4 fef0 	udiv	lr, r4, r0
 800101c:	fa1f fc87 	uxth.w	ip, r7
 8001020:	fb00 441e 	mls	r4, r0, lr, r4
 8001024:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001028:	fb0e f90c 	mul.w	r9, lr, ip
 800102c:	45a1      	cmp	r9, r4
 800102e:	fa02 f201 	lsl.w	r2, r2, r1
 8001032:	d90a      	bls.n	800104a <__udivmoddi4+0x1a6>
 8001034:	193c      	adds	r4, r7, r4
 8001036:	f10e 3aff 	add.w	sl, lr, #4294967295
 800103a:	f080 8084 	bcs.w	8001146 <__udivmoddi4+0x2a2>
 800103e:	45a1      	cmp	r9, r4
 8001040:	f240 8081 	bls.w	8001146 <__udivmoddi4+0x2a2>
 8001044:	f1ae 0e02 	sub.w	lr, lr, #2
 8001048:	443c      	add	r4, r7
 800104a:	eba4 0409 	sub.w	r4, r4, r9
 800104e:	fa1f f983 	uxth.w	r9, r3
 8001052:	fbb4 f3f0 	udiv	r3, r4, r0
 8001056:	fb00 4413 	mls	r4, r0, r3, r4
 800105a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800105e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001062:	45a4      	cmp	ip, r4
 8001064:	d907      	bls.n	8001076 <__udivmoddi4+0x1d2>
 8001066:	193c      	adds	r4, r7, r4
 8001068:	f103 30ff 	add.w	r0, r3, #4294967295
 800106c:	d267      	bcs.n	800113e <__udivmoddi4+0x29a>
 800106e:	45a4      	cmp	ip, r4
 8001070:	d965      	bls.n	800113e <__udivmoddi4+0x29a>
 8001072:	3b02      	subs	r3, #2
 8001074:	443c      	add	r4, r7
 8001076:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800107a:	fba0 9302 	umull	r9, r3, r0, r2
 800107e:	eba4 040c 	sub.w	r4, r4, ip
 8001082:	429c      	cmp	r4, r3
 8001084:	46ce      	mov	lr, r9
 8001086:	469c      	mov	ip, r3
 8001088:	d351      	bcc.n	800112e <__udivmoddi4+0x28a>
 800108a:	d04e      	beq.n	800112a <__udivmoddi4+0x286>
 800108c:	b155      	cbz	r5, 80010a4 <__udivmoddi4+0x200>
 800108e:	ebb8 030e 	subs.w	r3, r8, lr
 8001092:	eb64 040c 	sbc.w	r4, r4, ip
 8001096:	fa04 f606 	lsl.w	r6, r4, r6
 800109a:	40cb      	lsrs	r3, r1
 800109c:	431e      	orrs	r6, r3
 800109e:	40cc      	lsrs	r4, r1
 80010a0:	e9c5 6400 	strd	r6, r4, [r5]
 80010a4:	2100      	movs	r1, #0
 80010a6:	e750      	b.n	8000f4a <__udivmoddi4+0xa6>
 80010a8:	f1c2 0320 	rsb	r3, r2, #32
 80010ac:	fa20 f103 	lsr.w	r1, r0, r3
 80010b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010b4:	fa24 f303 	lsr.w	r3, r4, r3
 80010b8:	4094      	lsls	r4, r2
 80010ba:	430c      	orrs	r4, r1
 80010bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80010c4:	fa1f f78c 	uxth.w	r7, ip
 80010c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010cc:	fb08 3110 	mls	r1, r8, r0, r3
 80010d0:	0c23      	lsrs	r3, r4, #16
 80010d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010d6:	fb00 f107 	mul.w	r1, r0, r7
 80010da:	4299      	cmp	r1, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x24c>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80010e6:	d22c      	bcs.n	8001142 <__udivmoddi4+0x29e>
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d92a      	bls.n	8001142 <__udivmoddi4+0x29e>
 80010ec:	3802      	subs	r0, #2
 80010ee:	4463      	add	r3, ip
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	b2a4      	uxth	r4, r4
 80010f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010f8:	fb08 3311 	mls	r3, r8, r1, r3
 80010fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001100:	fb01 f307 	mul.w	r3, r1, r7
 8001104:	42a3      	cmp	r3, r4
 8001106:	d908      	bls.n	800111a <__udivmoddi4+0x276>
 8001108:	eb1c 0404 	adds.w	r4, ip, r4
 800110c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001110:	d213      	bcs.n	800113a <__udivmoddi4+0x296>
 8001112:	42a3      	cmp	r3, r4
 8001114:	d911      	bls.n	800113a <__udivmoddi4+0x296>
 8001116:	3902      	subs	r1, #2
 8001118:	4464      	add	r4, ip
 800111a:	1ae4      	subs	r4, r4, r3
 800111c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001120:	e739      	b.n	8000f96 <__udivmoddi4+0xf2>
 8001122:	4604      	mov	r4, r0
 8001124:	e6f0      	b.n	8000f08 <__udivmoddi4+0x64>
 8001126:	4608      	mov	r0, r1
 8001128:	e706      	b.n	8000f38 <__udivmoddi4+0x94>
 800112a:	45c8      	cmp	r8, r9
 800112c:	d2ae      	bcs.n	800108c <__udivmoddi4+0x1e8>
 800112e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001132:	eb63 0c07 	sbc.w	ip, r3, r7
 8001136:	3801      	subs	r0, #1
 8001138:	e7a8      	b.n	800108c <__udivmoddi4+0x1e8>
 800113a:	4631      	mov	r1, r6
 800113c:	e7ed      	b.n	800111a <__udivmoddi4+0x276>
 800113e:	4603      	mov	r3, r0
 8001140:	e799      	b.n	8001076 <__udivmoddi4+0x1d2>
 8001142:	4630      	mov	r0, r6
 8001144:	e7d4      	b.n	80010f0 <__udivmoddi4+0x24c>
 8001146:	46d6      	mov	lr, sl
 8001148:	e77f      	b.n	800104a <__udivmoddi4+0x1a6>
 800114a:	4463      	add	r3, ip
 800114c:	3802      	subs	r0, #2
 800114e:	e74d      	b.n	8000fec <__udivmoddi4+0x148>
 8001150:	4606      	mov	r6, r0
 8001152:	4623      	mov	r3, r4
 8001154:	4608      	mov	r0, r1
 8001156:	e70f      	b.n	8000f78 <__udivmoddi4+0xd4>
 8001158:	3e02      	subs	r6, #2
 800115a:	4463      	add	r3, ip
 800115c:	e730      	b.n	8000fc0 <__udivmoddi4+0x11c>
 800115e:	bf00      	nop

08001160 <__aeabi_idiv0>:
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <BMP280_ReadCalibrationData>:
static int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

static int32_t t_fine;

// Lecture des registres de calibration
static void BMP280_ReadCalibrationData(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af04      	add	r7, sp, #16
    uint8_t calib[24];
    HAL_I2C_Mem_Read(bmp_hi2c, BMP280_I2C_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, calib, 24, HAL_MAX_DELAY);
 800116a:	4b40      	ldr	r3, [pc, #256]	@ (800126c <BMP280_ReadCalibrationData+0x108>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2318      	movs	r3, #24
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	463b      	mov	r3, r7
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	2288      	movs	r2, #136	@ 0x88
 8001180:	21ee      	movs	r1, #238	@ 0xee
 8001182:	f002 f875 	bl	8003270 <HAL_I2C_Mem_Read>

    dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8001186:	787b      	ldrb	r3, [r7, #1]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	783b      	ldrb	r3, [r7, #0]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <BMP280_ReadCalibrationData+0x10c>)
 8001198:	801a      	strh	r2, [r3, #0]
    dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	78bb      	ldrb	r3, [r7, #2]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <BMP280_ReadCalibrationData+0x110>)
 80011aa:	801a      	strh	r2, [r3, #0]
    dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	793b      	ldrb	r3, [r7, #4]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <BMP280_ReadCalibrationData+0x114>)
 80011bc:	801a      	strh	r2, [r3, #0]

    dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <BMP280_ReadCalibrationData+0x118>)
 80011d0:	801a      	strh	r2, [r3, #0]
    dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <BMP280_ReadCalibrationData+0x11c>)
 80011e2:	801a      	strh	r2, [r3, #0]
    dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <BMP280_ReadCalibrationData+0x120>)
 80011f4:	801a      	strh	r2, [r3, #0]
    dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <BMP280_ReadCalibrationData+0x124>)
 8001206:	801a      	strh	r2, [r3, #0]
    dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <BMP280_ReadCalibrationData+0x128>)
 8001218:	801a      	strh	r2, [r3, #0]
    dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 800121a:	7c7b      	ldrb	r3, [r7, #17]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	7c3b      	ldrb	r3, [r7, #16]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <BMP280_ReadCalibrationData+0x12c>)
 800122a:	801a      	strh	r2, [r3, #0]
    dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7cbb      	ldrb	r3, [r7, #18]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <BMP280_ReadCalibrationData+0x130>)
 800123c:	801a      	strh	r2, [r3, #0]
    dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 800123e:	7d7b      	ldrb	r3, [r7, #21]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7d3b      	ldrb	r3, [r7, #20]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <BMP280_ReadCalibrationData+0x134>)
 800124e:	801a      	strh	r2, [r3, #0]
    dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <BMP280_ReadCalibrationData+0x138>)
 8001260:	801a      	strh	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001f0 	.word	0x200001f0
 8001270:	200001f4 	.word	0x200001f4
 8001274:	200001f6 	.word	0x200001f6
 8001278:	200001f8 	.word	0x200001f8
 800127c:	200001fa 	.word	0x200001fa
 8001280:	200001fc 	.word	0x200001fc
 8001284:	200001fe 	.word	0x200001fe
 8001288:	20000200 	.word	0x20000200
 800128c:	20000202 	.word	0x20000202
 8001290:	20000204 	.word	0x20000204
 8001294:	20000206 	.word	0x20000206
 8001298:	20000208 	.word	0x20000208
 800129c:	2000020a 	.word	0x2000020a

080012a0 <BMP280_Init>:

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	6078      	str	r0, [r7, #4]
    bmp_hi2c = hi2c;
 80012a8:	4a18      	ldr	r2, [pc, #96]	@ (800130c <BMP280_Init+0x6c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]

    // Configuration : normal mode, oversampling x1
    uint8_t ctrl_meas[2] = {0xF4, 0x27}; // Temp x1, Press x1, mode normal
 80012ae:	f242 73f4 	movw	r3, #10228	@ 0x27f4
 80012b2:	81bb      	strh	r3, [r7, #12]
    uint8_t config[2] = {0xF5, 0xA0};    // Standby 1000ms, filter off
 80012b4:	f24a 03f5 	movw	r3, #41205	@ 0xa0f5
 80012b8:	813b      	strh	r3, [r7, #8]

    HAL_I2C_Mem_Write(bmp_hi2c, BMP280_I2C_ADDR, ctrl_meas[0], I2C_MEMADD_SIZE_8BIT, &ctrl_meas[1], 1, HAL_MAX_DELAY);
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <BMP280_Init+0x6c>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	461a      	mov	r2, r3
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	3301      	adds	r3, #1
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	21ee      	movs	r1, #238	@ 0xee
 80012d8:	f001 feb6 	bl	8003048 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(bmp_hi2c, BMP280_I2C_ADDR, config[0], I2C_MEMADD_SIZE_8BIT, &config[1], 1, HAL_MAX_DELAY);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <BMP280_Init+0x6c>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	7a3b      	ldrb	r3, [r7, #8]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	3301      	adds	r3, #1
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	21ee      	movs	r1, #238	@ 0xee
 80012fa:	f001 fea5 	bl	8003048 <HAL_I2C_Mem_Write>

    BMP280_ReadCalibrationData();
 80012fe:	f7ff ff31 	bl	8001164 <BMP280_ReadCalibrationData>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f0 	.word	0x200001f0

08001310 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af04      	add	r7, sp, #16
    uint8_t data[3];
    HAL_I2C_Mem_Read(bmp_hi2c, BMP280_I2C_ADDR, 0xFA, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <BMP280_ReadTemperature+0xb8>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2303      	movs	r3, #3
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	22fa      	movs	r2, #250	@ 0xfa
 800132c:	21ee      	movs	r1, #238	@ 0xee
 800132e:	f001 ff9f 	bl	8003270 <HAL_I2C_Mem_Read>
    int32_t adc_T = (int32_t)(((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4));
 8001332:	793b      	ldrb	r3, [r7, #4]
 8001334:	031a      	lsls	r2, r3, #12
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4313      	orrs	r3, r2
 800133c:	79ba      	ldrb	r2, [r7, #6]
 800133e:	0912      	lsrs	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	4313      	orrs	r3, r2
 8001344:	617b      	str	r3, [r7, #20]

    int32_t var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	10da      	asrs	r2, r3, #3
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <BMP280_ReadTemperature+0xbc>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <BMP280_ReadTemperature+0xc0>)
 8001354:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	12db      	asrs	r3, r3, #11
 800135e:	613b      	str	r3, [r7, #16]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <BMP280_ReadTemperature+0xbc>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	1112      	asrs	r2, r2, #4
 800136e:	4917      	ldr	r1, [pc, #92]	@ (80013cc <BMP280_ReadTemperature+0xbc>)
 8001370:	8809      	ldrh	r1, [r1, #0]
 8001372:	1a52      	subs	r2, r2, r1
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	131b      	asrs	r3, r3, #12
                    ((int32_t)dig_T3)) >> 14;
 800137a:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <BMP280_ReadTemperature+0xc4>)
 800137c:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	139b      	asrs	r3, r3, #14
 8001386:	60fb      	str	r3, [r7, #12]

    t_fine = var1 + var2;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <BMP280_ReadTemperature+0xc8>)
 8001390:	6013      	str	r3, [r2, #0]

    float T = (t_fine * 5 + 128) >> 8;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <BMP280_ReadTemperature+0xc8>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3380      	adds	r3, #128	@ 0x80
 800139e:	121b      	asrs	r3, r3, #8
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a02 	vstr	s15, [r7, #8]
    return T / 100.0f;
 80013ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013dc <BMP280_ReadTemperature+0xcc>
 80013b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f0 	.word	0x200001f0
 80013cc:	200001f4 	.word	0x200001f4
 80013d0:	200001f6 	.word	0x200001f6
 80013d4:	200001f8 	.word	0x200001f8
 80013d8:	2000020c 	.word	0x2000020c
 80013dc:	42c80000 	.word	0x42c80000

080013e0 <BMP280_ReadPressure>:

float BMP280_ReadPressure(void) {
 80013e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e4:	b0d0      	sub	sp, #320	@ 0x140
 80013e6:	af04      	add	r7, sp, #16
    uint8_t data[3];
    HAL_I2C_Mem_Read(bmp_hi2c, BMP280_I2C_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 80013e8:	4bb8      	ldr	r3, [pc, #736]	@ (80016cc <BMP280_ReadPressure+0x2ec>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2303      	movs	r3, #3
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	22f7      	movs	r2, #247	@ 0xf7
 8001400:	21ee      	movs	r1, #238	@ 0xee
 8001402:	f001 ff35 	bl	8003270 <HAL_I2C_Mem_Read>
    int32_t adc_P = (int32_t)(((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4));
 8001406:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800140a:	031a      	lsls	r2, r3, #12
 800140c:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	431a      	orrs	r2, r3
 8001414:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    int64_t var1 = ((int64_t)t_fine) - 128000;
 8001422:	4bab      	ldr	r3, [pc, #684]	@ (80016d0 <BMP280_ReadPressure+0x2f0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	17da      	asrs	r2, r3, #31
 8001428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800142c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001430:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001434:	460b      	mov	r3, r1
 8001436:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 800143a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800143c:	4613      	mov	r3, r2
 800143e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001448:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    int64_t var2 = var1 * var1 * (int64_t)dig_P6;
 800144c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001450:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001454:	fb03 f102 	mul.w	r1, r3, r2
 8001458:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800145c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	18ca      	adds	r2, r1, r3
 8001466:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800146a:	fba3 4503 	umull	r4, r5, r3, r3
 800146e:	1953      	adds	r3, r2, r5
 8001470:	461d      	mov	r5, r3
 8001472:	4b98      	ldr	r3, [pc, #608]	@ (80016d4 <BMP280_ReadPressure+0x2f4>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	b21b      	sxth	r3, r3
 800147a:	17da      	asrs	r2, r3, #31
 800147c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001484:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001488:	4603      	mov	r3, r0
 800148a:	fb03 f205 	mul.w	r2, r3, r5
 800148e:	460b      	mov	r3, r1
 8001490:	fb04 f303 	mul.w	r3, r4, r3
 8001494:	4413      	add	r3, r2
 8001496:	4602      	mov	r2, r0
 8001498:	fba4 8902 	umull	r8, r9, r4, r2
 800149c:	444b      	add	r3, r9
 800149e:	4699      	mov	r9, r3
 80014a0:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 80014a4:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 80014a8:	4b8b      	ldr	r3, [pc, #556]	@ (80016d8 <BMP280_ReadPressure+0x2f8>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	17da      	asrs	r2, r3, #31
 80014b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014b6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014be:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80014c2:	462a      	mov	r2, r5
 80014c4:	fb02 f203 	mul.w	r2, r2, r3
 80014c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014cc:	4621      	mov	r1, r4
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	441a      	add	r2, r3
 80014d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014d8:	4621      	mov	r1, r4
 80014da:	fba3 ab01 	umull	sl, fp, r3, r1
 80014de:	eb02 030b 	add.w	r3, r2, fp
 80014e2:	469b      	mov	fp, r3
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80014f0:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80014f4:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80014f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014fc:	1814      	adds	r4, r2, r0
 80014fe:	643c      	str	r4, [r7, #64]	@ 0x40
 8001500:	414b      	adcs	r3, r1
 8001502:	647b      	str	r3, [r7, #68]	@ 0x44
 8001504:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001508:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)dig_P4) << 35);
 800150c:	4b73      	ldr	r3, [pc, #460]	@ (80016dc <BMP280_ReadPressure+0x2fc>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b21b      	sxth	r3, r3
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800151a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800151e:	f04f 0000 	mov.w	r0, #0
 8001522:	f04f 0100 	mov.w	r1, #0
 8001526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800152a:	00d9      	lsls	r1, r3, #3
 800152c:	2000      	movs	r0, #0
 800152e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001532:	1814      	adds	r4, r2, r0
 8001534:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001536:	414b      	adcs	r3, r1
 8001538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800153a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800153e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 8001542:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001546:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800154a:	fb03 f102 	mul.w	r1, r3, r2
 800154e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001552:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	18ca      	adds	r2, r1, r3
 800155c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001560:	fba3 1303 	umull	r1, r3, r3, r3
 8001564:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001568:	460b      	mov	r3, r1
 800156a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800156e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001572:	18d3      	adds	r3, r2, r3
 8001574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001578:	4b59      	ldr	r3, [pc, #356]	@ (80016e0 <BMP280_ReadPressure+0x300>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001586:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800158a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800158e:	462b      	mov	r3, r5
 8001590:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001594:	4642      	mov	r2, r8
 8001596:	fb02 f203 	mul.w	r2, r2, r3
 800159a:	464b      	mov	r3, r9
 800159c:	4621      	mov	r1, r4
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	4622      	mov	r2, r4
 80015a6:	4641      	mov	r1, r8
 80015a8:	fba2 1201 	umull	r1, r2, r2, r1
 80015ac:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80015b0:	460a      	mov	r2, r1
 80015b2:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80015b6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80015ba:	4413      	add	r3, r2
 80015bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015cc:	4623      	mov	r3, r4
 80015ce:	0a18      	lsrs	r0, r3, #8
 80015d0:	462b      	mov	r3, r5
 80015d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d6:	462b      	mov	r3, r5
 80015d8:	1219      	asrs	r1, r3, #8
 80015da:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <BMP280_ReadPressure+0x304>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015f0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015f4:	464a      	mov	r2, r9
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015fe:	4644      	mov	r4, r8
 8001600:	fb04 f303 	mul.w	r3, r4, r3
 8001604:	441a      	add	r2, r3
 8001606:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800160a:	4644      	mov	r4, r8
 800160c:	fba3 4304 	umull	r4, r3, r3, r4
 8001610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001614:	4623      	mov	r3, r4
 8001616:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800161a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800161e:	18d3      	adds	r3, r2, r3
 8001620:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001630:	464c      	mov	r4, r9
 8001632:	0323      	lsls	r3, r4, #12
 8001634:	4644      	mov	r4, r8
 8001636:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800163a:	4644      	mov	r4, r8
 800163c:	0322      	lsls	r2, r4, #12
 800163e:	1884      	adds	r4, r0, r2
 8001640:	633c      	str	r4, [r7, #48]	@ 0x30
 8001642:	eb41 0303 	adc.w	r3, r1, r3
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
 8001648:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800164c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8001650:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001654:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001658:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800165c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001660:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <BMP280_ReadPressure+0x308>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800166c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001670:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001674:	462b      	mov	r3, r5
 8001676:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800167a:	4642      	mov	r2, r8
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	464b      	mov	r3, r9
 8001682:	4621      	mov	r1, r4
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	4622      	mov	r2, r4
 800168c:	4641      	mov	r1, r8
 800168e:	fba2 1201 	umull	r1, r2, r2, r1
 8001692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800169c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80016b2:	4629      	mov	r1, r5
 80016b4:	104a      	asrs	r2, r1, #1
 80016b6:	4629      	mov	r1, r5
 80016b8:	17cb      	asrs	r3, r1, #31
 80016ba:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0) return 0; // avoid division by zero
 80016be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c2:	4313      	orrs	r3, r2
 80016c4:	d114      	bne.n	80016f0 <BMP280_ReadPressure+0x310>
 80016c6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80016ec <BMP280_ReadPressure+0x30c>
 80016ca:	e161      	b.n	8001990 <BMP280_ReadPressure+0x5b0>
 80016cc:	200001f0 	.word	0x200001f0
 80016d0:	2000020c 	.word	0x2000020c
 80016d4:	20000204 	.word	0x20000204
 80016d8:	20000202 	.word	0x20000202
 80016dc:	20000200 	.word	0x20000200
 80016e0:	200001fe 	.word	0x200001fe
 80016e4:	200001fc 	.word	0x200001fc
 80016e8:	200001fa 	.word	0x200001fa
 80016ec:	00000000 	.word	0x00000000

    int64_t p = 1048576 - adc_P;
 80016f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016f4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80016f8:	17da      	asrs	r2, r3, #31
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001702:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8001706:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800170a:	105b      	asrs	r3, r3, #1
 800170c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001710:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001714:	07db      	lsls	r3, r3, #31
 8001716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800171a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800171e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001722:	4621      	mov	r1, r4
 8001724:	1a89      	subs	r1, r1, r2
 8001726:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800172a:	4629      	mov	r1, r5
 800172c:	eb61 0303 	sbc.w	r3, r1, r3
 8001730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001734:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001738:	4622      	mov	r2, r4
 800173a:	462b      	mov	r3, r5
 800173c:	1891      	adds	r1, r2, r2
 800173e:	6239      	str	r1, [r7, #32]
 8001740:	415b      	adcs	r3, r3
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
 8001744:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001748:	4621      	mov	r1, r4
 800174a:	1851      	adds	r1, r2, r1
 800174c:	61b9      	str	r1, [r7, #24]
 800174e:	4629      	mov	r1, r5
 8001750:	414b      	adcs	r3, r1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001760:	4649      	mov	r1, r9
 8001762:	018b      	lsls	r3, r1, #6
 8001764:	4641      	mov	r1, r8
 8001766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800176a:	4641      	mov	r1, r8
 800176c:	018a      	lsls	r2, r1, #6
 800176e:	4641      	mov	r1, r8
 8001770:	1889      	adds	r1, r1, r2
 8001772:	6139      	str	r1, [r7, #16]
 8001774:	4649      	mov	r1, r9
 8001776:	eb43 0101 	adc.w	r1, r3, r1
 800177a:	6179      	str	r1, [r7, #20]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001788:	4649      	mov	r1, r9
 800178a:	008b      	lsls	r3, r1, #2
 800178c:	4641      	mov	r1, r8
 800178e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001792:	4641      	mov	r1, r8
 8001794:	008a      	lsls	r2, r1, #2
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	4603      	mov	r3, r0
 800179c:	4622      	mov	r2, r4
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	460b      	mov	r3, r1
 80017a4:	462a      	mov	r2, r5
 80017a6:	eb42 0303 	adc.w	r3, r2, r3
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017b8:	4649      	mov	r1, r9
 80017ba:	008b      	lsls	r3, r1, #2
 80017bc:	4641      	mov	r1, r8
 80017be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c2:	4641      	mov	r1, r8
 80017c4:	008a      	lsls	r2, r1, #2
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	4622      	mov	r2, r4
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017d2:	462b      	mov	r3, r5
 80017d4:	460a      	mov	r2, r1
 80017d6:	eb42 0303 	adc.w	r3, r2, r3
 80017da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017e4:	f7ff faf6 	bl	8000dd4 <__aeabi_ldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80017f0:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <BMP280_ReadPressure+0x5c0>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	17da      	asrs	r2, r3, #31
 80017fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80017fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80017fe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	0b50      	lsrs	r0, r2, #13
 800180c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001810:	1359      	asrs	r1, r3, #13
 8001812:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001816:	462b      	mov	r3, r5
 8001818:	fb00 f203 	mul.w	r2, r0, r3
 800181c:	4623      	mov	r3, r4
 800181e:	fb03 f301 	mul.w	r3, r3, r1
 8001822:	4413      	add	r3, r2
 8001824:	4622      	mov	r2, r4
 8001826:	fba2 1200 	umull	r1, r2, r2, r0
 800182a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800182e:	460a      	mov	r2, r1
 8001830:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001834:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001838:	4413      	add	r3, r2
 800183a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800183e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0b50      	lsrs	r0, r2, #13
 800184c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001850:	1359      	asrs	r1, r3, #13
 8001852:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001856:	462b      	mov	r3, r5
 8001858:	fb00 f203 	mul.w	r2, r0, r3
 800185c:	4623      	mov	r3, r4
 800185e:	fb03 f301 	mul.w	r3, r3, r1
 8001862:	4413      	add	r3, r2
 8001864:	4622      	mov	r2, r4
 8001866:	fba2 1200 	umull	r1, r2, r2, r0
 800186a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800186e:	460a      	mov	r2, r1
 8001870:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001878:	4413      	add	r3, r2
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800188a:	4621      	mov	r1, r4
 800188c:	0e4a      	lsrs	r2, r1, #25
 800188e:	4629      	mov	r1, r5
 8001890:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001894:	4629      	mov	r1, r5
 8001896:	164b      	asrs	r3, r1, #25
 8001898:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)dig_P8) * p) >> 19;
 800189c:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <BMP280_ReadPressure+0x5c4>)
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	17da      	asrs	r2, r3, #31
 80018a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018ae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018b2:	462a      	mov	r2, r5
 80018b4:	fb02 f203 	mul.w	r2, r2, r3
 80018b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018bc:	4621      	mov	r1, r4
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80018c8:	4621      	mov	r1, r4
 80018ca:	fba2 1201 	umull	r1, r2, r2, r1
 80018ce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018d2:	460a      	mov	r2, r1
 80018d4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018dc:	4413      	add	r3, r2
 80018de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ee:	4621      	mov	r1, r4
 80018f0:	0cca      	lsrs	r2, r1, #19
 80018f2:	4629      	mov	r1, r5
 80018f4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018f8:	4629      	mov	r1, r5
 80018fa:	14cb      	asrs	r3, r1, #19
 80018fc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8001900:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001904:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001908:	1884      	adds	r4, r0, r2
 800190a:	663c      	str	r4, [r7, #96]	@ 0x60
 800190c:	eb41 0303 	adc.w	r3, r1, r3
 8001910:	667b      	str	r3, [r7, #100]	@ 0x64
 8001912:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001916:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800191a:	4621      	mov	r1, r4
 800191c:	1889      	adds	r1, r1, r2
 800191e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001920:	4629      	mov	r1, r5
 8001922:	eb43 0101 	adc.w	r1, r3, r1
 8001926:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001934:	4623      	mov	r3, r4
 8001936:	0a18      	lsrs	r0, r3, #8
 8001938:	462b      	mov	r3, r5
 800193a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800193e:	462b      	mov	r3, r5
 8001940:	1219      	asrs	r1, r3, #8
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <BMP280_ReadPressure+0x5c8>)
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	b21b      	sxth	r3, r3
 800194a:	17da      	asrs	r2, r3, #31
 800194c:	653b      	str	r3, [r7, #80]	@ 0x50
 800194e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800195c:	464c      	mov	r4, r9
 800195e:	0123      	lsls	r3, r4, #4
 8001960:	4644      	mov	r4, r8
 8001962:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001966:	4644      	mov	r4, r8
 8001968:	0122      	lsls	r2, r4, #4
 800196a:	1884      	adds	r4, r0, r2
 800196c:	603c      	str	r4, [r7, #0]
 800196e:	eb41 0303 	adc.w	r3, r1, r3
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001978:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (float)p / 256.0f; // En Pa
 800197c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001980:	f7ff f9ea 	bl	8000d58 <__aeabi_l2f>
 8001984:	ee06 0a90 	vmov	s13, r0
 8001988:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80019ac <BMP280_ReadPressure+0x5cc>
 800198c:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199e:	bf00      	nop
 80019a0:	2000020a 	.word	0x2000020a
 80019a4:	20000208 	.word	0x20000208
 80019a8:	20000206 	.word	0x20000206
 80019ac:	43800000 	.word	0x43800000

080019b0 <BMP280_ReadAltitude>:

float BMP280_ReadAltitude(float seaLevelhPa) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
    float pressure = BMP280_ReadPressure() / 100.0f; // Convert to hPa
 80019ba:	f7ff fd11 	bl	80013e0 <BMP280_ReadPressure>
 80019be:	eeb0 7a40 	vmov.f32	s14, s0
 80019c2:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001a04 <BMP280_ReadAltitude+0x54>
 80019c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ca:	edc7 7a03 	vstr	s15, [r7, #12]
    return 44330.0f * (1.0f - powf(pressure / seaLevelhPa, 0.1903f));
 80019ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019da:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001a08 <BMP280_ReadAltitude+0x58>
 80019de:	eeb0 0a66 	vmov.f32	s0, s13
 80019e2:	f008 f8a9 	bl	8009b38 <powf>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001a0c <BMP280_ReadAltitude+0x5c>
 80019f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	42c80000 	.word	0x42c80000
 8001a08:	3e42de01 	.word	0x3e42de01
 8001a0c:	472d2a00 	.word	0x472d2a00

08001a10 <LCD_Command>:
#include "LCD_I2C.h"
#include <string.h>

void LCD_Command(I2C_HandleTypeDef *hi2c, uint8_t cmd) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2] = {0x80, cmd};
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	733b      	strb	r3, [r7, #12]
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data, 2, HAL_MAX_DELAY);
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	217c      	movs	r1, #124	@ 0x7c
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f001 f9f0 	bl	8002e18 <HAL_I2C_Master_Transmit>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <LCD_Write>:

void LCD_Write(I2C_HandleTypeDef *hi2c, uint8_t data_byte) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2] = {0x40, data_byte};
 8001a4c:	2340      	movs	r3, #64	@ 0x40
 8001a4e:	733b      	strb	r3, [r7, #12]
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data, 2, HAL_MAX_DELAY);
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	217c      	movs	r1, #124	@ 0x7c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f9d8 	bl	8002e18 <HAL_I2C_Master_Transmit>
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LCD_SetRGB>:

void LCD_SetRGB(I2C_HandleTypeDef *hi2c, uint8_t r, uint8_t g, uint8_t b) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	70fb      	strb	r3, [r7, #3]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70bb      	strb	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	707b      	strb	r3, [r7, #1]
    uint8_t data[][2] = {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	813b      	strh	r3, [r7, #8]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	f64a 2308 	movw	r3, #43528	@ 0xaa08
 8001a96:	81bb      	strh	r3, [r7, #12]
 8001a98:	2304      	movs	r3, #4
 8001a9a:	73bb      	strb	r3, [r7, #14]
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	743b      	strb	r3, [r7, #16]
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	747b      	strb	r3, [r7, #17]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	74bb      	strb	r3, [r7, #18]
 8001aac:	787b      	ldrb	r3, [r7, #1]
 8001aae:	74fb      	strb	r3, [r7, #19]
        {0x08, 0xAA},
        {0x04, r},
        {0x03, g},
        {0x02, b}
    };
    for (int i = 0; i < 6; i++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e01b      	b.n	8001aee <LCD_SetRGB+0x7e>
        HAL_I2C_Mem_Write(hi2c, RGB_ADDR, data[i][0], I2C_MEMADD_SIZE_8BIT, &data[i][1], 1, HAL_MAX_DELAY);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3318      	adds	r3, #24
 8001abc:	443b      	add	r3, r7
 8001abe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	3301      	adds	r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	9202      	str	r2, [sp, #8]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	9201      	str	r2, [sp, #4]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	460a      	mov	r2, r1
 8001ae0:	21c0      	movs	r1, #192	@ 0xc0
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 fab0 	bl	8003048 <HAL_I2C_Mem_Write>
    for (int i = 0; i < 6; i++) {
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	dde0      	ble.n	8001ab6 <LCD_SetRGB+0x46>
    }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <LCD_SetText>:

void LCD_SetText(I2C_HandleTypeDef *hi2c, const char *text, uint8_t line) {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71fb      	strb	r3, [r7, #7]
    if (line == 0) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d104      	bne.n	8001b1c <LCD_SetText+0x1e>
        LCD_Command(hi2c, 0x80);
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff ff7b 	bl	8001a10 <LCD_Command>
 8001b1a:	e006      	b.n	8001b2a <LCD_SetText+0x2c>
    } else if (line == 1) {
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d103      	bne.n	8001b2a <LCD_SetText+0x2c>
        LCD_Command(hi2c, 0xC0);
 8001b22:	21c0      	movs	r1, #192	@ 0xc0
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff ff73 	bl	8001a10 <LCD_Command>
    }

    for (int i = 0; i < 16 && text[i] != '\0'; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00a      	b.n	8001b46 <LCD_SetText+0x48>
        LCD_Write(hi2c, text[i]);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff ff80 	bl	8001a40 <LCD_Write>
    for (int i = 0; i < 16 && text[i] != '\0'; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	dc05      	bgt.n	8001b58 <LCD_SetText+0x5a>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1eb      	bne.n	8001b30 <LCD_SetText+0x32>
    }
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 8001b68:	2032      	movs	r0, #50	@ 0x32
 8001b6a:	f000 fd65 	bl	8002638 <HAL_Delay>

    LCD_Command(hi2c, 0x38); // Function set: 8-bit, 2 lines, 5x8 dots
 8001b6e:	2138      	movs	r1, #56	@ 0x38
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff4d 	bl	8001a10 <LCD_Command>
    HAL_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 fd5e 	bl	8002638 <HAL_Delay>
    LCD_Command(hi2c, 0x39); // Function set: extension command set
 8001b7c:	2139      	movs	r1, #57	@ 0x39
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff46 	bl	8001a10 <LCD_Command>
    HAL_Delay(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f000 fd57 	bl	8002638 <HAL_Delay>
    LCD_Command(hi2c, 0x14); // Internal OSC frequency
 8001b8a:	2114      	movs	r1, #20
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff3f 	bl	8001a10 <LCD_Command>
    HAL_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fd50 	bl	8002638 <HAL_Delay>
    LCD_Command(hi2c, 0x70); // Contrast set (low byte)
 8001b98:	2170      	movs	r1, #112	@ 0x70
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff38 	bl	8001a10 <LCD_Command>
    HAL_Delay(1);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f000 fd49 	bl	8002638 <HAL_Delay>
    LCD_Command(hi2c, 0x56); // Power/icon/contrast (high byte)
 8001ba6:	2156      	movs	r1, #86	@ 0x56
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff31 	bl	8001a10 <LCD_Command>
    HAL_Delay(1);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f000 fd42 	bl	8002638 <HAL_Delay>
    LCD_Command(hi2c, 0x6C); // Follower control (internal power)
 8001bb4:	216c      	movs	r1, #108	@ 0x6c
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff2a 	bl	8001a10 <LCD_Command>
    HAL_Delay(200);
 8001bbc:	20c8      	movs	r0, #200	@ 0xc8
 8001bbe:	f000 fd3b 	bl	8002638 <HAL_Delay>

    LCD_Command(hi2c, 0x38); // Function set
 8001bc2:	2138      	movs	r1, #56	@ 0x38
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff23 	bl	8001a10 <LCD_Command>
    LCD_Command(hi2c, 0x0C); // Display ON, cursor OFF, blink OFF
 8001bca:	210c      	movs	r1, #12
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff1f 	bl	8001a10 <LCD_Command>
    LCD_Command(hi2c, 0x01); // Clear display
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff1b 	bl	8001a10 <LCD_Command>
    HAL_Delay(2);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f000 fd2c 	bl	8002638 <HAL_Delay>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <VEML7700_WriteRegister>:
#include "VEML7700.h"

static void VEML7700_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint16_t value) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	803b      	strh	r3, [r7, #0]
    uint8_t data[3] = {reg, value & 0xFF, (value >> 8) & 0xFF};
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	733b      	strb	r3, [r7, #12]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	737b      	strb	r3, [r7, #13]
 8001c02:	883b      	ldrh	r3, [r7, #0]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(hi2c, VEML7700_ADDR, data, 3, HAL_MAX_DELAY);
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2303      	movs	r3, #3
 8001c18:	2120      	movs	r1, #32
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f001 f8fc 	bl	8002e18 <HAL_I2C_Master_Transmit>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <VEML7700_ReadRegister>:

static uint16_t VEML7700_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML7700_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2120      	movs	r1, #32
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 fb0f 	bl	8003270 <HAL_I2C_Mem_Read>
    return (data[1] << 8) | data[0];
 8001c52:	7b7b      	ldrb	r3, [r7, #13]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	7b3b      	ldrb	r3, [r7, #12]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29b      	uxth	r3, r3
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <VEML7700_Init>:

void VEML7700_Init(I2C_HandleTypeDef *hi2c) {
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
    VEML7700_WriteRegister(hi2c, 0x00, 0x0000);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffb6 	bl	8001be8 <VEML7700_WriteRegister>
    HAL_Delay(10);
 8001c7c:	200a      	movs	r0, #10
 8001c7e:	f000 fcdb 	bl	8002638 <HAL_Delay>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <VEML7700_GetLux>:

float VEML7700_GetLux(I2C_HandleTypeDef *hi2c) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    uint16_t raw = VEML7700_ReadRegister(hi2c, 0x04);
 8001c94:	2104      	movs	r1, #4
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffc6 	bl	8001c28 <VEML7700_ReadRegister>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	81fb      	strh	r3, [r7, #14]
    return raw * 0.0036f;
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001caa:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001cbc <VEML7700_GetLux+0x30>
 8001cae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	3b6bedfa 	.word	0x3b6bedfa

08001cc0 <I2C_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//bessel start
void I2C_Scan(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    char msg[32];
    uint8_t found = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    HAL_UART_Transmit(huart, (uint8_t*)"Scanning I2C...\r\n", 17, HAL_MAX_DELAY);
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	2211      	movs	r2, #17
 8001cd6:	4927      	ldr	r1, [pc, #156]	@ (8001d74 <I2C_Scan+0xb4>)
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f004 f839 	bl	8005d50 <HAL_UART_Transmit>

    for (uint8_t i = 1; i < 128; i++) {
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001ce4:	e02b      	b.n	8001d3e <I2C_Scan+0x7e>
        if (HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, HAL_MAX_DELAY) == HAL_OK) {
 8001ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 fbd4 	bl	80034a4 <HAL_I2C_IsDeviceReady>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <I2C_Scan+0x74>
            snprintf(msg, sizeof(msg), "Device found at 0x%X\r\n", i);
 8001d02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d06:	f107 000c 	add.w	r0, r7, #12
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d78 <I2C_Scan+0xb8>)
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	f005 fdd3 	bl	80078b8 <sniprintf>
            HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fab2 	bl	8000280 <strlen>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f107 010c 	add.w	r1, r7, #12
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	6838      	ldr	r0, [r7, #0]
 8001d2a:	f004 f811 	bl	8005d50 <HAL_UART_Transmit>
            found = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (uint8_t i = 1; i < 128; i++) {
 8001d34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d3e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dacf      	bge.n	8001ce6 <I2C_Scan+0x26>
        }
    }

    if (!found) {
 8001d46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <I2C_Scan+0x9c>
        HAL_UART_Transmit(huart, (uint8_t*)"No I2C device found!\r\n", 22, HAL_MAX_DELAY);
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	2216      	movs	r2, #22
 8001d54:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <I2C_Scan+0xbc>)
 8001d56:	6838      	ldr	r0, [r7, #0]
 8001d58:	f003 fffa 	bl	8005d50 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(huart, (uint8_t*)"Scan Complete\r\n", 15, HAL_MAX_DELAY);
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	220f      	movs	r2, #15
 8001d62:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <I2C_Scan+0xc0>)
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f003 fff3 	bl	8005d50 <HAL_UART_Transmit>
}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800a2e8 	.word	0x0800a2e8
 8001d78:	0800a2fc 	.word	0x0800a2fc
 8001d7c:	0800a314 	.word	0x0800a314
 8001d80:	0800a32c 	.word	0x0800a32c

08001d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d88:	b0a6      	sub	sp, #152	@ 0x98
 8001d8a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8c:	f000 fbdf 	bl	800254e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d90:	f000 f87e 	bl	8001e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d94:	f000 f93e 	bl	8002014 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d98:	f000 f8d0 	bl	8001f3c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001d9c:	f000 f90e 	bl	8001fbc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

// bessel start

  I2C_Scan(&hi2c1,&hlpuart1);
 8001da0:	4934      	ldr	r1, [pc, #208]	@ (8001e74 <main+0xf0>)
 8001da2:	4835      	ldr	r0, [pc, #212]	@ (8001e78 <main+0xf4>)
 8001da4:	f7ff ff8c 	bl	8001cc0 <I2C_Scan>
  // Initialisation des capteurs et de l'écran
  VEML7700_Init(&hi2c1);
 8001da8:	4833      	ldr	r0, [pc, #204]	@ (8001e78 <main+0xf4>)
 8001daa:	f7ff ff5e 	bl	8001c6a <VEML7700_Init>
  BMP280_Init(&hi2c1);
 8001dae:	4832      	ldr	r0, [pc, #200]	@ (8001e78 <main+0xf4>)
 8001db0:	f7ff fa76 	bl	80012a0 <BMP280_Init>

  LCD_Init(&hi2c1);
 8001db4:	4830      	ldr	r0, [pc, #192]	@ (8001e78 <main+0xf4>)
 8001db6:	f7ff fed3 	bl	8001b60 <LCD_Init>
  LCD_SetRGB(&hi2c1, 255, 255, 255); // Allume le rétroéclairage
 8001dba:	23ff      	movs	r3, #255	@ 0xff
 8001dbc:	22ff      	movs	r2, #255	@ 0xff
 8001dbe:	21ff      	movs	r1, #255	@ 0xff
 8001dc0:	482d      	ldr	r0, [pc, #180]	@ (8001e78 <main+0xf4>)
 8001dc2:	f7ff fe55 	bl	8001a70 <LCD_SetRGB>
  LCD_SetText(&hi2c1, "DFRobot 1602 RGB", 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	492c      	ldr	r1, [pc, #176]	@ (8001e7c <main+0xf8>)
 8001dca:	482b      	ldr	r0, [pc, #172]	@ (8001e78 <main+0xf4>)
 8001dcc:	f7ff fe97 	bl	8001afe <LCD_SetText>
  LCD_SetText(&hi2c1, "LCD STM32 Test", 1);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	492b      	ldr	r1, [pc, #172]	@ (8001e80 <main+0xfc>)
 8001dd4:	4828      	ldr	r0, [pc, #160]	@ (8001e78 <main+0xf4>)
 8001dd6:	f7ff fe92 	bl	8001afe <LCD_SetText>

    /* USER CODE BEGIN 3 */


	  while (1) {
		  float lux = VEML7700_GetLux(&hi2c1);
 8001dda:	4827      	ldr	r0, [pc, #156]	@ (8001e78 <main+0xf4>)
 8001ddc:	f7ff ff56 	bl	8001c8c <VEML7700_GetLux>
 8001de0:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

		  	  float temperature = BMP280_ReadTemperature();
 8001de4:	f7ff fa94 	bl	8001310 <BMP280_ReadTemperature>
 8001de8:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
		  	  float pressure = BMP280_ReadPressure();
 8001dec:	f7ff faf8 	bl	80013e0 <BMP280_ReadPressure>
 8001df0:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
		  	  float altitude = BMP280_ReadAltitude(1013.25); // à ajuster selon ta pression locale
 8001df4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001e84 <main+0x100>
 8001df8:	f7ff fdda 	bl	80019b0 <BMP280_ReadAltitude>
 8001dfc:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

		  	  char buffer[100];
		  	  snprintf(buffer, sizeof(buffer),
 8001e00:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001e02:	f7fe fba9 	bl	8000558 <__aeabi_f2d>
 8001e06:	4604      	mov	r4, r0
 8001e08:	460d      	mov	r5, r1
 8001e0a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001e0c:	f7fe fba4 	bl	8000558 <__aeabi_f2d>
 8001e10:	4680      	mov	r8, r0
 8001e12:	4689      	mov	r9, r1
 8001e14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001e16:	f7fe fb9f 	bl	8000558 <__aeabi_f2d>
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <main+0x104>)
 8001e20:	f7fe fd1c 	bl	800085c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4692      	mov	sl, r2
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001e2e:	f7fe fb93 	bl	8000558 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	1d38      	adds	r0, r7, #4
 8001e38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e3c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001e40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e44:	e9cd 4500 	strd	r4, r5, [sp]
 8001e48:	4a10      	ldr	r2, [pc, #64]	@ (8001e8c <main+0x108>)
 8001e4a:	2164      	movs	r1, #100	@ 0x64
 8001e4c:	f005 fd34 	bl	80078b8 <sniprintf>
		  	           "Lux: %.2f lx\r\nT: %.2f C\r\nP: %.2f hPa\r\nAlt: %.2f m\r\n",
		  	           lux, temperature, pressure / 100.0, altitude);

		  	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fa14 	bl	8000280 <strlen>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	1d39      	adds	r1, r7, #4
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <main+0xf0>)
 8001e64:	f003 ff74 	bl	8005d50 <HAL_UART_Transmit>

		  	  // Affichage sur LCD 16x2


		  	  HAL_Delay(10000);
 8001e68:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e6c:	f000 fbe4 	bl	8002638 <HAL_Delay>
	  while (1) {
 8001e70:	bf00      	nop
 8001e72:	e7b2      	b.n	8001dda <main+0x56>
 8001e74:	20000264 	.word	0x20000264
 8001e78:	20000210 	.word	0x20000210
 8001e7c:	0800a33c 	.word	0x0800a33c
 8001e80:	0800a350 	.word	0x0800a350
 8001e84:	447d5000 	.word	0x447d5000
 8001e88:	40590000 	.word	0x40590000
 8001e8c:	0800a360 	.word	0x0800a360

08001e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	@ 0x58
 8001e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	2244      	movs	r2, #68	@ 0x44
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f005 fd81 	bl	80079a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001eb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001eb6:	f002 fd31 	bl	800491c <HAL_PWREx_ControlVoltageScaling>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ec0:	f000 f8fe 	bl	80020c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ec4:	f002 fd0c 	bl	80048e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <SystemClock_Config+0xa8>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <SystemClock_Config+0xa8>)
 8001ed0:	f023 0318 	bic.w	r3, r3, #24
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ed8:	2314      	movs	r3, #20
 8001eda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ee8:	2360      	movs	r3, #96	@ 0x60
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fd67 	bl	80049c8 <HAL_RCC_OscConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001f00:	f000 f8de 	bl	80020c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f04:	230f      	movs	r3, #15
 8001f06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f967 	bl	80051f0 <HAL_RCC_ClockConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f28:	f000 f8ca 	bl	80020c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f2c:	f003 fdc0 	bl	8005ab0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f30:	bf00      	nop
 8001f32:	3758      	adds	r7, #88	@ 0x58
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000

08001f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f42:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f48:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <MX_I2C1_Init+0x7c>)
 8001f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f52:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f76:	480e      	ldr	r0, [pc, #56]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f78:	f000 feb2 	bl	8002ce0 <HAL_I2C_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f82:	f000 f89d 	bl	80020c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f86:	2100      	movs	r1, #0
 8001f88:	4809      	ldr	r0, [pc, #36]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f8a:	f002 fc11 	bl	80047b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f94:	f000 f894 	bl	80020c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_I2C1_Init+0x74>)
 8001f9c:	f002 fc53 	bl	8004846 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 f88b 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000210 	.word	0x20000210
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	00100d14 	.word	0x00100d14

08001fbc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <MX_LPUART1_UART_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_LPUART1_UART_Init+0x50>)
 8001ffa:	f003 fe5b 	bl	8005cb4 <HAL_UART_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 f85c 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000264 	.word	0x20000264
 8002010:	40008000 	.word	0x40008000

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4a22      	ldr	r2, [pc, #136]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4a10      	ldr	r2, [pc, #64]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_GPIO_Init+0xa4>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_PWR_GPIO_Port, FRAM_PWR_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2120      	movs	r1, #32
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <MX_GPIO_Init+0xa8>)
 8002090:	f000 fe0e 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FRAM_PWR_Pin */
  GPIO_InitStruct.Pin = FRAM_PWR_Pin;
 8002094:	2320      	movs	r3, #32
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRAM_PWR_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4804      	ldr	r0, [pc, #16]	@ (80020bc <MX_GPIO_Init+0xa8>)
 80020ac:	f000 fc86 	bl	80029bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000400 	.word	0x48000400

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <Error_Handler+0x8>

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_MspInit+0x44>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <HAL_MspInit+0x44>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_MspInit+0x44>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_MspInit+0x44>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <HAL_MspInit+0x44>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_MspInit+0x44>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a2      	sub	sp, #136	@ 0x88
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fc36 	bl	80079a6 <memset>
  if(hi2c->Instance==I2C1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_I2C_MspInit+0xcc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d148      	bne.n	80021d6 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002144:	2340      	movs	r3, #64	@ 0x40
 8002146:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fa71 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff ffb0 	bl	80020c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216c:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002178:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800217c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217e:	2312      	movs	r3, #18
 8002180:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800218c:	2304      	movs	r3, #4
 800218e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002196:	4619      	mov	r1, r3
 8002198:	4813      	ldr	r0, [pc, #76]	@ (80021e8 <HAL_I2C_MspInit+0xd4>)
 800219a:	f000 fc0f 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_I2C_MspInit+0xd0>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	201f      	movs	r0, #31
 80021bc:	f000 fb3b 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021c0:	201f      	movs	r0, #31
 80021c2:	f000 fb54 	bl	800286e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2020      	movs	r0, #32
 80021cc:	f000 fb33 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80021d0:	2020      	movs	r0, #32
 80021d2:	f000 fb4c 	bl	800286e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021d6:	bf00      	nop
 80021d8:	3788      	adds	r7, #136	@ 0x88
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005400 	.word	0x40005400
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000400 	.word	0x48000400

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0a2      	sub	sp, #136	@ 0x88
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2264      	movs	r2, #100	@ 0x64
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f005 fbca 	bl	80079a6 <memset>
  if(huart->Instance==LPUART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a23      	ldr	r2, [pc, #140]	@ (80022a4 <HAL_UART_MspInit+0xb8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d13f      	bne.n	800229c <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800221c:	2320      	movs	r3, #32
 800221e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002220:	2300      	movs	r3, #0
 8002222:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fa05 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002234:	f7ff ff44 	bl	80020c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	4a1a      	ldr	r2, [pc, #104]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002250:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	4a14      	ldr	r2, [pc, #80]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_UART_MspInit+0xbc>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002268:	2303      	movs	r3, #3
 800226a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800227a:	2308      	movs	r3, #8
 800227c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002284:	4619      	mov	r1, r3
 8002286:	4809      	ldr	r0, [pc, #36]	@ (80022ac <HAL_UART_MspInit+0xc0>)
 8002288:	f000 fb98 	bl	80029bc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2046      	movs	r0, #70	@ 0x46
 8002292:	f000 fad0 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002296:	2046      	movs	r0, #70	@ 0x46
 8002298:	f000 fae9 	bl	800286e <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800229c:	bf00      	nop
 800229e:	3788      	adds	r7, #136	@ 0x88
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40008000 	.word	0x40008000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000800 	.word	0x48000800

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <NMI_Handler+0x4>

080022b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <MemManage_Handler+0x4>

080022c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002306:	f000 f977 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <I2C1_EV_IRQHandler+0x10>)
 8002316:	f001 f9b1 	bl	800367c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000210 	.word	0x20000210

08002324 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <I2C1_ER_IRQHandler+0x10>)
 800232a:	f001 f9c1 	bl	80036b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000210 	.word	0x20000210

08002338 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <LPUART1_IRQHandler+0x10>)
 800233e:	f003 fd91 	bl	8005e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000264 	.word	0x20000264

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_kill>:

int _kill(int pid, int sig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002366:	f005 fb71 	bl	8007a4c <__errno>
 800236a:	4603      	mov	r3, r0
 800236c:	2216      	movs	r2, #22
 800236e:	601a      	str	r2, [r3, #0]
  return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_exit>:

void _exit (int status)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ffe7 	bl	800235c <_kill>
  while (1) {}    /* Make sure we hang here */
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <_exit+0x12>

08002392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00a      	b.n	80023ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a4:	f3af 8000 	nop.w
 80023a8:	4601      	mov	r1, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf0      	blt.n	80023a4 <_read+0x12>
  }

  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e009      	b.n	80023f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbf1      	blt.n	80023de <_write+0x12>
  }
  return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_close>:

int _close(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	605a      	str	r2, [r3, #4]
  return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_isatty>:

int _isatty(int file)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f005 fad6 	bl	8007a4c <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20020000 	.word	0x20020000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	200002ec 	.word	0x200002ec
 80024d4:	20000440 	.word	0x20000440

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <SystemInit+0x20>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <SystemInit+0x20>)
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002500:	f7ff ffea 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <LoopForever+0x6>)
  ldr r1, =_edata
 8002506:	490d      	ldr	r1, [pc, #52]	@ (800253c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <LoopForever+0xe>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800251c:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <LoopForever+0x16>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252a:	f005 fa95 	bl	8007a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800252e:	f7ff fc29 	bl	8001d84 <main>

08002532 <LoopForever>:

LoopForever:
    b LoopForever
 8002532:	e7fe      	b.n	8002532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800253c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002540:	0800a778 	.word	0x0800a778
  ldr r2, =_sbss
 8002544:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002548:	20000440 	.word	0x20000440

0800254c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC1_IRQHandler>

0800254e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f961 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255e:	200f      	movs	r0, #15
 8002560:	f000 f80e 	bl	8002580 <HAL_InitTick>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	e001      	b.n	8002574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002570:	f7ff fdac 	bl	80020cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002574:	79fb      	ldrb	r3, [r7, #7]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800258c:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <HAL_InitTick+0x6c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_InitTick+0x70>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <HAL_InitTick+0x6c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f96d 	bl	800288a <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d809      	bhi.n	80025d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025bc:	2200      	movs	r2, #0
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f000 f937 	bl	8002836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_InitTick+0x74>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e007      	b.n	80025e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e004      	b.n	80025e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e001      	b.n	80025e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	200002f0 	.word	0x200002f0

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200002f0 	.word	0x200002f0

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000008 	.word	0x20000008

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d008      	beq.n	80028cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e022      	b.n	8002912 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020e 	bic.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f003 021c 	and.w	r2, r3, #28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d005      	beq.n	8002942 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2204      	movs	r2, #4
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	e029      	b.n	8002996 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020e 	bic.w	r2, r2, #14
 8002950:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f003 021c 	and.w	r2, r3, #28
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
    }
  }
  return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	e154      	b.n	8002c76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8146 	beq.w	8002c70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d005      	beq.n	80029fc <HAL_GPIO_Init+0x40>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d130      	bne.n	8002a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	2201      	movs	r2, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0201 	and.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d017      	beq.n	8002a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d123      	bne.n	8002aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	6939      	ldr	r1, [r7, #16]
 8002aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0203 	and.w	r2, r3, #3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80a0 	beq.w	8002c70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b30:	4b58      	ldr	r3, [pc, #352]	@ (8002c94 <HAL_GPIO_Init+0x2d8>)
 8002b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b34:	4a57      	ldr	r2, [pc, #348]	@ (8002c94 <HAL_GPIO_Init+0x2d8>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b3c:	4b55      	ldr	r3, [pc, #340]	@ (8002c94 <HAL_GPIO_Init+0x2d8>)
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b48:	4a53      	ldr	r2, [pc, #332]	@ (8002c98 <HAL_GPIO_Init+0x2dc>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b72:	d019      	beq.n	8002ba8 <HAL_GPIO_Init+0x1ec>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a49      	ldr	r2, [pc, #292]	@ (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <HAL_GPIO_Init+0x1e8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ca0 <HAL_GPIO_Init+0x2e4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00d      	beq.n	8002ba0 <HAL_GPIO_Init+0x1e4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a47      	ldr	r2, [pc, #284]	@ (8002ca4 <HAL_GPIO_Init+0x2e8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <HAL_GPIO_Init+0x1e0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <HAL_GPIO_Init+0x2ec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_GPIO_Init+0x1dc>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e008      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002b98:	2307      	movs	r3, #7
 8002b9a:	e006      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e004      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e002      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	f002 0203 	and.w	r2, r2, #3
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	4093      	lsls	r3, r2
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bba:	4937      	ldr	r1, [pc, #220]	@ (8002c98 <HAL_GPIO_Init+0x2dc>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc8:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bec:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c16:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c1c:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c6a:	4a10      	ldr	r2, [pc, #64]	@ (8002cac <HAL_GPIO_Init+0x2f0>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f47f aea3 	bne.w	80029cc <HAL_GPIO_Init+0x10>
  }
}
 8002c86:	bf00      	nop
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48001000 	.word	0x48001000
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e08d      	b.n	8002e0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fa04 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	e006      	b.n	8002d68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d108      	bne.n	8002d82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e007      	b.n	8002d92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	f040 80fd 	bne.w	8003034 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0x30>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0f6      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e50:	f7ff fbe6 	bl	8002620 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2319      	movs	r3, #25
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f001 fa51 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0e1      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2221      	movs	r2, #33	@ 0x21
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	893a      	ldrh	r2, [r7, #8]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2bff      	cmp	r3, #255	@ 0xff
 8002ea2:	d906      	bls.n	8002eb2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	22ff      	movs	r2, #255	@ 0xff
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002eaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e007      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ebc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ec0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d024      	beq.n	8002f14 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	4b4e      	ldr	r3, [pc, #312]	@ (8003040 <HAL_I2C_Master_Transmit+0x228>)
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f001 fbbf 	bl	8004690 <I2C_TransferConfig>
 8002f12:	e066      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	4b48      	ldr	r3, [pc, #288]	@ (8003040 <HAL_I2C_Master_Transmit+0x228>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 fbb4 	bl	8004690 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f28:	e05b      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f001 fa44 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07b      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d034      	beq.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ca>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d130      	bne.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2180      	movs	r1, #128	@ 0x80
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f001 f9bd 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e04d      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2bff      	cmp	r3, #255	@ 0xff
 8002fa2:	d90e      	bls.n	8002fc2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	22ff      	movs	r2, #255	@ 0xff
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f001 fb68 	bl	8004690 <I2C_TransferConfig>
 8002fc0:	e00f      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	8979      	ldrh	r1, [r7, #10]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f001 fb57 	bl	8004690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d19e      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f001 fa2a 	bl	800444a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e01a      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2220      	movs	r2, #32
 8003006:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_I2C_Master_Transmit+0x22c>)
 8003014:	400b      	ands	r3, r1
 8003016:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	80002000 	.word	0x80002000
 8003044:	fe00e800 	.word	0xfe00e800

08003048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	460b      	mov	r3, r1
 800305c:	813b      	strh	r3, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	f040 80f9 	bne.w	8003262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_I2C_Mem_Write+0x34>
 8003076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003082:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0ed      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Mem_Write+0x4e>
 8003092:	2302      	movs	r3, #2
 8003094:	e0e6      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309e:	f7ff fabf 	bl	8002620 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2319      	movs	r3, #25
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 f92a 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d1      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	@ 0x21
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e8:	88f8      	ldrh	r0, [r7, #6]
 80030ea:	893a      	ldrh	r2, [r7, #8]
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4603      	mov	r3, r0
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fc6d 	bl	80039d8 <I2C_RequestMemoryWrite>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0a9      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	@ 0xff
 8003118:	d90e      	bls.n	8003138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	@ 0xff
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f001 faad 	bl	8004690 <I2C_TransferConfig>
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f001 fa9c 	bl	8004690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f001 f92d 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e07b      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d034      	beq.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d130      	bne.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f001 f8a6 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04d      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2bff      	cmp	r3, #255	@ 0xff
 80031d0:	d90e      	bls.n	80031f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	22ff      	movs	r2, #255	@ 0xff
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	2300      	movs	r3, #0
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f001 fa51 	bl	8004690 <I2C_TransferConfig>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f001 fa40 	bl	8004690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d19e      	bne.n	8003158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f001 f913 	bl	800444a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e01a      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_I2C_Mem_Write+0x224>)
 8003242:	400b      	ands	r3, r1
 8003244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	fe00e800 	.word	0xfe00e800

08003270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	f040 80fd 	bne.w	8003492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x34>
 800329e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0f1      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Mem_Read+0x4e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e0ea      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032c6:	f7ff f9ab 	bl	8002620 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f001 f816 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d5      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	@ 0x22
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	@ 0x40
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003310:	88f8      	ldrh	r0, [r7, #6]
 8003312:	893a      	ldrh	r2, [r7, #8]
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4603      	mov	r3, r0
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fbad 	bl	8003a80 <I2C_RequestMemoryRead>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0ad      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2bff      	cmp	r3, #255	@ 0xff
 8003340:	d90e      	bls.n	8003360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	b2da      	uxtb	r2, r3
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	4b52      	ldr	r3, [pc, #328]	@ (800349c <HAL_I2C_Mem_Read+0x22c>)
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f001 f999 	bl	8004690 <I2C_TransferConfig>
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	4b4a      	ldr	r3, [pc, #296]	@ (800349c <HAL_I2C_Mem_Read+0x22c>)
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f001 f988 	bl	8004690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 ffbd 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07c      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d130      	bne.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	@ 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 ff8e 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04d      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	@ 0xff
 8003400:	d90e      	bls.n	8003420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f001 f939 	bl	8004690 <I2C_TransferConfig>
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f001 f928 	bl	8004690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d19a      	bne.n	8003380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fffb 	bl	800444a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01a      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_I2C_Mem_Read+0x230>)
 8003472:	400b      	ands	r3, r1
 8003474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	80002400 	.word	0x80002400
 80034a0:	fe00e800 	.word	0xfe00e800

080034a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	f040 80d6 	bne.w	8003672 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d4:	d101      	bne.n	80034da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	e0cc      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_I2C_IsDeviceReady+0x44>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e0c5      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2224      	movs	r2, #36	@ 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_I2C_IsDeviceReady+0x72>
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003510:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003514:	e006      	b.n	8003524 <HAL_I2C_IsDeviceReady+0x80>
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003520:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800352a:	f7ff f879 	bl	8002620 <HAL_GetTick>
 800352e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b20      	cmp	r3, #32
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b10      	cmp	r3, #16
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800355c:	e034      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d01a      	beq.n	800359c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7ff f85b 	bl	8002620 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <HAL_I2C_IsDeviceReady+0xd8>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e06b      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_I2C_IsDeviceReady+0x130>
 80035ce:	7fbb      	ldrb	r3, [r7, #30]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0c4      	beq.n	800355e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d01a      	beq.n	8003618 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2120      	movs	r1, #32
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fe8c 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e03b      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2220      	movs	r2, #32
 8003602:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e02d      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	2120      	movs	r1, #32
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fe71 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e020      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2220      	movs	r2, #32
 8003640:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	f63f af56 	bhi.w	80034fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
  }
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00f      	beq.n	80036f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800371a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00f      	beq.n	8003746 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003744:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 030b 	and.w	r3, r3, #11
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fc7d 	bl	8004058 <I2C_ITError>
  }
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	70fb      	strb	r3, [r7, #3]
 800379a:	4613      	mov	r3, r2
 800379c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <I2C_Slave_ISR_IT+0x24>
 8003806:	2302      	movs	r3, #2
 8003808:	e0e2      	b.n	80039d0 <I2C_Slave_ISR_IT+0x1ea>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fa5d 	bl	8003ce8 <I2C_ITSlaveCplt>
 800382e:	e0ca      	b.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04b      	beq.n	80038d2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003840:	2b00      	cmp	r3, #0
 8003842:	d046      	beq.n	80038d2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d128      	bne.n	80038a0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b28      	cmp	r3, #40	@ 0x28
 8003858:	d108      	bne.n	800386c <I2C_Slave_ISR_IT+0x86>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003860:	d104      	bne.n	800386c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fba3 	bl	8003fb0 <I2C_ITListenCplt>
 800386a:	e031      	b.n	80038d0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b29      	cmp	r3, #41	@ 0x29
 8003876:	d10e      	bne.n	8003896 <I2C_Slave_ISR_IT+0xb0>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800387e:	d00a      	beq.n	8003896 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2210      	movs	r2, #16
 8003886:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fcfc 	bl	8004286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f9ce 	bl	8003c30 <I2C_ITSlaveSeqCplt>
 8003894:	e01c      	b.n	80038d0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800389e:	e08f      	b.n	80039c0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <I2C_Slave_ISR_IT+0xdc>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c0:	d17e      	bne.n	80039c0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fbc5 	bl	8004058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038ce:	e077      	b.n	80039c0 <I2C_Slave_ISR_IT+0x1da>
 80038d0:	e076      	b.n	80039c0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02f      	beq.n	800393c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02a      	beq.n	800393c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d018      	beq.n	8003922 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d14b      	bne.n	80039c4 <I2C_Slave_ISR_IT+0x1de>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003932:	d047      	beq.n	80039c4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f97b 	bl	8003c30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800393a:	e043      	b.n	80039c4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003950:	6939      	ldr	r1, [r7, #16]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8e8 	bl	8003b28 <I2C_ITAddrCplt>
 8003958:	e035      	b.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d030      	beq.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02b      	beq.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80039a8:	e00d      	b.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b0:	d002      	beq.n	80039b8 <I2C_Slave_ISR_IT+0x1d2>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f939 	bl	8003c30 <I2C_ITSlaveSeqCplt>
 80039be:	e002      	b.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80039c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	460b      	mov	r3, r1
 80039ec:	813b      	strh	r3, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <I2C_RequestMemoryWrite+0xa4>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fe45 	bl	8004690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fcd6 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e02c      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a20:	893b      	ldrh	r3, [r7, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a2a:	e015      	b.n	8003a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a2c:	893b      	ldrh	r3, [r7, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fcbc 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e012      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4e:	893b      	ldrh	r3, [r7, #8]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2180      	movs	r1, #128	@ 0x80
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fc51 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	80002000 	.word	0x80002000

08003a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <I2C_RequestMemoryRead+0xa4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fdf2 	bl	8004690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fc83 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e02c      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ad0:	e015      	b.n	8003afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad2:	893b      	ldrh	r3, [r7, #8]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fc69 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e012      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af4:	893b      	ldrh	r3, [r7, #8]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2140      	movs	r1, #64	@ 0x40
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fbfe 	bl	800430a <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	80002000 	.word	0x80002000

08003b28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b3e:	2b28      	cmp	r3, #40	@ 0x28
 8003b40:	d16a      	bne.n	8003c18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003b60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003b7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d138      	bne.n	8003bf8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89bb      	ldrh	r3, [r7, #12]
 8003b8e:	4053      	eors	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f003 0306 	and.w	r3, r3, #6
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11c      	bne.n	8003bd4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d13b      	bne.n	8003c28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bc6:	89ba      	ldrh	r2, [r7, #12]
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fdde 	bl	800378e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bd2:	e029      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fd89 	bl	80046f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bea:	89ba      	ldrh	r2, [r7, #12]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fdcc 	bl	800378e <HAL_I2C_AddrCallback>
}
 8003bf6:	e017      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fd79 	bl	80046f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c0a:	89ba      	ldrh	r2, [r7, #12]
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fdbc 	bl	800378e <HAL_I2C_AddrCallback>
}
 8003c16:	e007      	b.n	8003c28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e00c      	b.n	8003c7e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b29      	cmp	r3, #41	@ 0x29
 8003c88:	d112      	bne.n	8003cb0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2228      	movs	r2, #40	@ 0x28
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2221      	movs	r2, #33	@ 0x21
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fd2a 	bl	80046f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fd5c 	bl	8003766 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cae:	e017      	b.n	8003ce0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cba:	d111      	bne.n	8003ce0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2228      	movs	r2, #40	@ 0x28
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2222      	movs	r2, #34	@ 0x22
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fd11 	bl	80046f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fd4d 	bl	800377a <HAL_I2C_SlaveRxCpltCallback>
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	2b21      	cmp	r3, #33	@ 0x21
 8003d18:	d002      	beq.n	8003d20 <I2C_ITSlaveCplt+0x38>
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	2b29      	cmp	r3, #41	@ 0x29
 8003d1e:	d108      	bne.n	8003d32 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003d20:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fce5 	bl	80046f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2221      	movs	r2, #33	@ 0x21
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d30:	e019      	b.n	8003d66 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	2b22      	cmp	r3, #34	@ 0x22
 8003d36:	d002      	beq.n	8003d3e <I2C_ITSlaveCplt+0x56>
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d3c:	d108      	bne.n	8003d50 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d3e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fcd6 	bl	80046f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2222      	movs	r2, #34	@ 0x22
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d4e:	e00a      	b.n	8003d66 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	2b28      	cmp	r3, #40	@ 0x28
 8003d54:	d107      	bne.n	8003d66 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003d56:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fcca 	bl	80046f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d74:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b89      	ldr	r3, [pc, #548]	@ (8003fa8 <I2C_ITSlaveCplt+0x2c0>)
 8003d82:	400b      	ands	r3, r1
 8003d84:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa7d 	bl	8004286 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003da4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01f      	beq.n	8003dee <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dbc:	e017      	b.n	8003dee <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d049      	beq.n	8003eee <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d044      	beq.n	8003eee <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d128      	bne.n	8003ec0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b28      	cmp	r3, #40	@ 0x28
 8003e78:	d108      	bne.n	8003e8c <I2C_ITSlaveCplt+0x1a4>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e80:	d104      	bne.n	8003e8c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f893 	bl	8003fb0 <I2C_ITListenCplt>
 8003e8a:	e030      	b.n	8003eee <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b29      	cmp	r3, #41	@ 0x29
 8003e96:	d10e      	bne.n	8003eb6 <I2C_ITSlaveCplt+0x1ce>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e9e:	d00a      	beq.n	8003eb6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f9ec 	bl	8004286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff febe 	bl	8003c30 <I2C_ITSlaveSeqCplt>
 8003eb4:	e01b      	b.n	8003eee <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	61da      	str	r2, [r3, #28]
 8003ebe:	e016      	b.n	8003eee <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x1fa>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee0:	d105      	bne.n	8003eee <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8b5 	bl	8004058 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d010      	beq.n	8003f26 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8a4 	bl	8004058 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b28      	cmp	r3, #40	@ 0x28
 8003f1a:	d141      	bne.n	8003fa0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f846 	bl	8003fb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f24:	e03c      	b.n	8003fa0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f2e:	d014      	beq.n	8003f5a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff fe7d 	bl	8003c30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1c      	ldr	r2, [pc, #112]	@ (8003fac <I2C_ITSlaveCplt+0x2c4>)
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fc29 	bl	80037aa <HAL_I2C_ListenCpltCallback>
}
 8003f58:	e022      	b.n	8003fa0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b22      	cmp	r3, #34	@ 0x22
 8003f64:	d10e      	bne.n	8003f84 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fbfc 	bl	800377a <HAL_I2C_SlaveRxCpltCallback>
}
 8003f82:	e00d      	b.n	8003fa0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fbe3 	bl	8003766 <HAL_I2C_SlaveTxCpltCallback>
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fe00e800 	.word	0xfe00e800
 8003fac:	ffff0000 	.word	0xffff0000

08003fb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	@ (8004054 <I2C_ITListenCplt+0xa4>)
 8003fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d022      	beq.n	800402c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d012      	beq.n	800402c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800402c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb5f 	bl	80046f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fbaf 	bl	80037aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	ffff0000 	.word	0xffff0000

08004058 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004068:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a6d      	ldr	r2, [pc, #436]	@ (800422c <I2C_ITError+0x1d4>)
 8004076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b28      	cmp	r3, #40	@ 0x28
 800408e:	d005      	beq.n	800409c <I2C_ITError+0x44>
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b29      	cmp	r3, #41	@ 0x29
 8004094:	d002      	beq.n	800409c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b2a      	cmp	r3, #42	@ 0x2a
 800409a:	d10b      	bne.n	80040b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800409c:	2103      	movs	r1, #3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fb28 	bl	80046f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2228      	movs	r2, #40	@ 0x28
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a60      	ldr	r2, [pc, #384]	@ (8004230 <I2C_ITError+0x1d8>)
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040b2:	e030      	b.n	8004116 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fb1b 	bl	80046f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8e1 	bl	8004286 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b60      	cmp	r3, #96	@ 0x60
 80040ce:	d01f      	beq.n	8004110 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d114      	bne.n	8004110 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d109      	bne.n	8004108 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2210      	movs	r2, #16
 80040fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	f043 0204 	orr.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2220      	movs	r2, #32
 800410e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d039      	beq.n	8004198 <I2C_ITError+0x140>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b11      	cmp	r3, #17
 8004128:	d002      	beq.n	8004130 <I2C_ITError+0xd8>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b21      	cmp	r3, #33	@ 0x21
 800412e:	d133      	bne.n	8004198 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800413e:	d107      	bne.n	8004150 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800414e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fc23 	bl	80029a0 <HAL_DMA_GetState>
 800415a:	4603      	mov	r3, r0
 800415c:	2b01      	cmp	r3, #1
 800415e:	d017      	beq.n	8004190 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	4a33      	ldr	r2, [pc, #204]	@ (8004234 <I2C_ITError+0x1dc>)
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fbd2 	bl	800291e <HAL_DMA_Abort_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04d      	beq.n	800421c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800418a:	4610      	mov	r0, r2
 800418c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800418e:	e045      	b.n	800421c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f851 	bl	8004238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004196:	e041      	b.n	800421c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d039      	beq.n	8004214 <I2C_ITError+0x1bc>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b12      	cmp	r3, #18
 80041a4:	d002      	beq.n	80041ac <I2C_ITError+0x154>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b22      	cmp	r3, #34	@ 0x22
 80041aa:	d133      	bne.n	8004214 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ba:	d107      	bne.n	80041cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fbe5 	bl	80029a0 <HAL_DMA_GetState>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d017      	beq.n	800420c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	4a14      	ldr	r2, [pc, #80]	@ (8004234 <I2C_ITError+0x1dc>)
 80041e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe fb94 	bl	800291e <HAL_DMA_Abort_IT>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004206:	4610      	mov	r0, r2
 8004208:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800420a:	e009      	b.n	8004220 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f813 	bl	8004238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004212:	e005      	b.n	8004220 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f80f 	bl	8004238 <I2C_TreatErrorCallback>
  }
}
 800421a:	e002      	b.n	8004222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004220:	bf00      	nop
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	ffff0000 	.word	0xffff0000
 8004230:	080037e7 	.word	0x080037e7
 8004234:	080042cf 	.word	0x080042cf

08004238 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b60      	cmp	r3, #96	@ 0x60
 800424a:	d10e      	bne.n	800426a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fab5 	bl	80037d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004268:	e009      	b.n	800427e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff faa0 	bl	80037be <HAL_I2C_ErrorCallback>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d103      	bne.n	80042a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d007      	beq.n	80042c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	619a      	str	r2, [r3, #24]
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	2200      	movs	r2, #0
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f8:	2200      	movs	r2, #0
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ff9b 	bl	8004238 <I2C_TreatErrorCallback>
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431a:	e03b      	b.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f8d5 	bl	80044d0 <I2C_IsErrorOccurred>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e041      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d02d      	beq.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe f972 	bl	8002620 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnFlagUntilTimeout+0x44>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d122      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	429a      	cmp	r2, r3
 800436a:	d113      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00f      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d0b4      	beq.n	800431c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	e033      	b.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f87e 	bl	80044d0 <I2C_IsErrorOccurred>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e031      	b.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d025      	beq.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe f91b 	bl	8002620 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11a      	bne.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d013      	beq.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e007      	b.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d1c4      	bne.n	80043ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004456:	e02f      	b.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f837 	bl	80044d0 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e02d      	b.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7fe f8d8 	bl	8002620 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11a      	bne.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d013      	beq.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e007      	b.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d1c8      	bne.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d068      	beq.n	80045ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2210      	movs	r2, #16
 8004502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004504:	e049      	b.n	800459a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d045      	beq.n	800459a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fe f887 	bl	8002620 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_IsErrorOccurred+0x54>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13a      	bne.n	800459a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004546:	d121      	bne.n	800458c <I2C_IsErrorOccurred+0xbc>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454e:	d01d      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d01a      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004566:	f7fe f85b 	bl	8002620 <HAL_GetTick>
 800456a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800456c:	e00e      	b.n	800458c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800456e:	f7fe f857 	bl	8002620 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b19      	cmp	r3, #25
 800457a:	d907      	bls.n	800458c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f043 0320 	orr.w	r3, r3, #32
 8004582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800458a:	e006      	b.n	800459a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d1e9      	bne.n	800456e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d003      	beq.n	80045b0 <I2C_IsErrorOccurred+0xe0>
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0aa      	beq.n	8004506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800463c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01c      	beq.n	800467e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fe1e 	bl	8004286 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <I2C_IsErrorOccurred+0x1bc>)
 8004656:	400b      	ands	r3, r1
 8004658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800467e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004682:	4618      	mov	r0, r3
 8004684:	3728      	adds	r7, #40	@ 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	fe00e800 	.word	0xfe00e800

08004690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	4613      	mov	r3, r2
 80046a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046a8:	7a7b      	ldrb	r3, [r7, #9]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	0d5b      	lsrs	r3, r3, #21
 80046ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <I2C_TransferConfig+0x60>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	43db      	mvns	r3, r3
 80046d4:	ea02 0103 	and.w	r1, r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	03ff63ff 	.word	0x03ff63ff

080046f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00f      	beq.n	800472e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004714:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004722:	2b28      	cmp	r3, #40	@ 0x28
 8004724:	d003      	beq.n	800472e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800472c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00f      	beq.n	8004758 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800473e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800474c:	2b28      	cmp	r3, #40	@ 0x28
 800474e:	d003      	beq.n	8004758 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004756:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	da03      	bge.n	8004768 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	2b10      	cmp	r3, #16
 800476c:	d103      	bne.n	8004776 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004776:	887b      	ldrh	r3, [r7, #2]
 8004778:	2b20      	cmp	r3, #32
 800477a:	d103      	bne.n	8004784 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004784:	887b      	ldrh	r3, [r7, #2]
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d103      	bne.n	8004792 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004790:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6819      	ldr	r1, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43da      	mvns	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	400a      	ands	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d138      	bne.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e032      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	@ 0x24
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b20      	cmp	r3, #32
 800485a:	d139      	bne.n	80048d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004866:	2302      	movs	r3, #2
 8004868:	e033      	b.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2224      	movs	r2, #36	@ 0x24
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e4:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004904:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <HAL_PWREx_GetVoltageRange+0x18>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40007000 	.word	0x40007000

0800491c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492a:	d130      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800492c:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004938:	d038      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004942:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2232      	movs	r2, #50	@ 0x32
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004960:	e002      	b.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	d102      	bne.n	800497c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f2      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800497c:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004988:	d110      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e00f      	b.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d007      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800499c:	4b07      	ldr	r3, [pc, #28]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049a4:	4a05      	ldr	r2, [pc, #20]	@ (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000
 80049c0:	20000000 	.word	0x20000000
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f000 bc02 	b.w	80051e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4b96      	ldr	r3, [pc, #600]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e6:	4b94      	ldr	r3, [pc, #592]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80e4 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4c>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	f040 808b 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 8087 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a14:	4b88      	ldr	r3, [pc, #544]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e3d9      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	4b81      	ldr	r3, [pc, #516]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCC_OscConfig+0x7e>
 8004a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a44:	e005      	b.n	8004a52 <HAL_RCC_OscConfig+0x8a>
 8004a46:	4b7c      	ldr	r3, [pc, #496]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d223      	bcs.n	8004a9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd8c 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e3ba      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b73      	ldr	r3, [pc, #460]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a72      	ldr	r2, [pc, #456]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b70      	ldr	r3, [pc, #448]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	496d      	ldr	r1, [pc, #436]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a88:	4b6b      	ldr	r3, [pc, #428]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4968      	ldr	r1, [pc, #416]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	e025      	b.n	8004aea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9e:	4b66      	ldr	r3, [pc, #408]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a65      	ldr	r2, [pc, #404]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	f043 0308 	orr.w	r3, r3, #8
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4960      	ldr	r1, [pc, #384]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004abc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	495b      	ldr	r1, [pc, #364]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fd4c 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e37a      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aea:	f000 fc81 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b51      	ldr	r3, [pc, #324]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4950      	ldr	r1, [pc, #320]	@ (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	4a4e      	ldr	r2, [pc, #312]	@ (8004c40 <HAL_RCC_OscConfig+0x278>)
 8004b08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c44 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd fd36 	bl	8002580 <HAL_InitTick>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d052      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	e35e      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d032      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b2a:	4b43      	ldr	r3, [pc, #268]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a42      	ldr	r2, [pc, #264]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b36:	f7fd fd73 	bl	8002620 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b3e:	f7fd fd6f 	bl	8002620 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e347      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b50:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b62:	f043 0308 	orr.w	r3, r3, #8
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4930      	ldr	r1, [pc, #192]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	492b      	ldr	r1, [pc, #172]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b90:	4b29      	ldr	r3, [pc, #164]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a28      	ldr	r2, [pc, #160]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fd40 	bl	8002620 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba4:	f7fd fd3c 	bl	8002620 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e314      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1dc>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d073      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x21c>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d10e      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d063      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d15f      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2f1      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x24c>
 8004c06:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e025      	b.n	8004c60 <HAL_RCC_OscConfig+0x298>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1c:	d114      	bne.n	8004c48 <HAL_RCC_OscConfig+0x280>
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a02      	ldr	r2, [pc, #8]	@ (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e013      	b.n	8004c60 <HAL_RCC_OscConfig+0x298>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800a394 	.word	0x0800a394
 8004c40:	20000000 	.word	0x20000000
 8004c44:	20000004 	.word	0x20000004
 8004c48:	4ba0      	ldr	r3, [pc, #640]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a9f      	ldr	r2, [pc, #636]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b9d      	ldr	r3, [pc, #628]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a9c      	ldr	r2, [pc, #624]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fcda 	bl	8002620 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fd fcd6 	bl	8002620 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	@ 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e2ae      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c82:	4b92      	ldr	r3, [pc, #584]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2a8>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fd fcc6 	bl	8002620 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fd fcc2 	bl	8002620 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	@ 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e29a      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x2d0>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d060      	beq.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x310>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d119      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d116      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd8:	4b7c      	ldr	r3, [pc, #496]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x328>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e277      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	4973      	ldr	r1, [pc, #460]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d04:	e040      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d023      	beq.n	8004d56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6e      	ldr	r2, [pc, #440]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fd fc81 	bl	8002620 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fd fc7d 	bl	8002620 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e255      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d34:	4b65      	ldr	r3, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b62      	ldr	r3, [pc, #392]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	495f      	ldr	r1, [pc, #380]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	e018      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b5d      	ldr	r3, [pc, #372]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fd fc5d 	bl	8002620 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fd fc59 	bl	8002620 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e231      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7c:	4b53      	ldr	r3, [pc, #332]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da2:	4a4a      	ldr	r2, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fd fc38 	bl	8002620 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fd fc34 	bl	8002620 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e20c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3ec>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fd fc1b 	bl	8002620 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dee:	f7fd fc17 	bl	8002620 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1ef      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e00:	4b32      	ldr	r3, [pc, #200]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a6 	beq.w	8004f68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	4b27      	ldr	r3, [pc, #156]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e38:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d118      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e60:	f7fd fbde 	bl	8002620 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fd fbda 	bl	8002620 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1b2      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <HAL_RCC_OscConfig+0x508>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4d8>
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	4a0d      	ldr	r2, [pc, #52]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e9e:	e029      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d115      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x50c>
 8004ea8:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a07      	ldr	r2, [pc, #28]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a03      	ldr	r2, [pc, #12]	@ (8004ecc <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a99      	ldr	r2, [pc, #612]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee4:	4b96      	ldr	r3, [pc, #600]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	4a95      	ldr	r2, [pc, #596]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d016      	beq.n	8004f2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd fb90 	bl	8002620 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fd fb8c 	bl	8002620 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e162      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	4b89      	ldr	r3, [pc, #548]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ed      	beq.n	8004f04 <HAL_RCC_OscConfig+0x53c>
 8004f28:	e015      	b.n	8004f56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fb79 	bl	8002620 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd fb75 	bl	8002620 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e14b      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f48:	4b7d      	ldr	r3, [pc, #500]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ed      	bne.n	8004f32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b78      	ldr	r3, [pc, #480]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	4a77      	ldr	r2, [pc, #476]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03c      	beq.n	8004fee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f7c:	4b70      	ldr	r3, [pc, #448]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f82:	4a6f      	ldr	r2, [pc, #444]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fd fb48 	bl	8002620 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f94:	f7fd fb44 	bl	8002620 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e11c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fa6:	4b66      	ldr	r3, [pc, #408]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCC_OscConfig+0x5cc>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fb6:	4b62      	ldr	r3, [pc, #392]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fbc:	4a60      	ldr	r2, [pc, #384]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fd fb2b 	bl	8002620 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fce:	f7fd fb27 	bl	8002620 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0ff      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fe0:	4b57      	ldr	r3, [pc, #348]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8004fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80f3 	beq.w	80051de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 80c9 	bne.w	8005194 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005002:	4b4f      	ldr	r3, [pc, #316]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0203 	and.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d12c      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	3b01      	subs	r3, #1
 8005022:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d123      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d11b      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d113      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d109      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d06b      	beq.n	8005148 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d062      	beq.n	800513c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005076:	4b32      	ldr	r3, [pc, #200]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0ac      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005086:	4b2e      	ldr	r3, [pc, #184]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2d      	ldr	r2, [pc, #180]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 800508c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005090:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005092:	f7fd fac5 	bl	8002620 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fd fac1 	bl	8002620 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e099      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b8:	4b21      	ldr	r3, [pc, #132]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <HAL_RCC_OscConfig+0x77c>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	4311      	orrs	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050d2:	0212      	lsls	r2, r2, #8
 80050d4:	4311      	orrs	r1, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050f2:	06d2      	lsls	r2, r2, #27
 80050f4:	430a      	orrs	r2, r1
 80050f6:	4912      	ldr	r1, [pc, #72]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050fc:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0f      	ldr	r2, [pc, #60]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005108:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a0c      	ldr	r2, [pc, #48]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005112:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005114:	f7fd fa84 	bl	8002620 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fd fa80 	bl	8002620 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e058      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512e:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <HAL_RCC_OscConfig+0x778>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800513a:	e050      	b.n	80051de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04f      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
 8005140:	40021000 	.word	0x40021000
 8005144:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005148:	4b27      	ldr	r3, [pc, #156]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d144      	bne.n	80051de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005154:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 800515a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005160:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a20      	ldr	r2, [pc, #128]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800516a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800516c:	f7fd fa58 	bl	8002620 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005174:	f7fd fa54 	bl	8002620 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e02c      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x7ac>
 8005192:	e024      	b.n	80051de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d01f      	beq.n	80051da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a12      	ldr	r2, [pc, #72]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd fa3b 	bl	8002620 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fd fa37 	bl	8002620 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e00f      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4905      	ldr	r1, [pc, #20]	@ (80051e8 <HAL_RCC_OscConfig+0x820>)
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_RCC_OscConfig+0x824>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60cb      	str	r3, [r1, #12]
 80051d8:	e001      	b.n	80051de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	feeefffc 	.word	0xfeeefffc

080051f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0e7      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005204:	4b75      	ldr	r3, [pc, #468]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d910      	bls.n	8005234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b72      	ldr	r3, [pc, #456]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0207 	bic.w	r2, r3, #7
 800521a:	4970      	ldr	r1, [pc, #448]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b6e      	ldr	r3, [pc, #440]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0cf      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4b66      	ldr	r3, [pc, #408]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b63      	ldr	r3, [pc, #396]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4960      	ldr	r1, [pc, #384]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04c      	beq.n	8005308 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d107      	bne.n	8005286 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	4b5a      	ldr	r3, [pc, #360]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d121      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0a6      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800528e:	4b54      	ldr	r3, [pc, #336]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d115      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e09a      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a6:	4b4e      	ldr	r3, [pc, #312]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e08e      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b6:	4b4a      	ldr	r3, [pc, #296]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e086      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4b46      	ldr	r3, [pc, #280]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4943      	ldr	r1, [pc, #268]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fd f9a2 	bl	8002620 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e0:	f7fd f99e 	bl	8002620 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e06e      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	4b3a      	ldr	r3, [pc, #232]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 020c 	and.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d1eb      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b31      	ldr	r3, [pc, #196]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005320:	429a      	cmp	r2, r3
 8005322:	d208      	bcs.n	8005336 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b2e      	ldr	r3, [pc, #184]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	492b      	ldr	r1, [pc, #172]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d210      	bcs.n	8005366 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 0207 	bic.w	r2, r3, #7
 800534c:	4923      	ldr	r1, [pc, #140]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <HAL_RCC_ClockConfig+0x1ec>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e036      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005372:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4918      	ldr	r1, [pc, #96]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4910      	ldr	r1, [pc, #64]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053a4:	f000 f824 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	490b      	ldr	r1, [pc, #44]	@ (80053e4 <HAL_RCC_ClockConfig+0x1f4>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	4a09      	ldr	r2, [pc, #36]	@ (80053e8 <HAL_RCC_ClockConfig+0x1f8>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053c4:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <HAL_RCC_ClockConfig+0x1fc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fd f8d9 	bl	8002580 <HAL_InitTick>
 80053ce:	4603      	mov	r3, r0
 80053d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80053d2:	7afb      	ldrb	r3, [r7, #11]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	0800a394 	.word	0x0800a394
 80053e8:	20000000 	.word	0x20000000
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	4b3e      	ldr	r3, [pc, #248]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005408:	4b3b      	ldr	r3, [pc, #236]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d121      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11e      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005424:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005430:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e005      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005440:	4b2d      	ldr	r3, [pc, #180]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800544c:	4a2b      	ldr	r2, [pc, #172]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d102      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005468:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e004      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d101      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005474:	4b23      	ldr	r3, [pc, #140]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 8005476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d134      	bne.n	80054e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0xa6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xac>
 8005494:	e005      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005496:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800549c:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 800549e:	617b      	str	r3, [r7, #20]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	617b      	str	r3, [r7, #20]
      break;
 80054a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a8:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	3301      	adds	r3, #1
 80054b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	fb03 f202 	mul.w	r2, r3, r2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054ce:	4b0a      	ldr	r3, [pc, #40]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	0e5b      	lsrs	r3, r3, #25
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054e8:	69bb      	ldr	r3, [r7, #24]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	@ 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800a3ac 	.word	0x0800a3ac
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	@ (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	0800a3a4 	.word	0x0800a3a4

0800554c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005550:	f7ff ffda 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b06      	ldr	r3, [pc, #24]	@ (8005570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0adb      	lsrs	r3, r3, #11
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4904      	ldr	r1, [pc, #16]	@ (8005574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40021000 	.word	0x40021000
 8005574:	0800a3a4 	.word	0x0800a3a4

08005578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005584:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005590:	f7ff f9b6 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 8005594:	6178      	str	r0, [r7, #20]
 8005596:	e014      	b.n	80055c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005598:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559c:	4a24      	ldr	r2, [pc, #144]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a4:	4b22      	ldr	r3, [pc, #136]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055b0:	f7ff f9a6 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 80055b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c8:	d10b      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b80      	cmp	r3, #128	@ 0x80
 80055ce:	d919      	bls.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80055d4:	d902      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055d6:	2302      	movs	r3, #2
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e013      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e010      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b80      	cmp	r3, #128	@ 0x80
 80055e6:	d902      	bls.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055e8:	2303      	movs	r3, #3
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e00a      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b80      	cmp	r3, #128	@ 0x80
 80055f2:	d102      	bne.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055f4:	2302      	movs	r3, #2
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e004      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b70      	cmp	r3, #112	@ 0x70
 80055fe:	d101      	bne.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005600:	2301      	movs	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	4909      	ldr	r1, [pc, #36]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005614:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d001      	beq.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	40022000 	.word	0x40022000

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005640:	2300      	movs	r3, #0
 8005642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005644:	2300      	movs	r3, #0
 8005646:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005650:	2b00      	cmp	r3, #0
 8005652:	d031      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800565c:	d01a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800565e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005662:	d814      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800566c:	d10f      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800566e:	4b5d      	ldr	r3, [pc, #372]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	4a5c      	ldr	r2, [pc, #368]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800567a:	e00c      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa24 	bl	8005ad0 <RCCEx_PLLSAI1_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	74fb      	strb	r3, [r7, #19]
      break;
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800569c:	4b51      	ldr	r3, [pc, #324]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056aa:	494e      	ldr	r1, [pc, #312]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056b2:	e001      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 809e 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056ca:	4b46      	ldr	r3, [pc, #280]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b40      	ldr	r3, [pc, #256]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e4:	4a3f      	ldr	r2, [pc, #252]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ec:	4b3d      	ldr	r3, [pc, #244]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f8:	2301      	movs	r3, #1
 80056fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fc:	4b3a      	ldr	r3, [pc, #232]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a39      	ldr	r2, [pc, #228]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005708:	f7fc ff8a 	bl	8002620 <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800570e:	e009      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fc ff86 	bl	8002620 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d902      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	74fb      	strb	r3, [r7, #19]
        break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005724:	4b30      	ldr	r3, [pc, #192]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d15a      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005736:	4b2b      	ldr	r3, [pc, #172]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01e      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d019      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005752:	4b24      	ldr	r3, [pc, #144]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800575c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800575e:	4b21      	ldr	r3, [pc, #132]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	4a1f      	ldr	r2, [pc, #124]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800576e:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005774:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800577e:	4a19      	ldr	r2, [pc, #100]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fc ff46 	bl	8002620 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005796:	e00b      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fc ff42 	bl	8002620 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d902      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	74fb      	strb	r3, [r7, #19]
            break;
 80057ae:	e006      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b0:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ec      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	4904      	ldr	r1, [pc, #16]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057da:	e009      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f0:	7c7b      	ldrb	r3, [r7, #17]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f6:	4b86      	ldr	r3, [pc, #536]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fa:	4a85      	ldr	r2, [pc, #532]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005800:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800580e:	4b80      	ldr	r3, [pc, #512]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	f023 0203 	bic.w	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	497c      	ldr	r1, [pc, #496]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005830:	4b77      	ldr	r3, [pc, #476]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005836:	f023 020c 	bic.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	4974      	ldr	r1, [pc, #464]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005852:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	496b      	ldr	r1, [pc, #428]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005882:	4963      	ldr	r1, [pc, #396]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005896:	4b5e      	ldr	r3, [pc, #376]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	495a      	ldr	r1, [pc, #360]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058b8:	4b55      	ldr	r3, [pc, #340]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	4952      	ldr	r1, [pc, #328]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058da:	4b4d      	ldr	r3, [pc, #308]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e8:	4949      	ldr	r1, [pc, #292]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058fc:	4b44      	ldr	r3, [pc, #272]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590a:	4941      	ldr	r1, [pc, #260]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800591e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	4938      	ldr	r1, [pc, #224]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005940:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	4930      	ldr	r1, [pc, #192]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005962:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005968:	f023 0203 	bic.w	r2, r3, #3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	4927      	ldr	r1, [pc, #156]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d028      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005984:	4b22      	ldr	r3, [pc, #136]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005992:	491f      	ldr	r1, [pc, #124]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80059aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f884 	bl	8005ad0 <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x400>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f0:	4907      	ldr	r1, [pc, #28]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a00:	d108      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a02:	4b03      	ldr	r3, [pc, #12]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4a02      	ldr	r2, [pc, #8]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005a08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0c:	60d3      	str	r3, [r2, #12]
 8005a0e:	e013      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005a10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x400>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f853 	bl	8005ad0 <RCCEx_PLLSAI1_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x400>
      {
        /* set overall return value */
        status = ret;
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01c      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a44:	4b19      	ldr	r3, [pc, #100]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a52:	4916      	ldr	r1, [pc, #88]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a62:	d10c      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	2102      	movs	r1, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f830 	bl	8005ad0 <RCCEx_PLLSAI1_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* set overall return value */
        status = ret;
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a8a:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a98:	4904      	ldr	r1, [pc, #16]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000

08005ab0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ade:	4b74      	ldr	r3, [pc, #464]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d018      	beq.n	8005b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005aea:	4b71      	ldr	r3, [pc, #452]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0203 	and.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d10d      	bne.n	8005b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
       ||
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b02:	4b6b      	ldr	r3, [pc, #428]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
       ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d047      	beq.n	8005ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e044      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d018      	beq.n	8005b56 <RCCEx_PLLSAI1_Config+0x86>
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d825      	bhi.n	8005b74 <RCCEx_PLLSAI1_Config+0xa4>
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d002      	beq.n	8005b32 <RCCEx_PLLSAI1_Config+0x62>
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d009      	beq.n	8005b44 <RCCEx_PLLSAI1_Config+0x74>
 8005b30:	e020      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b32:	4b5f      	ldr	r3, [pc, #380]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11d      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b42:	e01a      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b44:	4b5a      	ldr	r3, [pc, #360]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d116      	bne.n	8005b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b54:	e013      	b.n	8005b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b56:	4b56      	ldr	r3, [pc, #344]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10f      	bne.n	8005b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b62:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b72:	e006      	b.n	8005b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      break;
 8005b78:	e004      	b.n	8005b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b8a:	4b49      	ldr	r3, [pc, #292]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	4943      	ldr	r1, [pc, #268]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d17c      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bac:	4b40      	ldr	r3, [pc, #256]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb8:	f7fc fd32 	bl	8002620 <HAL_GetTick>
 8005bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bbe:	e009      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc0:	f7fc fd2e 	bl	8002620 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d902      	bls.n	8005bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd2:	e005      	b.n	8005be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bd4:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ef      	bne.n	8005bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d15f      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d110      	bne.n	8005c0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bec:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005bf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6892      	ldr	r2, [r2, #8]
 8005bfc:	0211      	lsls	r1, r2, #8
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68d2      	ldr	r2, [r2, #12]
 8005c02:	06d2      	lsls	r2, r2, #27
 8005c04:	430a      	orrs	r2, r1
 8005c06:	492a      	ldr	r1, [pc, #168]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]
 8005c0c:	e027      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d112      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c14:	4b26      	ldr	r3, [pc, #152]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
 8005c24:	0211      	lsls	r1, r2, #8
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6912      	ldr	r2, [r2, #16]
 8005c2a:	0852      	lsrs	r2, r2, #1
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	0552      	lsls	r2, r2, #21
 8005c30:	430a      	orrs	r2, r1
 8005c32:	491f      	ldr	r1, [pc, #124]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
 8005c38:	e011      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	0211      	lsls	r1, r2, #8
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6952      	ldr	r2, [r2, #20]
 8005c50:	0852      	lsrs	r2, r2, #1
 8005c52:	3a01      	subs	r2, #1
 8005c54:	0652      	lsls	r2, r2, #25
 8005c56:	430a      	orrs	r2, r1
 8005c58:	4915      	ldr	r1, [pc, #84]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c5e:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a13      	ldr	r2, [pc, #76]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6a:	f7fc fcd9 	bl	8002620 <HAL_GetTick>
 8005c6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c70:	e009      	b.n	8005c86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c72:	f7fc fcd5 	bl	8002620 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d902      	bls.n	8005c86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	73fb      	strb	r3, [r7, #15]
          break;
 8005c84:	e005      	b.n	8005c92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c86:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ef      	beq.n	8005c72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	4903      	ldr	r1, [pc, #12]	@ (8005cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e040      	b.n	8005d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fa88 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	@ 0x24
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fe5e 	bl	80069bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fbd5 	bl	80064b0 <UART_SetConfig>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e01b      	b.n	8005d48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fedd 	bl	8006b00 <UART_CheckIdleState>
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	@ 0x28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d177      	bne.n	8005e58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_UART_Transmit+0x24>
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e070      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2221      	movs	r2, #33	@ 0x21
 8005d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d86:	f7fc fc4b 	bl	8002620 <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da4:	d108      	bne.n	8005db8 <HAL_UART_Transmit+0x68>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e003      	b.n	8005dc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc0:	e02f      	b.n	8005e22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	@ 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 ff3f 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e03b      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	881a      	ldrh	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df4:	b292      	uxth	r2, r2
 8005df6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e007      	b.n	8005e10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	781a      	ldrb	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c9      	bne.n	8005dc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	@ 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 ff09 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e005      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b0ba      	sub	sp, #232	@ 0xe8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e92:	4013      	ands	r3, r2
 8005e94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d115      	bne.n	8005ecc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00f      	beq.n	8005ecc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 82ca 	beq.w	8006456 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
      }
      return;
 8005eca:	e2c4      	b.n	8006456 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8117 	beq.w	8006104 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ee6:	4b85      	ldr	r3, [pc, #532]	@ (80060fc <HAL_UART_IRQHandler+0x298>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 810a 	beq.w	8006104 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <HAL_UART_IRQHandler+0xbc>
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <HAL_UART_IRQHandler+0xec>
 8005f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f46:	f043 0204 	orr.w	r2, r3, #4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <HAL_UART_IRQHandler+0x11c>
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f76:	f043 0202 	orr.w	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb2:	f043 0208 	orr.w	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d012      	beq.n	8005fee <HAL_UART_IRQHandler+0x18a>
 8005fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe4:	f043 0220 	orr.w	r2, r3, #32
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8230 	beq.w	800645a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006028:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04f      	beq.n	80060e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fe6f 	bl	8006d2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d141      	bne.n	80060de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006086:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800608a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800609e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1d9      	bne.n	800605a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	4a13      	ldr	r2, [pc, #76]	@ (8006100 <HAL_UART_IRQHandler+0x29c>)
 80060b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fc fc2f 	bl	800291e <HAL_DMA_Abort_IT>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d017      	beq.n	80060f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e00f      	b.n	80060f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9d4 	bl	8006484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e00b      	b.n	80060f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9d0 	bl	8006484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e007      	b.n	80060f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9cc 	bl	8006484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80060f4:	e1b1      	b.n	800645a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f6:	bf00      	nop
    return;
 80060f8:	e1af      	b.n	800645a <HAL_UART_IRQHandler+0x5f6>
 80060fa:	bf00      	nop
 80060fc:	04000120 	.word	0x04000120
 8006100:	08006df3 	.word	0x08006df3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 816a 	bne.w	80063e2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8163 	beq.w	80063e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 815c 	beq.w	80063e2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	f040 80d4 	bne.w	80062ea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80ad 	beq.w	80062b2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800615e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006162:	429a      	cmp	r2, r3
 8006164:	f080 80a5 	bcs.w	80062b2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800616e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8086 	bne.w	8006290 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1da      	bne.n	8006184 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800625e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e4      	bne.n	8006250 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc fb09 	bl	80028a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8f4 	bl	8006498 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062b0:	e0d5      	b.n	800645e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062bc:	429a      	cmp	r2, r3
 80062be:	f040 80ce 	bne.w	800645e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 80c5 	bne.w	800645e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8d8 	bl	8006498 <HAL_UARTEx_RxEventCallback>
      return;
 80062e8:	e0b9      	b.n	800645e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80ab 	beq.w	8006462 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800630c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80a6 	beq.w	8006462 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006338:	647b      	str	r3, [r7, #68]	@ 0x44
 800633a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800633e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e4      	bne.n	8006316 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	623b      	str	r3, [r7, #32]
   return(result);
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006370:	633a      	str	r2, [r7, #48]	@ 0x30
 8006372:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e3      	bne.n	800634c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	617b      	str	r3, [r7, #20]
   return(result);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e4      	bne.n	8006398 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f85c 	bl	8006498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e0:	e03f      	b.n	8006462 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <HAL_UART_IRQHandler+0x5a8>
 80063ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fd34 	bl	8006e72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640a:	e02d      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00e      	beq.n	8006436 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01c      	beq.n	8006466 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
    }
    return;
 8006434:	e017      	b.n	8006466 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d012      	beq.n	8006468 <HAL_UART_IRQHandler+0x604>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fce5 	bl	8006e1e <UART_EndTransmit_IT>
    return;
 8006454:	e008      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
      return;
 8006456:	bf00      	nop
 8006458:	e006      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
    return;
 800645a:	bf00      	nop
 800645c:	e004      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
      return;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
      return;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HAL_UART_IRQHandler+0x604>
    return;
 8006466:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006468:	37e8      	adds	r7, #232	@ 0xe8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop

08006470 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b4:	b08a      	sub	sp, #40	@ 0x28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4ba5      	ldr	r3, [pc, #660]	@ (8006774 <UART_SetConfig+0x2c4>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a9a      	ldr	r2, [pc, #616]	@ (8006778 <UART_SetConfig+0x2c8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	4313      	orrs	r3, r2
 800651a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a91      	ldr	r2, [pc, #580]	@ (800677c <UART_SetConfig+0x2cc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d126      	bne.n	8006588 <UART_SetConfig+0xd8>
 800653a:	4b91      	ldr	r3, [pc, #580]	@ (8006780 <UART_SetConfig+0x2d0>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d81b      	bhi.n	8006580 <UART_SetConfig+0xd0>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <UART_SetConfig+0xa0>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006561 	.word	0x08006561
 8006554:	08006571 	.word	0x08006571
 8006558:	08006569 	.word	0x08006569
 800655c:	08006579 	.word	0x08006579
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e0d6      	b.n	8006716 <UART_SetConfig+0x266>
 8006568:	2302      	movs	r3, #2
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e0d2      	b.n	8006716 <UART_SetConfig+0x266>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e0ce      	b.n	8006716 <UART_SetConfig+0x266>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e0ca      	b.n	8006716 <UART_SetConfig+0x266>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e0c6      	b.n	8006716 <UART_SetConfig+0x266>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7d      	ldr	r2, [pc, #500]	@ (8006784 <UART_SetConfig+0x2d4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d138      	bne.n	8006604 <UART_SetConfig+0x154>
 8006592:	4b7b      	ldr	r3, [pc, #492]	@ (8006780 <UART_SetConfig+0x2d0>)
 8006594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b0c      	cmp	r3, #12
 800659e:	d82d      	bhi.n	80065fc <UART_SetConfig+0x14c>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0xf8>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065fd 	.word	0x080065fd
 80065b0:	080065fd 	.word	0x080065fd
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	080065fd 	.word	0x080065fd
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e098      	b.n	8006716 <UART_SetConfig+0x266>
 80065e4:	2302      	movs	r3, #2
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e094      	b.n	8006716 <UART_SetConfig+0x266>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e090      	b.n	8006716 <UART_SetConfig+0x266>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fa:	e08c      	b.n	8006716 <UART_SetConfig+0x266>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e088      	b.n	8006716 <UART_SetConfig+0x266>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5f      	ldr	r2, [pc, #380]	@ (8006788 <UART_SetConfig+0x2d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d125      	bne.n	800665a <UART_SetConfig+0x1aa>
 800660e:	4b5c      	ldr	r3, [pc, #368]	@ (8006780 <UART_SetConfig+0x2d0>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006614:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006618:	2b30      	cmp	r3, #48	@ 0x30
 800661a:	d016      	beq.n	800664a <UART_SetConfig+0x19a>
 800661c:	2b30      	cmp	r3, #48	@ 0x30
 800661e:	d818      	bhi.n	8006652 <UART_SetConfig+0x1a2>
 8006620:	2b20      	cmp	r3, #32
 8006622:	d00a      	beq.n	800663a <UART_SetConfig+0x18a>
 8006624:	2b20      	cmp	r3, #32
 8006626:	d814      	bhi.n	8006652 <UART_SetConfig+0x1a2>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <UART_SetConfig+0x182>
 800662c:	2b10      	cmp	r3, #16
 800662e:	d008      	beq.n	8006642 <UART_SetConfig+0x192>
 8006630:	e00f      	b.n	8006652 <UART_SetConfig+0x1a2>
 8006632:	2300      	movs	r3, #0
 8006634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006638:	e06d      	b.n	8006716 <UART_SetConfig+0x266>
 800663a:	2302      	movs	r3, #2
 800663c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006640:	e069      	b.n	8006716 <UART_SetConfig+0x266>
 8006642:	2304      	movs	r3, #4
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006648:	e065      	b.n	8006716 <UART_SetConfig+0x266>
 800664a:	2308      	movs	r3, #8
 800664c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006650:	e061      	b.n	8006716 <UART_SetConfig+0x266>
 8006652:	2310      	movs	r3, #16
 8006654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006658:	e05d      	b.n	8006716 <UART_SetConfig+0x266>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a4b      	ldr	r2, [pc, #300]	@ (800678c <UART_SetConfig+0x2dc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d125      	bne.n	80066b0 <UART_SetConfig+0x200>
 8006664:	4b46      	ldr	r3, [pc, #280]	@ (8006780 <UART_SetConfig+0x2d0>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800666e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006670:	d016      	beq.n	80066a0 <UART_SetConfig+0x1f0>
 8006672:	2bc0      	cmp	r3, #192	@ 0xc0
 8006674:	d818      	bhi.n	80066a8 <UART_SetConfig+0x1f8>
 8006676:	2b80      	cmp	r3, #128	@ 0x80
 8006678:	d00a      	beq.n	8006690 <UART_SetConfig+0x1e0>
 800667a:	2b80      	cmp	r3, #128	@ 0x80
 800667c:	d814      	bhi.n	80066a8 <UART_SetConfig+0x1f8>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <UART_SetConfig+0x1d8>
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d008      	beq.n	8006698 <UART_SetConfig+0x1e8>
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x1f8>
 8006688:	2300      	movs	r3, #0
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668e:	e042      	b.n	8006716 <UART_SetConfig+0x266>
 8006690:	2302      	movs	r3, #2
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006696:	e03e      	b.n	8006716 <UART_SetConfig+0x266>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669e:	e03a      	b.n	8006716 <UART_SetConfig+0x266>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e036      	b.n	8006716 <UART_SetConfig+0x266>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ae:	e032      	b.n	8006716 <UART_SetConfig+0x266>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a30      	ldr	r2, [pc, #192]	@ (8006778 <UART_SetConfig+0x2c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12a      	bne.n	8006710 <UART_SetConfig+0x260>
 80066ba:	4b31      	ldr	r3, [pc, #196]	@ (8006780 <UART_SetConfig+0x2d0>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c8:	d01a      	beq.n	8006700 <UART_SetConfig+0x250>
 80066ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ce:	d81b      	bhi.n	8006708 <UART_SetConfig+0x258>
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d4:	d00c      	beq.n	80066f0 <UART_SetConfig+0x240>
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066da:	d815      	bhi.n	8006708 <UART_SetConfig+0x258>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <UART_SetConfig+0x238>
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e4:	d008      	beq.n	80066f8 <UART_SetConfig+0x248>
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x258>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e012      	b.n	8006716 <UART_SetConfig+0x266>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f6:	e00e      	b.n	8006716 <UART_SetConfig+0x266>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e00a      	b.n	8006716 <UART_SetConfig+0x266>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e006      	b.n	8006716 <UART_SetConfig+0x266>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800670e:	e002      	b.n	8006716 <UART_SetConfig+0x266>
 8006710:	2310      	movs	r3, #16
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	@ (8006778 <UART_SetConfig+0x2c8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	f040 808b 	bne.w	8006838 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006722:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006726:	2b08      	cmp	r3, #8
 8006728:	d834      	bhi.n	8006794 <UART_SetConfig+0x2e4>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <UART_SetConfig+0x280>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006755 	.word	0x08006755
 8006734:	08006795 	.word	0x08006795
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006795 	.word	0x08006795
 8006740:	08006763 	.word	0x08006763
 8006744:	08006795 	.word	0x08006795
 8006748:	08006795 	.word	0x08006795
 800674c:	08006795 	.word	0x08006795
 8006750:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fee4 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006758:	61f8      	str	r0, [r7, #28]
        break;
 800675a:	e021      	b.n	80067a0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <UART_SetConfig+0x2e0>)
 800675e:	61fb      	str	r3, [r7, #28]
        break;
 8006760:	e01e      	b.n	80067a0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe fe45 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006766:	61f8      	str	r0, [r7, #28]
        break;
 8006768:	e01a      	b.n	80067a0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676e:	61fb      	str	r3, [r7, #28]
        break;
 8006770:	e016      	b.n	80067a0 <UART_SetConfig+0x2f0>
 8006772:	bf00      	nop
 8006774:	efff69f3 	.word	0xefff69f3
 8006778:	40008000 	.word	0x40008000
 800677c:	40013800 	.word	0x40013800
 8006780:	40021000 	.word	0x40021000
 8006784:	40004400 	.word	0x40004400
 8006788:	40004800 	.word	0x40004800
 800678c:	40004c00 	.word	0x40004c00
 8006790:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800679e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80fa 	beq.w	800699c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	4413      	add	r3, r2
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d305      	bcc.n	80067c4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d903      	bls.n	80067cc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067ca:	e0e7      	b.n	800699c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2200      	movs	r2, #0
 80067d0:	461c      	mov	r4, r3
 80067d2:	4615      	mov	r5, r2
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	022b      	lsls	r3, r5, #8
 80067de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067e2:	0222      	lsls	r2, r4, #8
 80067e4:	68f9      	ldr	r1, [r7, #12]
 80067e6:	6849      	ldr	r1, [r1, #4]
 80067e8:	0849      	lsrs	r1, r1, #1
 80067ea:	2000      	movs	r0, #0
 80067ec:	4688      	mov	r8, r1
 80067ee:	4681      	mov	r9, r0
 80067f0:	eb12 0a08 	adds.w	sl, r2, r8
 80067f4:	eb43 0b09 	adc.w	fp, r3, r9
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006806:	4650      	mov	r0, sl
 8006808:	4659      	mov	r1, fp
 800680a:	f7fa fb33 	bl	8000e74 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4613      	mov	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800681c:	d308      	bcc.n	8006830 <UART_SetConfig+0x380>
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006824:	d204      	bcs.n	8006830 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e0b5      	b.n	800699c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006836:	e0b1      	b.n	800699c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006840:	d15d      	bne.n	80068fe <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006842:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006846:	2b08      	cmp	r3, #8
 8006848:	d827      	bhi.n	800689a <UART_SetConfig+0x3ea>
 800684a:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <UART_SetConfig+0x3a0>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	0800689b 	.word	0x0800689b
 8006860:	0800688b 	.word	0x0800688b
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800689b 	.word	0x0800689b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fe fe54 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e014      	b.n	80068a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7fe fe66 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8006880:	61f8      	str	r0, [r7, #28]
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b4c      	ldr	r3, [pc, #304]	@ (80069b8 <UART_SetConfig+0x508>)
 8006886:	61fb      	str	r3, [r7, #28]
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fe fdb1 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d077      	beq.n	800699c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	005a      	lsls	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b0f      	cmp	r3, #15
 80068c6:	d916      	bls.n	80068f6 <UART_SetConfig+0x446>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ce:	d212      	bcs.n	80068f6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f023 030f 	bic.w	r3, r3, #15
 80068d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	8afb      	ldrh	r3, [r7, #22]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	8afa      	ldrh	r2, [r7, #22]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e052      	b.n	800699c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068fc:	e04e      	b.n	800699c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006902:	2b08      	cmp	r3, #8
 8006904:	d827      	bhi.n	8006956 <UART_SetConfig+0x4a6>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x45c>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fe fdf6 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006934:	61f8      	str	r0, [r7, #28]
        break;
 8006936:	e014      	b.n	8006962 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fe fe08 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 800693c:	61f8      	str	r0, [r7, #28]
        break;
 800693e:	e010      	b.n	8006962 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <UART_SetConfig+0x508>)
 8006942:	61fb      	str	r3, [r7, #28]
        break;
 8006944:	e00d      	b.n	8006962 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fe fd53 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800694a:	61f8      	str	r0, [r7, #28]
        break;
 800694c:	e009      	b.n	8006962 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006952:	61fb      	str	r3, [r7, #28]
        break;
 8006954:	e005      	b.n	8006962 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006960:	bf00      	nop
    }

    if (pclk != 0U)
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d019      	beq.n	800699c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	085a      	lsrs	r2, r3, #1
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d909      	bls.n	8006996 <UART_SetConfig+0x4e6>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006988:	d205      	bcs.n	8006996 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60da      	str	r2, [r3, #12]
 8006994:	e002      	b.n	800699c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3728      	adds	r7, #40	@ 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b6:	bf00      	nop
 80069b8:	00f42400 	.word	0x00f42400

080069bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aba:	d10a      	bne.n	8006ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b098      	sub	sp, #96	@ 0x60
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b10:	f7fb fd86 	bl	8002620 <HAL_GetTick>
 8006b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d12e      	bne.n	8006b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f88c 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e062      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d149      	bne.n	8006c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f856 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03c      	beq.n	8006c24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e011      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3758      	adds	r7, #88	@ 0x58
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c60:	e04f      	b.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d04b      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fb fcd9 	bl	8002620 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e04e      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d037      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d034      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b40      	cmp	r3, #64	@ 0x40
 8006c9c:	d031      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d110      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f838 	bl	8006d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e029      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cdc:	d111      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f81e 	bl	8006d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e00f      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d0a0      	beq.n	8006c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b095      	sub	sp, #84	@ 0x54
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d118      	bne.n	8006dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006de6:	bf00      	nop
 8006de8:	3754      	adds	r7, #84	@ 0x54
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff fb37 	bl	8006484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6979      	ldr	r1, [r7, #20]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	613b      	str	r3, [r7, #16]
   return(result);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fb03 	bl	8006470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6a:	bf00      	nop
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <__cvt>:
 8006e86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e8a:	ec57 6b10 	vmov	r6, r7, d0
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	460c      	mov	r4, r1
 8006e92:	4619      	mov	r1, r3
 8006e94:	463b      	mov	r3, r7
 8006e96:	bfbb      	ittet	lt
 8006e98:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e9c:	461f      	movlt	r7, r3
 8006e9e:	2300      	movge	r3, #0
 8006ea0:	232d      	movlt	r3, #45	@ 0x2d
 8006ea2:	700b      	strb	r3, [r1, #0]
 8006ea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ea6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006eaa:	4691      	mov	r9, r2
 8006eac:	f023 0820 	bic.w	r8, r3, #32
 8006eb0:	bfbc      	itt	lt
 8006eb2:	4632      	movlt	r2, r6
 8006eb4:	4616      	movlt	r6, r2
 8006eb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eba:	d005      	beq.n	8006ec8 <__cvt+0x42>
 8006ebc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ec0:	d100      	bne.n	8006ec4 <__cvt+0x3e>
 8006ec2:	3401      	adds	r4, #1
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	e000      	b.n	8006eca <__cvt+0x44>
 8006ec8:	2103      	movs	r1, #3
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	ab02      	add	r3, sp, #8
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	ec47 6b10 	vmov	d0, r6, r7
 8006ed6:	4653      	mov	r3, sl
 8006ed8:	4622      	mov	r2, r4
 8006eda:	f000 fe6d 	bl	8007bb8 <_dtoa_r>
 8006ede:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	d119      	bne.n	8006f1a <__cvt+0x94>
 8006ee6:	f019 0f01 	tst.w	r9, #1
 8006eea:	d00e      	beq.n	8006f0a <__cvt+0x84>
 8006eec:	eb00 0904 	add.w	r9, r0, r4
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006efc:	b108      	cbz	r0, 8006f02 <__cvt+0x7c>
 8006efe:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f02:	2230      	movs	r2, #48	@ 0x30
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	454b      	cmp	r3, r9
 8006f08:	d31e      	bcc.n	8006f48 <__cvt+0xc2>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f0e:	1b5b      	subs	r3, r3, r5
 8006f10:	4628      	mov	r0, r5
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f1e:	eb00 0904 	add.w	r9, r0, r4
 8006f22:	d1e5      	bne.n	8006ef0 <__cvt+0x6a>
 8006f24:	7803      	ldrb	r3, [r0, #0]
 8006f26:	2b30      	cmp	r3, #48	@ 0x30
 8006f28:	d10a      	bne.n	8006f40 <__cvt+0xba>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	f7f9 fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f36:	b918      	cbnz	r0, 8006f40 <__cvt+0xba>
 8006f38:	f1c4 0401 	rsb	r4, r4, #1
 8006f3c:	f8ca 4000 	str.w	r4, [sl]
 8006f40:	f8da 3000 	ldr.w	r3, [sl]
 8006f44:	4499      	add	r9, r3
 8006f46:	e7d3      	b.n	8006ef0 <__cvt+0x6a>
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	9103      	str	r1, [sp, #12]
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	e7d9      	b.n	8006f04 <__cvt+0x7e>

08006f50 <__exponent>:
 8006f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f52:	2900      	cmp	r1, #0
 8006f54:	bfba      	itte	lt
 8006f56:	4249      	neglt	r1, r1
 8006f58:	232d      	movlt	r3, #45	@ 0x2d
 8006f5a:	232b      	movge	r3, #43	@ 0x2b
 8006f5c:	2909      	cmp	r1, #9
 8006f5e:	7002      	strb	r2, [r0, #0]
 8006f60:	7043      	strb	r3, [r0, #1]
 8006f62:	dd29      	ble.n	8006fb8 <__exponent+0x68>
 8006f64:	f10d 0307 	add.w	r3, sp, #7
 8006f68:	461d      	mov	r5, r3
 8006f6a:	270a      	movs	r7, #10
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f72:	fb07 1416 	mls	r4, r7, r6, r1
 8006f76:	3430      	adds	r4, #48	@ 0x30
 8006f78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	2c63      	cmp	r4, #99	@ 0x63
 8006f80:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f84:	4631      	mov	r1, r6
 8006f86:	dcf1      	bgt.n	8006f6c <__exponent+0x1c>
 8006f88:	3130      	adds	r1, #48	@ 0x30
 8006f8a:	1e94      	subs	r4, r2, #2
 8006f8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f90:	1c41      	adds	r1, r0, #1
 8006f92:	4623      	mov	r3, r4
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	d30a      	bcc.n	8006fae <__exponent+0x5e>
 8006f98:	f10d 0309 	add.w	r3, sp, #9
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	42ac      	cmp	r4, r5
 8006fa0:	bf88      	it	hi
 8006fa2:	2300      	movhi	r3, #0
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	4403      	add	r3, r0
 8006fa8:	1a18      	subs	r0, r3, r0
 8006faa:	b003      	add	sp, #12
 8006fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fb6:	e7ed      	b.n	8006f94 <__exponent+0x44>
 8006fb8:	2330      	movs	r3, #48	@ 0x30
 8006fba:	3130      	adds	r1, #48	@ 0x30
 8006fbc:	7083      	strb	r3, [r0, #2]
 8006fbe:	70c1      	strb	r1, [r0, #3]
 8006fc0:	1d03      	adds	r3, r0, #4
 8006fc2:	e7f1      	b.n	8006fa8 <__exponent+0x58>

08006fc4 <_printf_float>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	b08d      	sub	sp, #52	@ 0x34
 8006fca:	460c      	mov	r4, r1
 8006fcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	461f      	mov	r7, r3
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	f000 fcef 	bl	80079b8 <_localeconv_r>
 8006fda:	6803      	ldr	r3, [r0, #0]
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7f9 f94e 	bl	8000280 <strlen>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fec:	9005      	str	r0, [sp, #20]
 8006fee:	3307      	adds	r3, #7
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	f103 0208 	add.w	r2, r3, #8
 8006ff8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8007000:	f8c8 2000 	str.w	r2, [r8]
 8007004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007008:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800700c:	9307      	str	r3, [sp, #28]
 800700e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007012:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800701a:	4b9c      	ldr	r3, [pc, #624]	@ (800728c <_printf_float+0x2c8>)
 800701c:	f04f 32ff 	mov.w	r2, #4294967295
 8007020:	f7f9 fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8007024:	bb70      	cbnz	r0, 8007084 <_printf_float+0xc0>
 8007026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800702a:	4b98      	ldr	r3, [pc, #608]	@ (800728c <_printf_float+0x2c8>)
 800702c:	f04f 32ff 	mov.w	r2, #4294967295
 8007030:	f7f9 fd66 	bl	8000b00 <__aeabi_dcmple>
 8007034:	bb30      	cbnz	r0, 8007084 <_printf_float+0xc0>
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 fd55 	bl	8000aec <__aeabi_dcmplt>
 8007042:	b110      	cbz	r0, 800704a <_printf_float+0x86>
 8007044:	232d      	movs	r3, #45	@ 0x2d
 8007046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800704a:	4a91      	ldr	r2, [pc, #580]	@ (8007290 <_printf_float+0x2cc>)
 800704c:	4b91      	ldr	r3, [pc, #580]	@ (8007294 <_printf_float+0x2d0>)
 800704e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007052:	bf94      	ite	ls
 8007054:	4690      	movls	r8, r2
 8007056:	4698      	movhi	r8, r3
 8007058:	2303      	movs	r3, #3
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	f02b 0304 	bic.w	r3, fp, #4
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	9700      	str	r7, [sp, #0]
 8007068:	4633      	mov	r3, r6
 800706a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 f9d2 	bl	8007418 <_printf_common>
 8007074:	3001      	adds	r0, #1
 8007076:	f040 808d 	bne.w	8007194 <_printf_float+0x1d0>
 800707a:	f04f 30ff 	mov.w	r0, #4294967295
 800707e:	b00d      	add	sp, #52	@ 0x34
 8007080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fd56 	bl	8000b3c <__aeabi_dcmpun>
 8007090:	b140      	cbz	r0, 80070a4 <_printf_float+0xe0>
 8007092:	464b      	mov	r3, r9
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfbc      	itt	lt
 8007098:	232d      	movlt	r3, #45	@ 0x2d
 800709a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800709e:	4a7e      	ldr	r2, [pc, #504]	@ (8007298 <_printf_float+0x2d4>)
 80070a0:	4b7e      	ldr	r3, [pc, #504]	@ (800729c <_printf_float+0x2d8>)
 80070a2:	e7d4      	b.n	800704e <_printf_float+0x8a>
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070aa:	9206      	str	r2, [sp, #24]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	d13b      	bne.n	8007128 <_printf_float+0x164>
 80070b0:	2306      	movs	r3, #6
 80070b2:	6063      	str	r3, [r4, #4]
 80070b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070b8:	2300      	movs	r3, #0
 80070ba:	6022      	str	r2, [r4, #0]
 80070bc:	9303      	str	r3, [sp, #12]
 80070be:	ab0a      	add	r3, sp, #40	@ 0x28
 80070c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070c4:	ab09      	add	r3, sp, #36	@ 0x24
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	ec49 8b10 	vmov	d0, r8, r9
 80070ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070d2:	4628      	mov	r0, r5
 80070d4:	f7ff fed7 	bl	8006e86 <__cvt>
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070dc:	2b47      	cmp	r3, #71	@ 0x47
 80070de:	4680      	mov	r8, r0
 80070e0:	d129      	bne.n	8007136 <_printf_float+0x172>
 80070e2:	1cc8      	adds	r0, r1, #3
 80070e4:	db02      	blt.n	80070ec <_printf_float+0x128>
 80070e6:	6863      	ldr	r3, [r4, #4]
 80070e8:	4299      	cmp	r1, r3
 80070ea:	dd41      	ble.n	8007170 <_printf_float+0x1ac>
 80070ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80070f0:	fa5f fa8a 	uxtb.w	sl, sl
 80070f4:	3901      	subs	r1, #1
 80070f6:	4652      	mov	r2, sl
 80070f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80070fe:	f7ff ff27 	bl	8006f50 <__exponent>
 8007102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007104:	1813      	adds	r3, r2, r0
 8007106:	2a01      	cmp	r2, #1
 8007108:	4681      	mov	r9, r0
 800710a:	6123      	str	r3, [r4, #16]
 800710c:	dc02      	bgt.n	8007114 <_printf_float+0x150>
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	07d2      	lsls	r2, r2, #31
 8007112:	d501      	bpl.n	8007118 <_printf_float+0x154>
 8007114:	3301      	adds	r3, #1
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0a2      	beq.n	8007066 <_printf_float+0xa2>
 8007120:	232d      	movs	r3, #45	@ 0x2d
 8007122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007126:	e79e      	b.n	8007066 <_printf_float+0xa2>
 8007128:	9a06      	ldr	r2, [sp, #24]
 800712a:	2a47      	cmp	r2, #71	@ 0x47
 800712c:	d1c2      	bne.n	80070b4 <_printf_float+0xf0>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1c0      	bne.n	80070b4 <_printf_float+0xf0>
 8007132:	2301      	movs	r3, #1
 8007134:	e7bd      	b.n	80070b2 <_printf_float+0xee>
 8007136:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800713a:	d9db      	bls.n	80070f4 <_printf_float+0x130>
 800713c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007140:	d118      	bne.n	8007174 <_printf_float+0x1b0>
 8007142:	2900      	cmp	r1, #0
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	dd0b      	ble.n	8007160 <_printf_float+0x19c>
 8007148:	6121      	str	r1, [r4, #16]
 800714a:	b913      	cbnz	r3, 8007152 <_printf_float+0x18e>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	07d0      	lsls	r0, r2, #31
 8007150:	d502      	bpl.n	8007158 <_printf_float+0x194>
 8007152:	3301      	adds	r3, #1
 8007154:	440b      	add	r3, r1
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	65a1      	str	r1, [r4, #88]	@ 0x58
 800715a:	f04f 0900 	mov.w	r9, #0
 800715e:	e7db      	b.n	8007118 <_printf_float+0x154>
 8007160:	b913      	cbnz	r3, 8007168 <_printf_float+0x1a4>
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	07d2      	lsls	r2, r2, #31
 8007166:	d501      	bpl.n	800716c <_printf_float+0x1a8>
 8007168:	3302      	adds	r3, #2
 800716a:	e7f4      	b.n	8007156 <_printf_float+0x192>
 800716c:	2301      	movs	r3, #1
 800716e:	e7f2      	b.n	8007156 <_printf_float+0x192>
 8007170:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007176:	4299      	cmp	r1, r3
 8007178:	db05      	blt.n	8007186 <_printf_float+0x1c2>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	6121      	str	r1, [r4, #16]
 800717e:	07d8      	lsls	r0, r3, #31
 8007180:	d5ea      	bpl.n	8007158 <_printf_float+0x194>
 8007182:	1c4b      	adds	r3, r1, #1
 8007184:	e7e7      	b.n	8007156 <_printf_float+0x192>
 8007186:	2900      	cmp	r1, #0
 8007188:	bfd4      	ite	le
 800718a:	f1c1 0202 	rsble	r2, r1, #2
 800718e:	2201      	movgt	r2, #1
 8007190:	4413      	add	r3, r2
 8007192:	e7e0      	b.n	8007156 <_printf_float+0x192>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	055a      	lsls	r2, r3, #21
 8007198:	d407      	bmi.n	80071aa <_printf_float+0x1e6>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	4642      	mov	r2, r8
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	d12b      	bne.n	8007200 <_printf_float+0x23c>
 80071a8:	e767      	b.n	800707a <_printf_float+0xb6>
 80071aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071ae:	f240 80dd 	bls.w	800736c <_printf_float+0x3a8>
 80071b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071b6:	2200      	movs	r2, #0
 80071b8:	2300      	movs	r3, #0
 80071ba:	f7f9 fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d033      	beq.n	800722a <_printf_float+0x266>
 80071c2:	4a37      	ldr	r2, [pc, #220]	@ (80072a0 <_printf_float+0x2dc>)
 80071c4:	2301      	movs	r3, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f af54 	beq.w	800707a <_printf_float+0xb6>
 80071d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071d6:	4543      	cmp	r3, r8
 80071d8:	db02      	blt.n	80071e0 <_printf_float+0x21c>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	07d8      	lsls	r0, r3, #31
 80071de:	d50f      	bpl.n	8007200 <_printf_float+0x23c>
 80071e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af45 	beq.w	800707a <_printf_float+0xb6>
 80071f0:	f04f 0900 	mov.w	r9, #0
 80071f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80071f8:	f104 0a1a 	add.w	sl, r4, #26
 80071fc:	45c8      	cmp	r8, r9
 80071fe:	dc09      	bgt.n	8007214 <_printf_float+0x250>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	079b      	lsls	r3, r3, #30
 8007204:	f100 8103 	bmi.w	800740e <_printf_float+0x44a>
 8007208:	68e0      	ldr	r0, [r4, #12]
 800720a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800720c:	4298      	cmp	r0, r3
 800720e:	bfb8      	it	lt
 8007210:	4618      	movlt	r0, r3
 8007212:	e734      	b.n	800707e <_printf_float+0xba>
 8007214:	2301      	movs	r3, #1
 8007216:	4652      	mov	r2, sl
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af2b 	beq.w	800707a <_printf_float+0xb6>
 8007224:	f109 0901 	add.w	r9, r9, #1
 8007228:	e7e8      	b.n	80071fc <_printf_float+0x238>
 800722a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	dc39      	bgt.n	80072a4 <_printf_float+0x2e0>
 8007230:	4a1b      	ldr	r2, [pc, #108]	@ (80072a0 <_printf_float+0x2dc>)
 8007232:	2301      	movs	r3, #1
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	47b8      	blx	r7
 800723a:	3001      	adds	r0, #1
 800723c:	f43f af1d 	beq.w	800707a <_printf_float+0xb6>
 8007240:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007244:	ea59 0303 	orrs.w	r3, r9, r3
 8007248:	d102      	bne.n	8007250 <_printf_float+0x28c>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	07d9      	lsls	r1, r3, #31
 800724e:	d5d7      	bpl.n	8007200 <_printf_float+0x23c>
 8007250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f af0d 	beq.w	800707a <_printf_float+0xb6>
 8007260:	f04f 0a00 	mov.w	sl, #0
 8007264:	f104 0b1a 	add.w	fp, r4, #26
 8007268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726a:	425b      	negs	r3, r3
 800726c:	4553      	cmp	r3, sl
 800726e:	dc01      	bgt.n	8007274 <_printf_float+0x2b0>
 8007270:	464b      	mov	r3, r9
 8007272:	e793      	b.n	800719c <_printf_float+0x1d8>
 8007274:	2301      	movs	r3, #1
 8007276:	465a      	mov	r2, fp
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f aefb 	beq.w	800707a <_printf_float+0xb6>
 8007284:	f10a 0a01 	add.w	sl, sl, #1
 8007288:	e7ee      	b.n	8007268 <_printf_float+0x2a4>
 800728a:	bf00      	nop
 800728c:	7fefffff 	.word	0x7fefffff
 8007290:	0800a3dc 	.word	0x0800a3dc
 8007294:	0800a3e0 	.word	0x0800a3e0
 8007298:	0800a3e4 	.word	0x0800a3e4
 800729c:	0800a3e8 	.word	0x0800a3e8
 80072a0:	0800a3ec 	.word	0x0800a3ec
 80072a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072aa:	4553      	cmp	r3, sl
 80072ac:	bfa8      	it	ge
 80072ae:	4653      	movge	r3, sl
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	4699      	mov	r9, r3
 80072b4:	dc36      	bgt.n	8007324 <_printf_float+0x360>
 80072b6:	f04f 0b00 	mov.w	fp, #0
 80072ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072be:	f104 021a 	add.w	r2, r4, #26
 80072c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072c4:	9306      	str	r3, [sp, #24]
 80072c6:	eba3 0309 	sub.w	r3, r3, r9
 80072ca:	455b      	cmp	r3, fp
 80072cc:	dc31      	bgt.n	8007332 <_printf_float+0x36e>
 80072ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d0:	459a      	cmp	sl, r3
 80072d2:	dc3a      	bgt.n	800734a <_printf_float+0x386>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	07da      	lsls	r2, r3, #31
 80072d8:	d437      	bmi.n	800734a <_printf_float+0x386>
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	ebaa 0903 	sub.w	r9, sl, r3
 80072e0:	9b06      	ldr	r3, [sp, #24]
 80072e2:	ebaa 0303 	sub.w	r3, sl, r3
 80072e6:	4599      	cmp	r9, r3
 80072e8:	bfa8      	it	ge
 80072ea:	4699      	movge	r9, r3
 80072ec:	f1b9 0f00 	cmp.w	r9, #0
 80072f0:	dc33      	bgt.n	800735a <_printf_float+0x396>
 80072f2:	f04f 0800 	mov.w	r8, #0
 80072f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072fa:	f104 0b1a 	add.w	fp, r4, #26
 80072fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007300:	ebaa 0303 	sub.w	r3, sl, r3
 8007304:	eba3 0309 	sub.w	r3, r3, r9
 8007308:	4543      	cmp	r3, r8
 800730a:	f77f af79 	ble.w	8007200 <_printf_float+0x23c>
 800730e:	2301      	movs	r3, #1
 8007310:	465a      	mov	r2, fp
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f aeae 	beq.w	800707a <_printf_float+0xb6>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	e7ec      	b.n	80072fe <_printf_float+0x33a>
 8007324:	4642      	mov	r2, r8
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	d1c2      	bne.n	80072b6 <_printf_float+0x2f2>
 8007330:	e6a3      	b.n	800707a <_printf_float+0xb6>
 8007332:	2301      	movs	r3, #1
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	9206      	str	r2, [sp, #24]
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae9c 	beq.w	800707a <_printf_float+0xb6>
 8007342:	9a06      	ldr	r2, [sp, #24]
 8007344:	f10b 0b01 	add.w	fp, fp, #1
 8007348:	e7bb      	b.n	80072c2 <_printf_float+0x2fe>
 800734a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	47b8      	blx	r7
 8007354:	3001      	adds	r0, #1
 8007356:	d1c0      	bne.n	80072da <_printf_float+0x316>
 8007358:	e68f      	b.n	800707a <_printf_float+0xb6>
 800735a:	9a06      	ldr	r2, [sp, #24]
 800735c:	464b      	mov	r3, r9
 800735e:	4442      	add	r2, r8
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	d1c3      	bne.n	80072f2 <_printf_float+0x32e>
 800736a:	e686      	b.n	800707a <_printf_float+0xb6>
 800736c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007370:	f1ba 0f01 	cmp.w	sl, #1
 8007374:	dc01      	bgt.n	800737a <_printf_float+0x3b6>
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d536      	bpl.n	80073e8 <_printf_float+0x424>
 800737a:	2301      	movs	r3, #1
 800737c:	4642      	mov	r2, r8
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	f43f ae78 	beq.w	800707a <_printf_float+0xb6>
 800738a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f ae70 	beq.w	800707a <_printf_float+0xb6>
 800739a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a6:	f7f9 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80073aa:	b9c0      	cbnz	r0, 80073de <_printf_float+0x41a>
 80073ac:	4653      	mov	r3, sl
 80073ae:	f108 0201 	add.w	r2, r8, #1
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	d10c      	bne.n	80073d6 <_printf_float+0x412>
 80073bc:	e65d      	b.n	800707a <_printf_float+0xb6>
 80073be:	2301      	movs	r3, #1
 80073c0:	465a      	mov	r2, fp
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae56 	beq.w	800707a <_printf_float+0xb6>
 80073ce:	f108 0801 	add.w	r8, r8, #1
 80073d2:	45d0      	cmp	r8, sl
 80073d4:	dbf3      	blt.n	80073be <_printf_float+0x3fa>
 80073d6:	464b      	mov	r3, r9
 80073d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80073dc:	e6df      	b.n	800719e <_printf_float+0x1da>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f104 0b1a 	add.w	fp, r4, #26
 80073e6:	e7f4      	b.n	80073d2 <_printf_float+0x40e>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4642      	mov	r2, r8
 80073ec:	e7e1      	b.n	80073b2 <_printf_float+0x3ee>
 80073ee:	2301      	movs	r3, #1
 80073f0:	464a      	mov	r2, r9
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae3e 	beq.w	800707a <_printf_float+0xb6>
 80073fe:	f108 0801 	add.w	r8, r8, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	4543      	cmp	r3, r8
 800740a:	dcf0      	bgt.n	80073ee <_printf_float+0x42a>
 800740c:	e6fc      	b.n	8007208 <_printf_float+0x244>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0919 	add.w	r9, r4, #25
 8007416:	e7f4      	b.n	8007402 <_printf_float+0x43e>

08007418 <_printf_common>:
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	4616      	mov	r6, r2
 800741e:	4698      	mov	r8, r3
 8007420:	688a      	ldr	r2, [r1, #8]
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007428:	4293      	cmp	r3, r2
 800742a:	bfb8      	it	lt
 800742c:	4613      	movlt	r3, r2
 800742e:	6033      	str	r3, [r6, #0]
 8007430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007434:	4607      	mov	r7, r0
 8007436:	460c      	mov	r4, r1
 8007438:	b10a      	cbz	r2, 800743e <_printf_common+0x26>
 800743a:	3301      	adds	r3, #1
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	0699      	lsls	r1, r3, #26
 8007442:	bf42      	ittt	mi
 8007444:	6833      	ldrmi	r3, [r6, #0]
 8007446:	3302      	addmi	r3, #2
 8007448:	6033      	strmi	r3, [r6, #0]
 800744a:	6825      	ldr	r5, [r4, #0]
 800744c:	f015 0506 	ands.w	r5, r5, #6
 8007450:	d106      	bne.n	8007460 <_printf_common+0x48>
 8007452:	f104 0a19 	add.w	sl, r4, #25
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	6832      	ldr	r2, [r6, #0]
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	42ab      	cmp	r3, r5
 800745e:	dc26      	bgt.n	80074ae <_printf_common+0x96>
 8007460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	3b00      	subs	r3, #0
 8007468:	bf18      	it	ne
 800746a:	2301      	movne	r3, #1
 800746c:	0692      	lsls	r2, r2, #26
 800746e:	d42b      	bmi.n	80074c8 <_printf_common+0xb0>
 8007470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007474:	4641      	mov	r1, r8
 8007476:	4638      	mov	r0, r7
 8007478:	47c8      	blx	r9
 800747a:	3001      	adds	r0, #1
 800747c:	d01e      	beq.n	80074bc <_printf_common+0xa4>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	6922      	ldr	r2, [r4, #16]
 8007482:	f003 0306 	and.w	r3, r3, #6
 8007486:	2b04      	cmp	r3, #4
 8007488:	bf02      	ittt	eq
 800748a:	68e5      	ldreq	r5, [r4, #12]
 800748c:	6833      	ldreq	r3, [r6, #0]
 800748e:	1aed      	subeq	r5, r5, r3
 8007490:	68a3      	ldr	r3, [r4, #8]
 8007492:	bf0c      	ite	eq
 8007494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007498:	2500      	movne	r5, #0
 800749a:	4293      	cmp	r3, r2
 800749c:	bfc4      	itt	gt
 800749e:	1a9b      	subgt	r3, r3, r2
 80074a0:	18ed      	addgt	r5, r5, r3
 80074a2:	2600      	movs	r6, #0
 80074a4:	341a      	adds	r4, #26
 80074a6:	42b5      	cmp	r5, r6
 80074a8:	d11a      	bne.n	80074e0 <_printf_common+0xc8>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e008      	b.n	80074c0 <_printf_common+0xa8>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4652      	mov	r2, sl
 80074b2:	4641      	mov	r1, r8
 80074b4:	4638      	mov	r0, r7
 80074b6:	47c8      	blx	r9
 80074b8:	3001      	adds	r0, #1
 80074ba:	d103      	bne.n	80074c4 <_printf_common+0xac>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	3501      	adds	r5, #1
 80074c6:	e7c6      	b.n	8007456 <_printf_common+0x3e>
 80074c8:	18e1      	adds	r1, r4, r3
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	2030      	movs	r0, #48	@ 0x30
 80074ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074d2:	4422      	add	r2, r4
 80074d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074dc:	3302      	adds	r3, #2
 80074de:	e7c7      	b.n	8007470 <_printf_common+0x58>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4622      	mov	r2, r4
 80074e4:	4641      	mov	r1, r8
 80074e6:	4638      	mov	r0, r7
 80074e8:	47c8      	blx	r9
 80074ea:	3001      	adds	r0, #1
 80074ec:	d0e6      	beq.n	80074bc <_printf_common+0xa4>
 80074ee:	3601      	adds	r6, #1
 80074f0:	e7d9      	b.n	80074a6 <_printf_common+0x8e>
	...

080074f4 <_printf_i>:
 80074f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	7e0f      	ldrb	r7, [r1, #24]
 80074fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074fc:	2f78      	cmp	r7, #120	@ 0x78
 80074fe:	4691      	mov	r9, r2
 8007500:	4680      	mov	r8, r0
 8007502:	460c      	mov	r4, r1
 8007504:	469a      	mov	sl, r3
 8007506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800750a:	d807      	bhi.n	800751c <_printf_i+0x28>
 800750c:	2f62      	cmp	r7, #98	@ 0x62
 800750e:	d80a      	bhi.n	8007526 <_printf_i+0x32>
 8007510:	2f00      	cmp	r7, #0
 8007512:	f000 80d2 	beq.w	80076ba <_printf_i+0x1c6>
 8007516:	2f58      	cmp	r7, #88	@ 0x58
 8007518:	f000 80b9 	beq.w	800768e <_printf_i+0x19a>
 800751c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007524:	e03a      	b.n	800759c <_printf_i+0xa8>
 8007526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800752a:	2b15      	cmp	r3, #21
 800752c:	d8f6      	bhi.n	800751c <_printf_i+0x28>
 800752e:	a101      	add	r1, pc, #4	@ (adr r1, 8007534 <_printf_i+0x40>)
 8007530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007534:	0800758d 	.word	0x0800758d
 8007538:	080075a1 	.word	0x080075a1
 800753c:	0800751d 	.word	0x0800751d
 8007540:	0800751d 	.word	0x0800751d
 8007544:	0800751d 	.word	0x0800751d
 8007548:	0800751d 	.word	0x0800751d
 800754c:	080075a1 	.word	0x080075a1
 8007550:	0800751d 	.word	0x0800751d
 8007554:	0800751d 	.word	0x0800751d
 8007558:	0800751d 	.word	0x0800751d
 800755c:	0800751d 	.word	0x0800751d
 8007560:	080076a1 	.word	0x080076a1
 8007564:	080075cb 	.word	0x080075cb
 8007568:	0800765b 	.word	0x0800765b
 800756c:	0800751d 	.word	0x0800751d
 8007570:	0800751d 	.word	0x0800751d
 8007574:	080076c3 	.word	0x080076c3
 8007578:	0800751d 	.word	0x0800751d
 800757c:	080075cb 	.word	0x080075cb
 8007580:	0800751d 	.word	0x0800751d
 8007584:	0800751d 	.word	0x0800751d
 8007588:	08007663 	.word	0x08007663
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6032      	str	r2, [r6, #0]
 8007594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800759c:	2301      	movs	r3, #1
 800759e:	e09d      	b.n	80076dc <_printf_i+0x1e8>
 80075a0:	6833      	ldr	r3, [r6, #0]
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	1d19      	adds	r1, r3, #4
 80075a6:	6031      	str	r1, [r6, #0]
 80075a8:	0606      	lsls	r6, r0, #24
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0xbc>
 80075ac:	681d      	ldr	r5, [r3, #0]
 80075ae:	e003      	b.n	80075b8 <_printf_i+0xc4>
 80075b0:	0645      	lsls	r5, r0, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0xb8>
 80075b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	da03      	bge.n	80075c4 <_printf_i+0xd0>
 80075bc:	232d      	movs	r3, #45	@ 0x2d
 80075be:	426d      	negs	r5, r5
 80075c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c4:	4859      	ldr	r0, [pc, #356]	@ (800772c <_printf_i+0x238>)
 80075c6:	230a      	movs	r3, #10
 80075c8:	e011      	b.n	80075ee <_printf_i+0xfa>
 80075ca:	6821      	ldr	r1, [r4, #0]
 80075cc:	6833      	ldr	r3, [r6, #0]
 80075ce:	0608      	lsls	r0, r1, #24
 80075d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075d4:	d402      	bmi.n	80075dc <_printf_i+0xe8>
 80075d6:	0649      	lsls	r1, r1, #25
 80075d8:	bf48      	it	mi
 80075da:	b2ad      	uxthmi	r5, r5
 80075dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80075de:	4853      	ldr	r0, [pc, #332]	@ (800772c <_printf_i+0x238>)
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	bf14      	ite	ne
 80075e4:	230a      	movne	r3, #10
 80075e6:	2308      	moveq	r3, #8
 80075e8:	2100      	movs	r1, #0
 80075ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075ee:	6866      	ldr	r6, [r4, #4]
 80075f0:	60a6      	str	r6, [r4, #8]
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	bfa2      	ittt	ge
 80075f6:	6821      	ldrge	r1, [r4, #0]
 80075f8:	f021 0104 	bicge.w	r1, r1, #4
 80075fc:	6021      	strge	r1, [r4, #0]
 80075fe:	b90d      	cbnz	r5, 8007604 <_printf_i+0x110>
 8007600:	2e00      	cmp	r6, #0
 8007602:	d04b      	beq.n	800769c <_printf_i+0x1a8>
 8007604:	4616      	mov	r6, r2
 8007606:	fbb5 f1f3 	udiv	r1, r5, r3
 800760a:	fb03 5711 	mls	r7, r3, r1, r5
 800760e:	5dc7      	ldrb	r7, [r0, r7]
 8007610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007614:	462f      	mov	r7, r5
 8007616:	42bb      	cmp	r3, r7
 8007618:	460d      	mov	r5, r1
 800761a:	d9f4      	bls.n	8007606 <_printf_i+0x112>
 800761c:	2b08      	cmp	r3, #8
 800761e:	d10b      	bne.n	8007638 <_printf_i+0x144>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07df      	lsls	r7, r3, #31
 8007624:	d508      	bpl.n	8007638 <_printf_i+0x144>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6861      	ldr	r1, [r4, #4]
 800762a:	4299      	cmp	r1, r3
 800762c:	bfde      	ittt	le
 800762e:	2330      	movle	r3, #48	@ 0x30
 8007630:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007634:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007638:	1b92      	subs	r2, r2, r6
 800763a:	6122      	str	r2, [r4, #16]
 800763c:	f8cd a000 	str.w	sl, [sp]
 8007640:	464b      	mov	r3, r9
 8007642:	aa03      	add	r2, sp, #12
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fee6 	bl	8007418 <_printf_common>
 800764c:	3001      	adds	r0, #1
 800764e:	d14a      	bne.n	80076e6 <_printf_i+0x1f2>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	b004      	add	sp, #16
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f043 0320 	orr.w	r3, r3, #32
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	4833      	ldr	r0, [pc, #204]	@ (8007730 <_printf_i+0x23c>)
 8007664:	2778      	movs	r7, #120	@ 0x78
 8007666:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	6831      	ldr	r1, [r6, #0]
 800766e:	061f      	lsls	r7, r3, #24
 8007670:	f851 5b04 	ldr.w	r5, [r1], #4
 8007674:	d402      	bmi.n	800767c <_printf_i+0x188>
 8007676:	065f      	lsls	r7, r3, #25
 8007678:	bf48      	it	mi
 800767a:	b2ad      	uxthmi	r5, r5
 800767c:	6031      	str	r1, [r6, #0]
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	bf44      	itt	mi
 8007682:	f043 0320 	orrmi.w	r3, r3, #32
 8007686:	6023      	strmi	r3, [r4, #0]
 8007688:	b11d      	cbz	r5, 8007692 <_printf_i+0x19e>
 800768a:	2310      	movs	r3, #16
 800768c:	e7ac      	b.n	80075e8 <_printf_i+0xf4>
 800768e:	4827      	ldr	r0, [pc, #156]	@ (800772c <_printf_i+0x238>)
 8007690:	e7e9      	b.n	8007666 <_printf_i+0x172>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f023 0320 	bic.w	r3, r3, #32
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	e7f6      	b.n	800768a <_printf_i+0x196>
 800769c:	4616      	mov	r6, r2
 800769e:	e7bd      	b.n	800761c <_printf_i+0x128>
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	6825      	ldr	r5, [r4, #0]
 80076a4:	6961      	ldr	r1, [r4, #20]
 80076a6:	1d18      	adds	r0, r3, #4
 80076a8:	6030      	str	r0, [r6, #0]
 80076aa:	062e      	lsls	r6, r5, #24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0x1c0>
 80076b0:	6019      	str	r1, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0x1c6>
 80076b4:	0668      	lsls	r0, r5, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0x1bc>
 80076b8:	8019      	strh	r1, [r3, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	4616      	mov	r6, r2
 80076c0:	e7bc      	b.n	800763c <_printf_i+0x148>
 80076c2:	6833      	ldr	r3, [r6, #0]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	6032      	str	r2, [r6, #0]
 80076c8:	681e      	ldr	r6, [r3, #0]
 80076ca:	6862      	ldr	r2, [r4, #4]
 80076cc:	2100      	movs	r1, #0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7f8 fd86 	bl	80001e0 <memchr>
 80076d4:	b108      	cbz	r0, 80076da <_printf_i+0x1e6>
 80076d6:	1b80      	subs	r0, r0, r6
 80076d8:	6060      	str	r0, [r4, #4]
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	2300      	movs	r3, #0
 80076e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076e4:	e7aa      	b.n	800763c <_printf_i+0x148>
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d0ad      	beq.n	8007650 <_printf_i+0x15c>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	079b      	lsls	r3, r3, #30
 80076f8:	d413      	bmi.n	8007722 <_printf_i+0x22e>
 80076fa:	68e0      	ldr	r0, [r4, #12]
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	4298      	cmp	r0, r3
 8007700:	bfb8      	it	lt
 8007702:	4618      	movlt	r0, r3
 8007704:	e7a6      	b.n	8007654 <_printf_i+0x160>
 8007706:	2301      	movs	r3, #1
 8007708:	4632      	mov	r2, r6
 800770a:	4649      	mov	r1, r9
 800770c:	4640      	mov	r0, r8
 800770e:	47d0      	blx	sl
 8007710:	3001      	adds	r0, #1
 8007712:	d09d      	beq.n	8007650 <_printf_i+0x15c>
 8007714:	3501      	adds	r5, #1
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	9903      	ldr	r1, [sp, #12]
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	42ab      	cmp	r3, r5
 800771e:	dcf2      	bgt.n	8007706 <_printf_i+0x212>
 8007720:	e7eb      	b.n	80076fa <_printf_i+0x206>
 8007722:	2500      	movs	r5, #0
 8007724:	f104 0619 	add.w	r6, r4, #25
 8007728:	e7f5      	b.n	8007716 <_printf_i+0x222>
 800772a:	bf00      	nop
 800772c:	0800a3ee 	.word	0x0800a3ee
 8007730:	0800a3ff 	.word	0x0800a3ff

08007734 <std>:
 8007734:	2300      	movs	r3, #0
 8007736:	b510      	push	{r4, lr}
 8007738:	4604      	mov	r4, r0
 800773a:	e9c0 3300 	strd	r3, r3, [r0]
 800773e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007742:	6083      	str	r3, [r0, #8]
 8007744:	8181      	strh	r1, [r0, #12]
 8007746:	6643      	str	r3, [r0, #100]	@ 0x64
 8007748:	81c2      	strh	r2, [r0, #14]
 800774a:	6183      	str	r3, [r0, #24]
 800774c:	4619      	mov	r1, r3
 800774e:	2208      	movs	r2, #8
 8007750:	305c      	adds	r0, #92	@ 0x5c
 8007752:	f000 f928 	bl	80079a6 <memset>
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <std+0x58>)
 8007758:	6263      	str	r3, [r4, #36]	@ 0x24
 800775a:	4b0d      	ldr	r3, [pc, #52]	@ (8007790 <std+0x5c>)
 800775c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <std+0x60>)
 8007760:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <std+0x64>)
 8007764:	6323      	str	r3, [r4, #48]	@ 0x30
 8007766:	4b0d      	ldr	r3, [pc, #52]	@ (800779c <std+0x68>)
 8007768:	6224      	str	r4, [r4, #32]
 800776a:	429c      	cmp	r4, r3
 800776c:	d006      	beq.n	800777c <std+0x48>
 800776e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007772:	4294      	cmp	r4, r2
 8007774:	d002      	beq.n	800777c <std+0x48>
 8007776:	33d0      	adds	r3, #208	@ 0xd0
 8007778:	429c      	cmp	r4, r3
 800777a:	d105      	bne.n	8007788 <std+0x54>
 800777c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007784:	f000 b98c 	b.w	8007aa0 <__retarget_lock_init_recursive>
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	08007921 	.word	0x08007921
 8007790:	08007943 	.word	0x08007943
 8007794:	0800797b 	.word	0x0800797b
 8007798:	0800799f 	.word	0x0800799f
 800779c:	200002f4 	.word	0x200002f4

080077a0 <stdio_exit_handler>:
 80077a0:	4a02      	ldr	r2, [pc, #8]	@ (80077ac <stdio_exit_handler+0xc>)
 80077a2:	4903      	ldr	r1, [pc, #12]	@ (80077b0 <stdio_exit_handler+0x10>)
 80077a4:	4803      	ldr	r0, [pc, #12]	@ (80077b4 <stdio_exit_handler+0x14>)
 80077a6:	f000 b869 	b.w	800787c <_fwalk_sglue>
 80077aa:	bf00      	nop
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	080093fd 	.word	0x080093fd
 80077b4:	2000001c 	.word	0x2000001c

080077b8 <cleanup_stdio>:
 80077b8:	6841      	ldr	r1, [r0, #4]
 80077ba:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <cleanup_stdio+0x34>)
 80077bc:	4299      	cmp	r1, r3
 80077be:	b510      	push	{r4, lr}
 80077c0:	4604      	mov	r4, r0
 80077c2:	d001      	beq.n	80077c8 <cleanup_stdio+0x10>
 80077c4:	f001 fe1a 	bl	80093fc <_fflush_r>
 80077c8:	68a1      	ldr	r1, [r4, #8]
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <cleanup_stdio+0x38>)
 80077cc:	4299      	cmp	r1, r3
 80077ce:	d002      	beq.n	80077d6 <cleanup_stdio+0x1e>
 80077d0:	4620      	mov	r0, r4
 80077d2:	f001 fe13 	bl	80093fc <_fflush_r>
 80077d6:	68e1      	ldr	r1, [r4, #12]
 80077d8:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <cleanup_stdio+0x3c>)
 80077da:	4299      	cmp	r1, r3
 80077dc:	d004      	beq.n	80077e8 <cleanup_stdio+0x30>
 80077de:	4620      	mov	r0, r4
 80077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e4:	f001 be0a 	b.w	80093fc <_fflush_r>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	bf00      	nop
 80077ec:	200002f4 	.word	0x200002f4
 80077f0:	2000035c 	.word	0x2000035c
 80077f4:	200003c4 	.word	0x200003c4

080077f8 <global_stdio_init.part.0>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <global_stdio_init.part.0+0x30>)
 80077fc:	4c0b      	ldr	r4, [pc, #44]	@ (800782c <global_stdio_init.part.0+0x34>)
 80077fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007830 <global_stdio_init.part.0+0x38>)
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	4620      	mov	r0, r4
 8007804:	2200      	movs	r2, #0
 8007806:	2104      	movs	r1, #4
 8007808:	f7ff ff94 	bl	8007734 <std>
 800780c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007810:	2201      	movs	r2, #1
 8007812:	2109      	movs	r1, #9
 8007814:	f7ff ff8e 	bl	8007734 <std>
 8007818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800781c:	2202      	movs	r2, #2
 800781e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007822:	2112      	movs	r1, #18
 8007824:	f7ff bf86 	b.w	8007734 <std>
 8007828:	2000042c 	.word	0x2000042c
 800782c:	200002f4 	.word	0x200002f4
 8007830:	080077a1 	.word	0x080077a1

08007834 <__sfp_lock_acquire>:
 8007834:	4801      	ldr	r0, [pc, #4]	@ (800783c <__sfp_lock_acquire+0x8>)
 8007836:	f000 b934 	b.w	8007aa2 <__retarget_lock_acquire_recursive>
 800783a:	bf00      	nop
 800783c:	20000435 	.word	0x20000435

08007840 <__sfp_lock_release>:
 8007840:	4801      	ldr	r0, [pc, #4]	@ (8007848 <__sfp_lock_release+0x8>)
 8007842:	f000 b92f 	b.w	8007aa4 <__retarget_lock_release_recursive>
 8007846:	bf00      	nop
 8007848:	20000435 	.word	0x20000435

0800784c <__sinit>:
 800784c:	b510      	push	{r4, lr}
 800784e:	4604      	mov	r4, r0
 8007850:	f7ff fff0 	bl	8007834 <__sfp_lock_acquire>
 8007854:	6a23      	ldr	r3, [r4, #32]
 8007856:	b11b      	cbz	r3, 8007860 <__sinit+0x14>
 8007858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800785c:	f7ff bff0 	b.w	8007840 <__sfp_lock_release>
 8007860:	4b04      	ldr	r3, [pc, #16]	@ (8007874 <__sinit+0x28>)
 8007862:	6223      	str	r3, [r4, #32]
 8007864:	4b04      	ldr	r3, [pc, #16]	@ (8007878 <__sinit+0x2c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f5      	bne.n	8007858 <__sinit+0xc>
 800786c:	f7ff ffc4 	bl	80077f8 <global_stdio_init.part.0>
 8007870:	e7f2      	b.n	8007858 <__sinit+0xc>
 8007872:	bf00      	nop
 8007874:	080077b9 	.word	0x080077b9
 8007878:	2000042c 	.word	0x2000042c

0800787c <_fwalk_sglue>:
 800787c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007880:	4607      	mov	r7, r0
 8007882:	4688      	mov	r8, r1
 8007884:	4614      	mov	r4, r2
 8007886:	2600      	movs	r6, #0
 8007888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800788c:	f1b9 0901 	subs.w	r9, r9, #1
 8007890:	d505      	bpl.n	800789e <_fwalk_sglue+0x22>
 8007892:	6824      	ldr	r4, [r4, #0]
 8007894:	2c00      	cmp	r4, #0
 8007896:	d1f7      	bne.n	8007888 <_fwalk_sglue+0xc>
 8007898:	4630      	mov	r0, r6
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	89ab      	ldrh	r3, [r5, #12]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d907      	bls.n	80078b4 <_fwalk_sglue+0x38>
 80078a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078a8:	3301      	adds	r3, #1
 80078aa:	d003      	beq.n	80078b4 <_fwalk_sglue+0x38>
 80078ac:	4629      	mov	r1, r5
 80078ae:	4638      	mov	r0, r7
 80078b0:	47c0      	blx	r8
 80078b2:	4306      	orrs	r6, r0
 80078b4:	3568      	adds	r5, #104	@ 0x68
 80078b6:	e7e9      	b.n	800788c <_fwalk_sglue+0x10>

080078b8 <sniprintf>:
 80078b8:	b40c      	push	{r2, r3}
 80078ba:	b530      	push	{r4, r5, lr}
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <sniprintf+0x64>)
 80078be:	1e0c      	subs	r4, r1, #0
 80078c0:	681d      	ldr	r5, [r3, #0]
 80078c2:	b09d      	sub	sp, #116	@ 0x74
 80078c4:	da08      	bge.n	80078d8 <sniprintf+0x20>
 80078c6:	238b      	movs	r3, #139	@ 0x8b
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b01d      	add	sp, #116	@ 0x74
 80078d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078d4:	b002      	add	sp, #8
 80078d6:	4770      	bx	lr
 80078d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078e0:	bf14      	ite	ne
 80078e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078e6:	4623      	moveq	r3, r4
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078f0:	9002      	str	r0, [sp, #8]
 80078f2:	9006      	str	r0, [sp, #24]
 80078f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078fa:	ab21      	add	r3, sp, #132	@ 0x84
 80078fc:	a902      	add	r1, sp, #8
 80078fe:	4628      	mov	r0, r5
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	f001 fbfb 	bl	80090fc <_svfiprintf_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	bfbc      	itt	lt
 800790a:	238b      	movlt	r3, #139	@ 0x8b
 800790c:	602b      	strlt	r3, [r5, #0]
 800790e:	2c00      	cmp	r4, #0
 8007910:	d0dd      	beq.n	80078ce <sniprintf+0x16>
 8007912:	9b02      	ldr	r3, [sp, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e7d9      	b.n	80078ce <sniprintf+0x16>
 800791a:	bf00      	nop
 800791c:	20000018 	.word	0x20000018

08007920 <__sread>:
 8007920:	b510      	push	{r4, lr}
 8007922:	460c      	mov	r4, r1
 8007924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007928:	f000 f86c 	bl	8007a04 <_read_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	bfab      	itete	ge
 8007930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007932:	89a3      	ldrhlt	r3, [r4, #12]
 8007934:	181b      	addge	r3, r3, r0
 8007936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800793a:	bfac      	ite	ge
 800793c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800793e:	81a3      	strhlt	r3, [r4, #12]
 8007940:	bd10      	pop	{r4, pc}

08007942 <__swrite>:
 8007942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007946:	461f      	mov	r7, r3
 8007948:	898b      	ldrh	r3, [r1, #12]
 800794a:	05db      	lsls	r3, r3, #23
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	4616      	mov	r6, r2
 8007952:	d505      	bpl.n	8007960 <__swrite+0x1e>
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	2302      	movs	r3, #2
 800795a:	2200      	movs	r2, #0
 800795c:	f000 f840 	bl	80079e0 <_lseek_r>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	4632      	mov	r2, r6
 800796e:	463b      	mov	r3, r7
 8007970:	4628      	mov	r0, r5
 8007972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	f000 b857 	b.w	8007a28 <_write_r>

0800797a <__sseek>:
 800797a:	b510      	push	{r4, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007982:	f000 f82d 	bl	80079e0 <_lseek_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	bf15      	itete	ne
 800798c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800798e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007996:	81a3      	strheq	r3, [r4, #12]
 8007998:	bf18      	it	ne
 800799a:	81a3      	strhne	r3, [r4, #12]
 800799c:	bd10      	pop	{r4, pc}

0800799e <__sclose>:
 800799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a2:	f000 b80d 	b.w	80079c0 <_close_r>

080079a6 <memset>:
 80079a6:	4402      	add	r2, r0
 80079a8:	4603      	mov	r3, r0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d100      	bne.n	80079b0 <memset+0xa>
 80079ae:	4770      	bx	lr
 80079b0:	f803 1b01 	strb.w	r1, [r3], #1
 80079b4:	e7f9      	b.n	80079aa <memset+0x4>
	...

080079b8 <_localeconv_r>:
 80079b8:	4800      	ldr	r0, [pc, #0]	@ (80079bc <_localeconv_r+0x4>)
 80079ba:	4770      	bx	lr
 80079bc:	20000158 	.word	0x20000158

080079c0 <_close_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	@ (80079dc <_close_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7fa fd1a 	bl	8002404 <_close>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_close_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_close_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000430 	.word	0x20000430

080079e0 <_lseek_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	@ (8007a00 <_lseek_r+0x20>)
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	602a      	str	r2, [r5, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f7fa fd2f 	bl	8002452 <_lseek>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_lseek_r+0x1e>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_lseek_r+0x1e>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000430 	.word	0x20000430

08007a04 <_read_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	@ (8007a24 <_read_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7fa fcbd 	bl	8002392 <_read>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_read_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_read_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000430 	.word	0x20000430

08007a28 <_write_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	@ (8007a48 <_write_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fa fcc8 	bl	80023cc <_write>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_write_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_write_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000430 	.word	0x20000430

08007a4c <__errno>:
 8007a4c:	4b01      	ldr	r3, [pc, #4]	@ (8007a54 <__errno+0x8>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000018 	.word	0x20000018

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a90 <__libc_init_array+0x38>)
 8007a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a94 <__libc_init_array+0x3c>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	2600      	movs	r6, #0
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	4d0b      	ldr	r5, [pc, #44]	@ (8007a98 <__libc_init_array+0x40>)
 8007a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a9c <__libc_init_array+0x44>)
 8007a6c:	f002 fc2e 	bl	800a2cc <_init>
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	2600      	movs	r6, #0
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	0800a770 	.word	0x0800a770
 8007a94:	0800a770 	.word	0x0800a770
 8007a98:	0800a770 	.word	0x0800a770
 8007a9c:	0800a774 	.word	0x0800a774

08007aa0 <__retarget_lock_init_recursive>:
 8007aa0:	4770      	bx	lr

08007aa2 <__retarget_lock_acquire_recursive>:
 8007aa2:	4770      	bx	lr

08007aa4 <__retarget_lock_release_recursive>:
 8007aa4:	4770      	bx	lr

08007aa6 <quorem>:
 8007aa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6903      	ldr	r3, [r0, #16]
 8007aac:	690c      	ldr	r4, [r1, #16]
 8007aae:	42a3      	cmp	r3, r4
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	db7e      	blt.n	8007bb2 <quorem+0x10c>
 8007ab4:	3c01      	subs	r4, #1
 8007ab6:	f101 0814 	add.w	r8, r1, #20
 8007aba:	00a3      	lsls	r3, r4, #2
 8007abc:	f100 0514 	add.w	r5, r0, #20
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007adc:	d32e      	bcc.n	8007b3c <quorem+0x96>
 8007ade:	f04f 0a00 	mov.w	sl, #0
 8007ae2:	46c4      	mov	ip, r8
 8007ae4:	46ae      	mov	lr, r5
 8007ae6:	46d3      	mov	fp, sl
 8007ae8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007aec:	b298      	uxth	r0, r3
 8007aee:	fb06 a000 	mla	r0, r6, r0, sl
 8007af2:	0c02      	lsrs	r2, r0, #16
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	fb06 2303 	mla	r3, r6, r3, r2
 8007afa:	f8de 2000 	ldr.w	r2, [lr]
 8007afe:	b280      	uxth	r0, r0
 8007b00:	b292      	uxth	r2, r2
 8007b02:	1a12      	subs	r2, r2, r0
 8007b04:	445a      	add	r2, fp
 8007b06:	f8de 0000 	ldr.w	r0, [lr]
 8007b0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b1e:	45e1      	cmp	r9, ip
 8007b20:	f84e 2b04 	str.w	r2, [lr], #4
 8007b24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b28:	d2de      	bcs.n	8007ae8 <quorem+0x42>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	58eb      	ldr	r3, [r5, r3]
 8007b2e:	b92b      	cbnz	r3, 8007b3c <quorem+0x96>
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	3b04      	subs	r3, #4
 8007b34:	429d      	cmp	r5, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	d32f      	bcc.n	8007b9a <quorem+0xf4>
 8007b3a:	613c      	str	r4, [r7, #16]
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f001 f979 	bl	8008e34 <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	db25      	blt.n	8007b92 <quorem+0xec>
 8007b46:	4629      	mov	r1, r5
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b4e:	f8d1 c000 	ldr.w	ip, [r1]
 8007b52:	fa1f fe82 	uxth.w	lr, r2
 8007b56:	fa1f f38c 	uxth.w	r3, ip
 8007b5a:	eba3 030e 	sub.w	r3, r3, lr
 8007b5e:	4403      	add	r3, r0
 8007b60:	0c12      	lsrs	r2, r2, #16
 8007b62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b70:	45c1      	cmp	r9, r8
 8007b72:	f841 3b04 	str.w	r3, [r1], #4
 8007b76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b7a:	d2e6      	bcs.n	8007b4a <quorem+0xa4>
 8007b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b84:	b922      	cbnz	r2, 8007b90 <quorem+0xea>
 8007b86:	3b04      	subs	r3, #4
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	d30b      	bcc.n	8007ba6 <quorem+0x100>
 8007b8e:	613c      	str	r4, [r7, #16]
 8007b90:	3601      	adds	r6, #1
 8007b92:	4630      	mov	r0, r6
 8007b94:	b003      	add	sp, #12
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d1cb      	bne.n	8007b3a <quorem+0x94>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e7c6      	b.n	8007b34 <quorem+0x8e>
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d1ef      	bne.n	8007b8e <quorem+0xe8>
 8007bae:	3c01      	subs	r4, #1
 8007bb0:	e7ea      	b.n	8007b88 <quorem+0xe2>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e7ee      	b.n	8007b94 <quorem+0xee>
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	69c7      	ldr	r7, [r0, #28]
 8007bbe:	b099      	sub	sp, #100	@ 0x64
 8007bc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bc4:	ec55 4b10 	vmov	r4, r5, d0
 8007bc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bcc:	4683      	mov	fp, r0
 8007bce:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bd2:	b97f      	cbnz	r7, 8007bf4 <_dtoa_r+0x3c>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fdfd 	bl	80087d4 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007be0:	b920      	cbnz	r0, 8007bec <_dtoa_r+0x34>
 8007be2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e80 <_dtoa_r+0x2c8>)
 8007be4:	21ef      	movs	r1, #239	@ 0xef
 8007be6:	48a7      	ldr	r0, [pc, #668]	@ (8007e84 <_dtoa_r+0x2cc>)
 8007be8:	f001 fc68 	bl	80094bc <__assert_func>
 8007bec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bf0:	6007      	str	r7, [r0, #0]
 8007bf2:	60c7      	str	r7, [r0, #12]
 8007bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b159      	cbz	r1, 8007c14 <_dtoa_r+0x5c>
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	604a      	str	r2, [r1, #4]
 8007c00:	2301      	movs	r3, #1
 8007c02:	4093      	lsls	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 feda 	bl	80089c0 <_Bfree>
 8007c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	1e2b      	subs	r3, r5, #0
 8007c16:	bfb9      	ittee	lt
 8007c18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	9303      	strlt	r3, [sp, #12]
 8007c1e:	2300      	movge	r3, #0
 8007c20:	6033      	strge	r3, [r6, #0]
 8007c22:	9f03      	ldr	r7, [sp, #12]
 8007c24:	4b98      	ldr	r3, [pc, #608]	@ (8007e88 <_dtoa_r+0x2d0>)
 8007c26:	bfbc      	itt	lt
 8007c28:	2201      	movlt	r2, #1
 8007c2a:	6032      	strlt	r2, [r6, #0]
 8007c2c:	43bb      	bics	r3, r7
 8007c2e:	d112      	bne.n	8007c56 <_dtoa_r+0x9e>
 8007c30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c3c:	4323      	orrs	r3, r4
 8007c3e:	f000 854d 	beq.w	80086dc <_dtoa_r+0xb24>
 8007c42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e9c <_dtoa_r+0x2e4>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 854f 	beq.w	80086ec <_dtoa_r+0xb34>
 8007c4e:	f10a 0303 	add.w	r3, sl, #3
 8007c52:	f000 bd49 	b.w	80086e8 <_dtoa_r+0xb30>
 8007c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	ec51 0b17 	vmov	r0, r1, d7
 8007c60:	2300      	movs	r3, #0
 8007c62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c66:	f7f8 ff37 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	b158      	cbz	r0, 8007c86 <_dtoa_r+0xce>
 8007c6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c70:	2301      	movs	r3, #1
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c76:	b113      	cbz	r3, 8007c7e <_dtoa_r+0xc6>
 8007c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c7a:	4b84      	ldr	r3, [pc, #528]	@ (8007e8c <_dtoa_r+0x2d4>)
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ea0 <_dtoa_r+0x2e8>
 8007c82:	f000 bd33 	b.w	80086ec <_dtoa_r+0xb34>
 8007c86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c8a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c8c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f001 f980 	bl	8008f94 <__d2b>
 8007c94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c98:	4681      	mov	r9, r0
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d077      	beq.n	8007d8e <_dtoa_r+0x1d6>
 8007c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4b74      	ldr	r3, [pc, #464]	@ (8007e90 <_dtoa_r+0x2d8>)
 8007cbe:	f7f8 faeb 	bl	8000298 <__aeabi_dsub>
 8007cc2:	a369      	add	r3, pc, #420	@ (adr r3, 8007e68 <_dtoa_r+0x2b0>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc9e 	bl	8000608 <__aeabi_dmul>
 8007ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fae3 	bl	800029c <__adddf3>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4630      	mov	r0, r6
 8007cda:	460d      	mov	r5, r1
 8007cdc:	f7f8 fc2a 	bl	8000534 <__aeabi_i2d>
 8007ce0:	a365      	add	r3, pc, #404	@ (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fc8f 	bl	8000608 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fad3 	bl	800029c <__adddf3>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	f7f8 ff35 	bl	8000b68 <__aeabi_d2iz>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4607      	mov	r7, r0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fef0 	bl	8000aec <__aeabi_dcmplt>
 8007d0c:	b140      	cbz	r0, 8007d20 <_dtoa_r+0x168>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f7f8 fc10 	bl	8000534 <__aeabi_i2d>
 8007d14:	4622      	mov	r2, r4
 8007d16:	462b      	mov	r3, r5
 8007d18:	f7f8 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d1c:	b900      	cbnz	r0, 8007d20 <_dtoa_r+0x168>
 8007d1e:	3f01      	subs	r7, #1
 8007d20:	2f16      	cmp	r7, #22
 8007d22:	d851      	bhi.n	8007dc8 <_dtoa_r+0x210>
 8007d24:	4b5b      	ldr	r3, [pc, #364]	@ (8007e94 <_dtoa_r+0x2dc>)
 8007d26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d32:	f7f8 fedb 	bl	8000aec <__aeabi_dcmplt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d048      	beq.n	8007dcc <_dtoa_r+0x214>
 8007d3a:	3f01      	subs	r7, #1
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	bf44      	itt	mi
 8007d48:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d4c:	2300      	movmi	r3, #0
 8007d4e:	9208      	str	r2, [sp, #32]
 8007d50:	bf54      	ite	pl
 8007d52:	f04f 0800 	movpl.w	r8, #0
 8007d56:	9308      	strmi	r3, [sp, #32]
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	db39      	blt.n	8007dd0 <_dtoa_r+0x218>
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d60:	443b      	add	r3, r7
 8007d62:	9308      	str	r3, [sp, #32]
 8007d64:	2300      	movs	r3, #0
 8007d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d864      	bhi.n	8007e38 <_dtoa_r+0x280>
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	bfc4      	itt	gt
 8007d72:	3b04      	subgt	r3, #4
 8007d74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	f1a3 0302 	sub.w	r3, r3, #2
 8007d7c:	bfcc      	ite	gt
 8007d7e:	2400      	movgt	r4, #0
 8007d80:	2401      	movle	r4, #1
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d863      	bhi.n	8007e4e <_dtoa_r+0x296>
 8007d86:	e8df f003 	tbb	[pc, r3]
 8007d8a:	372a      	.short	0x372a
 8007d8c:	5535      	.short	0x5535
 8007d8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d92:	441e      	add	r6, r3
 8007d94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	bfc1      	itttt	gt
 8007d9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007da0:	409f      	lslgt	r7, r3
 8007da2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007da6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007daa:	bfd6      	itet	le
 8007dac:	f1c3 0320 	rsble	r3, r3, #32
 8007db0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007db4:	fa04 f003 	lslle.w	r0, r4, r3
 8007db8:	f7f8 fbac 	bl	8000514 <__aeabi_ui2d>
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dc2:	3e01      	subs	r6, #1
 8007dc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dc6:	e777      	b.n	8007cb8 <_dtoa_r+0x100>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e7b8      	b.n	8007d3e <_dtoa_r+0x186>
 8007dcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dce:	e7b7      	b.n	8007d40 <_dtoa_r+0x188>
 8007dd0:	427b      	negs	r3, r7
 8007dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	eba8 0807 	sub.w	r8, r8, r7
 8007dda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ddc:	e7c4      	b.n	8007d68 <_dtoa_r+0x1b0>
 8007dde:	2300      	movs	r3, #0
 8007de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc35      	bgt.n	8007e54 <_dtoa_r+0x29c>
 8007de8:	2301      	movs	r3, #1
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	9307      	str	r3, [sp, #28]
 8007dee:	461a      	mov	r2, r3
 8007df0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df2:	e00b      	b.n	8007e0c <_dtoa_r+0x254>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f3      	b.n	8007de0 <_dtoa_r+0x228>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	bfb8      	it	lt
 8007e0a:	2301      	movlt	r3, #1
 8007e0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e10:	2100      	movs	r1, #0
 8007e12:	2204      	movs	r2, #4
 8007e14:	f102 0514 	add.w	r5, r2, #20
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	d91f      	bls.n	8007e5c <_dtoa_r+0x2a4>
 8007e1c:	6041      	str	r1, [r0, #4]
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f000 fd8e 	bl	8008940 <_Balloc>
 8007e24:	4682      	mov	sl, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d13c      	bne.n	8007ea4 <_dtoa_r+0x2ec>
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e98 <_dtoa_r+0x2e0>)
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e32:	e6d8      	b.n	8007be6 <_dtoa_r+0x2e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7e0      	b.n	8007dfa <_dtoa_r+0x242>
 8007e38:	2401      	movs	r4, #1
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2312      	movs	r3, #18
 8007e4c:	e7d0      	b.n	8007df0 <_dtoa_r+0x238>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e52:	e7f5      	b.n	8007e40 <_dtoa_r+0x288>
 8007e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	e7d7      	b.n	8007e0c <_dtoa_r+0x254>
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	0052      	lsls	r2, r2, #1
 8007e60:	e7d8      	b.n	8007e14 <_dtoa_r+0x25c>
 8007e62:	bf00      	nop
 8007e64:	f3af 8000 	nop.w
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	0800a41d 	.word	0x0800a41d
 8007e84:	0800a434 	.word	0x0800a434
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800a3ed 	.word	0x0800a3ed
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	0800a530 	.word	0x0800a530
 8007e98:	0800a48c 	.word	0x0800a48c
 8007e9c:	0800a419 	.word	0x0800a419
 8007ea0:	0800a3ec 	.word	0x0800a3ec
 8007ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea8:	6018      	str	r0, [r3, #0]
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	2b0e      	cmp	r3, #14
 8007eae:	f200 80a4 	bhi.w	8007ffa <_dtoa_r+0x442>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f000 80a1 	beq.w	8007ffa <_dtoa_r+0x442>
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	dd33      	ble.n	8007f24 <_dtoa_r+0x36c>
 8007ebc:	4bad      	ldr	r3, [pc, #692]	@ (8008174 <_dtoa_r+0x5bc>)
 8007ebe:	f007 020f 	and.w	r2, r7, #15
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	ed93 7b00 	vldr	d7, [r3]
 8007eca:	05f8      	lsls	r0, r7, #23
 8007ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ed0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ed4:	d516      	bpl.n	8007f04 <_dtoa_r+0x34c>
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ee0:	f7f8 fcbc 	bl	800085c <__aeabi_ddiv>
 8007ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee8:	f004 040f 	and.w	r4, r4, #15
 8007eec:	2603      	movs	r6, #3
 8007eee:	4da2      	ldr	r5, [pc, #648]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ef0:	b954      	cbnz	r4, 8007f08 <_dtoa_r+0x350>
 8007ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	f7f8 fcaf 	bl	800085c <__aeabi_ddiv>
 8007efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f02:	e028      	b.n	8007f56 <_dtoa_r+0x39e>
 8007f04:	2602      	movs	r6, #2
 8007f06:	e7f2      	b.n	8007eee <_dtoa_r+0x336>
 8007f08:	07e1      	lsls	r1, r4, #31
 8007f0a:	d508      	bpl.n	8007f1e <_dtoa_r+0x366>
 8007f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f14:	f7f8 fb78 	bl	8000608 <__aeabi_dmul>
 8007f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	1064      	asrs	r4, r4, #1
 8007f20:	3508      	adds	r5, #8
 8007f22:	e7e5      	b.n	8007ef0 <_dtoa_r+0x338>
 8007f24:	f000 80d2 	beq.w	80080cc <_dtoa_r+0x514>
 8007f28:	427c      	negs	r4, r7
 8007f2a:	4b92      	ldr	r3, [pc, #584]	@ (8008174 <_dtoa_r+0x5bc>)
 8007f2c:	4d92      	ldr	r5, [pc, #584]	@ (8008178 <_dtoa_r+0x5c0>)
 8007f2e:	f004 020f 	and.w	r2, r4, #15
 8007f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3e:	f7f8 fb63 	bl	8000608 <__aeabi_dmul>
 8007f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f46:	1124      	asrs	r4, r4, #4
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2602      	movs	r6, #2
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	f040 80b2 	bne.w	80080b6 <_dtoa_r+0x4fe>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d3      	bne.n	8007efe <_dtoa_r+0x346>
 8007f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80b7 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f62:	4b86      	ldr	r3, [pc, #536]	@ (800817c <_dtoa_r+0x5c4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 80ae 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80aa 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd37      	ble.n	8007ff2 <_dtoa_r+0x43a>
 8007f82:	1e7b      	subs	r3, r7, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4b7d      	ldr	r3, [pc, #500]	@ (8008180 <_dtoa_r+0x5c8>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f96:	9c00      	ldr	r4, [sp, #0]
 8007f98:	3601      	adds	r6, #1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7f8 faca 	bl	8000534 <__aeabi_i2d>
 8007fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa4:	f7f8 fb30 	bl	8000608 <__aeabi_dmul>
 8007fa8:	4b76      	ldr	r3, [pc, #472]	@ (8008184 <_dtoa_r+0x5cc>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	f7f8 f976 	bl	800029c <__adddf3>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f040 808d 	bne.w	80080d6 <_dtoa_r+0x51e>
 8007fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc0:	4b71      	ldr	r3, [pc, #452]	@ (8008188 <_dtoa_r+0x5d0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 f968 	bl	8000298 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	f7f8 fda8 	bl	8000b28 <__aeabi_dcmpgt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f040 828b 	bne.w	80084f4 <_dtoa_r+0x93c>
 8007fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fe8:	f7f8 fd80 	bl	8000aec <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8128 	bne.w	8008242 <_dtoa_r+0x68a>
 8007ff2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ffa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f2c0 815a 	blt.w	80082b6 <_dtoa_r+0x6fe>
 8008002:	2f0e      	cmp	r7, #14
 8008004:	f300 8157 	bgt.w	80082b6 <_dtoa_r+0x6fe>
 8008008:	4b5a      	ldr	r3, [pc, #360]	@ (8008174 <_dtoa_r+0x5bc>)
 800800a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800800e:	ed93 7b00 	vldr	d7, [r3]
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	ed8d 7b00 	vstr	d7, [sp]
 800801a:	da03      	bge.n	8008024 <_dtoa_r+0x46c>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f340 8101 	ble.w	8008226 <_dtoa_r+0x66e>
 8008024:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008028:	4656      	mov	r6, sl
 800802a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fc13 	bl	800085c <__aeabi_ddiv>
 8008036:	f7f8 fd97 	bl	8000b68 <__aeabi_d2iz>
 800803a:	4680      	mov	r8, r0
 800803c:	f7f8 fa7a 	bl	8000534 <__aeabi_i2d>
 8008040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008044:	f7f8 fae0 	bl	8000608 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008054:	f7f8 f920 	bl	8000298 <__aeabi_dsub>
 8008058:	f806 4b01 	strb.w	r4, [r6], #1
 800805c:	9d07      	ldr	r5, [sp, #28]
 800805e:	eba6 040a 	sub.w	r4, r6, sl
 8008062:	42a5      	cmp	r5, r4
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	f040 8117 	bne.w	800829a <_dtoa_r+0x6e2>
 800806c:	f7f8 f916 	bl	800029c <__adddf3>
 8008070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	f7f8 fd56 	bl	8000b28 <__aeabi_dcmpgt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80f9 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd25 	bl	8000ad8 <__aeabi_dcmpeq>
 800808e:	b118      	cbz	r0, 8008098 <_dtoa_r+0x4e0>
 8008090:	f018 0f01 	tst.w	r8, #1
 8008094:	f040 80ee 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008098:	4649      	mov	r1, r9
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc90 	bl	80089c0 <_Bfree>
 80080a0:	2300      	movs	r3, #0
 80080a2:	7033      	strb	r3, [r6, #0]
 80080a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a6:	3701      	adds	r7, #1
 80080a8:	601f      	str	r7, [r3, #0]
 80080aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 831d 	beq.w	80086ec <_dtoa_r+0xb34>
 80080b2:	601e      	str	r6, [r3, #0]
 80080b4:	e31a      	b.n	80086ec <_dtoa_r+0xb34>
 80080b6:	07e2      	lsls	r2, r4, #31
 80080b8:	d505      	bpl.n	80080c6 <_dtoa_r+0x50e>
 80080ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080be:	f7f8 faa3 	bl	8000608 <__aeabi_dmul>
 80080c2:	3601      	adds	r6, #1
 80080c4:	2301      	movs	r3, #1
 80080c6:	1064      	asrs	r4, r4, #1
 80080c8:	3508      	adds	r5, #8
 80080ca:	e73f      	b.n	8007f4c <_dtoa_r+0x394>
 80080cc:	2602      	movs	r6, #2
 80080ce:	e742      	b.n	8007f56 <_dtoa_r+0x39e>
 80080d0:	9c07      	ldr	r4, [sp, #28]
 80080d2:	9704      	str	r7, [sp, #16]
 80080d4:	e761      	b.n	8007f9a <_dtoa_r+0x3e2>
 80080d6:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <_dtoa_r+0x5bc>)
 80080d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e2:	4454      	add	r4, sl
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d053      	beq.n	8008190 <_dtoa_r+0x5d8>
 80080e8:	4928      	ldr	r1, [pc, #160]	@ (800818c <_dtoa_r+0x5d4>)
 80080ea:	2000      	movs	r0, #0
 80080ec:	f7f8 fbb6 	bl	800085c <__aeabi_ddiv>
 80080f0:	4633      	mov	r3, r6
 80080f2:	462a      	mov	r2, r5
 80080f4:	f7f8 f8d0 	bl	8000298 <__aeabi_dsub>
 80080f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080fc:	4656      	mov	r6, sl
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fd31 	bl	8000b68 <__aeabi_d2iz>
 8008106:	4605      	mov	r5, r0
 8008108:	f7f8 fa14 	bl	8000534 <__aeabi_i2d>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008114:	f7f8 f8c0 	bl	8000298 <__aeabi_dsub>
 8008118:	3530      	adds	r5, #48	@ 0x30
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008122:	f806 5b01 	strb.w	r5, [r6], #1
 8008126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800812a:	f7f8 fcdf 	bl	8000aec <__aeabi_dcmplt>
 800812e:	2800      	cmp	r0, #0
 8008130:	d171      	bne.n	8008216 <_dtoa_r+0x65e>
 8008132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008136:	4911      	ldr	r1, [pc, #68]	@ (800817c <_dtoa_r+0x5c4>)
 8008138:	2000      	movs	r0, #0
 800813a:	f7f8 f8ad 	bl	8000298 <__aeabi_dsub>
 800813e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008142:	f7f8 fcd3 	bl	8000aec <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8095 	bne.w	8008276 <_dtoa_r+0x6be>
 800814c:	42a6      	cmp	r6, r4
 800814e:	f43f af50 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008156:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <_dtoa_r+0x5c8>)
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 fa55 	bl	8000608 <__aeabi_dmul>
 800815e:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <_dtoa_r+0x5c8>)
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008164:	2200      	movs	r2, #0
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fa4d 	bl	8000608 <__aeabi_dmul>
 800816e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008172:	e7c4      	b.n	80080fe <_dtoa_r+0x546>
 8008174:	0800a530 	.word	0x0800a530
 8008178:	0800a508 	.word	0x0800a508
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	40240000 	.word	0x40240000
 8008184:	401c0000 	.word	0x401c0000
 8008188:	40140000 	.word	0x40140000
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800819c:	9415      	str	r4, [sp, #84]	@ 0x54
 800819e:	4656      	mov	r6, sl
 80081a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a4:	f7f8 fce0 	bl	8000b68 <__aeabi_d2iz>
 80081a8:	4605      	mov	r5, r0
 80081aa:	f7f8 f9c3 	bl	8000534 <__aeabi_i2d>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b6:	f7f8 f86f 	bl	8000298 <__aeabi_dsub>
 80081ba:	3530      	adds	r5, #48	@ 0x30
 80081bc:	f806 5b01 	strb.w	r5, [r6], #1
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	d124      	bne.n	800821a <_dtoa_r+0x662>
 80081d0:	4bac      	ldr	r3, [pc, #688]	@ (8008484 <_dtoa_r+0x8cc>)
 80081d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081d6:	f7f8 f861 	bl	800029c <__adddf3>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	f7f8 fca1 	bl	8000b28 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d145      	bne.n	8008276 <_dtoa_r+0x6be>
 80081ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ee:	49a5      	ldr	r1, [pc, #660]	@ (8008484 <_dtoa_r+0x8cc>)
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7f8 f851 	bl	8000298 <__aeabi_dsub>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7f8 fc75 	bl	8000aec <__aeabi_dcmplt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f43f aef5 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008208:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800820a:	1e73      	subs	r3, r6, #1
 800820c:	9315      	str	r3, [sp, #84]	@ 0x54
 800820e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008212:	2b30      	cmp	r3, #48	@ 0x30
 8008214:	d0f8      	beq.n	8008208 <_dtoa_r+0x650>
 8008216:	9f04      	ldr	r7, [sp, #16]
 8008218:	e73e      	b.n	8008098 <_dtoa_r+0x4e0>
 800821a:	4b9b      	ldr	r3, [pc, #620]	@ (8008488 <_dtoa_r+0x8d0>)
 800821c:	f7f8 f9f4 	bl	8000608 <__aeabi_dmul>
 8008220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008224:	e7bc      	b.n	80081a0 <_dtoa_r+0x5e8>
 8008226:	d10c      	bne.n	8008242 <_dtoa_r+0x68a>
 8008228:	4b98      	ldr	r3, [pc, #608]	@ (800848c <_dtoa_r+0x8d4>)
 800822a:	2200      	movs	r2, #0
 800822c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008230:	f7f8 f9ea 	bl	8000608 <__aeabi_dmul>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f7f8 fc6c 	bl	8000b14 <__aeabi_dcmpge>
 800823c:	2800      	cmp	r0, #0
 800823e:	f000 8157 	beq.w	80084f0 <_dtoa_r+0x938>
 8008242:	2400      	movs	r4, #0
 8008244:	4625      	mov	r5, r4
 8008246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008248:	43db      	mvns	r3, r3
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	4656      	mov	r6, sl
 800824e:	2700      	movs	r7, #0
 8008250:	4621      	mov	r1, r4
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbb4 	bl	80089c0 <_Bfree>
 8008258:	2d00      	cmp	r5, #0
 800825a:	d0dc      	beq.n	8008216 <_dtoa_r+0x65e>
 800825c:	b12f      	cbz	r7, 800826a <_dtoa_r+0x6b2>
 800825e:	42af      	cmp	r7, r5
 8008260:	d003      	beq.n	800826a <_dtoa_r+0x6b2>
 8008262:	4639      	mov	r1, r7
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fbab 	bl	80089c0 <_Bfree>
 800826a:	4629      	mov	r1, r5
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fba7 	bl	80089c0 <_Bfree>
 8008272:	e7d0      	b.n	8008216 <_dtoa_r+0x65e>
 8008274:	9704      	str	r7, [sp, #16]
 8008276:	4633      	mov	r3, r6
 8008278:	461e      	mov	r6, r3
 800827a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827e:	2a39      	cmp	r2, #57	@ 0x39
 8008280:	d107      	bne.n	8008292 <_dtoa_r+0x6da>
 8008282:	459a      	cmp	sl, r3
 8008284:	d1f8      	bne.n	8008278 <_dtoa_r+0x6c0>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	3201      	adds	r2, #1
 800828a:	9204      	str	r2, [sp, #16]
 800828c:	2230      	movs	r2, #48	@ 0x30
 800828e:	f88a 2000 	strb.w	r2, [sl]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	3201      	adds	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e7bd      	b.n	8008216 <_dtoa_r+0x65e>
 800829a:	4b7b      	ldr	r3, [pc, #492]	@ (8008488 <_dtoa_r+0x8d0>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f9b3 	bl	8000608 <__aeabi_dmul>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f7f8 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f aebb 	beq.w	800802a <_dtoa_r+0x472>
 80082b4:	e6f0      	b.n	8008098 <_dtoa_r+0x4e0>
 80082b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	f000 80db 	beq.w	8008474 <_dtoa_r+0x8bc>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	2a01      	cmp	r2, #1
 80082c2:	f300 80bf 	bgt.w	8008444 <_dtoa_r+0x88c>
 80082c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082c8:	2a00      	cmp	r2, #0
 80082ca:	f000 80b7 	beq.w	800843c <_dtoa_r+0x884>
 80082ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d4:	4646      	mov	r6, r8
 80082d6:	9a08      	ldr	r2, [sp, #32]
 80082d8:	2101      	movs	r1, #1
 80082da:	441a      	add	r2, r3
 80082dc:	4658      	mov	r0, fp
 80082de:	4498      	add	r8, r3
 80082e0:	9208      	str	r2, [sp, #32]
 80082e2:	f000 fc21 	bl	8008b28 <__i2b>
 80082e6:	4605      	mov	r5, r0
 80082e8:	b15e      	cbz	r6, 8008302 <_dtoa_r+0x74a>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd08      	ble.n	8008302 <_dtoa_r+0x74a>
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	9a08      	ldr	r2, [sp, #32]
 80082f4:	bfa8      	it	ge
 80082f6:	4633      	movge	r3, r6
 80082f8:	eba8 0803 	sub.w	r8, r8, r3
 80082fc:	1af6      	subs	r6, r6, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	b1f3      	cbz	r3, 8008344 <_dtoa_r+0x78c>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80b7 	beq.w	800847c <_dtoa_r+0x8c4>
 800830e:	b18c      	cbz	r4, 8008334 <_dtoa_r+0x77c>
 8008310:	4629      	mov	r1, r5
 8008312:	4622      	mov	r2, r4
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fcc7 	bl	8008ca8 <__pow5mult>
 800831a:	464a      	mov	r2, r9
 800831c:	4601      	mov	r1, r0
 800831e:	4605      	mov	r5, r0
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fc17 	bl	8008b54 <__multiply>
 8008326:	4649      	mov	r1, r9
 8008328:	9004      	str	r0, [sp, #16]
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fb48 	bl	80089c0 <_Bfree>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	4699      	mov	r9, r3
 8008334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008336:	1b1a      	subs	r2, r3, r4
 8008338:	d004      	beq.n	8008344 <_dtoa_r+0x78c>
 800833a:	4649      	mov	r1, r9
 800833c:	4658      	mov	r0, fp
 800833e:	f000 fcb3 	bl	8008ca8 <__pow5mult>
 8008342:	4681      	mov	r9, r0
 8008344:	2101      	movs	r1, #1
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fbee 	bl	8008b28 <__i2b>
 800834c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834e:	4604      	mov	r4, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 81cf 	beq.w	80086f4 <_dtoa_r+0xb3c>
 8008356:	461a      	mov	r2, r3
 8008358:	4601      	mov	r1, r0
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fca4 	bl	8008ca8 <__pow5mult>
 8008360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008362:	2b01      	cmp	r3, #1
 8008364:	4604      	mov	r4, r0
 8008366:	f300 8095 	bgt.w	8008494 <_dtoa_r+0x8dc>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8087 	bne.w	8008480 <_dtoa_r+0x8c8>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8089 	bne.w	8008490 <_dtoa_r+0x8d8>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	0d1b      	lsrs	r3, r3, #20
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	b12b      	cbz	r3, 8008396 <_dtoa_r+0x7de>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	3301      	adds	r3, #1
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	f108 0801 	add.w	r8, r8, #1
 8008394:	2301      	movs	r3, #1
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 81b0 	beq.w	8008700 <_dtoa_r+0xb48>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a6:	6918      	ldr	r0, [r3, #16]
 80083a8:	f000 fb72 	bl	8008a90 <__hi0bits>
 80083ac:	f1c0 0020 	rsb	r0, r0, #32
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	4418      	add	r0, r3
 80083b4:	f010 001f 	ands.w	r0, r0, #31
 80083b8:	d077      	beq.n	80084aa <_dtoa_r+0x8f2>
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	2b04      	cmp	r3, #4
 80083c0:	dd6b      	ble.n	800849a <_dtoa_r+0x8e2>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	f1c0 001c 	rsb	r0, r0, #28
 80083c8:	4403      	add	r3, r0
 80083ca:	4480      	add	r8, r0
 80083cc:	4406      	add	r6, r0
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4649      	mov	r1, r9
 80083d8:	4642      	mov	r2, r8
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 fcbe 	bl	8008d5c <__lshift>
 80083e0:	4681      	mov	r9, r0
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd05      	ble.n	80083f4 <_dtoa_r+0x83c>
 80083e8:	4621      	mov	r1, r4
 80083ea:	461a      	mov	r2, r3
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 fcb5 	bl	8008d5c <__lshift>
 80083f2:	4604      	mov	r4, r0
 80083f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d059      	beq.n	80084ae <_dtoa_r+0x8f6>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fd19 	bl	8008e34 <__mcmp>
 8008402:	2800      	cmp	r0, #0
 8008404:	da53      	bge.n	80084ae <_dtoa_r+0x8f6>
 8008406:	1e7b      	subs	r3, r7, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	4649      	mov	r1, r9
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4658      	mov	r0, fp
 8008412:	f000 faf7 	bl	8008a04 <__multadd>
 8008416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008418:	4681      	mov	r9, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8172 	beq.w	8008704 <_dtoa_r+0xb4c>
 8008420:	2300      	movs	r3, #0
 8008422:	4629      	mov	r1, r5
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 faec 	bl	8008a04 <__multadd>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	4605      	mov	r5, r0
 8008432:	dc67      	bgt.n	8008504 <_dtoa_r+0x94c>
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	2b02      	cmp	r3, #2
 8008438:	dc41      	bgt.n	80084be <_dtoa_r+0x906>
 800843a:	e063      	b.n	8008504 <_dtoa_r+0x94c>
 800843c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800843e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008442:	e746      	b.n	80082d2 <_dtoa_r+0x71a>
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1e5c      	subs	r4, r3, #1
 8008448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844a:	42a3      	cmp	r3, r4
 800844c:	bfbf      	itttt	lt
 800844e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008450:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008452:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008454:	1ae3      	sublt	r3, r4, r3
 8008456:	bfb4      	ite	lt
 8008458:	18d2      	addlt	r2, r2, r3
 800845a:	1b1c      	subge	r4, r3, r4
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	bfbc      	itt	lt
 8008460:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008462:	2400      	movlt	r4, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb5      	itete	lt
 8008468:	eba8 0603 	sublt.w	r6, r8, r3
 800846c:	9b07      	ldrge	r3, [sp, #28]
 800846e:	2300      	movlt	r3, #0
 8008470:	4646      	movge	r6, r8
 8008472:	e730      	b.n	80082d6 <_dtoa_r+0x71e>
 8008474:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008476:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008478:	4646      	mov	r6, r8
 800847a:	e735      	b.n	80082e8 <_dtoa_r+0x730>
 800847c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847e:	e75c      	b.n	800833a <_dtoa_r+0x782>
 8008480:	2300      	movs	r3, #0
 8008482:	e788      	b.n	8008396 <_dtoa_r+0x7de>
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	40240000 	.word	0x40240000
 800848c:	40140000 	.word	0x40140000
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	e780      	b.n	8008396 <_dtoa_r+0x7de>
 8008494:	2300      	movs	r3, #0
 8008496:	930a      	str	r3, [sp, #40]	@ 0x28
 8008498:	e782      	b.n	80083a0 <_dtoa_r+0x7e8>
 800849a:	d099      	beq.n	80083d0 <_dtoa_r+0x818>
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	331c      	adds	r3, #28
 80084a0:	441a      	add	r2, r3
 80084a2:	4498      	add	r8, r3
 80084a4:	441e      	add	r6, r3
 80084a6:	9208      	str	r2, [sp, #32]
 80084a8:	e792      	b.n	80083d0 <_dtoa_r+0x818>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e7f6      	b.n	800849c <_dtoa_r+0x8e4>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	9704      	str	r7, [sp, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc20      	bgt.n	80084f8 <_dtoa_r+0x940>
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	dd1e      	ble.n	80084fc <_dtoa_r+0x944>
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f47f aec0 	bne.w	8008246 <_dtoa_r+0x68e>
 80084c6:	4621      	mov	r1, r4
 80084c8:	2205      	movs	r2, #5
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fa9a 	bl	8008a04 <__multadd>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fcad 	bl	8008e34 <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f77f aeb3 	ble.w	8008246 <_dtoa_r+0x68e>
 80084e0:	4656      	mov	r6, sl
 80084e2:	2331      	movs	r3, #49	@ 0x31
 80084e4:	f806 3b01 	strb.w	r3, [r6], #1
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	e6ae      	b.n	800824e <_dtoa_r+0x696>
 80084f0:	9c07      	ldr	r4, [sp, #28]
 80084f2:	9704      	str	r7, [sp, #16]
 80084f4:	4625      	mov	r5, r4
 80084f6:	e7f3      	b.n	80084e0 <_dtoa_r+0x928>
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8104 	beq.w	800870c <_dtoa_r+0xb54>
 8008504:	2e00      	cmp	r6, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x95c>
 8008508:	4629      	mov	r1, r5
 800850a:	4632      	mov	r2, r6
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fc25 	bl	8008d5c <__lshift>
 8008512:	4605      	mov	r5, r0
 8008514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05a      	beq.n	80085d0 <_dtoa_r+0xa18>
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fa0f 	bl	8008940 <_Balloc>
 8008522:	4606      	mov	r6, r0
 8008524:	b928      	cbnz	r0, 8008532 <_dtoa_r+0x97a>
 8008526:	4b84      	ldr	r3, [pc, #528]	@ (8008738 <_dtoa_r+0xb80>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800852e:	f7ff bb5a 	b.w	8007be6 <_dtoa_r+0x2e>
 8008532:	692a      	ldr	r2, [r5, #16]
 8008534:	3202      	adds	r2, #2
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	f105 010c 	add.w	r1, r5, #12
 800853c:	300c      	adds	r0, #12
 800853e:	f000 ffaf 	bl	80094a0 <memcpy>
 8008542:	2201      	movs	r2, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fc08 	bl	8008d5c <__lshift>
 800854c:	f10a 0301 	add.w	r3, sl, #1
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4453      	add	r3, sl
 8008556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	462f      	mov	r7, r5
 8008560:	930a      	str	r3, [sp, #40]	@ 0x28
 8008562:	4605      	mov	r5, r0
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	4621      	mov	r1, r4
 8008568:	3b01      	subs	r3, #1
 800856a:	4648      	mov	r0, r9
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f7ff fa9a 	bl	8007aa6 <quorem>
 8008572:	4639      	mov	r1, r7
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fc5a 	bl	8008e34 <__mcmp>
 8008580:	462a      	mov	r2, r5
 8008582:	9008      	str	r0, [sp, #32]
 8008584:	4621      	mov	r1, r4
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fc70 	bl	8008e6c <__mdiff>
 800858c:	68c2      	ldr	r2, [r0, #12]
 800858e:	4606      	mov	r6, r0
 8008590:	bb02      	cbnz	r2, 80085d4 <_dtoa_r+0xa1c>
 8008592:	4601      	mov	r1, r0
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fc4d 	bl	8008e34 <__mcmp>
 800859a:	4602      	mov	r2, r0
 800859c:	4631      	mov	r1, r6
 800859e:	4658      	mov	r0, fp
 80085a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a2:	f000 fa0d 	bl	80089c0 <_Bfree>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085aa:	9e07      	ldr	r6, [sp, #28]
 80085ac:	ea43 0102 	orr.w	r1, r3, r2
 80085b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b2:	4319      	orrs	r1, r3
 80085b4:	d110      	bne.n	80085d8 <_dtoa_r+0xa20>
 80085b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085ba:	d029      	beq.n	8008610 <_dtoa_r+0xa58>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd02      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	f883 8000 	strb.w	r8, [r3]
 80085ce:	e63f      	b.n	8008250 <_dtoa_r+0x698>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e7bb      	b.n	800854c <_dtoa_r+0x994>
 80085d4:	2201      	movs	r2, #1
 80085d6:	e7e1      	b.n	800859c <_dtoa_r+0x9e4>
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db04      	blt.n	80085e8 <_dtoa_r+0xa30>
 80085de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085e0:	430b      	orrs	r3, r1
 80085e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085e4:	430b      	orrs	r3, r1
 80085e6:	d120      	bne.n	800862a <_dtoa_r+0xa72>
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	dded      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085ec:	4649      	mov	r1, r9
 80085ee:	2201      	movs	r2, #1
 80085f0:	4658      	mov	r0, fp
 80085f2:	f000 fbb3 	bl	8008d5c <__lshift>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4681      	mov	r9, r0
 80085fa:	f000 fc1b 	bl	8008e34 <__mcmp>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dc03      	bgt.n	800860a <_dtoa_r+0xa52>
 8008602:	d1e1      	bne.n	80085c8 <_dtoa_r+0xa10>
 8008604:	f018 0f01 	tst.w	r8, #1
 8008608:	d0de      	beq.n	80085c8 <_dtoa_r+0xa10>
 800860a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800860e:	d1d8      	bne.n	80085c2 <_dtoa_r+0xa0a>
 8008610:	9a00      	ldr	r2, [sp, #0]
 8008612:	2339      	movs	r3, #57	@ 0x39
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	4633      	mov	r3, r6
 8008618:	461e      	mov	r6, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008620:	2a39      	cmp	r2, #57	@ 0x39
 8008622:	d052      	beq.n	80086ca <_dtoa_r+0xb12>
 8008624:	3201      	adds	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e612      	b.n	8008250 <_dtoa_r+0x698>
 800862a:	2a00      	cmp	r2, #0
 800862c:	dd07      	ble.n	800863e <_dtoa_r+0xa86>
 800862e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008632:	d0ed      	beq.n	8008610 <_dtoa_r+0xa58>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	f108 0301 	add.w	r3, r8, #1
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	e608      	b.n	8008250 <_dtoa_r+0x698>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a07      	ldr	r2, [sp, #28]
 8008642:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008648:	4293      	cmp	r3, r2
 800864a:	d028      	beq.n	800869e <_dtoa_r+0xae6>
 800864c:	4649      	mov	r1, r9
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4658      	mov	r0, fp
 8008654:	f000 f9d6 	bl	8008a04 <__multadd>
 8008658:	42af      	cmp	r7, r5
 800865a:	4681      	mov	r9, r0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 020a 	mov.w	r2, #10
 8008664:	4639      	mov	r1, r7
 8008666:	4658      	mov	r0, fp
 8008668:	d107      	bne.n	800867a <_dtoa_r+0xac2>
 800866a:	f000 f9cb 	bl	8008a04 <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	4605      	mov	r5, r0
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	e774      	b.n	8008564 <_dtoa_r+0x9ac>
 800867a:	f000 f9c3 	bl	8008a04 <__multadd>
 800867e:	4629      	mov	r1, r5
 8008680:	4607      	mov	r7, r0
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4658      	mov	r0, fp
 8008688:	f000 f9bc 	bl	8008a04 <__multadd>
 800868c:	4605      	mov	r5, r0
 800868e:	e7f0      	b.n	8008672 <_dtoa_r+0xaba>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfcc      	ite	gt
 8008696:	461e      	movgt	r6, r3
 8008698:	2601      	movle	r6, #1
 800869a:	4456      	add	r6, sl
 800869c:	2700      	movs	r7, #0
 800869e:	4649      	mov	r1, r9
 80086a0:	2201      	movs	r2, #1
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fb5a 	bl	8008d5c <__lshift>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4681      	mov	r9, r0
 80086ac:	f000 fbc2 	bl	8008e34 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dcb0      	bgt.n	8008616 <_dtoa_r+0xa5e>
 80086b4:	d102      	bne.n	80086bc <_dtoa_r+0xb04>
 80086b6:	f018 0f01 	tst.w	r8, #1
 80086ba:	d1ac      	bne.n	8008616 <_dtoa_r+0xa5e>
 80086bc:	4633      	mov	r3, r6
 80086be:	461e      	mov	r6, r3
 80086c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c4:	2a30      	cmp	r2, #48	@ 0x30
 80086c6:	d0fa      	beq.n	80086be <_dtoa_r+0xb06>
 80086c8:	e5c2      	b.n	8008250 <_dtoa_r+0x698>
 80086ca:	459a      	cmp	sl, r3
 80086cc:	d1a4      	bne.n	8008618 <_dtoa_r+0xa60>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	2331      	movs	r3, #49	@ 0x31
 80086d6:	f88a 3000 	strb.w	r3, [sl]
 80086da:	e5b9      	b.n	8008250 <_dtoa_r+0x698>
 80086dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800873c <_dtoa_r+0xb84>
 80086e2:	b11b      	cbz	r3, 80086ec <_dtoa_r+0xb34>
 80086e4:	f10a 0308 	add.w	r3, sl, #8
 80086e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4650      	mov	r0, sl
 80086ee:	b019      	add	sp, #100	@ 0x64
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	f77f ae37 	ble.w	800836a <_dtoa_r+0x7b2>
 80086fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008700:	2001      	movs	r0, #1
 8008702:	e655      	b.n	80083b0 <_dtoa_r+0x7f8>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f77f aed6 	ble.w	80084b8 <_dtoa_r+0x900>
 800870c:	4656      	mov	r6, sl
 800870e:	4621      	mov	r1, r4
 8008710:	4648      	mov	r0, r9
 8008712:	f7ff f9c8 	bl	8007aa6 <quorem>
 8008716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800871a:	f806 8b01 	strb.w	r8, [r6], #1
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	eba6 020a 	sub.w	r2, r6, sl
 8008724:	4293      	cmp	r3, r2
 8008726:	ddb3      	ble.n	8008690 <_dtoa_r+0xad8>
 8008728:	4649      	mov	r1, r9
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4658      	mov	r0, fp
 8008730:	f000 f968 	bl	8008a04 <__multadd>
 8008734:	4681      	mov	r9, r0
 8008736:	e7ea      	b.n	800870e <_dtoa_r+0xb56>
 8008738:	0800a48c 	.word	0x0800a48c
 800873c:	0800a410 	.word	0x0800a410

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d041      	beq.n	80087cc <_free_r+0x8c>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 f8e8 	bl	8008928 <__malloc_lock>
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <_free_r+0x90>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	b933      	cbnz	r3, 800876c <_free_r+0x2c>
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6014      	str	r4, [r2, #0]
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008768:	f000 b8e4 	b.w	8008934 <__malloc_unlock>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d908      	bls.n	8008782 <_free_r+0x42>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428b      	cmp	r3, r1
 8008776:	bf01      	itttt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	1809      	addeq	r1, r1, r0
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	e7ed      	b.n	800875e <_free_r+0x1e>
 8008782:	461a      	mov	r2, r3
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b10b      	cbz	r3, 800878c <_free_r+0x4c>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d9fa      	bls.n	8008782 <_free_r+0x42>
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	1850      	adds	r0, r2, r1
 8008790:	42a0      	cmp	r0, r4
 8008792:	d10b      	bne.n	80087ac <_free_r+0x6c>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	4401      	add	r1, r0
 8008798:	1850      	adds	r0, r2, r1
 800879a:	4283      	cmp	r3, r0
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	d1e0      	bne.n	8008762 <_free_r+0x22>
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6053      	str	r3, [r2, #4]
 80087a6:	4408      	add	r0, r1
 80087a8:	6010      	str	r0, [r2, #0]
 80087aa:	e7da      	b.n	8008762 <_free_r+0x22>
 80087ac:	d902      	bls.n	80087b4 <_free_r+0x74>
 80087ae:	230c      	movs	r3, #12
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	e7d6      	b.n	8008762 <_free_r+0x22>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	1821      	adds	r1, r4, r0
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf04      	itt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	6063      	str	r3, [r4, #4]
 80087c2:	bf04      	itt	eq
 80087c4:	1809      	addeq	r1, r1, r0
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	6054      	str	r4, [r2, #4]
 80087ca:	e7ca      	b.n	8008762 <_free_r+0x22>
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	2000043c 	.word	0x2000043c

080087d4 <malloc>:
 80087d4:	4b02      	ldr	r3, [pc, #8]	@ (80087e0 <malloc+0xc>)
 80087d6:	4601      	mov	r1, r0
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f000 b825 	b.w	8008828 <_malloc_r>
 80087de:	bf00      	nop
 80087e0:	20000018 	.word	0x20000018

080087e4 <sbrk_aligned>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008824 <sbrk_aligned+0x40>)
 80087e8:	460c      	mov	r4, r1
 80087ea:	6831      	ldr	r1, [r6, #0]
 80087ec:	4605      	mov	r5, r0
 80087ee:	b911      	cbnz	r1, 80087f6 <sbrk_aligned+0x12>
 80087f0:	f000 fe46 	bl	8009480 <_sbrk_r>
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 fe41 	bl	8009480 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d103      	bne.n	800880a <sbrk_aligned+0x26>
 8008802:	f04f 34ff 	mov.w	r4, #4294967295
 8008806:	4620      	mov	r0, r4
 8008808:	bd70      	pop	{r4, r5, r6, pc}
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0f8      	beq.n	8008806 <sbrk_aligned+0x22>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f000 fe32 	bl	8009480 <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1f2      	bne.n	8008806 <sbrk_aligned+0x22>
 8008820:	e7ef      	b.n	8008802 <sbrk_aligned+0x1e>
 8008822:	bf00      	nop
 8008824:	20000438 	.word	0x20000438

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	f025 0503 	bic.w	r5, r5, #3
 8008832:	3508      	adds	r5, #8
 8008834:	2d0c      	cmp	r5, #12
 8008836:	bf38      	it	cc
 8008838:	250c      	movcc	r5, #12
 800883a:	2d00      	cmp	r5, #0
 800883c:	4606      	mov	r6, r0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d904      	bls.n	800884e <_malloc_r+0x26>
 8008844:	230c      	movs	r3, #12
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008924 <_malloc_r+0xfc>
 8008852:	f000 f869 	bl	8008928 <__malloc_lock>
 8008856:	f8d8 3000 	ldr.w	r3, [r8]
 800885a:	461c      	mov	r4, r3
 800885c:	bb44      	cbnz	r4, 80088b0 <_malloc_r+0x88>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff ffbf 	bl	80087e4 <sbrk_aligned>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	4604      	mov	r4, r0
 800886a:	d158      	bne.n	800891e <_malloc_r+0xf6>
 800886c:	f8d8 4000 	ldr.w	r4, [r8]
 8008870:	4627      	mov	r7, r4
 8008872:	2f00      	cmp	r7, #0
 8008874:	d143      	bne.n	80088fe <_malloc_r+0xd6>
 8008876:	2c00      	cmp	r4, #0
 8008878:	d04b      	beq.n	8008912 <_malloc_r+0xea>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	eb04 0903 	add.w	r9, r4, r3
 8008884:	f000 fdfc 	bl	8009480 <_sbrk_r>
 8008888:	4581      	cmp	r9, r0
 800888a:	d142      	bne.n	8008912 <_malloc_r+0xea>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	1a6d      	subs	r5, r5, r1
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ffa6 	bl	80087e4 <sbrk_aligned>
 8008898:	3001      	adds	r0, #1
 800889a:	d03a      	beq.n	8008912 <_malloc_r+0xea>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	442b      	add	r3, r5
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	bb62      	cbnz	r2, 8008904 <_malloc_r+0xdc>
 80088aa:	f8c8 7000 	str.w	r7, [r8]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xa8>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d420      	bmi.n	80088f8 <_malloc_r+0xd0>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xc2>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f82f 	bl	8008934 <__malloc_unlock>
 80088d6:	f104 000b 	add.w	r0, r4, #11
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	f020 0007 	bic.w	r0, r0, #7
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	bf1c      	itt	ne
 80088e4:	1a1b      	subne	r3, r3, r0
 80088e6:	50a3      	strne	r3, [r4, r2]
 80088e8:	e7af      	b.n	800884a <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	f8c8 2000 	streq.w	r2, [r8]
 80088f4:	605a      	strne	r2, [r3, #4]
 80088f6:	e7eb      	b.n	80088d0 <_malloc_r+0xa8>
 80088f8:	4623      	mov	r3, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7ae      	b.n	800885c <_malloc_r+0x34>
 80088fe:	463c      	mov	r4, r7
 8008900:	687f      	ldr	r7, [r7, #4]
 8008902:	e7b6      	b.n	8008872 <_malloc_r+0x4a>
 8008904:	461a      	mov	r2, r3
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	d1fb      	bne.n	8008904 <_malloc_r+0xdc>
 800890c:	2300      	movs	r3, #0
 800890e:	6053      	str	r3, [r2, #4]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa8>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f80c 	bl	8008934 <__malloc_unlock>
 800891c:	e794      	b.n	8008848 <_malloc_r+0x20>
 800891e:	6005      	str	r5, [r0, #0]
 8008920:	e7d6      	b.n	80088d0 <_malloc_r+0xa8>
 8008922:	bf00      	nop
 8008924:	2000043c 	.word	0x2000043c

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__malloc_lock+0x8>)
 800892a:	f7ff b8ba 	b.w	8007aa2 <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	20000434 	.word	0x20000434

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <__malloc_unlock+0x8>)
 8008936:	f7ff b8b5 	b.w	8007aa4 <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	20000434 	.word	0x20000434

08008940 <_Balloc>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	69c6      	ldr	r6, [r0, #28]
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	b976      	cbnz	r6, 8008968 <_Balloc+0x28>
 800894a:	2010      	movs	r0, #16
 800894c:	f7ff ff42 	bl	80087d4 <malloc>
 8008950:	4602      	mov	r2, r0
 8008952:	61e0      	str	r0, [r4, #28]
 8008954:	b920      	cbnz	r0, 8008960 <_Balloc+0x20>
 8008956:	4b18      	ldr	r3, [pc, #96]	@ (80089b8 <_Balloc+0x78>)
 8008958:	4818      	ldr	r0, [pc, #96]	@ (80089bc <_Balloc+0x7c>)
 800895a:	216b      	movs	r1, #107	@ 0x6b
 800895c:	f000 fdae 	bl	80094bc <__assert_func>
 8008960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008964:	6006      	str	r6, [r0, #0]
 8008966:	60c6      	str	r6, [r0, #12]
 8008968:	69e6      	ldr	r6, [r4, #28]
 800896a:	68f3      	ldr	r3, [r6, #12]
 800896c:	b183      	cbz	r3, 8008990 <_Balloc+0x50>
 800896e:	69e3      	ldr	r3, [r4, #28]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008976:	b9b8      	cbnz	r0, 80089a8 <_Balloc+0x68>
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f605 	lsl.w	r6, r1, r5
 800897e:	1d72      	adds	r2, r6, #5
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fdb8 	bl	80094f8 <_calloc_r>
 8008988:	b160      	cbz	r0, 80089a4 <_Balloc+0x64>
 800898a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898e:	e00e      	b.n	80089ae <_Balloc+0x6e>
 8008990:	2221      	movs	r2, #33	@ 0x21
 8008992:	2104      	movs	r1, #4
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fdaf 	bl	80094f8 <_calloc_r>
 800899a:	69e3      	ldr	r3, [r4, #28]
 800899c:	60f0      	str	r0, [r6, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e4      	bne.n	800896e <_Balloc+0x2e>
 80089a4:	2000      	movs	r0, #0
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	6802      	ldr	r2, [r0, #0]
 80089aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b4:	e7f7      	b.n	80089a6 <_Balloc+0x66>
 80089b6:	bf00      	nop
 80089b8:	0800a41d 	.word	0x0800a41d
 80089bc:	0800a49d 	.word	0x0800a49d

080089c0 <_Bfree>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	69c6      	ldr	r6, [r0, #28]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Bfree+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff02 	bl	80087d4 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e8      	str	r0, [r5, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_Bfree+0x20>
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <_Bfree+0x3c>)
 80089d8:	4809      	ldr	r0, [pc, #36]	@ (8008a00 <_Bfree+0x40>)
 80089da:	218f      	movs	r1, #143	@ 0x8f
 80089dc:	f000 fd6e 	bl	80094bc <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	b13c      	cbz	r4, 80089fa <_Bfree+0x3a>
 80089ea:	69eb      	ldr	r3, [r5, #28]
 80089ec:	6862      	ldr	r2, [r4, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	6021      	str	r1, [r4, #0]
 80089f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	0800a41d 	.word	0x0800a41d
 8008a00:	0800a49d 	.word	0x0800a49d

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	690d      	ldr	r5, [r1, #16]
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	461e      	mov	r6, r3
 8008a10:	f101 0c14 	add.w	ip, r1, #20
 8008a14:	2000      	movs	r0, #0
 8008a16:	f8dc 3000 	ldr.w	r3, [ip]
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a20:	0c1e      	lsrs	r6, r3, #16
 8008a22:	0c0b      	lsrs	r3, r1, #16
 8008a24:	fb02 3306 	mla	r3, r2, r6, r3
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a30:	4285      	cmp	r5, r0
 8008a32:	f84c 1b04 	str.w	r1, [ip], #4
 8008a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a3a:	dcec      	bgt.n	8008a16 <__multadd+0x12>
 8008a3c:	b30e      	cbz	r6, 8008a82 <__multadd+0x7e>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc19      	bgt.n	8008a78 <__multadd+0x74>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	4638      	mov	r0, r7
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f7ff ff79 	bl	8008940 <_Balloc>
 8008a4e:	4680      	mov	r8, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <__multadd+0x5a>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <__multadd+0x84>)
 8008a56:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <__multadd+0x88>)
 8008a58:	21ba      	movs	r1, #186	@ 0xba
 8008a5a:	f000 fd2f 	bl	80094bc <__assert_func>
 8008a5e:	6922      	ldr	r2, [r4, #16]
 8008a60:	3202      	adds	r2, #2
 8008a62:	f104 010c 	add.w	r1, r4, #12
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	300c      	adds	r0, #12
 8008a6a:	f000 fd19 	bl	80094a0 <memcpy>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff ffa5 	bl	80089c0 <_Bfree>
 8008a76:	4644      	mov	r4, r8
 8008a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	615e      	str	r6, [r3, #20]
 8008a80:	6125      	str	r5, [r4, #16]
 8008a82:	4620      	mov	r0, r4
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	0800a48c 	.word	0x0800a48c
 8008a8c:	0800a49d 	.word	0x0800a49d

08008a90 <__hi0bits>:
 8008a90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a94:	4603      	mov	r3, r0
 8008a96:	bf36      	itet	cc
 8008a98:	0403      	lslcc	r3, r0, #16
 8008a9a:	2000      	movcs	r0, #0
 8008a9c:	2010      	movcc	r0, #16
 8008a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa2:	bf3c      	itt	cc
 8008aa4:	021b      	lslcc	r3, r3, #8
 8008aa6:	3008      	addcc	r0, #8
 8008aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aac:	bf3c      	itt	cc
 8008aae:	011b      	lslcc	r3, r3, #4
 8008ab0:	3004      	addcc	r0, #4
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab6:	bf3c      	itt	cc
 8008ab8:	009b      	lslcc	r3, r3, #2
 8008aba:	3002      	addcc	r0, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db05      	blt.n	8008acc <__hi0bits+0x3c>
 8008ac0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ac4:	f100 0001 	add.w	r0, r0, #1
 8008ac8:	bf08      	it	eq
 8008aca:	2020      	moveq	r0, #32
 8008acc:	4770      	bx	lr

08008ace <__lo0bits>:
 8008ace:	6803      	ldr	r3, [r0, #0]
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	f013 0007 	ands.w	r0, r3, #7
 8008ad6:	d00b      	beq.n	8008af0 <__lo0bits+0x22>
 8008ad8:	07d9      	lsls	r1, r3, #31
 8008ada:	d421      	bmi.n	8008b20 <__lo0bits+0x52>
 8008adc:	0798      	lsls	r0, r3, #30
 8008ade:	bf49      	itett	mi
 8008ae0:	085b      	lsrmi	r3, r3, #1
 8008ae2:	089b      	lsrpl	r3, r3, #2
 8008ae4:	2001      	movmi	r0, #1
 8008ae6:	6013      	strmi	r3, [r2, #0]
 8008ae8:	bf5c      	itt	pl
 8008aea:	6013      	strpl	r3, [r2, #0]
 8008aec:	2002      	movpl	r0, #2
 8008aee:	4770      	bx	lr
 8008af0:	b299      	uxth	r1, r3
 8008af2:	b909      	cbnz	r1, 8008af8 <__lo0bits+0x2a>
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	2010      	movs	r0, #16
 8008af8:	b2d9      	uxtb	r1, r3
 8008afa:	b909      	cbnz	r1, 8008b00 <__lo0bits+0x32>
 8008afc:	3008      	adds	r0, #8
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	bf04      	itt	eq
 8008b04:	091b      	lsreq	r3, r3, #4
 8008b06:	3004      	addeq	r0, #4
 8008b08:	0799      	lsls	r1, r3, #30
 8008b0a:	bf04      	itt	eq
 8008b0c:	089b      	lsreq	r3, r3, #2
 8008b0e:	3002      	addeq	r0, #2
 8008b10:	07d9      	lsls	r1, r3, #31
 8008b12:	d403      	bmi.n	8008b1c <__lo0bits+0x4e>
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	d003      	beq.n	8008b24 <__lo0bits+0x56>
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	4770      	bx	lr
 8008b20:	2000      	movs	r0, #0
 8008b22:	4770      	bx	lr
 8008b24:	2020      	movs	r0, #32
 8008b26:	4770      	bx	lr

08008b28 <__i2b>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f7ff ff07 	bl	8008940 <_Balloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	b928      	cbnz	r0, 8008b42 <__i2b+0x1a>
 8008b36:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <__i2b+0x24>)
 8008b38:	4805      	ldr	r0, [pc, #20]	@ (8008b50 <__i2b+0x28>)
 8008b3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b3e:	f000 fcbd 	bl	80094bc <__assert_func>
 8008b42:	2301      	movs	r3, #1
 8008b44:	6144      	str	r4, [r0, #20]
 8008b46:	6103      	str	r3, [r0, #16]
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800a48c 	.word	0x0800a48c
 8008b50:	0800a49d 	.word	0x0800a49d

08008b54 <__multiply>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	4614      	mov	r4, r2
 8008b5a:	690a      	ldr	r2, [r1, #16]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bfa8      	it	ge
 8008b62:	4623      	movge	r3, r4
 8008b64:	460f      	mov	r7, r1
 8008b66:	bfa4      	itt	ge
 8008b68:	460c      	movge	r4, r1
 8008b6a:	461f      	movge	r7, r3
 8008b6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	6861      	ldr	r1, [r4, #4]
 8008b78:	eb0a 0609 	add.w	r6, sl, r9
 8008b7c:	42b3      	cmp	r3, r6
 8008b7e:	b085      	sub	sp, #20
 8008b80:	bfb8      	it	lt
 8008b82:	3101      	addlt	r1, #1
 8008b84:	f7ff fedc 	bl	8008940 <_Balloc>
 8008b88:	b930      	cbnz	r0, 8008b98 <__multiply+0x44>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b44      	ldr	r3, [pc, #272]	@ (8008ca0 <__multiply+0x14c>)
 8008b8e:	4845      	ldr	r0, [pc, #276]	@ (8008ca4 <__multiply+0x150>)
 8008b90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b94:	f000 fc92 	bl	80094bc <__assert_func>
 8008b98:	f100 0514 	add.w	r5, r0, #20
 8008b9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	d321      	bcc.n	8008bec <__multiply+0x98>
 8008ba8:	f107 0114 	add.w	r1, r7, #20
 8008bac:	f104 0214 	add.w	r2, r4, #20
 8008bb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008bb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008bb8:	9302      	str	r3, [sp, #8]
 8008bba:	1b13      	subs	r3, r2, r4
 8008bbc:	3b15      	subs	r3, #21
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	f104 0715 	add.w	r7, r4, #21
 8008bc8:	42ba      	cmp	r2, r7
 8008bca:	bf38      	it	cc
 8008bcc:	2304      	movcc	r3, #4
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	9103      	str	r1, [sp, #12]
 8008bd4:	428b      	cmp	r3, r1
 8008bd6:	d80c      	bhi.n	8008bf2 <__multiply+0x9e>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	dd03      	ble.n	8008be4 <__multiply+0x90>
 8008bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05b      	beq.n	8008c9c <__multiply+0x148>
 8008be4:	6106      	str	r6, [r0, #16]
 8008be6:	b005      	add	sp, #20
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	f843 2b04 	str.w	r2, [r3], #4
 8008bf0:	e7d8      	b.n	8008ba4 <__multiply+0x50>
 8008bf2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bf6:	f1ba 0f00 	cmp.w	sl, #0
 8008bfa:	d024      	beq.n	8008c46 <__multiply+0xf2>
 8008bfc:	f104 0e14 	add.w	lr, r4, #20
 8008c00:	46a9      	mov	r9, r5
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c0e:	fa1f fb87 	uxth.w	fp, r7
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008c1c:	f8d9 7000 	ldr.w	r7, [r9]
 8008c20:	4463      	add	r3, ip
 8008c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c26:	fb0a c70b 	mla	r7, sl, fp, ip
 8008c2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c34:	4572      	cmp	r2, lr
 8008c36:	f849 3b04 	str.w	r3, [r9], #4
 8008c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c3e:	d8e2      	bhi.n	8008c06 <__multiply+0xb2>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	f845 c003 	str.w	ip, [r5, r3]
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c4c:	3104      	adds	r1, #4
 8008c4e:	f1b9 0f00 	cmp.w	r9, #0
 8008c52:	d021      	beq.n	8008c98 <__multiply+0x144>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	f104 0c14 	add.w	ip, r4, #20
 8008c5a:	46ae      	mov	lr, r5
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	f8bc b000 	ldrh.w	fp, [ip]
 8008c64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c68:	fb09 770b 	mla	r7, r9, fp, r7
 8008c6c:	4457      	add	r7, sl
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c74:	f84e 3b04 	str.w	r3, [lr], #4
 8008c78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c80:	f8be 3000 	ldrh.w	r3, [lr]
 8008c84:	fb09 330a 	mla	r3, r9, sl, r3
 8008c88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c8c:	4562      	cmp	r2, ip
 8008c8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c92:	d8e5      	bhi.n	8008c60 <__multiply+0x10c>
 8008c94:	9f01      	ldr	r7, [sp, #4]
 8008c96:	51eb      	str	r3, [r5, r7]
 8008c98:	3504      	adds	r5, #4
 8008c9a:	e799      	b.n	8008bd0 <__multiply+0x7c>
 8008c9c:	3e01      	subs	r6, #1
 8008c9e:	e79b      	b.n	8008bd8 <__multiply+0x84>
 8008ca0:	0800a48c 	.word	0x0800a48c
 8008ca4:	0800a49d 	.word	0x0800a49d

08008ca8 <__pow5mult>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4615      	mov	r5, r2
 8008cae:	f012 0203 	ands.w	r2, r2, #3
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	d007      	beq.n	8008cc8 <__pow5mult+0x20>
 8008cb8:	4c25      	ldr	r4, [pc, #148]	@ (8008d50 <__pow5mult+0xa8>)
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cc2:	f7ff fe9f 	bl	8008a04 <__multadd>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	d03d      	beq.n	8008d48 <__pow5mult+0xa0>
 8008ccc:	69fc      	ldr	r4, [r7, #28]
 8008cce:	b97c      	cbnz	r4, 8008cf0 <__pow5mult+0x48>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7ff fd7f 	bl	80087d4 <malloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	61f8      	str	r0, [r7, #28]
 8008cda:	b928      	cbnz	r0, 8008ce8 <__pow5mult+0x40>
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d54 <__pow5mult+0xac>)
 8008cde:	481e      	ldr	r0, [pc, #120]	@ (8008d58 <__pow5mult+0xb0>)
 8008ce0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ce4:	f000 fbea 	bl	80094bc <__assert_func>
 8008ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cec:	6004      	str	r4, [r0, #0]
 8008cee:	60c4      	str	r4, [r0, #12]
 8008cf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf8:	b94c      	cbnz	r4, 8008d0e <__pow5mult+0x66>
 8008cfa:	f240 2171 	movw	r1, #625	@ 0x271
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ff12 	bl	8008b28 <__i2b>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	07eb      	lsls	r3, r5, #31
 8008d14:	d50a      	bpl.n	8008d2c <__pow5mult+0x84>
 8008d16:	4631      	mov	r1, r6
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ff1a 	bl	8008b54 <__multiply>
 8008d20:	4631      	mov	r1, r6
 8008d22:	4680      	mov	r8, r0
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff fe4b 	bl	80089c0 <_Bfree>
 8008d2a:	4646      	mov	r6, r8
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	d00b      	beq.n	8008d48 <__pow5mult+0xa0>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	b938      	cbnz	r0, 8008d44 <__pow5mult+0x9c>
 8008d34:	4622      	mov	r2, r4
 8008d36:	4621      	mov	r1, r4
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff0b 	bl	8008b54 <__multiply>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f8c0 9000 	str.w	r9, [r0]
 8008d44:	4604      	mov	r4, r0
 8008d46:	e7e4      	b.n	8008d12 <__pow5mult+0x6a>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	0800a4f8 	.word	0x0800a4f8
 8008d54:	0800a41d 	.word	0x0800a41d
 8008d58:	0800a49d 	.word	0x0800a49d

08008d5c <__lshift>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	6849      	ldr	r1, [r1, #4]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4691      	mov	r9, r2
 8008d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d74:	f108 0601 	add.w	r6, r8, #1
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	db0b      	blt.n	8008d94 <__lshift+0x38>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fddf 	bl	8008940 <_Balloc>
 8008d82:	4605      	mov	r5, r0
 8008d84:	b948      	cbnz	r0, 8008d9a <__lshift+0x3e>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b28      	ldr	r3, [pc, #160]	@ (8008e2c <__lshift+0xd0>)
 8008d8a:	4829      	ldr	r0, [pc, #164]	@ (8008e30 <__lshift+0xd4>)
 8008d8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d90:	f000 fb94 	bl	80094bc <__assert_func>
 8008d94:	3101      	adds	r1, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	e7ee      	b.n	8008d78 <__lshift+0x1c>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f100 0114 	add.w	r1, r0, #20
 8008da0:	f100 0210 	add.w	r2, r0, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	4553      	cmp	r3, sl
 8008da8:	db33      	blt.n	8008e12 <__lshift+0xb6>
 8008daa:	6920      	ldr	r0, [r4, #16]
 8008dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db0:	f104 0314 	add.w	r3, r4, #20
 8008db4:	f019 091f 	ands.w	r9, r9, #31
 8008db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc0:	d02b      	beq.n	8008e1a <__lshift+0xbe>
 8008dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008dc6:	468a      	mov	sl, r1
 8008dc8:	2200      	movs	r2, #0
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008dd0:	4310      	orrs	r0, r2
 8008dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	459c      	cmp	ip, r3
 8008ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008de0:	d8f3      	bhi.n	8008dca <__lshift+0x6e>
 8008de2:	ebac 0304 	sub.w	r3, ip, r4
 8008de6:	3b15      	subs	r3, #21
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3304      	adds	r3, #4
 8008dee:	f104 0015 	add.w	r0, r4, #21
 8008df2:	4584      	cmp	ip, r0
 8008df4:	bf38      	it	cc
 8008df6:	2304      	movcc	r3, #4
 8008df8:	50ca      	str	r2, [r1, r3]
 8008dfa:	b10a      	cbz	r2, 8008e00 <__lshift+0xa4>
 8008dfc:	f108 0602 	add.w	r6, r8, #2
 8008e00:	3e01      	subs	r6, #1
 8008e02:	4638      	mov	r0, r7
 8008e04:	612e      	str	r6, [r5, #16]
 8008e06:	4621      	mov	r1, r4
 8008e08:	f7ff fdda 	bl	80089c0 <_Bfree>
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e16:	3301      	adds	r3, #1
 8008e18:	e7c5      	b.n	8008da6 <__lshift+0x4a>
 8008e1a:	3904      	subs	r1, #4
 8008e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e24:	459c      	cmp	ip, r3
 8008e26:	d8f9      	bhi.n	8008e1c <__lshift+0xc0>
 8008e28:	e7ea      	b.n	8008e00 <__lshift+0xa4>
 8008e2a:	bf00      	nop
 8008e2c:	0800a48c 	.word	0x0800a48c
 8008e30:	0800a49d 	.word	0x0800a49d

08008e34 <__mcmp>:
 8008e34:	690a      	ldr	r2, [r1, #16]
 8008e36:	4603      	mov	r3, r0
 8008e38:	6900      	ldr	r0, [r0, #16]
 8008e3a:	1a80      	subs	r0, r0, r2
 8008e3c:	b530      	push	{r4, r5, lr}
 8008e3e:	d10e      	bne.n	8008e5e <__mcmp+0x2a>
 8008e40:	3314      	adds	r3, #20
 8008e42:	3114      	adds	r1, #20
 8008e44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e54:	4295      	cmp	r5, r2
 8008e56:	d003      	beq.n	8008e60 <__mcmp+0x2c>
 8008e58:	d205      	bcs.n	8008e66 <__mcmp+0x32>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d3f3      	bcc.n	8008e4c <__mcmp+0x18>
 8008e64:	e7fb      	b.n	8008e5e <__mcmp+0x2a>
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7f9      	b.n	8008e5e <__mcmp+0x2a>
	...

08008e6c <__mdiff>:
 8008e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4689      	mov	r9, r1
 8008e72:	4606      	mov	r6, r0
 8008e74:	4611      	mov	r1, r2
 8008e76:	4648      	mov	r0, r9
 8008e78:	4614      	mov	r4, r2
 8008e7a:	f7ff ffdb 	bl	8008e34 <__mcmp>
 8008e7e:	1e05      	subs	r5, r0, #0
 8008e80:	d112      	bne.n	8008ea8 <__mdiff+0x3c>
 8008e82:	4629      	mov	r1, r5
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff fd5b 	bl	8008940 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__mdiff+0x2e>
 8008e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f8c <__mdiff+0x120>)
 8008e90:	f240 2137 	movw	r1, #567	@ 0x237
 8008e94:	483e      	ldr	r0, [pc, #248]	@ (8008f90 <__mdiff+0x124>)
 8008e96:	f000 fb11 	bl	80094bc <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	b003      	add	sp, #12
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	bfbc      	itt	lt
 8008eaa:	464b      	movlt	r3, r9
 8008eac:	46a1      	movlt	r9, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008eb4:	bfba      	itte	lt
 8008eb6:	461c      	movlt	r4, r3
 8008eb8:	2501      	movlt	r5, #1
 8008eba:	2500      	movge	r5, #0
 8008ebc:	f7ff fd40 	bl	8008940 <_Balloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	b918      	cbnz	r0, 8008ecc <__mdiff+0x60>
 8008ec4:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <__mdiff+0x120>)
 8008ec6:	f240 2145 	movw	r1, #581	@ 0x245
 8008eca:	e7e3      	b.n	8008e94 <__mdiff+0x28>
 8008ecc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ed0:	6926      	ldr	r6, [r4, #16]
 8008ed2:	60c5      	str	r5, [r0, #12]
 8008ed4:	f109 0310 	add.w	r3, r9, #16
 8008ed8:	f109 0514 	add.w	r5, r9, #20
 8008edc:	f104 0e14 	add.w	lr, r4, #20
 8008ee0:	f100 0b14 	add.w	fp, r0, #20
 8008ee4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ee8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	46d9      	mov	r9, fp
 8008ef0:	f04f 0c00 	mov.w	ip, #0
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008efa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	fa1f f38a 	uxth.w	r3, sl
 8008f04:	4619      	mov	r1, r3
 8008f06:	b283      	uxth	r3, r0
 8008f08:	1acb      	subs	r3, r1, r3
 8008f0a:	0c00      	lsrs	r0, r0, #16
 8008f0c:	4463      	add	r3, ip
 8008f0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f1c:	4576      	cmp	r6, lr
 8008f1e:	f849 3b04 	str.w	r3, [r9], #4
 8008f22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f26:	d8e5      	bhi.n	8008ef4 <__mdiff+0x88>
 8008f28:	1b33      	subs	r3, r6, r4
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3415      	adds	r4, #21
 8008f32:	3304      	adds	r3, #4
 8008f34:	42a6      	cmp	r6, r4
 8008f36:	bf38      	it	cc
 8008f38:	2304      	movcc	r3, #4
 8008f3a:	441d      	add	r5, r3
 8008f3c:	445b      	add	r3, fp
 8008f3e:	461e      	mov	r6, r3
 8008f40:	462c      	mov	r4, r5
 8008f42:	4544      	cmp	r4, r8
 8008f44:	d30e      	bcc.n	8008f64 <__mdiff+0xf8>
 8008f46:	f108 0103 	add.w	r1, r8, #3
 8008f4a:	1b49      	subs	r1, r1, r5
 8008f4c:	f021 0103 	bic.w	r1, r1, #3
 8008f50:	3d03      	subs	r5, #3
 8008f52:	45a8      	cmp	r8, r5
 8008f54:	bf38      	it	cc
 8008f56:	2100      	movcc	r1, #0
 8008f58:	440b      	add	r3, r1
 8008f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f5e:	b191      	cbz	r1, 8008f86 <__mdiff+0x11a>
 8008f60:	6117      	str	r7, [r2, #16]
 8008f62:	e79d      	b.n	8008ea0 <__mdiff+0x34>
 8008f64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f68:	46e6      	mov	lr, ip
 8008f6a:	0c08      	lsrs	r0, r1, #16
 8008f6c:	fa1c fc81 	uxtah	ip, ip, r1
 8008f70:	4471      	add	r1, lr
 8008f72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f76:	b289      	uxth	r1, r1
 8008f78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f7c:	f846 1b04 	str.w	r1, [r6], #4
 8008f80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f84:	e7dd      	b.n	8008f42 <__mdiff+0xd6>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	e7e7      	b.n	8008f5a <__mdiff+0xee>
 8008f8a:	bf00      	nop
 8008f8c:	0800a48c 	.word	0x0800a48c
 8008f90:	0800a49d 	.word	0x0800a49d

08008f94 <__d2b>:
 8008f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	460f      	mov	r7, r1
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	ec59 8b10 	vmov	r8, r9, d0
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	f7ff fccd 	bl	8008940 <_Balloc>
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	b930      	cbnz	r0, 8008fb8 <__d2b+0x24>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b23      	ldr	r3, [pc, #140]	@ (800903c <__d2b+0xa8>)
 8008fae:	4824      	ldr	r0, [pc, #144]	@ (8009040 <__d2b+0xac>)
 8008fb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fb4:	f000 fa82 	bl	80094bc <__assert_func>
 8008fb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fc0:	b10d      	cbz	r5, 8008fc6 <__d2b+0x32>
 8008fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8008fcc:	d023      	beq.n	8009016 <__d2b+0x82>
 8008fce:	4668      	mov	r0, sp
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	f7ff fd7c 	bl	8008ace <__lo0bits>
 8008fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fda:	b1d0      	cbz	r0, 8009012 <__d2b+0x7e>
 8008fdc:	f1c0 0320 	rsb	r3, r0, #32
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	40c2      	lsrs	r2, r0
 8008fe8:	6163      	str	r3, [r4, #20]
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	61a3      	str	r3, [r4, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2201      	moveq	r2, #1
 8008ff6:	2202      	movne	r2, #2
 8008ff8:	6122      	str	r2, [r4, #16]
 8008ffa:	b1a5      	cbz	r5, 8009026 <__d2b+0x92>
 8008ffc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009000:	4405      	add	r5, r0
 8009002:	603d      	str	r5, [r7, #0]
 8009004:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009008:	6030      	str	r0, [r6, #0]
 800900a:	4620      	mov	r0, r4
 800900c:	b003      	add	sp, #12
 800900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009012:	6161      	str	r1, [r4, #20]
 8009014:	e7ea      	b.n	8008fec <__d2b+0x58>
 8009016:	a801      	add	r0, sp, #4
 8009018:	f7ff fd59 	bl	8008ace <__lo0bits>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	3020      	adds	r0, #32
 8009022:	2201      	movs	r2, #1
 8009024:	e7e8      	b.n	8008ff8 <__d2b+0x64>
 8009026:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800902a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800902e:	6038      	str	r0, [r7, #0]
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f7ff fd2d 	bl	8008a90 <__hi0bits>
 8009036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800903a:	e7e5      	b.n	8009008 <__d2b+0x74>
 800903c:	0800a48c 	.word	0x0800a48c
 8009040:	0800a49d 	.word	0x0800a49d

08009044 <__ssputs_r>:
 8009044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009048:	688e      	ldr	r6, [r1, #8]
 800904a:	461f      	mov	r7, r3
 800904c:	42be      	cmp	r6, r7
 800904e:	680b      	ldr	r3, [r1, #0]
 8009050:	4682      	mov	sl, r0
 8009052:	460c      	mov	r4, r1
 8009054:	4690      	mov	r8, r2
 8009056:	d82d      	bhi.n	80090b4 <__ssputs_r+0x70>
 8009058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800905c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009060:	d026      	beq.n	80090b0 <__ssputs_r+0x6c>
 8009062:	6965      	ldr	r5, [r4, #20]
 8009064:	6909      	ldr	r1, [r1, #16]
 8009066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800906a:	eba3 0901 	sub.w	r9, r3, r1
 800906e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009072:	1c7b      	adds	r3, r7, #1
 8009074:	444b      	add	r3, r9
 8009076:	106d      	asrs	r5, r5, #1
 8009078:	429d      	cmp	r5, r3
 800907a:	bf38      	it	cc
 800907c:	461d      	movcc	r5, r3
 800907e:	0553      	lsls	r3, r2, #21
 8009080:	d527      	bpl.n	80090d2 <__ssputs_r+0x8e>
 8009082:	4629      	mov	r1, r5
 8009084:	f7ff fbd0 	bl	8008828 <_malloc_r>
 8009088:	4606      	mov	r6, r0
 800908a:	b360      	cbz	r0, 80090e6 <__ssputs_r+0xa2>
 800908c:	6921      	ldr	r1, [r4, #16]
 800908e:	464a      	mov	r2, r9
 8009090:	f000 fa06 	bl	80094a0 <memcpy>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800909a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800909e:	81a3      	strh	r3, [r4, #12]
 80090a0:	6126      	str	r6, [r4, #16]
 80090a2:	6165      	str	r5, [r4, #20]
 80090a4:	444e      	add	r6, r9
 80090a6:	eba5 0509 	sub.w	r5, r5, r9
 80090aa:	6026      	str	r6, [r4, #0]
 80090ac:	60a5      	str	r5, [r4, #8]
 80090ae:	463e      	mov	r6, r7
 80090b0:	42be      	cmp	r6, r7
 80090b2:	d900      	bls.n	80090b6 <__ssputs_r+0x72>
 80090b4:	463e      	mov	r6, r7
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	4632      	mov	r2, r6
 80090ba:	4641      	mov	r1, r8
 80090bc:	f000 f9c6 	bl	800944c <memmove>
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	1b9b      	subs	r3, r3, r6
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	4433      	add	r3, r6
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	2000      	movs	r0, #0
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	462a      	mov	r2, r5
 80090d4:	f000 fa36 	bl	8009544 <_realloc_r>
 80090d8:	4606      	mov	r6, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	d1e0      	bne.n	80090a0 <__ssputs_r+0x5c>
 80090de:	6921      	ldr	r1, [r4, #16]
 80090e0:	4650      	mov	r0, sl
 80090e2:	f7ff fb2d 	bl	8008740 <_free_r>
 80090e6:	230c      	movs	r3, #12
 80090e8:	f8ca 3000 	str.w	r3, [sl]
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	e7e9      	b.n	80090ce <__ssputs_r+0x8a>
	...

080090fc <_svfiprintf_r>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4698      	mov	r8, r3
 8009102:	898b      	ldrh	r3, [r1, #12]
 8009104:	061b      	lsls	r3, r3, #24
 8009106:	b09d      	sub	sp, #116	@ 0x74
 8009108:	4607      	mov	r7, r0
 800910a:	460d      	mov	r5, r1
 800910c:	4614      	mov	r4, r2
 800910e:	d510      	bpl.n	8009132 <_svfiprintf_r+0x36>
 8009110:	690b      	ldr	r3, [r1, #16]
 8009112:	b973      	cbnz	r3, 8009132 <_svfiprintf_r+0x36>
 8009114:	2140      	movs	r1, #64	@ 0x40
 8009116:	f7ff fb87 	bl	8008828 <_malloc_r>
 800911a:	6028      	str	r0, [r5, #0]
 800911c:	6128      	str	r0, [r5, #16]
 800911e:	b930      	cbnz	r0, 800912e <_svfiprintf_r+0x32>
 8009120:	230c      	movs	r3, #12
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	b01d      	add	sp, #116	@ 0x74
 800912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912e:	2340      	movs	r3, #64	@ 0x40
 8009130:	616b      	str	r3, [r5, #20]
 8009132:	2300      	movs	r3, #0
 8009134:	9309      	str	r3, [sp, #36]	@ 0x24
 8009136:	2320      	movs	r3, #32
 8009138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800913c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009140:	2330      	movs	r3, #48	@ 0x30
 8009142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092e0 <_svfiprintf_r+0x1e4>
 8009146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800914a:	f04f 0901 	mov.w	r9, #1
 800914e:	4623      	mov	r3, r4
 8009150:	469a      	mov	sl, r3
 8009152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009156:	b10a      	cbz	r2, 800915c <_svfiprintf_r+0x60>
 8009158:	2a25      	cmp	r2, #37	@ 0x25
 800915a:	d1f9      	bne.n	8009150 <_svfiprintf_r+0x54>
 800915c:	ebba 0b04 	subs.w	fp, sl, r4
 8009160:	d00b      	beq.n	800917a <_svfiprintf_r+0x7e>
 8009162:	465b      	mov	r3, fp
 8009164:	4622      	mov	r2, r4
 8009166:	4629      	mov	r1, r5
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff ff6b 	bl	8009044 <__ssputs_r>
 800916e:	3001      	adds	r0, #1
 8009170:	f000 80a7 	beq.w	80092c2 <_svfiprintf_r+0x1c6>
 8009174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009176:	445a      	add	r2, fp
 8009178:	9209      	str	r2, [sp, #36]	@ 0x24
 800917a:	f89a 3000 	ldrb.w	r3, [sl]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 809f 	beq.w	80092c2 <_svfiprintf_r+0x1c6>
 8009184:	2300      	movs	r3, #0
 8009186:	f04f 32ff 	mov.w	r2, #4294967295
 800918a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800918e:	f10a 0a01 	add.w	sl, sl, #1
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	9307      	str	r3, [sp, #28]
 8009196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800919a:	931a      	str	r3, [sp, #104]	@ 0x68
 800919c:	4654      	mov	r4, sl
 800919e:	2205      	movs	r2, #5
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	484e      	ldr	r0, [pc, #312]	@ (80092e0 <_svfiprintf_r+0x1e4>)
 80091a6:	f7f7 f81b 	bl	80001e0 <memchr>
 80091aa:	9a04      	ldr	r2, [sp, #16]
 80091ac:	b9d8      	cbnz	r0, 80091e6 <_svfiprintf_r+0xea>
 80091ae:	06d0      	lsls	r0, r2, #27
 80091b0:	bf44      	itt	mi
 80091b2:	2320      	movmi	r3, #32
 80091b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091b8:	0711      	lsls	r1, r2, #28
 80091ba:	bf44      	itt	mi
 80091bc:	232b      	movmi	r3, #43	@ 0x2b
 80091be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091c2:	f89a 3000 	ldrb.w	r3, [sl]
 80091c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c8:	d015      	beq.n	80091f6 <_svfiprintf_r+0xfa>
 80091ca:	9a07      	ldr	r2, [sp, #28]
 80091cc:	4654      	mov	r4, sl
 80091ce:	2000      	movs	r0, #0
 80091d0:	f04f 0c0a 	mov.w	ip, #10
 80091d4:	4621      	mov	r1, r4
 80091d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091da:	3b30      	subs	r3, #48	@ 0x30
 80091dc:	2b09      	cmp	r3, #9
 80091de:	d94b      	bls.n	8009278 <_svfiprintf_r+0x17c>
 80091e0:	b1b0      	cbz	r0, 8009210 <_svfiprintf_r+0x114>
 80091e2:	9207      	str	r2, [sp, #28]
 80091e4:	e014      	b.n	8009210 <_svfiprintf_r+0x114>
 80091e6:	eba0 0308 	sub.w	r3, r0, r8
 80091ea:	fa09 f303 	lsl.w	r3, r9, r3
 80091ee:	4313      	orrs	r3, r2
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	46a2      	mov	sl, r4
 80091f4:	e7d2      	b.n	800919c <_svfiprintf_r+0xa0>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	9103      	str	r1, [sp, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfbb      	ittet	lt
 8009202:	425b      	neglt	r3, r3
 8009204:	f042 0202 	orrlt.w	r2, r2, #2
 8009208:	9307      	strge	r3, [sp, #28]
 800920a:	9307      	strlt	r3, [sp, #28]
 800920c:	bfb8      	it	lt
 800920e:	9204      	strlt	r2, [sp, #16]
 8009210:	7823      	ldrb	r3, [r4, #0]
 8009212:	2b2e      	cmp	r3, #46	@ 0x2e
 8009214:	d10a      	bne.n	800922c <_svfiprintf_r+0x130>
 8009216:	7863      	ldrb	r3, [r4, #1]
 8009218:	2b2a      	cmp	r3, #42	@ 0x2a
 800921a:	d132      	bne.n	8009282 <_svfiprintf_r+0x186>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9203      	str	r2, [sp, #12]
 8009224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009228:	3402      	adds	r4, #2
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092f0 <_svfiprintf_r+0x1f4>
 8009230:	7821      	ldrb	r1, [r4, #0]
 8009232:	2203      	movs	r2, #3
 8009234:	4650      	mov	r0, sl
 8009236:	f7f6 ffd3 	bl	80001e0 <memchr>
 800923a:	b138      	cbz	r0, 800924c <_svfiprintf_r+0x150>
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	eba0 000a 	sub.w	r0, r0, sl
 8009242:	2240      	movs	r2, #64	@ 0x40
 8009244:	4082      	lsls	r2, r0
 8009246:	4313      	orrs	r3, r2
 8009248:	3401      	adds	r4, #1
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009250:	4824      	ldr	r0, [pc, #144]	@ (80092e4 <_svfiprintf_r+0x1e8>)
 8009252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009256:	2206      	movs	r2, #6
 8009258:	f7f6 ffc2 	bl	80001e0 <memchr>
 800925c:	2800      	cmp	r0, #0
 800925e:	d036      	beq.n	80092ce <_svfiprintf_r+0x1d2>
 8009260:	4b21      	ldr	r3, [pc, #132]	@ (80092e8 <_svfiprintf_r+0x1ec>)
 8009262:	bb1b      	cbnz	r3, 80092ac <_svfiprintf_r+0x1b0>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	3307      	adds	r3, #7
 8009268:	f023 0307 	bic.w	r3, r3, #7
 800926c:	3308      	adds	r3, #8
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009272:	4433      	add	r3, r6
 8009274:	9309      	str	r3, [sp, #36]	@ 0x24
 8009276:	e76a      	b.n	800914e <_svfiprintf_r+0x52>
 8009278:	fb0c 3202 	mla	r2, ip, r2, r3
 800927c:	460c      	mov	r4, r1
 800927e:	2001      	movs	r0, #1
 8009280:	e7a8      	b.n	80091d4 <_svfiprintf_r+0xd8>
 8009282:	2300      	movs	r3, #0
 8009284:	3401      	adds	r4, #1
 8009286:	9305      	str	r3, [sp, #20]
 8009288:	4619      	mov	r1, r3
 800928a:	f04f 0c0a 	mov.w	ip, #10
 800928e:	4620      	mov	r0, r4
 8009290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009294:	3a30      	subs	r2, #48	@ 0x30
 8009296:	2a09      	cmp	r2, #9
 8009298:	d903      	bls.n	80092a2 <_svfiprintf_r+0x1a6>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0c6      	beq.n	800922c <_svfiprintf_r+0x130>
 800929e:	9105      	str	r1, [sp, #20]
 80092a0:	e7c4      	b.n	800922c <_svfiprintf_r+0x130>
 80092a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a6:	4604      	mov	r4, r0
 80092a8:	2301      	movs	r3, #1
 80092aa:	e7f0      	b.n	800928e <_svfiprintf_r+0x192>
 80092ac:	ab03      	add	r3, sp, #12
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	462a      	mov	r2, r5
 80092b2:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <_svfiprintf_r+0x1f0>)
 80092b4:	a904      	add	r1, sp, #16
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7fd fe84 	bl	8006fc4 <_printf_float>
 80092bc:	1c42      	adds	r2, r0, #1
 80092be:	4606      	mov	r6, r0
 80092c0:	d1d6      	bne.n	8009270 <_svfiprintf_r+0x174>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	065b      	lsls	r3, r3, #25
 80092c6:	f53f af2d 	bmi.w	8009124 <_svfiprintf_r+0x28>
 80092ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092cc:	e72c      	b.n	8009128 <_svfiprintf_r+0x2c>
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	462a      	mov	r2, r5
 80092d4:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <_svfiprintf_r+0x1f0>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	4638      	mov	r0, r7
 80092da:	f7fe f90b 	bl	80074f4 <_printf_i>
 80092de:	e7ed      	b.n	80092bc <_svfiprintf_r+0x1c0>
 80092e0:	0800a5f8 	.word	0x0800a5f8
 80092e4:	0800a602 	.word	0x0800a602
 80092e8:	08006fc5 	.word	0x08006fc5
 80092ec:	08009045 	.word	0x08009045
 80092f0:	0800a5fe 	.word	0x0800a5fe

080092f4 <__sflush_r>:
 80092f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	0716      	lsls	r6, r2, #28
 80092fe:	4605      	mov	r5, r0
 8009300:	460c      	mov	r4, r1
 8009302:	d454      	bmi.n	80093ae <__sflush_r+0xba>
 8009304:	684b      	ldr	r3, [r1, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	dc02      	bgt.n	8009310 <__sflush_r+0x1c>
 800930a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd48      	ble.n	80093a2 <__sflush_r+0xae>
 8009310:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009312:	2e00      	cmp	r6, #0
 8009314:	d045      	beq.n	80093a2 <__sflush_r+0xae>
 8009316:	2300      	movs	r3, #0
 8009318:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800931c:	682f      	ldr	r7, [r5, #0]
 800931e:	6a21      	ldr	r1, [r4, #32]
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	d030      	beq.n	8009386 <__sflush_r+0x92>
 8009324:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	0759      	lsls	r1, r3, #29
 800932a:	d505      	bpl.n	8009338 <__sflush_r+0x44>
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009332:	b10b      	cbz	r3, 8009338 <__sflush_r+0x44>
 8009334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	2300      	movs	r3, #0
 800933a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800933c:	6a21      	ldr	r1, [r4, #32]
 800933e:	4628      	mov	r0, r5
 8009340:	47b0      	blx	r6
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	d106      	bne.n	8009356 <__sflush_r+0x62>
 8009348:	6829      	ldr	r1, [r5, #0]
 800934a:	291d      	cmp	r1, #29
 800934c:	d82b      	bhi.n	80093a6 <__sflush_r+0xb2>
 800934e:	4a2a      	ldr	r2, [pc, #168]	@ (80093f8 <__sflush_r+0x104>)
 8009350:	410a      	asrs	r2, r1
 8009352:	07d6      	lsls	r6, r2, #31
 8009354:	d427      	bmi.n	80093a6 <__sflush_r+0xb2>
 8009356:	2200      	movs	r2, #0
 8009358:	6062      	str	r2, [r4, #4]
 800935a:	04d9      	lsls	r1, r3, #19
 800935c:	6922      	ldr	r2, [r4, #16]
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	d504      	bpl.n	800936c <__sflush_r+0x78>
 8009362:	1c42      	adds	r2, r0, #1
 8009364:	d101      	bne.n	800936a <__sflush_r+0x76>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b903      	cbnz	r3, 800936c <__sflush_r+0x78>
 800936a:	6560      	str	r0, [r4, #84]	@ 0x54
 800936c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800936e:	602f      	str	r7, [r5, #0]
 8009370:	b1b9      	cbz	r1, 80093a2 <__sflush_r+0xae>
 8009372:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009376:	4299      	cmp	r1, r3
 8009378:	d002      	beq.n	8009380 <__sflush_r+0x8c>
 800937a:	4628      	mov	r0, r5
 800937c:	f7ff f9e0 	bl	8008740 <_free_r>
 8009380:	2300      	movs	r3, #0
 8009382:	6363      	str	r3, [r4, #52]	@ 0x34
 8009384:	e00d      	b.n	80093a2 <__sflush_r+0xae>
 8009386:	2301      	movs	r3, #1
 8009388:	4628      	mov	r0, r5
 800938a:	47b0      	blx	r6
 800938c:	4602      	mov	r2, r0
 800938e:	1c50      	adds	r0, r2, #1
 8009390:	d1c9      	bne.n	8009326 <__sflush_r+0x32>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0c6      	beq.n	8009326 <__sflush_r+0x32>
 8009398:	2b1d      	cmp	r3, #29
 800939a:	d001      	beq.n	80093a0 <__sflush_r+0xac>
 800939c:	2b16      	cmp	r3, #22
 800939e:	d11e      	bne.n	80093de <__sflush_r+0xea>
 80093a0:	602f      	str	r7, [r5, #0]
 80093a2:	2000      	movs	r0, #0
 80093a4:	e022      	b.n	80093ec <__sflush_r+0xf8>
 80093a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093aa:	b21b      	sxth	r3, r3
 80093ac:	e01b      	b.n	80093e6 <__sflush_r+0xf2>
 80093ae:	690f      	ldr	r7, [r1, #16]
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	d0f6      	beq.n	80093a2 <__sflush_r+0xae>
 80093b4:	0793      	lsls	r3, r2, #30
 80093b6:	680e      	ldr	r6, [r1, #0]
 80093b8:	bf08      	it	eq
 80093ba:	694b      	ldreq	r3, [r1, #20]
 80093bc:	600f      	str	r7, [r1, #0]
 80093be:	bf18      	it	ne
 80093c0:	2300      	movne	r3, #0
 80093c2:	eba6 0807 	sub.w	r8, r6, r7
 80093c6:	608b      	str	r3, [r1, #8]
 80093c8:	f1b8 0f00 	cmp.w	r8, #0
 80093cc:	dde9      	ble.n	80093a2 <__sflush_r+0xae>
 80093ce:	6a21      	ldr	r1, [r4, #32]
 80093d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093d2:	4643      	mov	r3, r8
 80093d4:	463a      	mov	r2, r7
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b0      	blx	r6
 80093da:	2800      	cmp	r0, #0
 80093dc:	dc08      	bgt.n	80093f0 <__sflush_r+0xfc>
 80093de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	4407      	add	r7, r0
 80093f2:	eba8 0800 	sub.w	r8, r8, r0
 80093f6:	e7e7      	b.n	80093c8 <__sflush_r+0xd4>
 80093f8:	dfbffffe 	.word	0xdfbffffe

080093fc <_fflush_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	690b      	ldr	r3, [r1, #16]
 8009400:	4605      	mov	r5, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b913      	cbnz	r3, 800940c <_fflush_r+0x10>
 8009406:	2500      	movs	r5, #0
 8009408:	4628      	mov	r0, r5
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	b118      	cbz	r0, 8009416 <_fflush_r+0x1a>
 800940e:	6a03      	ldr	r3, [r0, #32]
 8009410:	b90b      	cbnz	r3, 8009416 <_fflush_r+0x1a>
 8009412:	f7fe fa1b 	bl	800784c <__sinit>
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0f3      	beq.n	8009406 <_fflush_r+0xa>
 800941e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009420:	07d0      	lsls	r0, r2, #31
 8009422:	d404      	bmi.n	800942e <_fflush_r+0x32>
 8009424:	0599      	lsls	r1, r3, #22
 8009426:	d402      	bmi.n	800942e <_fflush_r+0x32>
 8009428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800942a:	f7fe fb3a 	bl	8007aa2 <__retarget_lock_acquire_recursive>
 800942e:	4628      	mov	r0, r5
 8009430:	4621      	mov	r1, r4
 8009432:	f7ff ff5f 	bl	80092f4 <__sflush_r>
 8009436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009438:	07da      	lsls	r2, r3, #31
 800943a:	4605      	mov	r5, r0
 800943c:	d4e4      	bmi.n	8009408 <_fflush_r+0xc>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	059b      	lsls	r3, r3, #22
 8009442:	d4e1      	bmi.n	8009408 <_fflush_r+0xc>
 8009444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009446:	f7fe fb2d 	bl	8007aa4 <__retarget_lock_release_recursive>
 800944a:	e7dd      	b.n	8009408 <_fflush_r+0xc>

0800944c <memmove>:
 800944c:	4288      	cmp	r0, r1
 800944e:	b510      	push	{r4, lr}
 8009450:	eb01 0402 	add.w	r4, r1, r2
 8009454:	d902      	bls.n	800945c <memmove+0x10>
 8009456:	4284      	cmp	r4, r0
 8009458:	4623      	mov	r3, r4
 800945a:	d807      	bhi.n	800946c <memmove+0x20>
 800945c:	1e43      	subs	r3, r0, #1
 800945e:	42a1      	cmp	r1, r4
 8009460:	d008      	beq.n	8009474 <memmove+0x28>
 8009462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946a:	e7f8      	b.n	800945e <memmove+0x12>
 800946c:	4402      	add	r2, r0
 800946e:	4601      	mov	r1, r0
 8009470:	428a      	cmp	r2, r1
 8009472:	d100      	bne.n	8009476 <memmove+0x2a>
 8009474:	bd10      	pop	{r4, pc}
 8009476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800947e:	e7f7      	b.n	8009470 <memmove+0x24>

08009480 <_sbrk_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d06      	ldr	r5, [pc, #24]	@ (800949c <_sbrk_r+0x1c>)
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f8 ffee 	bl	800246c <_sbrk>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_sbrk_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_sbrk_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20000430 	.word	0x20000430

080094a0 <memcpy>:
 80094a0:	440a      	add	r2, r1
 80094a2:	4291      	cmp	r1, r2
 80094a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a8:	d100      	bne.n	80094ac <memcpy+0xc>
 80094aa:	4770      	bx	lr
 80094ac:	b510      	push	{r4, lr}
 80094ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b6:	4291      	cmp	r1, r2
 80094b8:	d1f9      	bne.n	80094ae <memcpy+0xe>
 80094ba:	bd10      	pop	{r4, pc}

080094bc <__assert_func>:
 80094bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094be:	4614      	mov	r4, r2
 80094c0:	461a      	mov	r2, r3
 80094c2:	4b09      	ldr	r3, [pc, #36]	@ (80094e8 <__assert_func+0x2c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4605      	mov	r5, r0
 80094c8:	68d8      	ldr	r0, [r3, #12]
 80094ca:	b954      	cbnz	r4, 80094e2 <__assert_func+0x26>
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <__assert_func+0x30>)
 80094ce:	461c      	mov	r4, r3
 80094d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094d4:	9100      	str	r1, [sp, #0]
 80094d6:	462b      	mov	r3, r5
 80094d8:	4905      	ldr	r1, [pc, #20]	@ (80094f0 <__assert_func+0x34>)
 80094da:	f000 f86f 	bl	80095bc <fiprintf>
 80094de:	f000 f87f 	bl	80095e0 <abort>
 80094e2:	4b04      	ldr	r3, [pc, #16]	@ (80094f4 <__assert_func+0x38>)
 80094e4:	e7f4      	b.n	80094d0 <__assert_func+0x14>
 80094e6:	bf00      	nop
 80094e8:	20000018 	.word	0x20000018
 80094ec:	0800a64e 	.word	0x0800a64e
 80094f0:	0800a620 	.word	0x0800a620
 80094f4:	0800a613 	.word	0x0800a613

080094f8 <_calloc_r>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	fba1 5402 	umull	r5, r4, r1, r2
 80094fe:	b93c      	cbnz	r4, 8009510 <_calloc_r+0x18>
 8009500:	4629      	mov	r1, r5
 8009502:	f7ff f991 	bl	8008828 <_malloc_r>
 8009506:	4606      	mov	r6, r0
 8009508:	b928      	cbnz	r0, 8009516 <_calloc_r+0x1e>
 800950a:	2600      	movs	r6, #0
 800950c:	4630      	mov	r0, r6
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	220c      	movs	r2, #12
 8009512:	6002      	str	r2, [r0, #0]
 8009514:	e7f9      	b.n	800950a <_calloc_r+0x12>
 8009516:	462a      	mov	r2, r5
 8009518:	4621      	mov	r1, r4
 800951a:	f7fe fa44 	bl	80079a6 <memset>
 800951e:	e7f5      	b.n	800950c <_calloc_r+0x14>

08009520 <__ascii_mbtowc>:
 8009520:	b082      	sub	sp, #8
 8009522:	b901      	cbnz	r1, 8009526 <__ascii_mbtowc+0x6>
 8009524:	a901      	add	r1, sp, #4
 8009526:	b142      	cbz	r2, 800953a <__ascii_mbtowc+0x1a>
 8009528:	b14b      	cbz	r3, 800953e <__ascii_mbtowc+0x1e>
 800952a:	7813      	ldrb	r3, [r2, #0]
 800952c:	600b      	str	r3, [r1, #0]
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	1e10      	subs	r0, r2, #0
 8009532:	bf18      	it	ne
 8009534:	2001      	movne	r0, #1
 8009536:	b002      	add	sp, #8
 8009538:	4770      	bx	lr
 800953a:	4610      	mov	r0, r2
 800953c:	e7fb      	b.n	8009536 <__ascii_mbtowc+0x16>
 800953e:	f06f 0001 	mvn.w	r0, #1
 8009542:	e7f8      	b.n	8009536 <__ascii_mbtowc+0x16>

08009544 <_realloc_r>:
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	4680      	mov	r8, r0
 800954a:	4615      	mov	r5, r2
 800954c:	460c      	mov	r4, r1
 800954e:	b921      	cbnz	r1, 800955a <_realloc_r+0x16>
 8009550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009554:	4611      	mov	r1, r2
 8009556:	f7ff b967 	b.w	8008828 <_malloc_r>
 800955a:	b92a      	cbnz	r2, 8009568 <_realloc_r+0x24>
 800955c:	f7ff f8f0 	bl	8008740 <_free_r>
 8009560:	2400      	movs	r4, #0
 8009562:	4620      	mov	r0, r4
 8009564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009568:	f000 f841 	bl	80095ee <_malloc_usable_size_r>
 800956c:	4285      	cmp	r5, r0
 800956e:	4606      	mov	r6, r0
 8009570:	d802      	bhi.n	8009578 <_realloc_r+0x34>
 8009572:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009576:	d8f4      	bhi.n	8009562 <_realloc_r+0x1e>
 8009578:	4629      	mov	r1, r5
 800957a:	4640      	mov	r0, r8
 800957c:	f7ff f954 	bl	8008828 <_malloc_r>
 8009580:	4607      	mov	r7, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	d0ec      	beq.n	8009560 <_realloc_r+0x1c>
 8009586:	42b5      	cmp	r5, r6
 8009588:	462a      	mov	r2, r5
 800958a:	4621      	mov	r1, r4
 800958c:	bf28      	it	cs
 800958e:	4632      	movcs	r2, r6
 8009590:	f7ff ff86 	bl	80094a0 <memcpy>
 8009594:	4621      	mov	r1, r4
 8009596:	4640      	mov	r0, r8
 8009598:	f7ff f8d2 	bl	8008740 <_free_r>
 800959c:	463c      	mov	r4, r7
 800959e:	e7e0      	b.n	8009562 <_realloc_r+0x1e>

080095a0 <__ascii_wctomb>:
 80095a0:	4603      	mov	r3, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	b141      	cbz	r1, 80095b8 <__ascii_wctomb+0x18>
 80095a6:	2aff      	cmp	r2, #255	@ 0xff
 80095a8:	d904      	bls.n	80095b4 <__ascii_wctomb+0x14>
 80095aa:	228a      	movs	r2, #138	@ 0x8a
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295
 80095b2:	4770      	bx	lr
 80095b4:	700a      	strb	r2, [r1, #0]
 80095b6:	2001      	movs	r0, #1
 80095b8:	4770      	bx	lr
	...

080095bc <fiprintf>:
 80095bc:	b40e      	push	{r1, r2, r3}
 80095be:	b503      	push	{r0, r1, lr}
 80095c0:	4601      	mov	r1, r0
 80095c2:	ab03      	add	r3, sp, #12
 80095c4:	4805      	ldr	r0, [pc, #20]	@ (80095dc <fiprintf+0x20>)
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	6800      	ldr	r0, [r0, #0]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	f000 f83f 	bl	8009650 <_vfiprintf_r>
 80095d2:	b002      	add	sp, #8
 80095d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d8:	b003      	add	sp, #12
 80095da:	4770      	bx	lr
 80095dc:	20000018 	.word	0x20000018

080095e0 <abort>:
 80095e0:	b508      	push	{r3, lr}
 80095e2:	2006      	movs	r0, #6
 80095e4:	f000 fa08 	bl	80099f8 <raise>
 80095e8:	2001      	movs	r0, #1
 80095ea:	f7f8 fec7 	bl	800237c <_exit>

080095ee <_malloc_usable_size_r>:
 80095ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f2:	1f18      	subs	r0, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfbc      	itt	lt
 80095f8:	580b      	ldrlt	r3, [r1, r0]
 80095fa:	18c0      	addlt	r0, r0, r3
 80095fc:	4770      	bx	lr

080095fe <__sfputc_r>:
 80095fe:	6893      	ldr	r3, [r2, #8]
 8009600:	3b01      	subs	r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	b410      	push	{r4}
 8009606:	6093      	str	r3, [r2, #8]
 8009608:	da08      	bge.n	800961c <__sfputc_r+0x1e>
 800960a:	6994      	ldr	r4, [r2, #24]
 800960c:	42a3      	cmp	r3, r4
 800960e:	db01      	blt.n	8009614 <__sfputc_r+0x16>
 8009610:	290a      	cmp	r1, #10
 8009612:	d103      	bne.n	800961c <__sfputc_r+0x1e>
 8009614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009618:	f000 b932 	b.w	8009880 <__swbuf_r>
 800961c:	6813      	ldr	r3, [r2, #0]
 800961e:	1c58      	adds	r0, r3, #1
 8009620:	6010      	str	r0, [r2, #0]
 8009622:	7019      	strb	r1, [r3, #0]
 8009624:	4608      	mov	r0, r1
 8009626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800962a:	4770      	bx	lr

0800962c <__sfputs_r>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	4614      	mov	r4, r2
 8009634:	18d5      	adds	r5, r2, r3
 8009636:	42ac      	cmp	r4, r5
 8009638:	d101      	bne.n	800963e <__sfputs_r+0x12>
 800963a:	2000      	movs	r0, #0
 800963c:	e007      	b.n	800964e <__sfputs_r+0x22>
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	463a      	mov	r2, r7
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff ffda 	bl	80095fe <__sfputc_r>
 800964a:	1c43      	adds	r3, r0, #1
 800964c:	d1f3      	bne.n	8009636 <__sfputs_r+0xa>
 800964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009650 <_vfiprintf_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	460d      	mov	r5, r1
 8009656:	b09d      	sub	sp, #116	@ 0x74
 8009658:	4614      	mov	r4, r2
 800965a:	4698      	mov	r8, r3
 800965c:	4606      	mov	r6, r0
 800965e:	b118      	cbz	r0, 8009668 <_vfiprintf_r+0x18>
 8009660:	6a03      	ldr	r3, [r0, #32]
 8009662:	b90b      	cbnz	r3, 8009668 <_vfiprintf_r+0x18>
 8009664:	f7fe f8f2 	bl	800784c <__sinit>
 8009668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800966a:	07d9      	lsls	r1, r3, #31
 800966c:	d405      	bmi.n	800967a <_vfiprintf_r+0x2a>
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	059a      	lsls	r2, r3, #22
 8009672:	d402      	bmi.n	800967a <_vfiprintf_r+0x2a>
 8009674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009676:	f7fe fa14 	bl	8007aa2 <__retarget_lock_acquire_recursive>
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	071b      	lsls	r3, r3, #28
 800967e:	d501      	bpl.n	8009684 <_vfiprintf_r+0x34>
 8009680:	692b      	ldr	r3, [r5, #16]
 8009682:	b99b      	cbnz	r3, 80096ac <_vfiprintf_r+0x5c>
 8009684:	4629      	mov	r1, r5
 8009686:	4630      	mov	r0, r6
 8009688:	f000 f938 	bl	80098fc <__swsetup_r>
 800968c:	b170      	cbz	r0, 80096ac <_vfiprintf_r+0x5c>
 800968e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009690:	07dc      	lsls	r4, r3, #31
 8009692:	d504      	bpl.n	800969e <_vfiprintf_r+0x4e>
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	b01d      	add	sp, #116	@ 0x74
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	0598      	lsls	r0, r3, #22
 80096a2:	d4f7      	bmi.n	8009694 <_vfiprintf_r+0x44>
 80096a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096a6:	f7fe f9fd 	bl	8007aa4 <__retarget_lock_release_recursive>
 80096aa:	e7f3      	b.n	8009694 <_vfiprintf_r+0x44>
 80096ac:	2300      	movs	r3, #0
 80096ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b0:	2320      	movs	r3, #32
 80096b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ba:	2330      	movs	r3, #48	@ 0x30
 80096bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800986c <_vfiprintf_r+0x21c>
 80096c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096c4:	f04f 0901 	mov.w	r9, #1
 80096c8:	4623      	mov	r3, r4
 80096ca:	469a      	mov	sl, r3
 80096cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d0:	b10a      	cbz	r2, 80096d6 <_vfiprintf_r+0x86>
 80096d2:	2a25      	cmp	r2, #37	@ 0x25
 80096d4:	d1f9      	bne.n	80096ca <_vfiprintf_r+0x7a>
 80096d6:	ebba 0b04 	subs.w	fp, sl, r4
 80096da:	d00b      	beq.n	80096f4 <_vfiprintf_r+0xa4>
 80096dc:	465b      	mov	r3, fp
 80096de:	4622      	mov	r2, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff ffa2 	bl	800962c <__sfputs_r>
 80096e8:	3001      	adds	r0, #1
 80096ea:	f000 80a7 	beq.w	800983c <_vfiprintf_r+0x1ec>
 80096ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096f0:	445a      	add	r2, fp
 80096f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096f4:	f89a 3000 	ldrb.w	r3, [sl]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 809f 	beq.w	800983c <_vfiprintf_r+0x1ec>
 80096fe:	2300      	movs	r3, #0
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009708:	f10a 0a01 	add.w	sl, sl, #1
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009714:	931a      	str	r3, [sp, #104]	@ 0x68
 8009716:	4654      	mov	r4, sl
 8009718:	2205      	movs	r2, #5
 800971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971e:	4853      	ldr	r0, [pc, #332]	@ (800986c <_vfiprintf_r+0x21c>)
 8009720:	f7f6 fd5e 	bl	80001e0 <memchr>
 8009724:	9a04      	ldr	r2, [sp, #16]
 8009726:	b9d8      	cbnz	r0, 8009760 <_vfiprintf_r+0x110>
 8009728:	06d1      	lsls	r1, r2, #27
 800972a:	bf44      	itt	mi
 800972c:	2320      	movmi	r3, #32
 800972e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009732:	0713      	lsls	r3, r2, #28
 8009734:	bf44      	itt	mi
 8009736:	232b      	movmi	r3, #43	@ 0x2b
 8009738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800973c:	f89a 3000 	ldrb.w	r3, [sl]
 8009740:	2b2a      	cmp	r3, #42	@ 0x2a
 8009742:	d015      	beq.n	8009770 <_vfiprintf_r+0x120>
 8009744:	9a07      	ldr	r2, [sp, #28]
 8009746:	4654      	mov	r4, sl
 8009748:	2000      	movs	r0, #0
 800974a:	f04f 0c0a 	mov.w	ip, #10
 800974e:	4621      	mov	r1, r4
 8009750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009754:	3b30      	subs	r3, #48	@ 0x30
 8009756:	2b09      	cmp	r3, #9
 8009758:	d94b      	bls.n	80097f2 <_vfiprintf_r+0x1a2>
 800975a:	b1b0      	cbz	r0, 800978a <_vfiprintf_r+0x13a>
 800975c:	9207      	str	r2, [sp, #28]
 800975e:	e014      	b.n	800978a <_vfiprintf_r+0x13a>
 8009760:	eba0 0308 	sub.w	r3, r0, r8
 8009764:	fa09 f303 	lsl.w	r3, r9, r3
 8009768:	4313      	orrs	r3, r2
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	46a2      	mov	sl, r4
 800976e:	e7d2      	b.n	8009716 <_vfiprintf_r+0xc6>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	1d19      	adds	r1, r3, #4
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	9103      	str	r1, [sp, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	bfbb      	ittet	lt
 800977c:	425b      	neglt	r3, r3
 800977e:	f042 0202 	orrlt.w	r2, r2, #2
 8009782:	9307      	strge	r3, [sp, #28]
 8009784:	9307      	strlt	r3, [sp, #28]
 8009786:	bfb8      	it	lt
 8009788:	9204      	strlt	r2, [sp, #16]
 800978a:	7823      	ldrb	r3, [r4, #0]
 800978c:	2b2e      	cmp	r3, #46	@ 0x2e
 800978e:	d10a      	bne.n	80097a6 <_vfiprintf_r+0x156>
 8009790:	7863      	ldrb	r3, [r4, #1]
 8009792:	2b2a      	cmp	r3, #42	@ 0x2a
 8009794:	d132      	bne.n	80097fc <_vfiprintf_r+0x1ac>
 8009796:	9b03      	ldr	r3, [sp, #12]
 8009798:	1d1a      	adds	r2, r3, #4
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	9203      	str	r2, [sp, #12]
 800979e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097a2:	3402      	adds	r4, #2
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800987c <_vfiprintf_r+0x22c>
 80097aa:	7821      	ldrb	r1, [r4, #0]
 80097ac:	2203      	movs	r2, #3
 80097ae:	4650      	mov	r0, sl
 80097b0:	f7f6 fd16 	bl	80001e0 <memchr>
 80097b4:	b138      	cbz	r0, 80097c6 <_vfiprintf_r+0x176>
 80097b6:	9b04      	ldr	r3, [sp, #16]
 80097b8:	eba0 000a 	sub.w	r0, r0, sl
 80097bc:	2240      	movs	r2, #64	@ 0x40
 80097be:	4082      	lsls	r2, r0
 80097c0:	4313      	orrs	r3, r2
 80097c2:	3401      	adds	r4, #1
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ca:	4829      	ldr	r0, [pc, #164]	@ (8009870 <_vfiprintf_r+0x220>)
 80097cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097d0:	2206      	movs	r2, #6
 80097d2:	f7f6 fd05 	bl	80001e0 <memchr>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d03f      	beq.n	800985a <_vfiprintf_r+0x20a>
 80097da:	4b26      	ldr	r3, [pc, #152]	@ (8009874 <_vfiprintf_r+0x224>)
 80097dc:	bb1b      	cbnz	r3, 8009826 <_vfiprintf_r+0x1d6>
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	3307      	adds	r3, #7
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	3308      	adds	r3, #8
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ec:	443b      	add	r3, r7
 80097ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f0:	e76a      	b.n	80096c8 <_vfiprintf_r+0x78>
 80097f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f6:	460c      	mov	r4, r1
 80097f8:	2001      	movs	r0, #1
 80097fa:	e7a8      	b.n	800974e <_vfiprintf_r+0xfe>
 80097fc:	2300      	movs	r3, #0
 80097fe:	3401      	adds	r4, #1
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	4619      	mov	r1, r3
 8009804:	f04f 0c0a 	mov.w	ip, #10
 8009808:	4620      	mov	r0, r4
 800980a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800980e:	3a30      	subs	r2, #48	@ 0x30
 8009810:	2a09      	cmp	r2, #9
 8009812:	d903      	bls.n	800981c <_vfiprintf_r+0x1cc>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0c6      	beq.n	80097a6 <_vfiprintf_r+0x156>
 8009818:	9105      	str	r1, [sp, #20]
 800981a:	e7c4      	b.n	80097a6 <_vfiprintf_r+0x156>
 800981c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009820:	4604      	mov	r4, r0
 8009822:	2301      	movs	r3, #1
 8009824:	e7f0      	b.n	8009808 <_vfiprintf_r+0x1b8>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4b12      	ldr	r3, [pc, #72]	@ (8009878 <_vfiprintf_r+0x228>)
 800982e:	a904      	add	r1, sp, #16
 8009830:	4630      	mov	r0, r6
 8009832:	f7fd fbc7 	bl	8006fc4 <_printf_float>
 8009836:	4607      	mov	r7, r0
 8009838:	1c78      	adds	r0, r7, #1
 800983a:	d1d6      	bne.n	80097ea <_vfiprintf_r+0x19a>
 800983c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800983e:	07d9      	lsls	r1, r3, #31
 8009840:	d405      	bmi.n	800984e <_vfiprintf_r+0x1fe>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	059a      	lsls	r2, r3, #22
 8009846:	d402      	bmi.n	800984e <_vfiprintf_r+0x1fe>
 8009848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800984a:	f7fe f92b 	bl	8007aa4 <__retarget_lock_release_recursive>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	065b      	lsls	r3, r3, #25
 8009852:	f53f af1f 	bmi.w	8009694 <_vfiprintf_r+0x44>
 8009856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009858:	e71e      	b.n	8009698 <_vfiprintf_r+0x48>
 800985a:	ab03      	add	r3, sp, #12
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	462a      	mov	r2, r5
 8009860:	4b05      	ldr	r3, [pc, #20]	@ (8009878 <_vfiprintf_r+0x228>)
 8009862:	a904      	add	r1, sp, #16
 8009864:	4630      	mov	r0, r6
 8009866:	f7fd fe45 	bl	80074f4 <_printf_i>
 800986a:	e7e4      	b.n	8009836 <_vfiprintf_r+0x1e6>
 800986c:	0800a5f8 	.word	0x0800a5f8
 8009870:	0800a602 	.word	0x0800a602
 8009874:	08006fc5 	.word	0x08006fc5
 8009878:	0800962d 	.word	0x0800962d
 800987c:	0800a5fe 	.word	0x0800a5fe

08009880 <__swbuf_r>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	460e      	mov	r6, r1
 8009884:	4614      	mov	r4, r2
 8009886:	4605      	mov	r5, r0
 8009888:	b118      	cbz	r0, 8009892 <__swbuf_r+0x12>
 800988a:	6a03      	ldr	r3, [r0, #32]
 800988c:	b90b      	cbnz	r3, 8009892 <__swbuf_r+0x12>
 800988e:	f7fd ffdd 	bl	800784c <__sinit>
 8009892:	69a3      	ldr	r3, [r4, #24]
 8009894:	60a3      	str	r3, [r4, #8]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	071a      	lsls	r2, r3, #28
 800989a:	d501      	bpl.n	80098a0 <__swbuf_r+0x20>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	b943      	cbnz	r3, 80098b2 <__swbuf_r+0x32>
 80098a0:	4621      	mov	r1, r4
 80098a2:	4628      	mov	r0, r5
 80098a4:	f000 f82a 	bl	80098fc <__swsetup_r>
 80098a8:	b118      	cbz	r0, 80098b2 <__swbuf_r+0x32>
 80098aa:	f04f 37ff 	mov.w	r7, #4294967295
 80098ae:	4638      	mov	r0, r7
 80098b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	6922      	ldr	r2, [r4, #16]
 80098b6:	1a98      	subs	r0, r3, r2
 80098b8:	6963      	ldr	r3, [r4, #20]
 80098ba:	b2f6      	uxtb	r6, r6
 80098bc:	4283      	cmp	r3, r0
 80098be:	4637      	mov	r7, r6
 80098c0:	dc05      	bgt.n	80098ce <__swbuf_r+0x4e>
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff fd99 	bl	80093fc <_fflush_r>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d1ed      	bne.n	80098aa <__swbuf_r+0x2a>
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	60a3      	str	r3, [r4, #8]
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	6022      	str	r2, [r4, #0]
 80098da:	701e      	strb	r6, [r3, #0]
 80098dc:	6962      	ldr	r2, [r4, #20]
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d004      	beq.n	80098ee <__swbuf_r+0x6e>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	07db      	lsls	r3, r3, #31
 80098e8:	d5e1      	bpl.n	80098ae <__swbuf_r+0x2e>
 80098ea:	2e0a      	cmp	r6, #10
 80098ec:	d1df      	bne.n	80098ae <__swbuf_r+0x2e>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	f7ff fd83 	bl	80093fc <_fflush_r>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0d9      	beq.n	80098ae <__swbuf_r+0x2e>
 80098fa:	e7d6      	b.n	80098aa <__swbuf_r+0x2a>

080098fc <__swsetup_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4b29      	ldr	r3, [pc, #164]	@ (80099a4 <__swsetup_r+0xa8>)
 8009900:	4605      	mov	r5, r0
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	460c      	mov	r4, r1
 8009906:	b118      	cbz	r0, 8009910 <__swsetup_r+0x14>
 8009908:	6a03      	ldr	r3, [r0, #32]
 800990a:	b90b      	cbnz	r3, 8009910 <__swsetup_r+0x14>
 800990c:	f7fd ff9e 	bl	800784c <__sinit>
 8009910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009914:	0719      	lsls	r1, r3, #28
 8009916:	d422      	bmi.n	800995e <__swsetup_r+0x62>
 8009918:	06da      	lsls	r2, r3, #27
 800991a:	d407      	bmi.n	800992c <__swsetup_r+0x30>
 800991c:	2209      	movs	r2, #9
 800991e:	602a      	str	r2, [r5, #0]
 8009920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	e033      	b.n	8009994 <__swsetup_r+0x98>
 800992c:	0758      	lsls	r0, r3, #29
 800992e:	d512      	bpl.n	8009956 <__swsetup_r+0x5a>
 8009930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009932:	b141      	cbz	r1, 8009946 <__swsetup_r+0x4a>
 8009934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009938:	4299      	cmp	r1, r3
 800993a:	d002      	beq.n	8009942 <__swsetup_r+0x46>
 800993c:	4628      	mov	r0, r5
 800993e:	f7fe feff 	bl	8008740 <_free_r>
 8009942:	2300      	movs	r3, #0
 8009944:	6363      	str	r3, [r4, #52]	@ 0x34
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	2300      	movs	r3, #0
 8009950:	6063      	str	r3, [r4, #4]
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	f043 0308 	orr.w	r3, r3, #8
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	b94b      	cbnz	r3, 8009976 <__swsetup_r+0x7a>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996c:	d003      	beq.n	8009976 <__swsetup_r+0x7a>
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f883 	bl	8009a7c <__smakebuf_r>
 8009976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997a:	f013 0201 	ands.w	r2, r3, #1
 800997e:	d00a      	beq.n	8009996 <__swsetup_r+0x9a>
 8009980:	2200      	movs	r2, #0
 8009982:	60a2      	str	r2, [r4, #8]
 8009984:	6962      	ldr	r2, [r4, #20]
 8009986:	4252      	negs	r2, r2
 8009988:	61a2      	str	r2, [r4, #24]
 800998a:	6922      	ldr	r2, [r4, #16]
 800998c:	b942      	cbnz	r2, 80099a0 <__swsetup_r+0xa4>
 800998e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009992:	d1c5      	bne.n	8009920 <__swsetup_r+0x24>
 8009994:	bd38      	pop	{r3, r4, r5, pc}
 8009996:	0799      	lsls	r1, r3, #30
 8009998:	bf58      	it	pl
 800999a:	6962      	ldrpl	r2, [r4, #20]
 800999c:	60a2      	str	r2, [r4, #8]
 800999e:	e7f4      	b.n	800998a <__swsetup_r+0x8e>
 80099a0:	2000      	movs	r0, #0
 80099a2:	e7f7      	b.n	8009994 <__swsetup_r+0x98>
 80099a4:	20000018 	.word	0x20000018

080099a8 <_raise_r>:
 80099a8:	291f      	cmp	r1, #31
 80099aa:	b538      	push	{r3, r4, r5, lr}
 80099ac:	4605      	mov	r5, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	d904      	bls.n	80099bc <_raise_r+0x14>
 80099b2:	2316      	movs	r3, #22
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099be:	b112      	cbz	r2, 80099c6 <_raise_r+0x1e>
 80099c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099c4:	b94b      	cbnz	r3, 80099da <_raise_r+0x32>
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f830 	bl	8009a2c <_getpid_r>
 80099cc:	4622      	mov	r2, r4
 80099ce:	4601      	mov	r1, r0
 80099d0:	4628      	mov	r0, r5
 80099d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d6:	f000 b817 	b.w	8009a08 <_kill_r>
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d00a      	beq.n	80099f4 <_raise_r+0x4c>
 80099de:	1c59      	adds	r1, r3, #1
 80099e0:	d103      	bne.n	80099ea <_raise_r+0x42>
 80099e2:	2316      	movs	r3, #22
 80099e4:	6003      	str	r3, [r0, #0]
 80099e6:	2001      	movs	r0, #1
 80099e8:	e7e7      	b.n	80099ba <_raise_r+0x12>
 80099ea:	2100      	movs	r1, #0
 80099ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099f0:	4620      	mov	r0, r4
 80099f2:	4798      	blx	r3
 80099f4:	2000      	movs	r0, #0
 80099f6:	e7e0      	b.n	80099ba <_raise_r+0x12>

080099f8 <raise>:
 80099f8:	4b02      	ldr	r3, [pc, #8]	@ (8009a04 <raise+0xc>)
 80099fa:	4601      	mov	r1, r0
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	f7ff bfd3 	b.w	80099a8 <_raise_r>
 8009a02:	bf00      	nop
 8009a04:	20000018 	.word	0x20000018

08009a08 <_kill_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	@ (8009a28 <_kill_r+0x20>)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	f7f8 fca1 	bl	800235c <_kill>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d102      	bne.n	8009a24 <_kill_r+0x1c>
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	b103      	cbz	r3, 8009a24 <_kill_r+0x1c>
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	20000430 	.word	0x20000430

08009a2c <_getpid_r>:
 8009a2c:	f7f8 bc8e 	b.w	800234c <_getpid>

08009a30 <__swhatbuf_r>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	b096      	sub	sp, #88	@ 0x58
 8009a3c:	4615      	mov	r5, r2
 8009a3e:	461e      	mov	r6, r3
 8009a40:	da0d      	bge.n	8009a5e <__swhatbuf_r+0x2e>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a48:	f04f 0100 	mov.w	r1, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	2340      	movne	r3, #64	@ 0x40
 8009a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a54:	2000      	movs	r0, #0
 8009a56:	6031      	str	r1, [r6, #0]
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	b016      	add	sp, #88	@ 0x58
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
 8009a5e:	466a      	mov	r2, sp
 8009a60:	f000 f848 	bl	8009af4 <_fstat_r>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	dbec      	blt.n	8009a42 <__swhatbuf_r+0x12>
 8009a68:	9901      	ldr	r1, [sp, #4]
 8009a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a72:	4259      	negs	r1, r3
 8009a74:	4159      	adcs	r1, r3
 8009a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a7a:	e7eb      	b.n	8009a54 <__swhatbuf_r+0x24>

08009a7c <__smakebuf_r>:
 8009a7c:	898b      	ldrh	r3, [r1, #12]
 8009a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a80:	079d      	lsls	r5, r3, #30
 8009a82:	4606      	mov	r6, r0
 8009a84:	460c      	mov	r4, r1
 8009a86:	d507      	bpl.n	8009a98 <__smakebuf_r+0x1c>
 8009a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	6123      	str	r3, [r4, #16]
 8009a90:	2301      	movs	r3, #1
 8009a92:	6163      	str	r3, [r4, #20]
 8009a94:	b003      	add	sp, #12
 8009a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a98:	ab01      	add	r3, sp, #4
 8009a9a:	466a      	mov	r2, sp
 8009a9c:	f7ff ffc8 	bl	8009a30 <__swhatbuf_r>
 8009aa0:	9f00      	ldr	r7, [sp, #0]
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7fe febe 	bl	8008828 <_malloc_r>
 8009aac:	b948      	cbnz	r0, 8009ac2 <__smakebuf_r+0x46>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	059a      	lsls	r2, r3, #22
 8009ab4:	d4ee      	bmi.n	8009a94 <__smakebuf_r+0x18>
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	e7e2      	b.n	8009a88 <__smakebuf_r+0xc>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	6020      	str	r0, [r4, #0]
 8009ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	9b01      	ldr	r3, [sp, #4]
 8009ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ad2:	b15b      	cbz	r3, 8009aec <__smakebuf_r+0x70>
 8009ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f81d 	bl	8009b18 <_isatty_r>
 8009ade:	b128      	cbz	r0, 8009aec <__smakebuf_r+0x70>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	431d      	orrs	r5, r3
 8009af0:	81a5      	strh	r5, [r4, #12]
 8009af2:	e7cf      	b.n	8009a94 <__smakebuf_r+0x18>

08009af4 <_fstat_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	@ (8009b14 <_fstat_r+0x20>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f7f8 fc8b 	bl	800241c <_fstat>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_fstat_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_fstat_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	20000430 	.word	0x20000430

08009b18 <_isatty_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	@ (8009b34 <_isatty_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f7f8 fc8a 	bl	800243c <_isatty>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_isatty_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_isatty_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20000430 	.word	0x20000430

08009b38 <powf>:
 8009b38:	b508      	push	{r3, lr}
 8009b3a:	ed2d 8b04 	vpush	{d8-d9}
 8009b3e:	eeb0 8a60 	vmov.f32	s16, s1
 8009b42:	eeb0 9a40 	vmov.f32	s18, s0
 8009b46:	f000 f859 	bl	8009bfc <__ieee754_powf>
 8009b4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	eef0 8a40 	vmov.f32	s17, s0
 8009b56:	d63e      	bvs.n	8009bd6 <powf+0x9e>
 8009b58:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b60:	d112      	bne.n	8009b88 <powf+0x50>
 8009b62:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6a:	d039      	beq.n	8009be0 <powf+0xa8>
 8009b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b70:	f000 f839 	bl	8009be6 <finitef>
 8009b74:	b378      	cbz	r0, 8009bd6 <powf+0x9e>
 8009b76:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7e:	d52a      	bpl.n	8009bd6 <powf+0x9e>
 8009b80:	f7fd ff64 	bl	8007a4c <__errno>
 8009b84:	2322      	movs	r3, #34	@ 0x22
 8009b86:	e014      	b.n	8009bb2 <powf+0x7a>
 8009b88:	f000 f82d 	bl	8009be6 <finitef>
 8009b8c:	b998      	cbnz	r0, 8009bb6 <powf+0x7e>
 8009b8e:	eeb0 0a49 	vmov.f32	s0, s18
 8009b92:	f000 f828 	bl	8009be6 <finitef>
 8009b96:	b170      	cbz	r0, 8009bb6 <powf+0x7e>
 8009b98:	eeb0 0a48 	vmov.f32	s0, s16
 8009b9c:	f000 f823 	bl	8009be6 <finitef>
 8009ba0:	b148      	cbz	r0, 8009bb6 <powf+0x7e>
 8009ba2:	eef4 8a68 	vcmp.f32	s17, s17
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	d7e9      	bvc.n	8009b80 <powf+0x48>
 8009bac:	f7fd ff4e 	bl	8007a4c <__errno>
 8009bb0:	2321      	movs	r3, #33	@ 0x21
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	e00f      	b.n	8009bd6 <powf+0x9e>
 8009bb6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbe:	d10a      	bne.n	8009bd6 <powf+0x9e>
 8009bc0:	eeb0 0a49 	vmov.f32	s0, s18
 8009bc4:	f000 f80f 	bl	8009be6 <finitef>
 8009bc8:	b128      	cbz	r0, 8009bd6 <powf+0x9e>
 8009bca:	eeb0 0a48 	vmov.f32	s0, s16
 8009bce:	f000 f80a 	bl	8009be6 <finitef>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1d4      	bne.n	8009b80 <powf+0x48>
 8009bd6:	eeb0 0a68 	vmov.f32	s0, s17
 8009bda:	ecbd 8b04 	vpop	{d8-d9}
 8009bde:	bd08      	pop	{r3, pc}
 8009be0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009be4:	e7f7      	b.n	8009bd6 <powf+0x9e>

08009be6 <finitef>:
 8009be6:	ee10 3a10 	vmov	r3, s0
 8009bea:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009bee:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009bf2:	bfac      	ite	ge
 8009bf4:	2000      	movge	r0, #0
 8009bf6:	2001      	movlt	r0, #1
 8009bf8:	4770      	bx	lr
	...

08009bfc <__ieee754_powf>:
 8009bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c00:	ee10 4a90 	vmov	r4, s1
 8009c04:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009c08:	ed2d 8b02 	vpush	{d8}
 8009c0c:	ee10 6a10 	vmov	r6, s0
 8009c10:	eeb0 8a40 	vmov.f32	s16, s0
 8009c14:	eef0 8a60 	vmov.f32	s17, s1
 8009c18:	d10c      	bne.n	8009c34 <__ieee754_powf+0x38>
 8009c1a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009c1e:	0076      	lsls	r6, r6, #1
 8009c20:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009c24:	f240 829c 	bls.w	800a160 <__ieee754_powf+0x564>
 8009c28:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009c2c:	ecbd 8b02 	vpop	{d8}
 8009c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c34:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009c38:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009c3c:	d802      	bhi.n	8009c44 <__ieee754_powf+0x48>
 8009c3e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c42:	d908      	bls.n	8009c56 <__ieee754_powf+0x5a>
 8009c44:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009c48:	d1ee      	bne.n	8009c28 <__ieee754_powf+0x2c>
 8009c4a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009c4e:	0064      	lsls	r4, r4, #1
 8009c50:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009c54:	e7e6      	b.n	8009c24 <__ieee754_powf+0x28>
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	da1e      	bge.n	8009c98 <__ieee754_powf+0x9c>
 8009c5a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009c5e:	d22b      	bcs.n	8009cb8 <__ieee754_powf+0xbc>
 8009c60:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009c64:	d332      	bcc.n	8009ccc <__ieee754_powf+0xd0>
 8009c66:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009c6a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009c6e:	fa49 f503 	asr.w	r5, r9, r3
 8009c72:	fa05 f303 	lsl.w	r3, r5, r3
 8009c76:	454b      	cmp	r3, r9
 8009c78:	d126      	bne.n	8009cc8 <__ieee754_powf+0xcc>
 8009c7a:	f005 0501 	and.w	r5, r5, #1
 8009c7e:	f1c5 0502 	rsb	r5, r5, #2
 8009c82:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009c86:	d122      	bne.n	8009cce <__ieee754_powf+0xd2>
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	f280 826f 	bge.w	800a16c <__ieee754_powf+0x570>
 8009c8e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009c92:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009c96:	e7c9      	b.n	8009c2c <__ieee754_powf+0x30>
 8009c98:	2500      	movs	r5, #0
 8009c9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c9e:	d1f0      	bne.n	8009c82 <__ieee754_powf+0x86>
 8009ca0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009ca4:	f000 825c 	beq.w	800a160 <__ieee754_powf+0x564>
 8009ca8:	d908      	bls.n	8009cbc <__ieee754_powf+0xc0>
 8009caa:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800a00c <__ieee754_powf+0x410>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	bfa8      	it	ge
 8009cb2:	eeb0 0a68 	vmovge.f32	s0, s17
 8009cb6:	e7b9      	b.n	8009c2c <__ieee754_powf+0x30>
 8009cb8:	2502      	movs	r5, #2
 8009cba:	e7ee      	b.n	8009c9a <__ieee754_powf+0x9e>
 8009cbc:	2c00      	cmp	r4, #0
 8009cbe:	f280 8252 	bge.w	800a166 <__ieee754_powf+0x56a>
 8009cc2:	eeb1 0a68 	vneg.f32	s0, s17
 8009cc6:	e7b1      	b.n	8009c2c <__ieee754_powf+0x30>
 8009cc8:	2500      	movs	r5, #0
 8009cca:	e7da      	b.n	8009c82 <__ieee754_powf+0x86>
 8009ccc:	2500      	movs	r5, #0
 8009cce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009cd2:	d102      	bne.n	8009cda <__ieee754_powf+0xde>
 8009cd4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009cd8:	e7a8      	b.n	8009c2c <__ieee754_powf+0x30>
 8009cda:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009cde:	d109      	bne.n	8009cf4 <__ieee754_powf+0xf8>
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	db07      	blt.n	8009cf4 <__ieee754_powf+0xf8>
 8009ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ce8:	ecbd 8b02 	vpop	{d8}
 8009cec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	f000 bae8 	b.w	800a2c4 <__ieee754_sqrtf>
 8009cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cf8:	f000 fa50 	bl	800a19c <fabsf>
 8009cfc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009d00:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009d04:	4647      	mov	r7, r8
 8009d06:	d002      	beq.n	8009d0e <__ieee754_powf+0x112>
 8009d08:	f1b8 0f00 	cmp.w	r8, #0
 8009d0c:	d117      	bne.n	8009d3e <__ieee754_powf+0x142>
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	bfbc      	itt	lt
 8009d12:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009d16:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009d1a:	2e00      	cmp	r6, #0
 8009d1c:	da86      	bge.n	8009c2c <__ieee754_powf+0x30>
 8009d1e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009d22:	ea58 0805 	orrs.w	r8, r8, r5
 8009d26:	d104      	bne.n	8009d32 <__ieee754_powf+0x136>
 8009d28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009d2c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009d30:	e77c      	b.n	8009c2c <__ieee754_powf+0x30>
 8009d32:	2d01      	cmp	r5, #1
 8009d34:	f47f af7a 	bne.w	8009c2c <__ieee754_powf+0x30>
 8009d38:	eeb1 0a40 	vneg.f32	s0, s0
 8009d3c:	e776      	b.n	8009c2c <__ieee754_powf+0x30>
 8009d3e:	0ff0      	lsrs	r0, r6, #31
 8009d40:	3801      	subs	r0, #1
 8009d42:	ea55 0300 	orrs.w	r3, r5, r0
 8009d46:	d104      	bne.n	8009d52 <__ieee754_powf+0x156>
 8009d48:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009d4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009d50:	e76c      	b.n	8009c2c <__ieee754_powf+0x30>
 8009d52:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009d56:	d973      	bls.n	8009e40 <__ieee754_powf+0x244>
 8009d58:	4bad      	ldr	r3, [pc, #692]	@ (800a010 <__ieee754_powf+0x414>)
 8009d5a:	4598      	cmp	r8, r3
 8009d5c:	d808      	bhi.n	8009d70 <__ieee754_powf+0x174>
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	da0b      	bge.n	8009d7a <__ieee754_powf+0x17e>
 8009d62:	2000      	movs	r0, #0
 8009d64:	ecbd 8b02 	vpop	{d8}
 8009d68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6c:	f000 baa4 	b.w	800a2b8 <__math_oflowf>
 8009d70:	4ba8      	ldr	r3, [pc, #672]	@ (800a014 <__ieee754_powf+0x418>)
 8009d72:	4598      	cmp	r8, r3
 8009d74:	d908      	bls.n	8009d88 <__ieee754_powf+0x18c>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	dcf3      	bgt.n	8009d62 <__ieee754_powf+0x166>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	ecbd 8b02 	vpop	{d8}
 8009d80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	f000 ba92 	b.w	800a2ac <__math_uflowf>
 8009d88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009d8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d90:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800a018 <__ieee754_powf+0x41c>
 8009d94:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009d98:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009d9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009da0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009da4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dac:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800a01c <__ieee754_powf+0x420>
 8009db0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009db4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a020 <__ieee754_powf+0x424>
 8009db8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009dbc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800a024 <__ieee754_powf+0x428>
 8009dc0:	eef0 6a67 	vmov.f32	s13, s15
 8009dc4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009dc8:	ee16 3a90 	vmov	r3, s13
 8009dcc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009dd0:	f023 030f 	bic.w	r3, r3, #15
 8009dd4:	ee06 3a90 	vmov	s13, r3
 8009dd8:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009ddc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009de0:	3d01      	subs	r5, #1
 8009de2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8009de6:	4305      	orrs	r5, r0
 8009de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dec:	f024 040f 	bic.w	r4, r4, #15
 8009df0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009df4:	bf18      	it	ne
 8009df6:	eeb0 8a47 	vmovne.f32	s16, s14
 8009dfa:	ee07 4a10 	vmov	s14, r4
 8009dfe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009e02:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009e0e:	ee07 4a10 	vmov	s14, r4
 8009e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e16:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009e1a:	ee17 1a10 	vmov	r1, s14
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009e24:	f340 80dd 	ble.w	8009fe2 <__ieee754_powf+0x3e6>
 8009e28:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009e2c:	f240 80ca 	bls.w	8009fc4 <__ieee754_powf+0x3c8>
 8009e30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e38:	bf4c      	ite	mi
 8009e3a:	2001      	movmi	r0, #1
 8009e3c:	2000      	movpl	r0, #0
 8009e3e:	e791      	b.n	8009d64 <__ieee754_powf+0x168>
 8009e40:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009e44:	bf01      	itttt	eq
 8009e46:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800a028 <__ieee754_powf+0x42c>
 8009e4a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009e4e:	f06f 0317 	mvneq.w	r3, #23
 8009e52:	ee17 7a90 	vmoveq	r7, s15
 8009e56:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8009e5a:	bf18      	it	ne
 8009e5c:	2300      	movne	r3, #0
 8009e5e:	3a7f      	subs	r2, #127	@ 0x7f
 8009e60:	441a      	add	r2, r3
 8009e62:	4b72      	ldr	r3, [pc, #456]	@ (800a02c <__ieee754_powf+0x430>)
 8009e64:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009e68:	429f      	cmp	r7, r3
 8009e6a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8009e6e:	dd06      	ble.n	8009e7e <__ieee754_powf+0x282>
 8009e70:	4b6f      	ldr	r3, [pc, #444]	@ (800a030 <__ieee754_powf+0x434>)
 8009e72:	429f      	cmp	r7, r3
 8009e74:	f340 80a4 	ble.w	8009fc0 <__ieee754_powf+0x3c4>
 8009e78:	3201      	adds	r2, #1
 8009e7a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009e7e:	2600      	movs	r6, #0
 8009e80:	4b6c      	ldr	r3, [pc, #432]	@ (800a034 <__ieee754_powf+0x438>)
 8009e82:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009e86:	ee07 1a10 	vmov	s14, r1
 8009e8a:	edd3 5a00 	vldr	s11, [r3]
 8009e8e:	4b6a      	ldr	r3, [pc, #424]	@ (800a038 <__ieee754_powf+0x43c>)
 8009e90:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e98:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009e9c:	1049      	asrs	r1, r1, #1
 8009e9e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009ea2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009ea6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009eaa:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009eae:	ee07 1a90 	vmov	s15, r1
 8009eb2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009eb6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009eba:	ee15 7a10 	vmov	r7, s10
 8009ebe:	401f      	ands	r7, r3
 8009ec0:	ee06 7a90 	vmov	s13, r7
 8009ec4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009ec8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009ecc:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009ed0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009ed4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a03c <__ieee754_powf+0x440>
 8009ed8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a040 <__ieee754_powf+0x444>
 8009edc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009ee0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a044 <__ieee754_powf+0x448>
 8009ee4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009ee8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800a018 <__ieee754_powf+0x41c>
 8009eec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009ef0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a048 <__ieee754_powf+0x44c>
 8009ef4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009ef8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a04c <__ieee754_powf+0x450>
 8009efc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009f00:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009f04:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009f08:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009f0c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009f10:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009f14:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009f18:	eef0 5a67 	vmov.f32	s11, s15
 8009f1c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009f20:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009f24:	ee15 1a90 	vmov	r1, s11
 8009f28:	4019      	ands	r1, r3
 8009f2a:	ee05 1a90 	vmov	s11, r1
 8009f2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009f32:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f3a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009f3e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009f42:	eeb0 6a67 	vmov.f32	s12, s15
 8009f46:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009f4a:	ee16 1a10 	vmov	r1, s12
 8009f4e:	4019      	ands	r1, r3
 8009f50:	ee06 1a10 	vmov	s12, r1
 8009f54:	eeb0 7a46 	vmov.f32	s14, s12
 8009f58:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009f5c:	493c      	ldr	r1, [pc, #240]	@ (800a050 <__ieee754_powf+0x454>)
 8009f5e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f66:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a054 <__ieee754_powf+0x458>
 8009f6a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a058 <__ieee754_powf+0x45c>
 8009f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f72:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a05c <__ieee754_powf+0x460>
 8009f76:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f7a:	ed91 7a00 	vldr	s14, [r1]
 8009f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f82:	ee07 2a10 	vmov	s14, r2
 8009f86:	eef0 6a67 	vmov.f32	s13, s15
 8009f8a:	4a35      	ldr	r2, [pc, #212]	@ (800a060 <__ieee754_powf+0x464>)
 8009f8c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009f90:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009f94:	ed92 5a00 	vldr	s10, [r2]
 8009f98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009fa0:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009fa4:	ee16 2a90 	vmov	r2, s13
 8009fa8:	4013      	ands	r3, r2
 8009faa:	ee06 3a90 	vmov	s13, r3
 8009fae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009fb2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009fb6:	eea6 7a65 	vfms.f32	s14, s12, s11
 8009fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fbe:	e70f      	b.n	8009de0 <__ieee754_powf+0x1e4>
 8009fc0:	2601      	movs	r6, #1
 8009fc2:	e75d      	b.n	8009e80 <__ieee754_powf+0x284>
 8009fc4:	d152      	bne.n	800a06c <__ieee754_powf+0x470>
 8009fc6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a064 <__ieee754_powf+0x468>
 8009fca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fce:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009fd2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fda:	f73f af29 	bgt.w	8009e30 <__ieee754_powf+0x234>
 8009fde:	2386      	movs	r3, #134	@ 0x86
 8009fe0:	e048      	b.n	800a074 <__ieee754_powf+0x478>
 8009fe2:	4a21      	ldr	r2, [pc, #132]	@ (800a068 <__ieee754_powf+0x46c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d907      	bls.n	8009ff8 <__ieee754_powf+0x3fc>
 8009fe8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff0:	bf4c      	ite	mi
 8009ff2:	2001      	movmi	r0, #1
 8009ff4:	2000      	movpl	r0, #0
 8009ff6:	e6c1      	b.n	8009d7c <__ieee754_powf+0x180>
 8009ff8:	d138      	bne.n	800a06c <__ieee754_powf+0x470>
 8009ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ffe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a006:	dbea      	blt.n	8009fde <__ieee754_powf+0x3e2>
 800a008:	e7ee      	b.n	8009fe8 <__ieee754_powf+0x3ec>
 800a00a:	bf00      	nop
 800a00c:	00000000 	.word	0x00000000
 800a010:	3f7ffff3 	.word	0x3f7ffff3
 800a014:	3f800007 	.word	0x3f800007
 800a018:	3eaaaaab 	.word	0x3eaaaaab
 800a01c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a020:	36eca570 	.word	0x36eca570
 800a024:	3fb8aa00 	.word	0x3fb8aa00
 800a028:	4b800000 	.word	0x4b800000
 800a02c:	001cc471 	.word	0x001cc471
 800a030:	005db3d6 	.word	0x005db3d6
 800a034:	0800a760 	.word	0x0800a760
 800a038:	fffff000 	.word	0xfffff000
 800a03c:	3e6c3255 	.word	0x3e6c3255
 800a040:	3e53f142 	.word	0x3e53f142
 800a044:	3e8ba305 	.word	0x3e8ba305
 800a048:	3edb6db7 	.word	0x3edb6db7
 800a04c:	3f19999a 	.word	0x3f19999a
 800a050:	0800a750 	.word	0x0800a750
 800a054:	3f76384f 	.word	0x3f76384f
 800a058:	3f763800 	.word	0x3f763800
 800a05c:	369dc3a0 	.word	0x369dc3a0
 800a060:	0800a758 	.word	0x0800a758
 800a064:	3338aa3c 	.word	0x3338aa3c
 800a068:	43160000 	.word	0x43160000
 800a06c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a070:	d971      	bls.n	800a156 <__ieee754_powf+0x55a>
 800a072:	15db      	asrs	r3, r3, #23
 800a074:	3b7e      	subs	r3, #126	@ 0x7e
 800a076:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a07a:	4118      	asrs	r0, r3
 800a07c:	4408      	add	r0, r1
 800a07e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a082:	4a3c      	ldr	r2, [pc, #240]	@ (800a174 <__ieee754_powf+0x578>)
 800a084:	3b7f      	subs	r3, #127	@ 0x7f
 800a086:	411a      	asrs	r2, r3
 800a088:	4002      	ands	r2, r0
 800a08a:	ee07 2a10 	vmov	s14, r2
 800a08e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a092:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a096:	f1c3 0317 	rsb	r3, r3, #23
 800a09a:	4118      	asrs	r0, r3
 800a09c:	2900      	cmp	r1, #0
 800a09e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0a2:	bfb8      	it	lt
 800a0a4:	4240      	neglt	r0, r0
 800a0a6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a0aa:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a178 <__ieee754_powf+0x57c>
 800a0ae:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800a17c <__ieee754_powf+0x580>
 800a0b2:	ee17 3a10 	vmov	r3, s14
 800a0b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a0ba:	f023 030f 	bic.w	r3, r3, #15
 800a0be:	ee07 3a10 	vmov	s14, r3
 800a0c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0c6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a0ca:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a0ce:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800a180 <__ieee754_powf+0x584>
 800a0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a0da:	eef0 6a67 	vmov.f32	s13, s15
 800a0de:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a0e2:	eef0 5a66 	vmov.f32	s11, s13
 800a0e6:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a0ea:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a0ee:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a0f2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800a184 <__ieee754_powf+0x588>
 800a0f6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800a188 <__ieee754_powf+0x58c>
 800a0fa:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a0fe:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800a18c <__ieee754_powf+0x590>
 800a102:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a106:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a190 <__ieee754_powf+0x594>
 800a10a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a10e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800a194 <__ieee754_powf+0x598>
 800a112:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a116:	eeb0 6a66 	vmov.f32	s12, s13
 800a11a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a11e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a122:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a126:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a12a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a12e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a132:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a136:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a13a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a13e:	ee10 3a10 	vmov	r3, s0
 800a142:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a146:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a14a:	da06      	bge.n	800a15a <__ieee754_powf+0x55e>
 800a14c:	f000 f82e 	bl	800a1ac <scalbnf>
 800a150:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a154:	e56a      	b.n	8009c2c <__ieee754_powf+0x30>
 800a156:	2000      	movs	r0, #0
 800a158:	e7a5      	b.n	800a0a6 <__ieee754_powf+0x4aa>
 800a15a:	ee00 3a10 	vmov	s0, r3
 800a15e:	e7f7      	b.n	800a150 <__ieee754_powf+0x554>
 800a160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a164:	e562      	b.n	8009c2c <__ieee754_powf+0x30>
 800a166:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a198 <__ieee754_powf+0x59c>
 800a16a:	e55f      	b.n	8009c2c <__ieee754_powf+0x30>
 800a16c:	eeb0 0a48 	vmov.f32	s0, s16
 800a170:	e55c      	b.n	8009c2c <__ieee754_powf+0x30>
 800a172:	bf00      	nop
 800a174:	ff800000 	.word	0xff800000
 800a178:	3f317218 	.word	0x3f317218
 800a17c:	3f317200 	.word	0x3f317200
 800a180:	35bfbe8c 	.word	0x35bfbe8c
 800a184:	b5ddea0e 	.word	0xb5ddea0e
 800a188:	3331bb4c 	.word	0x3331bb4c
 800a18c:	388ab355 	.word	0x388ab355
 800a190:	bb360b61 	.word	0xbb360b61
 800a194:	3e2aaaab 	.word	0x3e2aaaab
 800a198:	00000000 	.word	0x00000000

0800a19c <fabsf>:
 800a19c:	ee10 3a10 	vmov	r3, s0
 800a1a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1a4:	ee00 3a10 	vmov	s0, r3
 800a1a8:	4770      	bx	lr
	...

0800a1ac <scalbnf>:
 800a1ac:	ee10 3a10 	vmov	r3, s0
 800a1b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a1b4:	d02b      	beq.n	800a20e <scalbnf+0x62>
 800a1b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a1ba:	d302      	bcc.n	800a1c2 <scalbnf+0x16>
 800a1bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1c0:	4770      	bx	lr
 800a1c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a1c6:	d123      	bne.n	800a210 <scalbnf+0x64>
 800a1c8:	4b24      	ldr	r3, [pc, #144]	@ (800a25c <scalbnf+0xb0>)
 800a1ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a260 <scalbnf+0xb4>
 800a1ce:	4298      	cmp	r0, r3
 800a1d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a1d4:	db17      	blt.n	800a206 <scalbnf+0x5a>
 800a1d6:	ee10 3a10 	vmov	r3, s0
 800a1da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a1de:	3a19      	subs	r2, #25
 800a1e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a1e4:	4288      	cmp	r0, r1
 800a1e6:	dd15      	ble.n	800a214 <scalbnf+0x68>
 800a1e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a264 <scalbnf+0xb8>
 800a1ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a268 <scalbnf+0xbc>
 800a1f0:	ee10 3a10 	vmov	r3, s0
 800a1f4:	eeb0 7a67 	vmov.f32	s14, s15
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bfb8      	it	lt
 800a1fc:	eef0 7a66 	vmovlt.f32	s15, s13
 800a200:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a204:	4770      	bx	lr
 800a206:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a26c <scalbnf+0xc0>
 800a20a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a20e:	4770      	bx	lr
 800a210:	0dd2      	lsrs	r2, r2, #23
 800a212:	e7e5      	b.n	800a1e0 <scalbnf+0x34>
 800a214:	4410      	add	r0, r2
 800a216:	28fe      	cmp	r0, #254	@ 0xfe
 800a218:	dce6      	bgt.n	800a1e8 <scalbnf+0x3c>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	dd06      	ble.n	800a22c <scalbnf+0x80>
 800a21e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a222:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a226:	ee00 3a10 	vmov	s0, r3
 800a22a:	4770      	bx	lr
 800a22c:	f110 0f16 	cmn.w	r0, #22
 800a230:	da09      	bge.n	800a246 <scalbnf+0x9a>
 800a232:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a26c <scalbnf+0xc0>
 800a236:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a270 <scalbnf+0xc4>
 800a23a:	ee10 3a10 	vmov	r3, s0
 800a23e:	eeb0 7a67 	vmov.f32	s14, s15
 800a242:	2b00      	cmp	r3, #0
 800a244:	e7d9      	b.n	800a1fa <scalbnf+0x4e>
 800a246:	3019      	adds	r0, #25
 800a248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a24c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a274 <scalbnf+0xc8>
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	e7d7      	b.n	800a20a <scalbnf+0x5e>
 800a25a:	bf00      	nop
 800a25c:	ffff3cb0 	.word	0xffff3cb0
 800a260:	4c000000 	.word	0x4c000000
 800a264:	7149f2ca 	.word	0x7149f2ca
 800a268:	f149f2ca 	.word	0xf149f2ca
 800a26c:	0da24260 	.word	0x0da24260
 800a270:	8da24260 	.word	0x8da24260
 800a274:	33000000 	.word	0x33000000

0800a278 <with_errnof>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	ed2d 8b02 	vpush	{d8}
 800a27e:	eeb0 8a40 	vmov.f32	s16, s0
 800a282:	4604      	mov	r4, r0
 800a284:	f7fd fbe2 	bl	8007a4c <__errno>
 800a288:	eeb0 0a48 	vmov.f32	s0, s16
 800a28c:	ecbd 8b02 	vpop	{d8}
 800a290:	6004      	str	r4, [r0, #0]
 800a292:	bd10      	pop	{r4, pc}

0800a294 <xflowf>:
 800a294:	b130      	cbz	r0, 800a2a4 <xflowf+0x10>
 800a296:	eef1 7a40 	vneg.f32	s15, s0
 800a29a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a29e:	2022      	movs	r0, #34	@ 0x22
 800a2a0:	f7ff bfea 	b.w	800a278 <with_errnof>
 800a2a4:	eef0 7a40 	vmov.f32	s15, s0
 800a2a8:	e7f7      	b.n	800a29a <xflowf+0x6>
	...

0800a2ac <__math_uflowf>:
 800a2ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a2b4 <__math_uflowf+0x8>
 800a2b0:	f7ff bff0 	b.w	800a294 <xflowf>
 800a2b4:	10000000 	.word	0x10000000

0800a2b8 <__math_oflowf>:
 800a2b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a2c0 <__math_oflowf+0x8>
 800a2bc:	f7ff bfea 	b.w	800a294 <xflowf>
 800a2c0:	70000000 	.word	0x70000000

0800a2c4 <__ieee754_sqrtf>:
 800a2c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a2c8:	4770      	bx	lr
	...

0800a2cc <_init>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <_fini>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr
