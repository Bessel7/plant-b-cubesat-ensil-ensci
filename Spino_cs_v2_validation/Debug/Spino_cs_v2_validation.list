
Spino_cs_v2_validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010648  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  080107e8  080107e8  000117e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011338  08011338  00014104  2**0
                  CONTENTS
  4 .ARM          00000008  08011338  08011338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011340  08011340  00014104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011340  08011340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011344  08011344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001104  20000000  08011348  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002088c  20001108  0801244c  00014108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20021994  0801244c  00014994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002028a  00000000  00000000  00014134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004db3  00000000  00000000  000343be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00039178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001511  00000000  00000000  0003ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d2c5  00000000  00000000  0003c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b05  00000000  00000000  0006946e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011349b  00000000  00000000  0008cf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a040e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008380  00000000  00000000  001a0454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a87d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001108 	.word	0x20001108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080107d0 	.word	0x080107d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000110c 	.word	0x2000110c
 80001dc:	080107d0 	.word	0x080107d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <SPI_Write>:
 */


extern SPI_HandleTypeDef hspi3;

void SPI_Write(SPI_HandleTypeDef * hspi, uint8_t * data, uint16_t len) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	4613      	mov	r3, r2
 8000f54:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, UHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f006 fe86 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f006 fb6b 	bl	8007640 <HAL_Delay>
	HAL_SPI_Transmit(hspi, data, len, SPI3_TOUT);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f00a fa07 	bl	800b386 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f006 fb61 	bl	8007640 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, UHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f88:	f006 fe72 	bl	8007c70 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SPI_ReadWrite>:

void SPI_ReadWrite(SPI_HandleTypeDef * hspi, uint8_t * data, uint8_t * rbuff, uint16_t len) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOA, UHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fac:	f006 fe60 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f006 fb45 	bl	8007640 <HAL_Delay>
	HAL_SPI_TransmitReceive(hspi, data, rbuff, len, SPI3_TOUT);
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fbc:	9200      	str	r2, [sp, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f00a fb55 	bl	800b672 <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f006 fb39 	bl	8007640 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, UHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f006 fe4a 	bl	8007c70 <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <adf_check_ready>:

void adf_check_ready(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t tx_data = ADF_NOP;
 8000fea:	23ff      	movs	r3, #255	@ 0xff
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71bb      	strb	r3, [r7, #6]

	do {
		SPI_ReadWrite(&hspi3, &tx_data, &rx_buff, 1);
 8000ff2:	1dba      	adds	r2, r7, #6
 8000ff4:	1df9      	adds	r1, r7, #7
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4806      	ldr	r0, [pc, #24]	@ (8001014 <adf_check_ready+0x30>)
 8000ffa:	f7ff ffcb 	bl	8000f94 <SPI_ReadWrite>
	} while((rx_buff & ADF_CMD_RDY_FLAG) == 0);
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f4      	beq.n	8000ff2 <adf_check_ready+0xe>
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20001858 	.word	0x20001858

08001018 <adf_read_reg>:

uint32_t adf_read_reg(uint32_t reg_addr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[11];
	uint8_t rx_buff[11];
	uint8_t length = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	tx_buff[length++] = ADF_READ_REG32_CMD;
 8001026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8001030:	3328      	adds	r3, #40	@ 0x28
 8001032:	443b      	add	r3, r7
 8001034:	2278      	movs	r2, #120	@ 0x78
 8001036:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = (reg_addr >> 24) & 0xFF;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0e1a      	lsrs	r2, r3, #24
 800103e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001042:	1c59      	adds	r1, r3, #1
 8001044:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	3328      	adds	r3, #40	@ 0x28
 800104c:	443b      	add	r3, r7
 800104e:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = (reg_addr >> 16) & 0xFF;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0c1a      	lsrs	r2, r3, #16
 8001056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	3328      	adds	r3, #40	@ 0x28
 8001064:	443b      	add	r3, r7
 8001066:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = (reg_addr >> 8) & 0xFF;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0a1a      	lsrs	r2, r3, #8
 800106e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001072:	1c59      	adds	r1, r3, #1
 8001074:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	3328      	adds	r3, #40	@ 0x28
 800107c:	443b      	add	r3, r7
 800107e:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = reg_addr & 0xFF;
 8001082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	3328      	adds	r3, #40	@ 0x28
 8001092:	443b      	add	r3, r7
 8001094:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //wait
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010a2:	3328      	adds	r3, #40	@ 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	22ff      	movs	r2, #255	@ 0xff
 80010a8:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //wait
 80010ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010b6:	3328      	adds	r3, #40	@ 0x28
 80010b8:	443b      	add	r3, r7
 80010ba:	22ff      	movs	r2, #255	@ 0xff
 80010bc:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //read data
 80010c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010ca:	3328      	adds	r3, #40	@ 0x28
 80010cc:	443b      	add	r3, r7
 80010ce:	22ff      	movs	r2, #255	@ 0xff
 80010d0:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //read data
 80010d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010de:	3328      	adds	r3, #40	@ 0x28
 80010e0:	443b      	add	r3, r7
 80010e2:	22ff      	movs	r2, #255	@ 0xff
 80010e4:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //read data
 80010e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010f2:	3328      	adds	r3, #40	@ 0x28
 80010f4:	443b      	add	r3, r7
 80010f6:	22ff      	movs	r2, #255	@ 0xff
 80010f8:	f803 2c14 	strb.w	r2, [r3, #-20]
	tx_buff[length++] = 0xFF; //read data
 80010fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8001106:	3328      	adds	r3, #40	@ 0x28
 8001108:	443b      	add	r3, r7
 800110a:	22ff      	movs	r2, #255	@ 0xff
 800110c:	f803 2c14 	strb.w	r2, [r3, #-20]

	adf_check_ready();
 8001110:	f7ff ff68 	bl	8000fe4 <adf_check_ready>

	SPI_ReadWrite(&hspi3, tx_buff, rx_buff, length);
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	b29b      	uxth	r3, r3
 800111a:	f107 0208 	add.w	r2, r7, #8
 800111e:	f107 0114 	add.w	r1, r7, #20
 8001122:	4809      	ldr	r0, [pc, #36]	@ (8001148 <adf_read_reg+0x130>)
 8001124:	f7ff ff36 	bl	8000f94 <SPI_ReadWrite>

	uint32_t rval = ((uint32_t) rx_buff[7] << 24) |  ((uint32_t) rx_buff[8] << 16) |  (uint32_t) (rx_buff[9] << 8) | ((uint32_t) rx_buff[10]);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	061a      	lsls	r2, r3, #24
 800112c:	7c3b      	ldrb	r3, [r7, #16]
 800112e:	041b      	lsls	r3, r3, #16
 8001130:	431a      	orrs	r2, r3
 8001132:	7c7b      	ldrb	r3, [r7, #17]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	4313      	orrs	r3, r2
 8001138:	7cba      	ldrb	r2, [r7, #18]
 800113a:	4313      	orrs	r3, r2
 800113c:	623b      	str	r3, [r7, #32]

	return rval;
 800113e:	6a3b      	ldr	r3, [r7, #32]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20001858 	.word	0x20001858

0800114c <adf_write_reg>:

void adf_write_reg(uint32_t reg_addr, uint32_t reg_val)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	uint8_t tx_buff[9];
	uint8_t length = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]

	tx_buff[length++] = ADF_WRITE_REG32_CMD;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	75fa      	strb	r2, [r7, #23]
 8001160:	3318      	adds	r3, #24
 8001162:	443b      	add	r3, r7
 8001164:	2238      	movs	r2, #56	@ 0x38
 8001166:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_addr >> 24) & 0xFF);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0e1a      	lsrs	r2, r3, #24
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	1c59      	adds	r1, r3, #1
 8001172:	75f9      	strb	r1, [r7, #23]
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	3318      	adds	r3, #24
 8001178:	443b      	add	r3, r7
 800117a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_addr >> 16) & 0xFF);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0c1a      	lsrs	r2, r3, #16
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	75f9      	strb	r1, [r7, #23]
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	3318      	adds	r3, #24
 800118c:	443b      	add	r3, r7
 800118e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_addr >> 8) & 0xFF);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0a1a      	lsrs	r2, r3, #8
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	1c59      	adds	r1, r3, #1
 800119a:	75f9      	strb	r1, [r7, #23]
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	3318      	adds	r3, #24
 80011a0:	443b      	add	r3, r7
 80011a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) (reg_addr & 0xFF);
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	75fa      	strb	r2, [r7, #23]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	3318      	adds	r3, #24
 80011b2:	443b      	add	r3, r7
 80011b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_val >> 24) & 0xFF);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	0e1a      	lsrs	r2, r3, #24
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	75f9      	strb	r1, [r7, #23]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3318      	adds	r3, #24
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_val >> 16) & 0xFF);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	0c1a      	lsrs	r2, r3, #16
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	1c59      	adds	r1, r3, #1
 80011d4:	75f9      	strb	r1, [r7, #23]
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	3318      	adds	r3, #24
 80011da:	443b      	add	r3, r7
 80011dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) ((reg_val >> 8) & 0xFF);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	0a1a      	lsrs	r2, r3, #8
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	75f9      	strb	r1, [r7, #23]
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	3318      	adds	r3, #24
 80011ee:	443b      	add	r3, r7
 80011f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	tx_buff[length++] = (uint8_t) (reg_val & 0xFF);
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	75fa      	strb	r2, [r7, #23]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	3318      	adds	r3, #24
 8001200:	443b      	add	r3, r7
 8001202:	f803 2c0c 	strb.w	r2, [r3, #-12]

	adf_check_ready();
 8001206:	f7ff feed 	bl	8000fe4 <adf_check_ready>

	SPI_Write(&hspi3, tx_buff, length);
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	b29a      	uxth	r2, r3
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <adf_write_reg+0xd8>)
 8001216:	f7ff fe97 	bl	8000f48 <SPI_Write>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20001858 	.word	0x20001858

08001228 <adf_conf_pin>:

void adf_conf_pin() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	uint32_t reg_val = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]

	reg_val = adf_read_reg(PROFILE_GPCON4_7);
 8001232:	480f      	ldr	r0, [pc, #60]	@ (8001270 <adf_conf_pin+0x48>)
 8001234:	f7ff fef0 	bl	8001018 <adf_read_reg>
 8001238:	60f8      	str	r0, [r7, #12]

	uint32_t gp6_mask = GPIO6_MASK;
 800123a:	f44f 137c 	mov.w	r3, #4128768	@ 0x3f0000
 800123e:	60bb      	str	r3, [r7, #8]
	uint32_t gp7_mask = GPIO7_MASK;
 8001240:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001244:	607b      	str	r3, [r7, #4]

	reg_val = (reg_val & ~gp6_mask) | (reg_val & ~gp7_mask);
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4013      	ands	r3, r2
 800124c:	43db      	mvns	r3, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
	reg_val = reg_val | GPIO7_OUTPUT << GPIO7_SHIFT | GPIO6_OUTPUT << GPIO6_SHIFT;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 53f8 	orr.w	r3, r3, #520093696	@ 0x1f000000
 800125a:	f443 13f0 	orr.w	r3, r3, #1966080	@ 0x1e0000
 800125e:	60fb      	str	r3, [r7, #12]

	adf_write_reg(PROFILE_GPCON4_7, reg_val);
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	4803      	ldr	r0, [pc, #12]	@ (8001270 <adf_conf_pin+0x48>)
 8001264:	f7ff ff72 	bl	800114c <adf_write_reg>

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000398 	.word	0x20000398

08001274 <adf_send_confblob>:
	regVal = adf_read_reg(ADDR_GENERIC_PKT_TEST_MODES0);
	regVal = (regVal & ~MASK_TX_TEST) | ((uint32_t) TEST_DISABLED << POS_TX_TEST);
	adf_write_reg(ADDR_GENERIC_PKT_TEST_MODES0, regVal);
}

uint8_t adf_send_confblob(uint8_t mode) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]

    uint32_t array_position = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]

    uint8_t* ar_conf_adf7030=NULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]

    uint8_t nb_step = 11;
 8001286:	230b      	movs	r3, #11
 8001288:	75bb      	strb	r3, [r7, #22]
    uint8_t cur_step = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]

    switch ( mode )
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d817      	bhi.n	80012c4 <adf_send_confblob+0x50>
 8001294:	a201      	add	r2, pc, #4	@ (adr r2, 800129c <adf_send_confblob+0x28>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012ad 	.word	0x080012ad
 80012a0:	080012b3 	.word	0x080012b3
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	080012bf 	.word	0x080012bf
    {
        case 0:
        	ar_conf_adf7030=ar_conf_adf7030_mode0;
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <adf_send_confblob+0xc4>)
 80012ae:	61bb      	str	r3, [r7, #24]
            break;
 80012b0:	e00a      	b.n	80012c8 <adf_send_confblob+0x54>
        case 1:
        	ar_conf_adf7030=ar_conf_adf7030_mode1;
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <adf_send_confblob+0xc8>)
 80012b4:	61bb      	str	r3, [r7, #24]
            break;
 80012b6:	e007      	b.n	80012c8 <adf_send_confblob+0x54>
        case 2:
            ar_conf_adf7030=ar_conf_adf7030_mode2;
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <adf_send_confblob+0xcc>)
 80012ba:	61bb      	str	r3, [r7, #24]
            break;
 80012bc:	e004      	b.n	80012c8 <adf_send_confblob+0x54>
        case 3:
            ar_conf_adf7030=ar_conf_adf7030_mode3;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <adf_send_confblob+0xd0>)
 80012c0:	61bb      	str	r3, [r7, #24]
            break;
 80012c2:	e001      	b.n	80012c8 <adf_send_confblob+0x54>
        default:
        	ar_conf_adf7030=ar_conf_adf7030_mode0;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <adf_send_confblob+0xc4>)
 80012c6:	61bb      	str	r3, [r7, #24]
    }

    do
    {
      // Calculate the number of bytes to write
      uint32_t length =  (*(ar_conf_adf7030 + array_position ) << 16) |
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	041a      	lsls	r2, r3, #16
                         (*(ar_conf_adf7030 + array_position + 1) << 8) |
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	440b      	add	r3, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	021b      	lsls	r3, r3, #8
      uint32_t length =  (*(ar_conf_adf7030 + array_position ) << 16) |
 80012de:	4313      	orrs	r3, r2
                         (*(ar_conf_adf7030 + array_position + 2));
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	3202      	adds	r2, #2
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	440a      	add	r2, r1
 80012e8:	7812      	ldrb	r2, [r2, #0]
                         (*(ar_conf_adf7030 + array_position + 1) << 8) |
 80012ea:	4313      	orrs	r3, r2
      uint32_t length =  (*(ar_conf_adf7030 + array_position ) << 16) |
 80012ec:	613b      	str	r3, [r7, #16]

      if(length > 0xFFFF)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f4:	d301      	bcc.n	80012fa <adf_send_confblob+0x86>
      {
         return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e019      	b.n	800132e <adf_send_confblob+0xba>
      }

      // Write the SPI data pointed to location (MEMORY_FILE + array_position) with specified length (length)
      uint8_t * pSeqData = (ar_conf_adf7030 + array_position + 3);
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3303      	adds	r3, #3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

      SPI_Write(&hspi3, pSeqData, length-3);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	b29b      	uxth	r3, r3
 8001308:	3b03      	subs	r3, #3
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	68f9      	ldr	r1, [r7, #12]
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <adf_send_confblob+0xd4>)
 8001312:	f7ff fe19 	bl	8000f48 <SPI_Write>

      // Update the array position to point to the next block
      array_position += length;
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	61fb      	str	r3, [r7, #28]
      cur_step++;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	3301      	adds	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]

    } while(cur_step < nb_step); //while(array_position < size); // Continue operation until full data file has been written
 8001324:	7dfa      	ldrb	r2, [r7, #23]
 8001326:	7dbb      	ldrb	r3, [r7, #22]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3cd      	bcc.n	80012c8 <adf_send_confblob+0x54>

    return 1;
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000
 800133c:	200002d8 	.word	0x200002d8
 8001340:	200005b0 	.word	0x200005b0
 8001344:	20000888 	.word	0x20000888
 8001348:	20001858 	.word	0x20001858

0800134c <config_ADF7030>:

void config_ADF7030(uint8_t mode) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]

	// Power the UHF rail
	HAL_GPIO_WritePin(GPIOA, UHF_PWR_EN_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f006 fc86 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, UHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800136a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136e:	f006 fc7f 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, UHF_FE_EN_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f006 fc78 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001380:	2032      	movs	r0, #50	@ 0x32
 8001382:	f006 f95d 	bl	8007640 <HAL_Delay>

	// Reset ADF7030
	HAL_GPIO_WritePin(GPIOA, UHF_NRST_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f006 fc6e 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f006 f953 	bl	8007640 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, UHF_NRST_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f006 fc64 	bl	8007c70 <HAL_GPIO_WritePin>

	// Need to wait the MISO signal before starting
	// Need to add a max retry to avoid being stuck
	uint8_t started = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	uint8_t tx = 0xFF;
 80013ac:	23ff      	movs	r3, #255	@ 0xff
 80013ae:	73bb      	strb	r3, [r7, #14]

	do {
		SPI_ReadWrite(&hspi3, &tx, &started, 1);
 80013b0:	f107 020f 	add.w	r2, r7, #15
 80013b4:	f107 010e 	add.w	r1, r7, #14
 80013b8:	2301      	movs	r3, #1
 80013ba:	4815      	ldr	r0, [pc, #84]	@ (8001410 <config_ADF7030+0xc4>)
 80013bc:	f7ff fdea 	bl	8000f94 <SPI_ReadWrite>
	} while (!started);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f4      	beq.n	80013b0 <config_ADF7030+0x64>

	adf_check_ready();
 80013c6:	f7ff fe0d 	bl	8000fe4 <adf_check_ready>

	// Put the ADF7030 in "OFF State" see DS p44
	uint8_t off = ADF_PHY_OFF;
 80013ca:	2381      	movs	r3, #129	@ 0x81
 80013cc:	737b      	strb	r3, [r7, #13]
	SPI_Write(&hspi3, &off, 1);
 80013ce:	f107 030d 	add.w	r3, r7, #13
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <config_ADF7030+0xc4>)
 80013d8:	f7ff fdb6 	bl	8000f48 <SPI_Write>
	// Set GPIO
	adf_conf_pin();
 80013dc:	f7ff ff24 	bl	8001228 <adf_conf_pin>

	adf_check_ready();
 80013e0:	f7ff fe00 	bl	8000fe4 <adf_check_ready>

	// Send configuration file
	adf_send_confblob(mode);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff44 	bl	8001274 <adf_send_confblob>

	adf_check_ready();
 80013ec:	f7ff fdfa 	bl	8000fe4 <adf_check_ready>

	// Issue CMD_CFG_DEV
	uint8_t conf = ADF_PHY_CONF;
 80013f0:	2385      	movs	r3, #133	@ 0x85
 80013f2:	733b      	strb	r3, [r7, #12]
	SPI_Write(&hspi3, &conf, 1);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <config_ADF7030+0xc4>)
 80013fe:	f7ff fda3 	bl	8000f48 <SPI_Write>
	adf_check_ready();
 8001402:	f7ff fdef 	bl	8000fe4 <adf_check_ready>

	// Got back to "OFF State"
	//HAL_SPI_Transmit(&hspi3, ADF_PHY_OFF, 1, SPI3_TOUT);

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20001858 	.word	0x20001858

08001414 <adf_read_state>:
*/

uint8_t uhf_txbuffer[PAYLOAD_SIZE];

void adf_read_state(uint8_t* err_code,uint8_t* currr_state,uint8_t* status)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	uint32_t value=0;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
	value=adf_read_reg(MISC_FW);
 8001424:	480d      	ldr	r0, [pc, #52]	@ (800145c <adf_read_state+0x48>)
 8001426:	f7ff fdf7 	bl	8001018 <adf_read_reg>
 800142a:	6178      	str	r0, [r7, #20]
	*err_code=(value >> 24) & 0xFF;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	0e1b      	lsrs	r3, r3, #24
 8001430:	b2da      	uxtb	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	701a      	strb	r2, [r3, #0]
	*currr_state=(value >> 8) & 0x1F;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	701a      	strb	r2, [r3, #0]
	*status=value & 0x03;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	400042b4 	.word	0x400042b4

08001460 <init_uhf_txbuffer>:
	for (i = 0; i < PAYLOAD_SIZE; i++)
		uhf_txbuffer[i] = (uint8_t)i;   //i value 8 LSBs are loaded into buffer
}

void init_uhf_txbuffer(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	uint32_t* ptr=NULL;
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
	ptr = (uint32_t *)&uhf_txbuffer;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <init_uhf_txbuffer+0x3c>)
 800146c:	603b      	str	r3, [r7, #0]

	int i;
	for (i=0;i<(PAYLOAD_SIZE>>2);i++)
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	e008      	b.n	8001486 <init_uhf_txbuffer+0x26>
		{
		*(ptr+i)=SYNC_WORD;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <init_uhf_txbuffer+0x40>)
 800147e:	601a      	str	r2, [r3, #0]
	for (i=0;i<(PAYLOAD_SIZE>>2);i++)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b3b      	cmp	r3, #59	@ 0x3b
 800148a:	ddf3      	ble.n	8001474 <init_uhf_txbuffer+0x14>
		}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20001124 	.word	0x20001124
 80014a0:	2efc9827 	.word	0x2efc9827

080014a4 <adf_tx_data>:


uint8_t adf_tx_data(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
	uint8_t err_code=0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	70fb      	strb	r3, [r7, #3]
	uint8_t currr_state=0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	70bb      	strb	r3, [r7, #2]
	uint8_t status=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	707b      	strb	r3, [r7, #1]

	//Check status
	adf_read_state(&err_code,&currr_state,&status);
 80014b6:	1c7a      	adds	r2, r7, #1
 80014b8:	1cb9      	adds	r1, r7, #2
 80014ba:	1cfb      	adds	r3, r7, #3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffa9 	bl	8001414 <adf_read_state>
	if (currr_state!=STATE_PHY_OFF)
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d001      	beq.n	80014cc <adf_tx_data+0x28>
		return 0xff; //Error, state not expected
 80014c8:	23ff      	movs	r3, #255	@ 0xff
 80014ca:	e073      	b.n	80015b4 <adf_tx_data+0x110>

	// Put the ADF7030 in "On State"
	uint8_t adf_state_cmd = ADF_PHY_ON;
 80014cc:	2382      	movs	r3, #130	@ 0x82
 80014ce:	703b      	strb	r3, [r7, #0]
	SPI_Write(&hspi3, &adf_state_cmd, 1);
 80014d0:	463b      	mov	r3, r7
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	4839      	ldr	r0, [pc, #228]	@ (80015bc <adf_tx_data+0x118>)
 80014d8:	f7ff fd36 	bl	8000f48 <SPI_Write>

	//Check status
	adf_read_state(&err_code,&currr_state,&status);
 80014dc:	1c7a      	adds	r2, r7, #1
 80014de:	1cb9      	adds	r1, r7, #2
 80014e0:	1cfb      	adds	r3, r7, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff96 	bl	8001414 <adf_read_state>
		if (currr_state!=STATE_PHY_ON)
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d001      	beq.n	80014f2 <adf_tx_data+0x4e>
			return 0xff; //Error, state not expected
 80014ee:	23ff      	movs	r3, #255	@ 0xff
 80014f0:	e060      	b.n	80015b4 <adf_tx_data+0x110>

	// Config GPIO7 to drive PA while tx is on
	uint32_t reg_val;
	reg_val = adf_read_reg(PROFILE_RADIO_DIG_TX_CFG1);
 80014f2:	4833      	ldr	r0, [pc, #204]	@ (80015c0 <adf_tx_data+0x11c>)
 80014f4:	f7ff fd90 	bl	8001018 <adf_read_reg>
 80014f8:	60f8      	str	r0, [r7, #12]
//	reg_val = (reg_val & ~EXT_PA_PIN_SEL_MASK) | (GPIO7 << EXT_PA_PIN_SEL_SHIFT) | EXT_PA_FRAMING_EN_MASK;
	reg_val = (reg_val & ~EXT_PA_PIN_SEL_MASK) | ((uint32_t)GPIO6 << EXT_PA_PIN_SEL_SHIFT) | EXT_PA_FRAMING_EN_MASK;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001500:	f443 2350 	orr.w	r3, r3, #851968	@ 0xd0000
 8001504:	60fb      	str	r3, [r7, #12]
	adf_write_reg(PROFILE_RADIO_DIG_TX_CFG1, reg_val);
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	482d      	ldr	r0, [pc, #180]	@ (80015c0 <adf_tx_data+0x11c>)
 800150a:	f7ff fe1f 	bl	800114c <adf_write_reg>
	//Area : 0x2000 0AF0 to 0x2000 0FFC (1292bytes).
	//Host chooses the buffer address in this in the area.
	//Address setting is setted in PTR_TX_BASE (part of GENERIC_PKT_BUFF_CFG0 register).
	//The base address of the Tx payload is 0x2000000 + (PTR_TX_BASE × 4).

	uint32_t write_addr = PACKET_MEM_BASE_ADDR+PTR_TX_BASE;
 800150e:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <adf_tx_data+0x120>)
 8001510:	60bb      	str	r3, [r7, #8]

	uint32_t* ptr=NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]

	ptr = (uint32_t *)&uhf_txbuffer;
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <adf_tx_data+0x124>)
 8001518:	607b      	str	r3, [r7, #4]

	int i;
	for (i=0;i<(PAYLOAD_SIZE>>2);i++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e015      	b.n	800154c <adf_tx_data+0xa8>
		{
		adf_write_reg(write_addr+i*4, *(ptr+i));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	18d0      	adds	r0, r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fe09 	bl	800114c <adf_write_reg>
		*(ptr+i)=SYNC_WORD;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <adf_tx_data+0x128>)
 8001544:	601a      	str	r2, [r3, #0]
	for (i=0;i<(PAYLOAD_SIZE>>2);i++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001550:	dde6      	ble.n	8001520 <adf_tx_data+0x7c>
		}

	//goto PHY_TX
	adf_state_cmd = ADF_PHY_TX;
 8001552:	2384      	movs	r3, #132	@ 0x84
 8001554:	703b      	strb	r3, [r7, #0]
	SPI_Write(&hspi3, &adf_state_cmd, 1);
 8001556:	463b      	mov	r3, r7
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	4817      	ldr	r0, [pc, #92]	@ (80015bc <adf_tx_data+0x118>)
 800155e:	f7ff fcf3 	bl	8000f48 <SPI_Write>

	//Wait for end of tx...
	//ADF7030 should go back to PHY_ON
	int retry_cptr=0;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
	adf_read_state(&err_code,&currr_state,&status);
 8001566:	1c7a      	adds	r2, r7, #1
 8001568:	1cb9      	adds	r1, r7, #2
 800156a:	1cfb      	adds	r3, r7, #3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff51 	bl	8001414 <adf_read_state>
	while ((currr_state!=STATE_PHY_ON) && (retry_cptr<RETRY_END_TX))
 8001572:	e00b      	b.n	800158c <adf_tx_data+0xe8>
		{
		retry_cptr++;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	3301      	adds	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
		HAL_Delay(100);
 800157a:	2064      	movs	r0, #100	@ 0x64
 800157c:	f006 f860 	bl	8007640 <HAL_Delay>
		adf_read_state(&err_code,&currr_state,&status);
 8001580:	1c7a      	adds	r2, r7, #1
 8001582:	1cb9      	adds	r1, r7, #2
 8001584:	1cfb      	adds	r3, r7, #3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff44 	bl	8001414 <adf_read_state>
	while ((currr_state!=STATE_PHY_ON) && (retry_cptr<RETRY_END_TX))
 800158c:	78bb      	ldrb	r3, [r7, #2]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d002      	beq.n	8001598 <adf_tx_data+0xf4>
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b13      	cmp	r3, #19
 8001596:	dded      	ble.n	8001574 <adf_tx_data+0xd0>
		}
	if (retry_cptr==RETRY_END_TX)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b14      	cmp	r3, #20
 800159c:	d101      	bne.n	80015a2 <adf_tx_data+0xfe>
			return 0xff; //Error, state not expected
 800159e:	23ff      	movs	r3, #255	@ 0xff
 80015a0:	e008      	b.n	80015b4 <adf_tx_data+0x110>

	///goto PHY_OFF
	adf_state_cmd = ADF_PHY_OFF;
 80015a2:	2381      	movs	r3, #129	@ 0x81
 80015a4:	703b      	strb	r3, [r7, #0]
	SPI_Write(&hspi3, &adf_state_cmd, 1);
 80015a6:	463b      	mov	r3, r7
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <adf_tx_data+0x118>)
 80015ae:	f7ff fccb 	bl	8000f48 <SPI_Write>


	return 0x00; //TX SUCESSFULL
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20001858 	.word	0x20001858
 80015c0:	20000308 	.word	0x20000308
 80015c4:	20000af0 	.word	0x20000af0
 80015c8:	20001124 	.word	0x20001124
 80015cc:	2efc9827 	.word	0x2efc9827

080015d0 <radio_comm_SendCmd>:
#include "main.h"
#include "SI4463.h"

extern SPI_HandleTypeDef hspi2;

void radio_comm_SendCmd(SPI_HandleTypeDef * hspi, uint8_t * data, uint16_t len) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <radio_comm_SendCmd+0x3c>)
 80015e6:	f006 fb43 	bl	8007c70 <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	HAL_SPI_Transmit(hspi, data, len, SPI2_TOUT);
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f009 fec7 	bl	800b386 <HAL_SPI_Transmit>
	//HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fe:	4803      	ldr	r0, [pc, #12]	@ (800160c <radio_comm_SendCmd+0x3c>)
 8001600:	f006 fb36 	bl	8007c70 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	48000400 	.word	0x48000400

08001610 <radio_comm_GetResp>:

uint8_t radio_comm_GetResp(SPI_HandleTypeDef * hspi, uint8_t * rbuff, uint16_t len) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
	uint8_t err_cnt = 10;
 800161e:	230a      	movs	r3, #10
 8001620:	75bb      	strb	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001628:	482a      	ldr	r0, [pc, #168]	@ (80016d4 <radio_comm_GetResp+0xc4>)
 800162a:	f006 fb21 	bl	8007c70 <HAL_GPIO_WritePin>

	uint8_t cts_cmd[2] = { 0x44, 0x00 };
 800162e:	2344      	movs	r3, #68	@ 0x44
 8001630:	82bb      	strh	r3, [r7, #20]
	uint8_t ctsbuff[2] = { 0 };
 8001632:	2300      	movs	r3, #0
 8001634:	823b      	strh	r3, [r7, #16]

	uint8_t i = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
	for(i = 0; i <= err_cnt; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	e01f      	b.n	8001680 <radio_comm_GetResp+0x70>
		HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001646:	4823      	ldr	r0, [pc, #140]	@ (80016d4 <radio_comm_GetResp+0xc4>)
 8001648:	f006 fb12 	bl	8007c70 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(hspi, cts_cmd, ctsbuff, 2, SPI2_TOUT);
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	f107 0114 	add.w	r1, r7, #20
 8001654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2302      	movs	r3, #2
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f00a f808 	bl	800b672 <HAL_SPI_TransmitReceive>
		if(ctsbuff[1] != 0xFF) {
 8001662:	7c7b      	ldrb	r3, [r7, #17]
 8001664:	2bff      	cmp	r3, #255	@ 0xff
 8001666:	d010      	beq.n	800168a <radio_comm_GetResp+0x7a>
			HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166e:	4819      	ldr	r0, [pc, #100]	@ (80016d4 <radio_comm_GetResp+0xc4>)
 8001670:	f006 fafe 	bl	8007c70 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f005 ffe3 	bl	8007640 <HAL_Delay>
	for(i = 0; i <= err_cnt; i++) {
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	3301      	adds	r3, #1
 800167e:	75fb      	strb	r3, [r7, #23]
 8001680:	7dfa      	ldrb	r2, [r7, #23]
 8001682:	7dbb      	ldrb	r3, [r7, #22]
 8001684:	429a      	cmp	r2, r3
 8001686:	d9db      	bls.n	8001640 <radio_comm_GetResp+0x30>
 8001688:	e000      	b.n	800168c <radio_comm_GetResp+0x7c>
		} else {
			break;
 800168a:	bf00      	nop
		}
	}

	if(err_cnt <= i) {
 800168c:	7dba      	ldrb	r2, [r7, #22]
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	429a      	cmp	r2, r3
 8001692:	d807      	bhi.n	80016a4 <radio_comm_GetResp+0x94>
		HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169a:	480e      	ldr	r0, [pc, #56]	@ (80016d4 <radio_comm_GetResp+0xc4>)
 800169c:	f006 fae8 	bl	8007c70 <HAL_GPIO_WritePin>
		return 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e012      	b.n	80016ca <radio_comm_GetResp+0xba>
	}

	if(len != 0) {
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <radio_comm_GetResp+0xac>
		HAL_SPI_TransmitReceive(hspi, zero_buff, rbuff, len, SPI2_TOUT);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <radio_comm_GetResp+0xc8>)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f009 ffdb 	bl	800b672 <HAL_SPI_TransmitReceive>
	}
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <radio_comm_GetResp+0xc4>)
 80016c4:	f006 fad4 	bl	8007c70 <HAL_GPIO_WritePin>
	return ctsbuff[1];
 80016c8:	7c7b      	ldrb	r3, [r7, #17]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	48000400 	.word	0x48000400
 80016d8:	20001214 	.word	0x20001214

080016dc <radio_comm_SendCmdGetResp>:

uint8_t radio_comm_SendCmdGetResp(SPI_HandleTypeDef * hspi, uint8_t * data, uint8_t tx_len, uint8_t * rbuff, uint16_t rx_len, uint8_t waitms) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f2:	4810      	ldr	r0, [pc, #64]	@ (8001734 <radio_comm_SendCmdGetResp+0x58>)
 80016f4:	f006 fabc 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, data, tx_len, SPI2_TOUT);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f009 fe3f 	bl	800b386 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800170e:	4809      	ldr	r0, [pc, #36]	@ (8001734 <radio_comm_SendCmdGetResp+0x58>)
 8001710:	f006 faae 	bl	8007c70 <HAL_GPIO_WritePin>

	HAL_Delay(waitms);
 8001714:	7f3b      	ldrb	r3, [r7, #28]
 8001716:	4618      	mov	r0, r3
 8001718:	f005 ff92 	bl	8007640 <HAL_Delay>

	return radio_comm_GetResp(hspi, rbuff, rx_len);
 800171c:	8b3b      	ldrh	r3, [r7, #24]
 800171e:	461a      	mov	r2, r3
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff ff74 	bl	8001610 <radio_comm_GetResp>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	48000400 	.word	0x48000400

08001738 <config_si4463>:
	HAL_SPI_TransmitReceive(hspi, zero_buff, pData, byteCount, SPI2_TOUT);
	HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
	return 1;
}

uint8_t config_si4463() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
	uint16_t dataI = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	81fb      	strh	r3, [r7, #14]
	while(cmdArray[dataI] != 0) {
 8001742:	e023      	b.n	800178c <config_si4463+0x54>
		uint8_t *dataP = &cmdArray[dataI+1];
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	3301      	adds	r3, #1
 8001748:	4a15      	ldr	r2, [pc, #84]	@ (80017a0 <config_si4463+0x68>)
 800174a:	4413      	add	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
		uint8_t dataLen = cmdArray[dataI];
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <config_si4463+0x68>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	71fb      	strb	r3, [r7, #7]

		if(dataLen > 16) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b10      	cmp	r3, #16
 800175a:	d901      	bls.n	8001760 <config_si4463+0x28>
			return SI446X_COMMAND_ERROR;
 800175c:	2304      	movs	r3, #4
 800175e:	e01b      	b.n	8001798 <config_si4463+0x60>
		}

		if(radio_comm_SendCmdGetResp(&hspi2, dataP, dataLen, 0, 0, 10) != 0xFF) {
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	230a      	movs	r3, #10
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2300      	movs	r3, #0
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <config_si4463+0x6c>)
 8001770:	f7ff ffb4 	bl	80016dc <radio_comm_SendCmdGetResp>
 8001774:	4603      	mov	r3, r0
 8001776:	2bff      	cmp	r3, #255	@ 0xff
 8001778:	d001      	beq.n	800177e <config_si4463+0x46>
			return SI446X_CTS_TIMEOUT;
 800177a:	2302      	movs	r3, #2
 800177c:	e00c      	b.n	8001798 <config_si4463+0x60>
		}
		dataI += dataLen+1;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	b29a      	uxth	r2, r3
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	3301      	adds	r3, #1
 800178a:	81fb      	strh	r3, [r7, #14]
	while(cmdArray[dataI] != 0) {
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <config_si4463+0x68>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1d6      	bne.n	8001744 <config_si4463+0xc>
	}
	return SI446X_SUCCESS;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000b60 	.word	0x20000b60
 80017a4:	200017f4 	.word	0x200017f4

080017a8 <si446x_part_info>:

    radio_comm_SendCmd(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_POWER_UP);
}

uint8_t si446x_part_info(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
	uint8_t Pro2Cmd[8];

    Pro2Cmd[0] = SI446X_CMD_ID_PART_INFO;
 80017ae:	2301      	movs	r3, #1
 80017b0:	703b      	strb	r3, [r7, #0]
    Pro2Cmd[1] = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	707b      	strb	r3, [r7, #1]
    Pro2Cmd[2] = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	70bb      	strb	r3, [r7, #2]
    Pro2Cmd[3] = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	70fb      	strb	r3, [r7, #3]
    Pro2Cmd[4] = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	713b      	strb	r3, [r7, #4]
    Pro2Cmd[5] = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	717b      	strb	r3, [r7, #5]
    Pro2Cmd[6] = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71bb      	strb	r3, [r7, #6]
    Pro2Cmd[6] = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	71bb      	strb	r3, [r7, #6]

    radio_comm_SendCmdGetResp(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_PART_INFO,
 80017ce:	463b      	mov	r3, r7
 80017d0:	4639      	mov	r1, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	2208      	movs	r2, #8
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <si446x_part_info+0x44>)
 80017de:	f7ff ff7d 	bl	80016dc <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_PART_INFO, 0);

    return Pro2Cmd[0];
 80017e2:	783b      	ldrb	r3, [r7, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200017f4 	.word	0x200017f4

080017f0 <si446x_get_int_status>:

void si446x_get_int_status(uint8_t PH_CLR_PEND, uint8_t MODEM_CLR_PEND, uint8_t CHIP_CLR_PEND)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	460b      	mov	r3, r1
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	4613      	mov	r3, r2
 8001800:	717b      	strb	r3, [r7, #5]
	uint8_t Pro2Cmd[8];

    Pro2Cmd[0] = SI446X_CMD_ID_GET_INT_STATUS;
 8001802:	2320      	movs	r3, #32
 8001804:	723b      	strb	r3, [r7, #8]
    Pro2Cmd[1] = PH_CLR_PEND;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	727b      	strb	r3, [r7, #9]
    Pro2Cmd[2] = MODEM_CLR_PEND;
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	72bb      	strb	r3, [r7, #10]
    Pro2Cmd[3] = CHIP_CLR_PEND;
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	72fb      	strb	r3, [r7, #11]
    Pro2Cmd[4] = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	733b      	strb	r3, [r7, #12]
    Pro2Cmd[5] = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	737b      	strb	r3, [r7, #13]
    Pro2Cmd[6] = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	73bb      	strb	r3, [r7, #14]
    Pro2Cmd[7] = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]

    radio_comm_SendCmdGetResp(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_GET_INT_STATUS,
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	f107 0108 	add.w	r1, r7, #8
 800182a:	2200      	movs	r2, #0
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	2208      	movs	r2, #8
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	2204      	movs	r2, #4
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <si446x_get_int_status+0x54>)
 8001836:	f7ff ff51 	bl	80016dc <radio_comm_SendCmdGetResp>
                              Pro2Cmd, SI446X_CMD_REPLY_COUNT_GET_INT_STATUS, 0);
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200017f4 	.word	0x200017f4

08001848 <si446x_start_rx>:
    radio_comm_SendCmdGetResp(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_GPIO_PIN_CFG,
                              Pro2Cmd, SI446X_CMD_REPLY_COUNT_GPIO_PIN_CFG, 0 );
}

void si446x_start_rx(U8 CHANNEL, U8 CONDITION, U16 RX_LEN, U8 NEXT_STATE1, U8 NEXT_STATE2, U8 NEXT_STATE3)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	4603      	mov	r3, r0
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	460b      	mov	r3, r1
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	70fb      	strb	r3, [r7, #3]
	uint8_t Pro2Cmd[8];
    Pro2Cmd[0] = SI446X_CMD_ID_START_RX;
 8001866:	2332      	movs	r3, #50	@ 0x32
 8001868:	723b      	strb	r3, [r7, #8]
    Pro2Cmd[1] = CHANNEL;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	727b      	strb	r3, [r7, #9]
    Pro2Cmd[2] = CONDITION;
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	72bb      	strb	r3, [r7, #10]
    Pro2Cmd[3] = (U8)(RX_LEN >> 8);
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	b29b      	uxth	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	72fb      	strb	r3, [r7, #11]
    Pro2Cmd[4] = (U8)(RX_LEN);
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	733b      	strb	r3, [r7, #12]
    Pro2Cmd[5] = NEXT_STATE1;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	737b      	strb	r3, [r7, #13]
    Pro2Cmd[6] = NEXT_STATE2;
 8001886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188a:	73bb      	strb	r3, [r7, #14]
    Pro2Cmd[7] = NEXT_STATE3;
 800188c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001890:	73fb      	strb	r3, [r7, #15]

    radio_comm_SendCmd(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_START_RX);
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2208      	movs	r2, #8
 8001898:	4619      	mov	r1, r3
 800189a:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <si446x_start_rx+0x60>)
 800189c:	f7ff fe98 	bl	80015d0 <radio_comm_SendCmd>
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	200017f4 	.word	0x200017f4

080018ac <si446x_fifo_info>:
{
  radio_comm_ReadData(&hspi2, SI446X_CMD_ID_READ_RX_FIFO, 0, numBytes, pRxData );
}

void si446x_fifo_info(U8 FIFO)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	uint8_t Pro2Cmd[2];
    Pro2Cmd[0] = SI446X_CMD_ID_FIFO_INFO;
 80018b6:	2315      	movs	r3, #21
 80018b8:	733b      	strb	r3, [r7, #12]
    Pro2Cmd[1] = FIFO;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	737b      	strb	r3, [r7, #13]

    radio_comm_SendCmdGetResp(&hspi2, Pro2Cmd, SI446X_CMD_ARG_COUNT_FIFO_INFO,
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	f107 010c 	add.w	r1, r7, #12
 80018c6:	2200      	movs	r2, #0
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	9200      	str	r2, [sp, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <si446x_fifo_info+0x34>)
 80018d2:	f7ff ff03 	bl	80016dc <radio_comm_SendCmdGetResp>
                                  Pro2Cmd, SI446X_CMD_REPLY_COUNT_FIFO_INFO, 0 );

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200017f4 	.word	0x200017f4

080018e4 <reset_si4463>:

void reset_si4463() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, VHF_SDN_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <reset_si4463+0x24>)
 80018ee:	f006 f9bf 	bl	8007c70 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018f2:	2064      	movs	r0, #100	@ 0x64
 80018f4:	f005 fea4 	bl	8007640 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, VHF_SDN_Pin, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <reset_si4463+0x24>)
 80018fe:	f006 f9b7 	bl	8007c70 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	48000800 	.word	0x48000800

0800190c <power_vhf>:

void power_vhf(uint8_t b) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	if(b) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <power_vhf+0x32>
		HAL_GPIO_WritePin(GPIOC, VHF_PWR_EN_Pin, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001922:	4811      	ldr	r0, [pc, #68]	@ (8001968 <power_vhf+0x5c>)
 8001924:	f006 f9a4 	bl	8007c70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800192e:	480f      	ldr	r0, [pc, #60]	@ (800196c <power_vhf+0x60>)
 8001930:	f006 f99e 	bl	8007c70 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001934:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001938:	f005 fe82 	bl	8007640 <HAL_Delay>
	} else {
		HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, VHF_PWR_EN_Pin, GPIO_PIN_RESET);
		HAL_Delay(500);
	}
}
 800193c:	e00f      	b.n	800195e <power_vhf+0x52>
		HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001944:	4809      	ldr	r0, [pc, #36]	@ (800196c <power_vhf+0x60>)
 8001946:	f006 f993 	bl	8007c70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, VHF_PWR_EN_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <power_vhf+0x5c>)
 8001952:	f006 f98d 	bl	8007c70 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195a:	f005 fe71 	bl	8007640 <HAL_Delay>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	48000800 	.word	0x48000800
 800196c:	48000400 	.word	0x48000400

08001970 <si446x_cts_it_poll>:
			break;
	}

}

void si446x_cts_it_poll() {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	  zero_buff[0] = 0x44;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <si446x_cts_it_poll+0x2c>)
 8001976:	2244      	movs	r2, #68	@ 0x44
 8001978:	701a      	strb	r2, [r3, #0]
	  zero_buff[1] = 0x00;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <si446x_cts_it_poll+0x2c>)
 800197c:	2200      	movs	r2, #0
 800197e:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001986:	4806      	ldr	r0, [pc, #24]	@ (80019a0 <si446x_cts_it_poll+0x30>)
 8001988:	f006 f972 	bl	8007c70 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive_IT(&hspi2, zero_buff, rx_data, 2);
 800198c:	2302      	movs	r3, #2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <si446x_cts_it_poll+0x34>)
 8001990:	4902      	ldr	r1, [pc, #8]	@ (800199c <si446x_cts_it_poll+0x2c>)
 8001992:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <si446x_cts_it_poll+0x38>)
 8001994:	f00a f88c 	bl	800bab0 <HAL_SPI_TransmitReceive_IT>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20001214 	.word	0x20001214
 80019a0:	48000400 	.word	0x48000400
 80019a4:	20001314 	.word	0x20001314
 80019a8:	200017f4 	.word	0x200017f4

080019ac <VHF_rstfifo_startrx>:

void VHF_rstfifo_startrx() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af02      	add	r7, sp, #8
	// Reset FIFO count
	vhf_overflow = 0;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <VHF_rstfifo_startrx+0x2c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
	si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff ff77 	bl	80018ac <si446x_fifo_info>

	si446x_start_rx(0, 0, 240,
 80019be:	2303      	movs	r3, #3
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	2303      	movs	r3, #3
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2308      	movs	r3, #8
 80019c8:	22f0      	movs	r2, #240	@ 0xf0
 80019ca:	2100      	movs	r1, #0
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff ff3b 	bl	8001848 <si446x_start_rx>
		  SI446X_CMD_START_RX_ARG_NEXT_STATE1_RXTIMEOUT_STATE_ENUM_RX,
		  SI446X_CMD_START_RX_ARG_NEXT_STATE2_RXVALID_STATE_ENUM_READY,
		  SI446X_CMD_START_RX_ARG_NEXT_STATE3_RXINVALID_STATE_ENUM_READY );
	// Start RX, if timeout stay in RX, if packet received goes back to READY, (third is CRC error but we don't use CRC)
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20001334 	.word	0x20001334

080019dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019e0:	f3bf 8f4f 	dsb	sy
}
 80019e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <__NVIC_SystemReset+0x24>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019ee:	4904      	ldr	r1, [pc, #16]	@ (8001a00 <__NVIC_SystemReset+0x24>)
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <__NVIC_SystemReset+0x28>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f6:	f3bf 8f4f 	dsb	sy
}
 80019fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <__NVIC_SystemReset+0x20>
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	05fa0004 	.word	0x05fa0004

08001a08 <I2C_Scan>:

//bessel start

float lux = 0.0;

void I2C_Scan() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	@ 0x38
 8001a0c:	af00      	add	r7, sp, #0
    char msg[50]; // Augmentation de la taille du tampon pour snprintf
    uint8_t found = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    snprintf(msg, sizeof(msg), "Scanning I2C...\r\n"); // Utilisation de snprintf
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4a34      	ldr	r2, [pc, #208]	@ (8001ae8 <I2C_Scan+0xe0>)
 8001a18:	2132      	movs	r1, #50	@ 0x32
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00c fcd6 	bl	800e3cc <sniprintf>
    writeUART((unsigned char*)msg, strlen(msg)); // Utilisation de strlen pour la taille
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fc2c 	bl	8000280 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fa7b 	bl	8002f2c <writeUART>

    for (uint8_t i = 0x10; i <=0x11 ; i++) {
 8001a36:	2310      	movs	r3, #16
 8001a38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001a3c:	e026      	b.n	8001a8c <I2C_Scan+0x84>
        if (HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 1, 100) == HAL_OK) {
 8001a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	b299      	uxth	r1, r3
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4827      	ldr	r0, [pc, #156]	@ (8001aec <I2C_Scan+0xe4>)
 8001a4e:	f006 f9e5 	bl	8007e1c <HAL_I2C_IsDeviceReady>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d114      	bne.n	8001a82 <I2C_Scan+0x7a>
            snprintf(msg, sizeof(msg), "Device found at 0x%X\r\n", i); // Utilisation de snprintf
 8001a58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a5c:	1d38      	adds	r0, r7, #4
 8001a5e:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <I2C_Scan+0xe8>)
 8001a60:	2132      	movs	r1, #50	@ 0x32
 8001a62:	f00c fcb3 	bl	800e3cc <sniprintf>
            writeUART((unsigned char*)msg, strlen(msg)); // Utilisation de strlen pour la taille
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fc09 	bl	8000280 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fa58 	bl	8002f2c <writeUART>
            found = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t i = 0x10; i <=0x11 ; i++) {
 8001a82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a86:	3301      	adds	r3, #1
 8001a88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001a8c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a90:	2b11      	cmp	r3, #17
 8001a92:	d9d4      	bls.n	8001a3e <I2C_Scan+0x36>
        }
    }

    if (!found) {
 8001a94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d110      	bne.n	8001abe <I2C_Scan+0xb6>
        snprintf(msg, sizeof(msg), "No I2C device found!\r\n"); // Utilisation de snprintf
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <I2C_Scan+0xec>)
 8001aa0:	2132      	movs	r1, #50	@ 0x32
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00c fc92 	bl	800e3cc <sniprintf>
        writeUART((unsigned char*)msg, strlen(msg)); // Utilisation de strlen pour la taille
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fbe8 	bl	8000280 <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fa37 	bl	8002f2c <writeUART>
    }

    snprintf(msg, sizeof(msg), "Scan Complete\r\n"); // Utilisation de snprintf
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <I2C_Scan+0xf0>)
 8001ac2:	2132      	movs	r1, #50	@ 0x32
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00c fc81 	bl	800e3cc <sniprintf>
    writeUART((unsigned char*)msg, strlen(msg)); // Utilisation de strlen pour la taille
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fbd7 	bl	8000280 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fa26 	bl	8002f2c <writeUART>
}
 8001ae0:	bf00      	nop
 8001ae2:	3738      	adds	r7, #56	@ 0x38
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	080107e8 	.word	0x080107e8
 8001aec:	200016a0 	.word	0x200016a0
 8001af0:	080107fc 	.word	0x080107fc
 8001af4:	08010814 	.word	0x08010814
 8001af8:	0801082c 	.word	0x0801082c

08001afc <VEML7700_WriteRegister>:
// Fonction pour écrire une valeur dans un registre du capteur VEML7700
// Paramètres :
//   - reg : adresse du registre où écrire
//   - value : valeur 16 bits à écrire
// Fonction pour écrire une valeur dans un registre du capteur VEML7700
void VEML7700_WriteRegister(uint8_t reg, uint16_t value) {
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = reg;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	733b      	strb	r3, [r7, #12]
    data[1] = value & 0xFF;
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	737b      	strb	r3, [r7, #13]
    data[2] = (value >> 8) & 0xFF;
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73bb      	strb	r3, [r7, #14]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <VEML7700_ReadRegister>:

// Fonction pour lire un registre
uint16_t VEML7700_ReadRegister(uint8_t reg) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0};
 8001b36:	2300      	movs	r3, #0
 8001b38:	81bb      	strh	r3, [r7, #12]
    return (data[1] << 8) | data[0]; // Conversion Little Endian
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7b3b      	ldrb	r3, [r7, #12]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	b29b      	uxth	r3, r3
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <VEML7700_Init>:

// Fonction pour initialiser le capteur VEML7700
// Configure le capteur avec un gain et un temps d'intégration par défaut
void VEML7700_Init(void) {
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
	VEML7700_WriteRegister(0x00, 0x0000);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff ffcd 	bl	8001afc <VEML7700_WriteRegister>
    HAL_Delay(10);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f005 fd6c 	bl	8007640 <HAL_Delay>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0000      	movs	r0, r0
	...

08001b70 <VEML7700_GetLux>:

// Fonction pour lire la valeur de luminosité mesurée par le VEML7700
// Retourne : la valeur en lux
float VEML7700_GetLux(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	uint16_t raw = VEML7700_ReadRegister(0x04); // Lecture de la valeur brute du capteur
 8001b76:	2004      	movs	r0, #4
 8001b78:	f7ff ffd8 	bl	8001b2c <VEML7700_ReadRegister>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	80fb      	strh	r3, [r7, #6]
	return raw * 0.0036; // Conversion de la val eur brute en lux selon la documentation du capteur
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcd6 	bl	8000534 <__aeabi_i2d>
 8001b88:	a309      	add	r3, pc, #36	@ (adr r3, 8001bb0 <VEML7700_GetLux+0x40>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fd3b 	bl	8000608 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f80d 	bl	8000bb8 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	ee07 3a90 	vmov	s15, r3
}
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	487fcb92 	.word	0x487fcb92
 8001bb4:	3f6d7dbf 	.word	0x3f6d7dbf

08001bb8 <AfficherLumiere>:

// Fonction pour afficher la valeur de luminosité via l'UART
// Paramètre :
//   - lux : valeur de luminosité en lux
void AfficherLumiere(float lux) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b092      	sub	sp, #72	@ 0x48
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	ed87 0a01 	vstr	s0, [r7, #4]
	char buffer[50]; // Tampon pour stocker le message formaté
	snprintf(buffer, sizeof(buffer), "Lux: %.2f lx\r\n", lux); // Formatage de la valeur
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fcc8 	bl	8000558 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	f107 000c 	add.w	r0, r7, #12
 8001bd0:	e9cd 2300 	strd	r2, r3, [sp]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <AfficherLumiere+0x48>)
 8001bd6:	2132      	movs	r1, #50	@ 0x32
 8001bd8:	f00c fbf8 	bl	800e3cc <sniprintf>
	writeUART((unsigned char*)buffer, strlen(buffer)); // Utilisation de strlen pour la taille
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fb4d 	bl	8000280 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 f99b 	bl	8002f2c <writeUART>
}
 8001bf6:	bf00      	nop
 8001bf8:	3740      	adds	r7, #64	@ 0x40
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	0801083c 	.word	0x0801083c

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f005 fca4 	bl	8007556 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f955 	bl	8001ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 fb4f 	bl	80022b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c16:	f000 f9af 	bl	8001f78 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001c1a:	f000 f9ed 	bl	8001ff8 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001c1e:	f000 fa2b 	bl	8002078 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8001c22:	f000 fa55 	bl	80020d0 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c26:	f000 fa7b 	bl	8002120 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001c2a:	f000 fab7 	bl	800219c <MX_SPI3_Init>
  MX_TIM2_Init();
 8001c2e:	f000 faf3 	bl	8002218 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	/* Init vhf packet access */
	for(uint8_t i = 0; i < NB_FETCH; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e00f      	b.n	8001c58 <main+0x54>
		vhf_packet_accessor[i] = &vhf_packet[1 + i * (RX_FIFO_THRES+1)];
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00da      	lsls	r2, r3, #3
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4989      	ldr	r1, [pc, #548]	@ (8001e70 <main+0x26c>)
 8001c4a:	440a      	add	r2, r1
 8001c4c:	4989      	ldr	r1, [pc, #548]	@ (8001e74 <main+0x270>)
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < NB_FETCH; i++) {
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3301      	adds	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b0b      	cmp	r3, #11
 8001c5c:	d9ec      	bls.n	8001c38 <main+0x34>
		// vhf_packet_accessor[i] = vhf_packet[1 + i * (RX_FIFO_THRES+1)];
	}

	/* Init Timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8001c5e:	4886      	ldr	r0, [pc, #536]	@ (8001e78 <main+0x274>)
 8001c60:	f00a fbf6 	bl	800c450 <HAL_TIM_Base_Start_IT>

	/* Init OBC I2C Interruption */
	HAL_I2C_EnableListen_IT(&hi2c1);
 8001c64:	4885      	ldr	r0, [pc, #532]	@ (8001e7c <main+0x278>)
 8001c66:	f006 fb29 	bl	80082bc <HAL_I2C_EnableListen_IT>

	/* Init ADF7030 with blocking SPI *
	 * *
	 */
	uint8_t mode=0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	733b      	strb	r3, [r7, #12]
	config_ADF7030(mode);
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb6b 	bl	800134c <config_ADF7030>
	init_uhf_txbuffer();
 8001c76:	f7ff fbf3 	bl	8001460 <init_uhf_txbuffer>

	/* Init SI4461 with blocking
	 *
	 */
	MX_SPI2_Init();
 8001c7a:	f000 fa51 	bl	8002120 <MX_SPI2_Init>
	power_vhf(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff fe44 	bl	800190c <power_vhf>
	reset_si4463();
 8001c84:	f7ff fe2e 	bl	80018e4 <reset_si4463>
	HAL_Delay(20);
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f005 fcd9 	bl	8007640 <HAL_Delay>

	uint8_t conf_stat = config_si4463();
 8001c8e:	f7ff fd53 	bl	8001738 <config_si4463>
 8001c92:	4603      	mov	r3, r0
 8001c94:	72fb      	strb	r3, [r7, #11]

	uint8_t chiprev = si446x_part_info();
 8001c96:	f7ff fd87 	bl	80017a8 <si446x_part_info>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	72bb      	strb	r3, [r7, #10]

	// Clearing all interrupt in the SI446x
	si446x_get_int_status(0, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fda4 	bl	80017f0 <si446x_get_int_status>

	//init_rx_irq();
	HAL_Delay(1);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f005 fcc9 	bl	8007640 <HAL_Delay>

	VHF_rstfifo_startrx();
 8001cae:	f7ff fe7d 	bl	80019ac <VHF_rstfifo_startrx>

	current_vhf_state = RX_PENDING;
 8001cb2:	4b73      	ldr	r3, [pc, #460]	@ (8001e80 <main+0x27c>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]

	/********** SPINO Functional Initialisation ********/

	setupGlobalVariable();
 8001cb8:	f002 fc38 	bl	800452c <setupGlobalVariable>
	inittlm();
 8001cbc:	f002 f802 	bl	8003cc4 <inittlm>
	ModemOpen();
 8001cc0:	f002 fdf0 	bl	80048a4 <ModemOpen>
	setModemMode(gv_spinoConfig.spinoTXModemMode);
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e84 <main+0x280>)
 8001cc6:	7b5b      	ldrb	r3, [r3, #13]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fdd3 	bl	8004874 <setModemMode>
	/* Mode UART - A virer */
	// envoie version :)
	//unsigned char message[] = "SPINO UART 0.1";
	//writeUART(message, sizeof(message) );

	sendTLMWithoutDelay();
 8001cce:	f002 f815 	bl	8003cfc <sendTLMWithoutDelay>

	//bessel start
	I2C_Scan();
 8001cd2:	f7ff fe99 	bl	8001a08 <I2C_Scan>
	VEML7700_Init();
 8001cd6:	f7ff ff3e 	bl	8001b56 <VEML7700_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t ReArm_I2C = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73bb      	strb	r3, [r7, #14]

	while (1)
	{
		/** SPINO*/

		if(CSKB_I2C_TX_Complete || CSKB_I2C_RX_Complete) {
 8001cde:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <main+0x284>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d104      	bne.n	8001cf2 <main+0xee>
 8001ce8:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <main+0x288>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04c      	beq.n	8001d8c <main+0x188>
			ReArm_I2C = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73bb      	strb	r3, [r7, #14]
			if(CSKB_I2C_TX_Complete) {
 8001cf6:	4b64      	ldr	r3, [pc, #400]	@ (8001e88 <main+0x284>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <main+0x104>
				// Do something here

				CSKB_I2C_TX_Complete = 0;
 8001d00:	4b61      	ldr	r3, [pc, #388]	@ (8001e88 <main+0x284>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e041      	b.n	8001d8c <main+0x188>
			} else {
				// Use your data here
				gv_I2C_Write_Data[gv_spino.gv_nb_I2CMAXDATA].size = CSKB_I2C_RX_Size;
 8001d08:	4b61      	ldr	r3, [pc, #388]	@ (8001e90 <main+0x28c>)
 8001d0a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4b61      	ldr	r3, [pc, #388]	@ (8001e94 <main+0x290>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2d8      	uxtb	r0, r3
 8001d14:	4a60      	ldr	r2, [pc, #384]	@ (8001e98 <main+0x294>)
 8001d16:	460b      	mov	r3, r1
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	440b      	add	r3, r1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4602      	mov	r2, r0
 8001d20:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < CSKB_I2C_RX_Size; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	737b      	strb	r3, [r7, #13]
 8001d26:	e013      	b.n	8001d50 <main+0x14c>
					gv_I2C_Write_Data[gv_spino.gv_nb_I2CMAXDATA].data[i] = CSKB_I2C_RX_BUFFER[i];
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <main+0x28c>)
 8001d2c:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8001d2e:	4610      	mov	r0, r2
 8001d30:	7b7a      	ldrb	r2, [r7, #13]
 8001d32:	495a      	ldr	r1, [pc, #360]	@ (8001e9c <main+0x298>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	b2de      	uxtb	r6, r3
 8001d38:	4957      	ldr	r1, [pc, #348]	@ (8001e98 <main+0x294>)
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4403      	add	r3, r0
 8001d40:	440b      	add	r3, r1
 8001d42:	4413      	add	r3, r2
 8001d44:	3301      	adds	r3, #1
 8001d46:	4632      	mov	r2, r6
 8001d48:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < CSKB_I2C_RX_Size; i++) {
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	737b      	strb	r3, [r7, #13]
 8001d50:	4b50      	ldr	r3, [pc, #320]	@ (8001e94 <main+0x290>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	7b7a      	ldrb	r2, [r7, #13]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3e5      	bcc.n	8001d28 <main+0x124>
				}
				gv_spino.gv_nb_I2CMAXDATA = ((gv_spino.gv_nb_I2CMAXDATA+1) % I2CMAXDATA );
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <main+0x28c>)
 8001d5e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea0 <main+0x29c>)
 8001d64:	fb83 1302 	smull	r1, r3, r3, r2
 8001d68:	1059      	asrs	r1, r3, #1
 8001d6a:	17d3      	asrs	r3, r2, #31
 8001d6c:	1ac9      	subs	r1, r1, r3
 8001d6e:	460b      	mov	r3, r1
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	1ad1      	subs	r1, r2, r3
 8001d76:	b28a      	uxth	r2, r1
 8001d78:	4b45      	ldr	r3, [pc, #276]	@ (8001e90 <main+0x28c>)
 8001d7a:	869a      	strh	r2, [r3, #52]	@ 0x34

				// Use CSKB_I2C_NXT_FrameSize if you want the slave to stop transmission after byte count
				// Set to zero if you want the slave to continue answering up to I2C_BUFFER_SIZE
				CSKB_I2C_NXT_FrameSize = CSKB_I2C_RX_Size;
 8001d7c:	4b45      	ldr	r3, [pc, #276]	@ (8001e94 <main+0x290>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <main+0x2a0>)
 8001d84:	701a      	strb	r2, [r3, #0]

				CSKB_I2C_RX_Complete = 0;
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <main+0x288>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			}

		}
		if(ReArm_I2C && HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY) {
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <main+0x1a4>
 8001d92:	483a      	ldr	r0, [pc, #232]	@ (8001e7c <main+0x278>)
 8001d94:	f006 fb59 	bl	800844a <HAL_I2C_GetState>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d104      	bne.n	8001da8 <main+0x1a4>
			ReArm_I2C = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_EnableListen_IT(&hi2c1);
 8001da2:	4836      	ldr	r0, [pc, #216]	@ (8001e7c <main+0x278>)
 8001da4:	f006 fa8a 	bl	80082bc <HAL_I2C_EnableListen_IT>
		}

		/** SPINO */
		if(VHF_Data_Ready == 1) {
 8001da8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <main+0x2a4>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d11d      	bne.n	8001dee <main+0x1ea>
			// Process your data from VHF radio
			lv_RX_FETCH =0;
 8001db2:	493e      	ldr	r1, [pc, #248]	@ (8001eac <main+0x2a8>)
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c1 2300 	strd	r2, r3, [r1]
			gv_spino_data_avalable=1;
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <main+0x2ac>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
			readDataRX(vhf_packet_accessor);
 8001dc6:	482b      	ldr	r0, [pc, #172]	@ (8001e74 <main+0x270>)
 8001dc8:	f002 fdea 	bl	80049a0 <readDataRX>
			VHF_Data_Ready = 0;
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <main+0x2a4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
			si446x_get_int_status(0, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff fd0a 	bl	80017f0 <si446x_get_int_status>
			VHF_fifo_data_count = 0;
 8001ddc:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <main+0x2b0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
			VHF_rstfifo_startrx();
 8001de2:	f7ff fde3 	bl	80019ac <VHF_rstfifo_startrx>
			current_vhf_state = RX_PENDING;
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <main+0x27c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e001      	b.n	8001df2 <main+0x1ee>
		} else if(vhf_overflow) {
 8001dee:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <main+0x2b4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
		//char test_uart[] = "test uart 115200\n";
		//HAL_UART_Transmit(&huart1, test_uart, sizeof(test_uart), HAL_MAX_DELAY);
		//writeUART("Hello world", 100);

		//*****SPINO Functional State Machine
		control();
 8001df2:	f002 f8ef 	bl	8003fd4 <control>
		HAL_Delay(500);
 8001df6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfa:	f005 fc21 	bl	8007640 <HAL_Delay>
		// Reset en cas de Rx bloque
		if((lv_RX_FETCH !=0) && ( (gv_spino.timestamps - lv_RX_FETCH) > 200 ) )
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <main+0x2a8>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	d026      	beq.n	8001e56 <main+0x252>
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <main+0x28c>)
 8001e0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <main+0x2a8>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	1a84      	subs	r4, r0, r2
 8001e16:	eb61 0503 	sbc.w	r5, r1, r3
 8001e1a:	2cc9      	cmp	r4, #201	@ 0xc9
 8001e1c:	f175 0300 	sbcs.w	r3, r5, #0
 8001e20:	d319      	bcc.n	8001e56 <main+0x252>
		{
			reset_si4463();
 8001e22:	f7ff fd5f 	bl	80018e4 <reset_si4463>
			HAL_Delay(20);
 8001e26:	2014      	movs	r0, #20
 8001e28:	f005 fc0a 	bl	8007640 <HAL_Delay>

			uint8_t conf_stat = config_si4463();
 8001e2c:	f7ff fc84 	bl	8001738 <config_si4463>
 8001e30:	4603      	mov	r3, r0
 8001e32:	727b      	strb	r3, [r7, #9]

			uint8_t chiprev = si446x_part_info();
 8001e34:	f7ff fcb8 	bl	80017a8 <si446x_part_info>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	723b      	strb	r3, [r7, #8]

			// Clearing all interrupt in the SI446x
			si446x_get_int_status(0, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff fcd5 	bl	80017f0 <si446x_get_int_status>

			VHF_rstfifo_startrx();
 8001e46:	f7ff fdb1 	bl	80019ac <VHF_rstfifo_startrx>
			current_vhf_state = RX_PENDING;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <main+0x27c>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
			VHF_fifo_data_count =0;
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <main+0x2b0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//bessel start
		float lux = VEML7700_GetLux();
 8001e56:	f7ff fe8b 	bl	8001b70 <VEML7700_GetLux>
 8001e5a:	ed87 0a01 	vstr	s0, [r7, #4]
		AfficherLumiere(lux);
 8001e5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e62:	f7ff fea9 	bl	8001bb8 <AfficherLumiere>
		HAL_Delay(2000);
 8001e66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e6a:	f005 fbe9 	bl	8007640 <HAL_Delay>
	{
 8001e6e:	e736      	b.n	8001cde <main+0xda>
 8001e70:	2000154c 	.word	0x2000154c
 8001e74:	2000164c 	.word	0x2000164c
 8001e78:	200018bc 	.word	0x200018bc
 8001e7c:	200016a0 	.word	0x200016a0
 8001e80:	20001910 	.word	0x20001910
 8001e84:	2000256c 	.word	0x2000256c
 8001e88:	20001341 	.word	0x20001341
 8001e8c:	20001342 	.word	0x20001342
 8001e90:	20002590 	.word	0x20002590
 8001e94:	20001344 	.word	0x20001344
 8001e98:	2002133c 	.word	0x2002133c
 8001e9c:	20001348 	.word	0x20001348
 8001ea0:	66666667 	.word	0x66666667
 8001ea4:	20001345 	.word	0x20001345
 8001ea8:	20001447 	.word	0x20001447
 8001eac:	20001a18 	.word	0x20001a18
 8001eb0:	20003b8c 	.word	0x20003b8c
 8001eb4:	20001448 	.word	0x20001448
 8001eb8:	2000169c 	.word	0x2000169c

08001ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b096      	sub	sp, #88	@ 0x58
 8001ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	2244      	movs	r2, #68	@ 0x44
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00c fbba 	bl	800e644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ede:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ee2:	f007 fed3 	bl	8009c8c <HAL_PWREx_ControlVoltageScaling>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001eec:	f000 fc74 	bl	80027d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ef0:	f007 feae 	bl	8009c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <SystemClock_Config+0xb8>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <SystemClock_Config+0xb8>)
 8001efc:	f023 0318 	bic.w	r3, r3, #24
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f04:	2305      	movs	r3, #5
 8001f06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f12:	2302      	movs	r3, #2
 8001f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f16:	2303      	movs	r3, #3
 8001f18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f22:	2307      	movs	r3, #7
 8001f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4618      	mov	r0, r3
 8001f34:	f007 ff00 	bl	8009d38 <HAL_RCC_OscConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001f3e:	f000 fc4b 	bl	80027d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f42:	230f      	movs	r3, #15
 8001f44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f46:	2303      	movs	r3, #3
 8001f48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f008 fb00 	bl	800a560 <HAL_RCC_ClockConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f66:	f000 fc37 	bl	80027d8 <Error_Handler>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3758      	adds	r7, #88	@ 0x58
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <MX_I2C1_Init+0x78>)
 8001f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff4 <MX_I2C1_Init+0x7c>)
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f88:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fb2:	480e      	ldr	r0, [pc, #56]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fb4:	f005 fe97 	bl	8007ce6 <HAL_I2C_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fbe:	f000 fc0b 	bl	80027d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4809      	ldr	r0, [pc, #36]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fc6:	f007 fdab 	bl	8009b20 <HAL_I2CEx_ConfigAnalogFilter>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fd0:	f000 fc02 	bl	80027d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fd8:	f007 fded 	bl	8009bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fe2:	f000 fbf9 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200016a0 	.word	0x200016a0
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	00b07cb4 	.word	0x00b07cb4

08001ff8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <MX_I2C4_Init+0x74>)
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <MX_I2C4_Init+0x78>)
 8002000:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x006039F7;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_I2C4_Init+0x74>)
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <MX_I2C4_Init+0x7c>)
 8002006:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <MX_I2C4_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <MX_I2C4_Init+0x74>)
 8002010:	2201      	movs	r2, #1
 8002012:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <MX_I2C4_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <MX_I2C4_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <MX_I2C4_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_I2C4_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_I2C4_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <MX_I2C4_Init+0x74>)
 8002034:	f005 fe57 	bl	8007ce6 <HAL_I2C_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800203e:	f000 fbcb 	bl	80027d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4809      	ldr	r0, [pc, #36]	@ (800206c <MX_I2C4_Init+0x74>)
 8002046:	f007 fd6b 	bl	8009b20 <HAL_I2CEx_ConfigAnalogFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002050:	f000 fbc2 	bl	80027d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002054:	2100      	movs	r1, #0
 8002056:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_I2C4_Init+0x74>)
 8002058:	f007 fdad 	bl	8009bb6 <HAL_I2CEx_ConfigDigitalFilter>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002062:	f000 fbb9 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200016f4 	.word	0x200016f4
 8002070:	40008400 	.word	0x40008400
 8002074:	006039f7 	.word	0x006039f7

08002078 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <MX_LPUART1_UART_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_LPUART1_UART_Init+0x50>)
 80020b6:	f00a fdbf 	bl	800cc38 <HAL_UART_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80020c0:	f000 fb8a 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20001748 	.word	0x20001748
 80020cc:	40008000 	.word	0x40008000

080020d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020d4:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <MX_RTC_Init+0x48>)
 80020d6:	4a11      	ldr	r2, [pc, #68]	@ (800211c <MX_RTC_Init+0x4c>)
 80020d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <MX_RTC_Init+0x48>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <MX_RTC_Init+0x48>)
 80020e2:	227f      	movs	r2, #127	@ 0x7f
 80020e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_RTC_Init+0x48>)
 80020e8:	22ff      	movs	r2, #255	@ 0xff
 80020ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <MX_RTC_Init+0x48>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_RTC_Init+0x48>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <MX_RTC_Init+0x48>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_RTC_Init+0x48>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_RTC_Init+0x48>)
 8002106:	f008 ff7d 	bl	800b004 <HAL_RTC_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002110:	f000 fb62 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200017d0 	.word	0x200017d0
 800211c:	40002800 	.word	0x40002800

08002120 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <MX_SPI2_Init+0x78>)
 8002128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_SPI2_Init+0x74>)
 800212c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_SPI2_Init+0x74>)
 800213a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800213e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <MX_SPI2_Init+0x74>)
 800214e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002152:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002156:	2208      	movs	r2, #8
 8002158:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <MX_SPI2_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <MX_SPI2_Init+0x74>)
 800216e:	2207      	movs	r2, #7
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <MX_SPI2_Init+0x74>)
 800217a:	2208      	movs	r2, #8
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_SPI2_Init+0x74>)
 8002180:	f009 f85e 	bl	800b240 <HAL_SPI_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800218a:	f000 fb25 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200017f4 	.word	0x200017f4
 8002198:	40003800 	.word	0x40003800

0800219c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <MX_SPI3_Init+0x78>)
 80021a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021ae:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b4:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021d2:	2208      	movs	r2, #8
 80021d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021ea:	2207      	movs	r2, #7
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021f6:	2208      	movs	r2, #8
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_SPI3_Init+0x74>)
 80021fc:	f009 f820 	bl	800b240 <HAL_SPI_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002206:	f000 fae7 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20001858 	.word	0x20001858
 8002214:	40003c00 	.word	0x40003c00

08002218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <MX_TIM2_Init+0x98>)
 8002238:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800223c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_TIM2_Init+0x98>)
 8002240:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_TIM2_Init+0x98>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_TIM2_Init+0x98>)
 800224e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_TIM2_Init+0x98>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <MX_TIM2_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002260:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <MX_TIM2_Init+0x98>)
 8002262:	f00a f89d 	bl	800c3a0 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800226c:	f000 fab4 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <MX_TIM2_Init+0x98>)
 800227e:	f00a fa4a 	bl	800c716 <HAL_TIM_ConfigClockSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002288:	f000 faa6 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_TIM2_Init+0x98>)
 800229a:	f00a fc41 	bl	800cb20 <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80022a4:	f000 fa98 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200018bc 	.word	0x200018bc

080022b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	4b56      	ldr	r3, [pc, #344]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	4a55      	ldr	r2, [pc, #340]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d6:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e2:	4b50      	ldr	r3, [pc, #320]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <MX_GPIO_Init+0x170>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	4a49      	ldr	r2, [pc, #292]	@ (8002424 <MX_GPIO_Init+0x170>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <MX_GPIO_Init+0x170>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b44      	ldr	r3, [pc, #272]	@ (8002424 <MX_GPIO_Init+0x170>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	4a43      	ldr	r2, [pc, #268]	@ (8002424 <MX_GPIO_Init+0x170>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <MX_GPIO_Init+0x170>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin|FRAM_PWR_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8002330:	483d      	ldr	r0, [pc, #244]	@ (8002428 <MX_GPIO_Init+0x174>)
 8002332:	f005 fc9d 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VHF_SDN_Pin|VHF_PWR_EN_Pin|EXT_PWR_EN_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800233c:	483b      	ldr	r0, [pc, #236]	@ (800242c <MX_GPIO_Init+0x178>)
 800233e:	f005 fc97 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UHF_PWR_EN_Pin|UHF_FE_EN_Pin|UHF_NRST_Pin|UHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 410e 	mov.w	r1, #36352	@ 0x8e00
 8002348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234c:	f005 fc90 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VHF_SPI_NSS_Pin FRAM_PWR_Pin */
  GPIO_InitStruct.Pin = VHF_SPI_NSS_Pin|FRAM_PWR_Pin;
 8002350:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	482f      	ldr	r0, [pc, #188]	@ (8002428 <MX_GPIO_Init+0x174>)
 800236a:	f005 fb07 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : VHF_NIRQ_Pin */
  GPIO_InitStruct.Pin = VHF_NIRQ_Pin;
 800236e:	2340      	movs	r3, #64	@ 0x40
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002372:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VHF_NIRQ_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	482a      	ldr	r0, [pc, #168]	@ (800242c <MX_GPIO_Init+0x178>)
 8002384:	f005 fafa 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : VHF_SDN_Pin VHF_PWR_EN_Pin EXT_PWR_EN_Pin */
  GPIO_InitStruct.Pin = VHF_SDN_Pin|VHF_PWR_EN_Pin|EXT_PWR_EN_Pin;
 8002388:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4822      	ldr	r0, [pc, #136]	@ (800242c <MX_GPIO_Init+0x178>)
 80023a2:	f005 faeb 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_PWR_NFLT_Pin UHF_INT_Pin */
  GPIO_InitStruct.Pin = EXT_PWR_NFLT_Pin|UHF_INT_Pin;
 80023a6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f005 fadc 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_PWR_EN_Pin UHF_FE_EN_Pin UHF_NRST_Pin UHF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = UHF_PWR_EN_Pin|UHF_FE_EN_Pin|UHF_NRST_Pin|UHF_SPI_NSS_Pin;
 80023c4:	f44f 430e 	mov.w	r3, #36352	@ 0x8e00
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e0:	f005 facc 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e4:	2308      	movs	r3, #8
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	480c      	ldr	r0, [pc, #48]	@ (8002428 <MX_GPIO_Init+0x174>)
 80023f8:	f005 fac0 	bl	800797c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2017      	movs	r0, #23
 8002402:	f005 fa32 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002406:	2017      	movs	r0, #23
 8002408:	f005 fa4b 	bl	80078a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2028      	movs	r0, #40	@ 0x28
 8002412:	f005 fa2a 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002416:	2028      	movs	r0, #40	@ 0x28
 8002418:	f005 fa43 	bl	80078a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	@ 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800

08002430 <EXTI9_5_IRQHandler>:
/* USER CODE BEGIN 4 */
/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(VHF_NIRQ_Pin)){
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <EXTI9_5_IRQHandler+0x84>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d030      	beq.n	80024a2 <EXTI9_5_IRQHandler+0x72>
		if(current_vhf_state != IDLE) {
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <EXTI9_5_IRQHandler+0x88>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02c      	beq.n	80024a2 <EXTI9_5_IRQHandler+0x72>
			switch(current_vhf_state) {
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <EXTI9_5_IRQHandler+0x88>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d124      	bne.n	800249a <EXTI9_5_IRQHandler+0x6a>
			case RX_PENDING:
				// Fetch interrupt status to decide what to do
				// Expected interrupt are:
				// RX_FIFO_THRESHOLD => fetch an other 48byte of data
				// RX_PACKET => Validate the packet
				current_vhf_state = FETCHING_STATUS;
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <EXTI9_5_IRQHandler+0x88>)
 8002452:	2202      	movs	r2, #2
 8002454:	701a      	strb	r2, [r3, #0]
				lv_RX_FETCH = gv_spino.timestamps;
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <EXTI9_5_IRQHandler+0x8c>)
 8002458:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800245c:	4918      	ldr	r1, [pc, #96]	@ (80024c0 <EXTI9_5_IRQHandler+0x90>)
 800245e:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002468:	4816      	ldr	r0, [pc, #88]	@ (80024c4 <EXTI9_5_IRQHandler+0x94>)
 800246a:	f005 fc01 	bl	8007c70 <HAL_GPIO_WritePin>

				packet_done = 0;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <EXTI9_5_IRQHandler+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
				zero_buff[0] = SI446X_CMD_ID_GET_INT_STATUS;
 8002474:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <EXTI9_5_IRQHandler+0x9c>)
 8002476:	2220      	movs	r2, #32
 8002478:	701a      	strb	r2, [r3, #0]
				zero_buff[1] = 0;
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <EXTI9_5_IRQHandler+0x9c>)
 800247c:	2200      	movs	r2, #0
 800247e:	705a      	strb	r2, [r3, #1]
				zero_buff[2] = 0;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <EXTI9_5_IRQHandler+0x9c>)
 8002482:	2200      	movs	r2, #0
 8002484:	709a      	strb	r2, [r3, #2]
				zero_buff[3] = 0;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <EXTI9_5_IRQHandler+0x9c>)
 8002488:	2200      	movs	r2, #0
 800248a:	70da      	strb	r2, [r3, #3]
				HAL_SPI_TransmitReceive_IT(&hspi2, zero_buff, rx_data, 4);
 800248c:	2304      	movs	r3, #4
 800248e:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <EXTI9_5_IRQHandler+0xa0>)
 8002490:	490e      	ldr	r1, [pc, #56]	@ (80024cc <EXTI9_5_IRQHandler+0x9c>)
 8002492:	4810      	ldr	r0, [pc, #64]	@ (80024d4 <EXTI9_5_IRQHandler+0xa4>)
 8002494:	f009 fb0c 	bl	800bab0 <HAL_SPI_TransmitReceive_IT>

				break;
 8002498:	e003      	b.n	80024a2 <EXTI9_5_IRQHandler+0x72>
			default:
				vhf_overflow = 1;
 800249a:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <EXTI9_5_IRQHandler+0xa8>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
				break;
 80024a0:	bf00      	nop
			}
		}
	}

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(VHF_NIRQ_Pin);
 80024a2:	2040      	movs	r0, #64	@ 0x40
 80024a4:	f005 fbfc 	bl	8007ca0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(EXT_PWR_NFLT_Pin);
 80024a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80024ac:	f005 fbf8 	bl	8007ca0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40010400 	.word	0x40010400
 80024b8:	20001910 	.word	0x20001910
 80024bc:	20002590 	.word	0x20002590
 80024c0:	20001a18 	.word	0x20001a18
 80024c4:	48000400 	.word	0x48000400
 80024c8:	20001449 	.word	0x20001449
 80024cc:	2000144c 	.word	0x2000144c
 80024d0:	2000167c 	.word	0x2000167c
 80024d4:	200017f4 	.word	0x200017f4
 80024d8:	2000169c 	.word	0x2000169c

080024dc <HAL_I2C_SlaveTxCpltCallback>:

/* I2C slave callback */
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	/* TX transfer is complete */

	//CSKB_I2C_TX_Complete = 1;
	//CSKB_I2C_TX_Size = I2C_BUFFER_SIZE;
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	/* RX transfer is complete */

	//CSKB_I2C_RX_Complete = 1;
	//CSKB_I2C_RX_Size = I2C_BUFFER_SIZE;
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
 8002510:	4613      	mov	r3, r2
 8002512:	803b      	strh	r3, [r7, #0]
	/* Slave matched his address */
	if (TransferDirection != 0) {
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01b      	beq.n	8002552 <HAL_I2C_AddrCallback+0x4e>
		/* I2C Transmit buffer */
		CSKB_I2C_Dir = I2C_TX;
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_I2C_AddrCallback+0x74>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
		uint8_t framesize = (CSKB_I2C_NXT_FrameSize == 0) ? I2C_BUFFER_SIZE : CSKB_I2C_NXT_FrameSize;
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_I2C_AddrCallback+0x78>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_I2C_AddrCallback+0x2e>
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_I2C_AddrCallback+0x78>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e000      	b.n	8002534 <HAL_I2C_AddrCallback+0x30>
 8002532:	23ff      	movs	r3, #255	@ 0xff
 8002534:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)CSKB_I2C_TX_BUFFER, framesize, I2C_FIRST_AND_LAST_FRAME) != HAL_OK) {
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	b29a      	uxth	r2, r3
 800253a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253e:	4910      	ldr	r1, [pc, #64]	@ (8002580 <HAL_I2C_AddrCallback+0x7c>)
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f005 fd57 	bl	8007ff4 <HAL_I2C_Slave_Seq_Transmit_IT>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <HAL_I2C_AddrCallback+0x6c>
			/* Transfer error in transmission process */
			Error_Handler();
 800254c:	f000 f944 	bl	80027d8 <Error_Handler>
			/* Transfer error in reception process */
			Error_Handler();
		}
	}

}
 8002550:	e00e      	b.n	8002570 <HAL_I2C_AddrCallback+0x6c>
		CSKB_I2C_Dir = I2C_RX;
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_I2C_AddrCallback+0x74>)
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
		if (HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)CSKB_I2C_RX_BUFFER, I2C_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK) {
 8002558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800255c:	22ff      	movs	r2, #255	@ 0xff
 800255e:	4909      	ldr	r1, [pc, #36]	@ (8002584 <HAL_I2C_AddrCallback+0x80>)
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f005 fdf9 	bl	8008158 <HAL_I2C_Slave_Seq_Receive_IT>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_AddrCallback+0x6c>
			Error_Handler();
 800256c:	f000 f934 	bl	80027d8 <Error_Handler>
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20001340 	.word	0x20001340
 800257c:	20001345 	.word	0x20001345
 8002580:	20001914 	.word	0x20001914
 8002584:	20001348 	.word	0x20001348

08002588 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/* Handling here incomplete RX/TX with dirty hack */
	if (CSKB_I2C_Dir == I2C_TX) {
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <HAL_I2C_ListenCpltCallback+0x74>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d118      	bne.n	80025cc <HAL_I2C_ListenCpltCallback+0x44>
		CSKB_I2C_TX_Complete = 1;
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_I2C_ListenCpltCallback+0x78>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		CSKB_I2C_TX_Size = (CSKB_I2C_NXT_FrameSize == 0) ? I2C_BUFFER_SIZE - hi2c->XferSize : CSKB_I2C_NXT_FrameSize - hi2c->XferSize;
 80025a0:	4b18      	ldr	r3, [pc, #96]	@ (8002604 <HAL_I2C_ListenCpltCallback+0x7c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_I2C_ListenCpltCallback+0x2e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e007      	b.n	80025c6 <HAL_I2C_ListenCpltCallback+0x3e>
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_I2C_ListenCpltCallback+0x7c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_I2C_ListenCpltCallback+0x80>)
 80025c8:	7013      	strb	r3, [r2, #0]
 80025ca:	e00e      	b.n	80025ea <HAL_I2C_ListenCpltCallback+0x62>
	} else if (CSKB_I2C_Dir == I2C_RX) {
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_I2C_ListenCpltCallback+0x74>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d109      	bne.n	80025ea <HAL_I2C_ListenCpltCallback+0x62>
		CSKB_I2C_RX_Complete = 1;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_I2C_ListenCpltCallback+0x84>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		CSKB_I2C_RX_Size = I2C_BUFFER_SIZE - hi2c->XferSize;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_I2C_ListenCpltCallback+0x88>)
 80025e8:	701a      	strb	r2, [r3, #0]
	}
	CSKB_I2C_Dir = I2C_NONE;
 80025ea:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <HAL_I2C_ListenCpltCallback+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	20001340 	.word	0x20001340
 8002600:	20001341 	.word	0x20001341
 8002604:	20001345 	.word	0x20001345
 8002608:	20001343 	.word	0x20001343
 800260c:	20001342 	.word	0x20001342
 8002610:	20001344 	.word	0x20001344

08002614 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	/*if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
{
Error_Handler();
}*/
	// Really dirty trick no warranties
	if ((HAL_I2C_GetError(I2cHandle) == HAL_I2C_ERROR_AF) && (HAL_I2C_GetState(I2cHandle) != HAL_I2C_STATE_BUSY)) {
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f005 ff22 	bl	8008466 <HAL_I2C_GetError>
 8002622:	4603      	mov	r3, r0
 8002624:	2b04      	cmp	r3, #4
 8002626:	d104      	bne.n	8002632 <HAL_I2C_ErrorCallback+0x1e>
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f005 ff0e 	bl	800844a <HAL_I2C_GetState>
 800262e:	4603      	mov	r3, r0
 8002630:	2b24      	cmp	r3, #36	@ 0x24
		return; // no real error!!!
	}
}
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002638:	b4b0      	push	{r4, r5, r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d108      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x26>
		ms_counter++;
 800264c:	4b07      	ldr	r3, [pc, #28]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	1c54      	adds	r4, r2, #1
 8002654:	f143 0500 	adc.w	r5, r3, #0
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800265a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bcb0      	pop	{r4, r5, r7}
 8002666:	4770      	bx	lr
 8002668:	200018bc 	.word	0x200018bc
 800266c:	20001338 	.word	0x20001338

08002670 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi2);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <SPI2_IRQHandler+0x10>)
 8002676:	f009 fac5 	bl	800bc04 <HAL_SPI_IRQHandler>
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200017f4 	.word	0x200017f4

08002684 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_SPI_TxRxCpltCallback+0x130>)
 8002692:	4293      	cmp	r3, r2
 8002694:	f040 8089 	bne.w	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
		if (current_vhf_state == FETCHING_STATUS) {
 8002698:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d10b      	bne.n	80026b8 <HAL_SPI_TxRxCpltCallback+0x34>
			HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026a6:	4845      	ldr	r0, [pc, #276]	@ (80027bc <HAL_SPI_TxRxCpltCallback+0x138>)
 80026a8:	f005 fae2 	bl	8007c70 <HAL_GPIO_WritePin>
			current_vhf_state = CTS_POLLING;
 80026ac:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 80026ae:	2205      	movs	r2, #5
 80026b0:	701a      	strb	r2, [r3, #0]
			si446x_cts_it_poll();
 80026b2:	f7ff f95d 	bl	8001970 <si446x_cts_it_poll>
			} else {
				current_vhf_state = RX_PENDING;
			}
		}
	}
}
 80026b6:	e078      	b.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
		} else if(current_vhf_state == CTS_POLLING) {
 80026b8:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d11a      	bne.n	80026f6 <HAL_SPI_TxRxCpltCallback+0x72>
			if(rx_data[1] != 0xFF) {
 80026c0:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <HAL_SPI_TxRxCpltCallback+0x13c>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2bff      	cmp	r3, #255	@ 0xff
 80026c8:	d00b      	beq.n	80026e2 <HAL_SPI_TxRxCpltCallback+0x5e>
				HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026d0:	483a      	ldr	r0, [pc, #232]	@ (80027bc <HAL_SPI_TxRxCpltCallback+0x138>)
 80026d2:	f005 facd 	bl	8007c70 <HAL_GPIO_WritePin>
				__NOP();
 80026d6:	bf00      	nop
				__NOP();
 80026d8:	bf00      	nop
				__NOP();
 80026da:	bf00      	nop
				si446x_cts_it_poll();
 80026dc:	f7ff f948 	bl	8001970 <si446x_cts_it_poll>
}
 80026e0:	e063      	b.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
				current_vhf_state = STATUS_PENDING;
 80026e2:	4b35      	ldr	r3, [pc, #212]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 80026e4:	2206      	movs	r2, #6
 80026e6:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, zero_buff, rx_data, 8);
 80026e8:	2308      	movs	r3, #8
 80026ea:	4a35      	ldr	r2, [pc, #212]	@ (80027c0 <HAL_SPI_TxRxCpltCallback+0x13c>)
 80026ec:	4935      	ldr	r1, [pc, #212]	@ (80027c4 <HAL_SPI_TxRxCpltCallback+0x140>)
 80026ee:	4836      	ldr	r0, [pc, #216]	@ (80027c8 <HAL_SPI_TxRxCpltCallback+0x144>)
 80026f0:	f009 f9de 	bl	800bab0 <HAL_SPI_TransmitReceive_IT>
}
 80026f4:	e059      	b.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
		} else if(current_vhf_state == STATUS_PENDING) {
 80026f6:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d13c      	bne.n	8002778 <HAL_SPI_TxRxCpltCallback+0xf4>
			HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 80026fe:	2201      	movs	r2, #1
 8002700:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002704:	482d      	ldr	r0, [pc, #180]	@ (80027bc <HAL_SPI_TxRxCpltCallback+0x138>)
 8002706:	f005 fab3 	bl	8007c70 <HAL_GPIO_WritePin>
			current_vhf_state = STATUS_OK;
 800270a:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 800270c:	2207      	movs	r2, #7
 800270e:	701a      	strb	r2, [r3, #0]
			uint8_t PH_PEND = rx_data[2];
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <HAL_SPI_TxRxCpltCallback+0x13c>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	73fb      	strb	r3, [r7, #15]
			uint8_t fifo_thresh = (PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_RX_FIFO_ALMOST_FULL_BIT);
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	73bb      	strb	r3, [r7, #14]
			uint8_t rx_packet = ((PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT) << 1);
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	737b      	strb	r3, [r7, #13]
			if(fifo_thresh) {
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03c      	beq.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
				HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002736:	4821      	ldr	r0, [pc, #132]	@ (80027bc <HAL_SPI_TxRxCpltCallback+0x138>)
 8002738:	f005 fa9a 	bl	8007c70 <HAL_GPIO_WritePin>
				zero_buff[0] = SI446X_CMD_ID_READ_RX_FIFO;
 800273c:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <HAL_SPI_TxRxCpltCallback+0x140>)
 800273e:	2277      	movs	r2, #119	@ 0x77
 8002740:	701a      	strb	r2, [r3, #0]
				current_vhf_state = FETCHING_DATA;
 8002742:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 8002744:	2204      	movs	r2, #4
 8002746:	701a      	strb	r2, [r3, #0]
				VHF_fifo_data_count++;
 8002748:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_SPI_TxRxCpltCallback+0x148>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_SPI_TxRxCpltCallback+0x148>)
 8002754:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, zero_buff, &vhf_packet[(VHF_fifo_data_count-1) * (RX_FIFO_THRES+1)], RX_FIFO_THRES + 1);
 8002756:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_SPI_TxRxCpltCallback+0x148>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	00da      	lsls	r2, r3, #3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <HAL_SPI_TxRxCpltCallback+0x14c>)
 800276a:	441a      	add	r2, r3
 800276c:	2315      	movs	r3, #21
 800276e:	4915      	ldr	r1, [pc, #84]	@ (80027c4 <HAL_SPI_TxRxCpltCallback+0x140>)
 8002770:	4815      	ldr	r0, [pc, #84]	@ (80027c8 <HAL_SPI_TxRxCpltCallback+0x144>)
 8002772:	f009 f99d 	bl	800bab0 <HAL_SPI_TransmitReceive_IT>
}
 8002776:	e018      	b.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
		} else if (current_vhf_state == FETCHING_DATA) {
 8002778:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d114      	bne.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
			HAL_GPIO_WritePin(GPIOB, VHF_SPI_NSS_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002786:	480d      	ldr	r0, [pc, #52]	@ (80027bc <HAL_SPI_TxRxCpltCallback+0x138>)
 8002788:	f005 fa72 	bl	8007c70 <HAL_GPIO_WritePin>
			if(VHF_fifo_data_count == NB_FETCH) {
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_SPI_TxRxCpltCallback+0x148>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d106      	bne.n	80027a4 <HAL_SPI_TxRxCpltCallback+0x120>
				VHF_Data_Ready = 1;
 8002796:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_SPI_TxRxCpltCallback+0x150>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
				current_vhf_state = IDLE;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
}
 80027a2:	e002      	b.n	80027aa <HAL_SPI_TxRxCpltCallback+0x126>
				current_vhf_state = RX_PENDING;
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_SPI_TxRxCpltCallback+0x134>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40003800 	.word	0x40003800
 80027b8:	20001910 	.word	0x20001910
 80027bc:	48000400 	.word	0x48000400
 80027c0:	2000167c 	.word	0x2000167c
 80027c4:	2000144c 	.word	0x2000144c
 80027c8:	200017f4 	.word	0x200017f4
 80027cc:	20001448 	.word	0x20001448
 80027d0:	2000154c 	.word	0x2000154c
 80027d4:	20001447 	.word	0x20001447

080027d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027dc:	b672      	cpsid	i
}
 80027de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	/* WTF ? ! We shouldn't be here ! */
	NVIC_SystemReset();
 80027e0:	f7ff f8fc 	bl	80019dc <__NVIC_SystemReset>

080027e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <HAL_MspInit+0x44>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_MspInit+0x44>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <HAL_MspInit+0x44>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_MspInit+0x44>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_MspInit+0x44>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_MspInit+0x44>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0a4      	sub	sp, #144	@ 0x90
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	2264      	movs	r2, #100	@ 0x64
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f00b fef9 	bl	800e644 <memset>
  if(hi2c->Instance==I2C1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4d      	ldr	r2, [pc, #308]	@ (800298c <HAL_I2C_MspInit+0x160>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d143      	bne.n	80028e4 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800285c:	2340      	movs	r3, #64	@ 0x40
 800285e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002860:	2300      	movs	r3, #0
 8002862:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	4618      	mov	r0, r3
 800286a:	f008 f89d 	bl	800a9a8 <HAL_RCCEx_PeriphCLKConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002874:	f7ff ffb0 	bl	80027d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002878:	4b45      	ldr	r3, [pc, #276]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287c:	4a44      	ldr	r2, [pc, #272]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002884:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EXT_I2C_SCL_Pin|EXT_I2C_SDA_Pin;
 8002890:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002894:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002896:	2312      	movs	r3, #18
 8002898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028a8:	2304      	movs	r3, #4
 80028aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80028b2:	4619      	mov	r1, r3
 80028b4:	4837      	ldr	r0, [pc, #220]	@ (8002994 <HAL_I2C_MspInit+0x168>)
 80028b6:	f005 f861 	bl	800797c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ba:	4b35      	ldr	r3, [pc, #212]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	4a34      	ldr	r2, [pc, #208]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 80028c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c6:	4b32      	ldr	r3, [pc, #200]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	201f      	movs	r0, #31
 80028d8:	f004 ffc7 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028dc:	201f      	movs	r0, #31
 80028de:	f004 ffe0 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002998 <HAL_I2C_MspInit+0x16c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d14a      	bne.n	8002984 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80028ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f008 f853 	bl	800a9a8 <HAL_RCCEx_PeriphCLKConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8002908:	f7ff ff66 	bl	80027d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 8002912:	f043 0302 	orr.w	r3, r3, #2
 8002916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT_I2C_SCL_Pin|INT_I2C_SDA_Pin;
 8002924:	23c0      	movs	r3, #192	@ 0xc0
 8002926:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002928:	2312      	movs	r3, #18
 800292a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 800293a:	2305      	movs	r3, #5
 800293c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002944:	4619      	mov	r1, r3
 8002946:	4813      	ldr	r0, [pc, #76]	@ (8002994 <HAL_I2C_MspInit+0x168>)
 8002948:	f005 f818 	bl	800797c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_I2C_MspInit+0x164>)
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2053      	movs	r0, #83	@ 0x53
 800296a:	f004 ff7e 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800296e:	2053      	movs	r0, #83	@ 0x53
 8002970:	f004 ff97 	bl	80078a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	2054      	movs	r0, #84	@ 0x54
 800297a:	f004 ff76 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800297e:	2054      	movs	r0, #84	@ 0x54
 8002980:	f004 ff8f 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 8002984:	bf00      	nop
 8002986:	3790      	adds	r7, #144	@ 0x90
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40005400 	.word	0x40005400
 8002990:	40021000 	.word	0x40021000
 8002994:	48000400 	.word	0x48000400
 8002998:	40008400 	.word	0x40008400

0800299c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0a2      	sub	sp, #136	@ 0x88
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	2264      	movs	r2, #100	@ 0x64
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f00b fe41 	bl	800e644 <memset>
  if(huart->Instance==LPUART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_UART_MspInit+0xa8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d137      	bne.n	8002a3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029cc:	2320      	movs	r3, #32
 80029ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f007 ffe5 	bl	800a9a8 <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029e4:	f7ff fef8 	bl	80027d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a10      	ldr	r2, [pc, #64]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_UART_MspInit+0xac>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a34:	4619      	mov	r1, r3
 8002a36:	4805      	ldr	r0, [pc, #20]	@ (8002a4c <HAL_UART_MspInit+0xb0>)
 8002a38:	f004 ffa0 	bl	800797c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002a3c:	bf00      	nop
 8002a3e:	3788      	adds	r7, #136	@ 0x88
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40008000 	.word	0x40008000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	48000800 	.word	0x48000800

08002a50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b09c      	sub	sp, #112	@ 0x70
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	2264      	movs	r2, #100	@ 0x64
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00b fdef 	bl	800e644 <memset>
  if(hrtc->Instance==RTC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_RTC_MspInit+0x58>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d117      	bne.n	8002aa0 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f007 ff91 	bl	800a9a8 <HAL_RCCEx_PeriphCLKConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a8c:	f7ff fea4 	bl	80027d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RTC_MspInit+0x5c>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <HAL_RTC_MspInit+0x5c>)
 8002a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3770      	adds	r7, #112	@ 0x70
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40002800 	.word	0x40002800
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	@ 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <HAL_SPI_MspInit+0xec>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d131      	bne.n	8002b36 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	4a32      	ldr	r2, [pc, #200]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ade:	4b30      	ldr	r3, [pc, #192]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = VHF_SPI_SCK_Pin|VHF_SPI_MISO_Pin|VHF_SPI_MOSI_Pin;
 8002b02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b14:	2305      	movs	r3, #5
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4821      	ldr	r0, [pc, #132]	@ (8002ba4 <HAL_SPI_MspInit+0xf4>)
 8002b20:	f004 ff2c 	bl	800797c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2024      	movs	r0, #36	@ 0x24
 8002b2a:	f004 fe9e 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b2e:	2024      	movs	r0, #36	@ 0x24
 8002b30:	f004 feb7 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b34:	e02d      	b.n	8002b92 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_SPI_MspInit+0xf8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d128      	bne.n	8002b92 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_SPI_MspInit+0xf0>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UHF_SPI_SCK_Pin|UHF_SPI_MISO_Pin|UHF_SPI_MOSI_Pin;
 8002b70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b82:	2306      	movs	r3, #6
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4807      	ldr	r0, [pc, #28]	@ (8002bac <HAL_SPI_MspInit+0xfc>)
 8002b8e:	f004 fef5 	bl	800797c <HAL_GPIO_Init>
}
 8002b92:	bf00      	nop
 8002b94:	3730      	adds	r7, #48	@ 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40003800 	.word	0x40003800
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	40003c00 	.word	0x40003c00
 8002bac:	48000800 	.word	0x48000800

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d113      	bne.n	8002bea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x44>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x44>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x44>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	201c      	movs	r0, #28
 8002be0:	f004 fe43 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002be4:	201c      	movs	r0, #28
 8002be6:	f004 fe5c 	bl	80078a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <NMI_Handler+0x4>

08002c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <MemManage_Handler+0x4>

08002c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f004 fcd7 	bl	8007600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <TIM2_IRQHandler+0x10>)
 8002c5e:	f009 fc53 	bl	800c508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200018bc 	.word	0x200018bc

08002c6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <I2C1_EV_IRQHandler+0x10>)
 8002c72:	f005 fb43 	bl	80082fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200016a0 	.word	0x200016a0

08002c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UHF_INT_Pin);
 8002c84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c88:	f005 f80a 	bl	8007ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <I2C4_EV_IRQHandler+0x10>)
 8002c96:	f005 fb31 	bl	80082fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200016f4 	.word	0x200016f4

08002ca4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <I2C4_ER_IRQHandler+0x10>)
 8002caa:	f005 fb41 	bl	8008330 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200016f4 	.word	0x200016f4

08002cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_kill>:

int _kill(int pid, int sig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cd2:	f00b fd1d 	bl	800e710 <__errno>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2216      	movs	r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
	return -1;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_exit>:

void _exit (int status)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffe7 	bl	8002cc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <_exit+0x12>

08002cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e00a      	b.n	8002d26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d10:	f3af 8000 	nop.w
 8002d14:	4601      	mov	r1, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	60ba      	str	r2, [r7, #8]
 8002d1c:	b2ca      	uxtb	r2, r1
 8002d1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbf0      	blt.n	8002d10 <_read+0x12>
	}

return len;
 8002d2e:	687b      	ldr	r3, [r7, #4]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e009      	b.n	8002d5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	60ba      	str	r2, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dbf1      	blt.n	8002d4a <_write+0x12>
	}
	return len;
 8002d66:	687b      	ldr	r3, [r7, #4]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_close>:

int _close(int file)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d98:	605a      	str	r2, [r3, #4]
	return 0;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_isatty>:

int _isatty(int file)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	return 1;
 8002db0:	2301      	movs	r3, #1
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
	return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f00b fc82 	bl	800e710 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20028000 	.word	0x20028000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	20001a20 	.word	0x20001a20
 8002e40:	20021998 	.word	0x20021998

08002e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <SystemInit+0x20>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <SystemInit+0x20>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <readUART>:

extern UART_HandleTypeDef hlpuart1;


int readUART(unsigned char *data, int size)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
	int ret=0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
	unsigned char in;
	int endrcv=1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
	int cpt =0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]

	// attente 1er car
	HAL_StatusTypeDef  status = HAL_UART_Receive (&hlpuart1,(uint8_t *) &in, 1, TIMEOUT_RX_MAX);
 8002e7e:	f107 010a 	add.w	r1, r7, #10
 8002e82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e86:	2201      	movs	r2, #1
 8002e88:	4825      	ldr	r0, [pc, #148]	@ (8002f20 <readUART+0xb8>)
 8002e8a:	f009 ffac 	bl	800cde6 <HAL_UART_Receive>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	72fb      	strb	r3, [r7, #11]

	if ( status != HAL_OK )
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <readUART+0x42>
	{
	   gv_error_code = ERROR_RCV_UART;
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <readUART+0xbc>)
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	601a      	str	r2, [r3, #0]
	   gv_error_subcode = status;
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <readUART+0xc0>)
 8002ea2:	6013      	str	r3, [r2, #0]
	   ret=0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e034      	b.n	8002f14 <readUART+0xac>
	} else
	{
		data[cpt++] = in;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	60fa      	str	r2, [r7, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	7aba      	ldrb	r2, [r7, #10]
 8002eb8:	701a      	strb	r2, [r3, #0]
		while (endrcv != 0)
 8002eba:	e028      	b.n	8002f0e <readUART+0xa6>
		{
			status = HAL_UART_Receive (&hlpuart1, (uint8_t  *) &in, 1, TIMEOUT_RX_MIN);
 8002ebc:	f107 010a 	add.w	r1, r7, #10
 8002ec0:	2332      	movs	r3, #50	@ 0x32
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4816      	ldr	r0, [pc, #88]	@ (8002f20 <readUART+0xb8>)
 8002ec6:	f009 ff8e 	bl	800cde6 <HAL_UART_Receive>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	72fb      	strb	r3, [r7, #11]
			if ( status == HAL_OK )
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <readUART+0x82>
			{
				data[cpt++] = in;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	7aba      	ldrb	r2, [r7, #10]
 8002ee2:	701a      	strb	r2, [r3, #0]
				endrcv=1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e011      	b.n	8002f0e <readUART+0xa6>

			}
			else
			{
				endrcv=0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
				if (cpt!=0)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <readUART+0x92>
				{
					ret = cpt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e009      	b.n	8002f0e <readUART+0xa6>
				}
				else
				{
					endrcv=0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
					gv_error_code = ERROR_RCV_UART;
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <readUART+0xbc>)
 8002f00:	2204      	movs	r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
					gv_error_subcode = status;
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	4a08      	ldr	r2, [pc, #32]	@ (8002f28 <readUART+0xc0>)
 8002f08:	6013      	str	r3, [r2, #0]
					ret=0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
		while (endrcv != 0)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1d3      	bne.n	8002ebc <readUART+0x54>
			}

		}
	}

	return ret;
 8002f14:	697b      	ldr	r3, [r7, #20]

}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20001748 	.word	0x20001748
 8002f24:	20001908 	.word	0x20001908
 8002f28:	2000190c 	.word	0x2000190c

08002f2c <writeUART>:
  * @param None
  * @retval None
  */
  
  void writeUART(unsigned char *message, int size )
  {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	  
	  	  // BLocking uart transmit
	  //char test_uart[] = "test uart 115200\n";
	HAL_UART_Transmit(&hlpuart1, message, (size_t)size, HAL_MAX_DELAY);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4803      	ldr	r0, [pc, #12]	@ (8002f50 <writeUART+0x24>)
 8002f42:	f009 fec7 	bl	800ccd4 <HAL_UART_Transmit>
	
  }
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20001748 	.word	0x20001748

08002f54 <convertToAX25Header>:
 * \return  void 
 * 
 */

void convertToAX25Header(s_ax25_header *data, unsigned char *dest,
		unsigned char ssidDest, unsigned char *src, unsigned char ssidSrc) {
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
	int i;
	unsigned char c;

	data->ssidDestination = (unsigned char) (ssidDest << 1 & 0xFE);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	719a      	strb	r2, [r3, #6]
	data->ssidSource = (unsigned char) (ssidSrc << 1 & 0xFE);
 8002f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	735a      	strb	r2, [r3, #13]
	for (i = 0; i < 6; i++) {
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e012      	b.n	8002fb2 <convertToAX25Header+0x5e>
		c = (unsigned char) dest[i];
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	74fb      	strb	r3, [r7, #19]
		data->destinationAdress[i] = (unsigned char) (c << 1 & 0xFE);
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	b2d9      	uxtb	r1, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	460a      	mov	r2, r1
 8002faa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	dde9      	ble.n	8002f8c <convertToAX25Header+0x38>
		;
	}

	for (i = 0; i < 6; i++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e013      	b.n	8002fe6 <convertToAX25Header+0x92>
		c = (unsigned char) src[i];
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	74fb      	strb	r3, [r7, #19]
		data->sourceAdress[i] = (unsigned char) (c << 1 & 0xFE);
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	b2d9      	uxtb	r1, r3
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3307      	adds	r3, #7
 8002fdc:	460a      	mov	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	dde8      	ble.n	8002fbe <convertToAX25Header+0x6a>
		;
	}

}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <encodeAX25Header>:
 *
 * \return  void 
 * 
 */

void encodeAX25Header(s_ax25_header *data) {
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
	unsigned char c;
	c = (unsigned char) (data->ssidDestination << 1 & 0xFE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	799b      	ldrb	r3, [r3, #6]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	72fb      	strb	r3, [r7, #11]
	data->ssidDestination = c;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7afa      	ldrb	r2, [r7, #11]
 8003018:	719a      	strb	r2, [r3, #6]
	c = (unsigned char) (data->ssidSource << 1 & 0xFE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7b5b      	ldrb	r3, [r3, #13]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	72fb      	strb	r3, [r7, #11]
	data->ssidSource = c;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7afa      	ldrb	r2, [r7, #11]
 800302c:	735a      	strb	r2, [r3, #13]
	for (i = 0; i < 6; i++) {
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e012      	b.n	800305a <encodeAX25Header+0x60>
		c = (unsigned char) data->destinationAdress[i];
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	72fb      	strb	r3, [r7, #11]
		data->destinationAdress[i] = (unsigned char) (c << 1 & 0xFE);
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	b2d9      	uxtb	r1, r3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	460a      	mov	r2, r1
 8003052:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b05      	cmp	r3, #5
 800305e:	dde9      	ble.n	8003034 <encodeAX25Header+0x3a>
		;
	}

	for (i = 0; i < 6; i++) {
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e014      	b.n	8003090 <encodeAX25Header+0x96>
		c = (unsigned char) data->sourceAdress[i];
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	3307      	adds	r3, #7
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	72fb      	strb	r3, [r7, #11]
		data->sourceAdress[i] = (unsigned char) (c << 1 & 0xFE);
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	3307      	adds	r3, #7
 8003086:	460a      	mov	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3301      	adds	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b05      	cmp	r3, #5
 8003094:	dde7      	ble.n	8003066 <encodeAX25Header+0x6c>
		;
	}
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <convertDataToAx25>:
 * \param raw data size 
 *
 * \return  error value SUCCES or  ERROR_AX25_EXCEED_MAX_LENGH
 * 
 */
int convertDataToAx25(s_ax25_packet *data,char *rawdata, int size) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]

	int error = SUCCESS;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
	int i;
	unsigned char c;

	if (size < (int) sizeof(s_ax25_packet)) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80030ba:	da44      	bge.n	8003146 <convertDataToAx25+0xa2>
		memcpy(data, rawdata, (size_t) size);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f00b fb51 	bl	800e76a <memcpy>

		/* Convert */
		c = data->header.ssidDestination;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	799b      	ldrb	r3, [r3, #6]
 80030cc:	75fb      	strb	r3, [r7, #23]
		data->header.ssidDestination = c >> 1 & 0x7F;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	719a      	strb	r2, [r3, #6]
		c = data->header.ssidSource;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7b5b      	ldrb	r3, [r3, #13]
 80030dc:	75fb      	strb	r3, [r7, #23]
		data->header.ssidSource = c >> 1 & 0x7F;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	735a      	strb	r2, [r3, #13]

		for (i = 0; i < 6; i++) {
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e00f      	b.n	800310e <convertDataToAx25+0x6a>
			c = data->header.destinationAdress[i];
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	75fb      	strb	r3, [r7, #23]
			data->header.destinationAdress[i] = c >> 1 & 0x7F;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	b2d9      	uxtb	r1, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	460a      	mov	r2, r1
 8003106:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 6; i++) {
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	3301      	adds	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b05      	cmp	r3, #5
 8003112:	ddec      	ble.n	80030ee <convertDataToAx25+0x4a>

		}

		for (i = 0; i < 6; i++) {
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e011      	b.n	800313e <convertDataToAx25+0x9a>
			c = data->header.sourceAdress[i];
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	3307      	adds	r3, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	75fb      	strb	r3, [r7, #23]
			data->header.sourceAdress[i] = c >> 1 & 0x7F;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	b2d9      	uxtb	r1, r3
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4413      	add	r3, r2
 8003132:	3307      	adds	r3, #7
 8003134:	460a      	mov	r2, r1
 8003136:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 6; i++) {
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	3301      	adds	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b05      	cmp	r3, #5
 8003142:	ddea      	ble.n	800311a <convertDataToAx25+0x76>
 8003144:	e001      	b.n	800314a <convertDataToAx25+0xa6>
		}

	} else {
		error = ERROR_AX25_EXCEED_MAX_LENGH;
 8003146:	2364      	movs	r3, #100	@ 0x64
 8003148:	61fb      	str	r3, [r7, #28]
	}
	return error;
 800314a:	69fb      	ldr	r3, [r7, #28]

}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <calculateCRC>:



uint16_t calculateCRC(unsigned char  *data, int offset, int length) {
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
		int crc = 0x000;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
		for (int i = offset; i < (offset + length); ++i) {
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e023      	b.n	80031b2 <calculateCRC+0x5e>
			crc ^= data[i] << 8;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	4053      	eors	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]
			for (int j = 0; j < 8; ++j) {
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e012      	b.n	80031a6 <calculateCRC+0x52>
				if ((crc & 0x8000) > 0) {
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003186:	2b00      	cmp	r3, #0
 8003188:	dd07      	ble.n	800319a <calculateCRC+0x46>
					crc = (crc << 1) ^ 0x1021;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8003192:	f083 0301 	eor.w	r3, r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e002      	b.n	80031a0 <calculateCRC+0x4c>
				} else {
					crc = crc << 1;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
			for (int j = 0; j < 8; ++j) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b07      	cmp	r3, #7
 80031aa:	dde9      	ble.n	8003180 <calculateCRC+0x2c>
		for (int i = offset; i < (offset + length); ++i) {
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	3301      	adds	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbd5      	blt.n	800316a <calculateCRC+0x16>
				}
			}
		}
		return (uint16_t) crc & 0xFFFF;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	b29b      	uxth	r3, r3
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <reset>:
 *          ERROR_COMMAND_NOT_IMPLEMENTED  
 * 
 * \todo : int reset() is to be implemented 
 */

static unsigned char reset() {
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0

	HAL_NVIC_SystemReset();
 80031d2:	f004 fb74 	bl	80078be <HAL_NVIC_SystemReset>
	return SUCCESS;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}

080031dc <setValue>:
 * \return  SUCCESS if ok else 
 *          ERROR_COMMAND_NOT_IMPLEMENTED  
 * 
 * \todo : int setValie()  renforcer l'analyse par verfication de la taille des parametres
 */
static unsigned char setValue(const s_set_value value, t_tc_response *resp) {
 80031dc:	b084      	sub	sp, #16
 80031de:	b5b0      	push	{r4, r5, r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	f107 0c18 	add.w	ip, r7, #24
 80031e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	unsigned char returnValue = SUCCESS;
 80031ec:	2300      	movs	r3, #0
 80031ee:	71fb      	strb	r3, [r7, #7]

	resp->size = 1;
 80031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f2:	2201      	movs	r2, #1
 80031f4:	821a      	strh	r2, [r3, #16]
	resp->parameter[0] = value.fied_id;
 80031f6:	7e3a      	ldrb	r2, [r7, #24]
 80031f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fa:	749a      	strb	r2, [r3, #18]

	switch (value.fied_id) {
 80031fc:	7e3b      	ldrb	r3, [r7, #24]
 80031fe:	3b01      	subs	r3, #1
 8003200:	2b09      	cmp	r3, #9
 8003202:	d867      	bhi.n	80032d4 <setValue+0xf8>
 8003204:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <setValue+0x30>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003259 	.word	0x08003259
 8003210:	08003271 	.word	0x08003271
 8003214:	08003283 	.word	0x08003283
 8003218:	08003295 	.word	0x08003295
 800321c:	080032a7 	.word	0x080032a7
 8003220:	080032c5 	.word	0x080032c5
 8003224:	08003269 	.word	0x08003269
 8003228:	08003261 	.word	0x08003261
 800322c:	08003235 	.word	0x08003235
 8003230:	08003247 	.word	0x08003247

	case VALUE_MODEM_TX_MODE:
		gv_spinoConfig.spinoTXModemMode = (unsigned char) value.value[0];
 8003234:	7eba      	ldrb	r2, [r7, #26]
 8003236:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <setValue+0x110>)
 8003238:	735a      	strb	r2, [r3, #13]
		setModemMode(gv_spinoConfig.spinoTXModemMode);
 800323a:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <setValue+0x110>)
 800323c:	7b5b      	ldrb	r3, [r3, #13]
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fb18 	bl	8004874 <setModemMode>
		break;
 8003244:	e049      	b.n	80032da <setValue+0xfe>

	case VALUE_MODEM_TX_MULTIMODE :
		gv_spinoConfig.multimode = (unsigned char) value.value[0];
 8003246:	7eba      	ldrb	r2, [r7, #26]
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <setValue+0x110>)
 800324a:	73da      	strb	r2, [r3, #15]
		setModemMode(gv_spinoConfig.spinoTXModemMode);
 800324c:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <setValue+0x110>)
 800324e:	7b5b      	ldrb	r3, [r3, #13]
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fb0f 	bl	8004874 <setModemMode>
		break;
 8003256:	e040      	b.n	80032da <setValue+0xfe>

	case VALUE_SPINO_DELAY:
		gv_spinoConfig.telemetryDelay = (unsigned char) value.value[0];
 8003258:	7eba      	ldrb	r2, [r7, #26]
 800325a:	4b24      	ldr	r3, [pc, #144]	@ (80032ec <setValue+0x110>)
 800325c:	739a      	strb	r2, [r3, #14]
		break;
 800325e:	e03c      	b.n	80032da <setValue+0xfe>
	case VALUE_DELAY_INFO_MESSAGE:
		memcpy(&gv_spinoConfig.delay_info_message, value.value,
 8003260:	7eba      	ldrb	r2, [r7, #26]
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <setValue+0x110>)
 8003264:	745a      	strb	r2, [r3, #17]
				sizeof(gv_spinoConfig.delay_info_message));
		break;
 8003266:	e038      	b.n	80032da <setValue+0xfe>

	case VALUE_ACTIVE_INFO_MESSAGE:
		memcpy(&gv_spinoConfig.info_message_actif, value.value,
 8003268:	7eba      	ldrb	r2, [r7, #26]
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <setValue+0x110>)
 800326c:	741a      	strb	r2, [r3, #16]
				sizeof(gv_spinoConfig.info_message_actif));
		break;
 800326e:	e034      	b.n	80032da <setValue+0xfe>

	case VALUE_CALLSIGN_SRC_SPINO:
		memcpy(&gv_spinoConfig.spinoSrcCallsign, value.value, CALLSIGN_SIZE);
 8003270:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <setValue+0x110>)
 8003272:	3312      	adds	r3, #18
 8003274:	f107 021a 	add.w	r2, r7, #26
 8003278:	6811      	ldr	r1, [r2, #0]
 800327a:	6019      	str	r1, [r3, #0]
 800327c:	8892      	ldrh	r2, [r2, #4]
 800327e:	809a      	strh	r2, [r3, #4]
		break;
 8003280:	e02b      	b.n	80032da <setValue+0xfe>

	case VALUE_CALLSIGN_DES_SPINO:
		memcpy(&gv_spinoConfig.spinoDesCallsign, value.value, CALLSIGN_SIZE);
 8003282:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <setValue+0x110>)
 8003284:	3318      	adds	r3, #24
 8003286:	f107 021a 	add.w	r2, r7, #26
 800328a:	6810      	ldr	r0, [r2, #0]
 800328c:	6018      	str	r0, [r3, #0]
 800328e:	8892      	ldrh	r2, [r2, #4]
 8003290:	809a      	strh	r2, [r3, #4]
		break;
 8003292:	e022      	b.n	80032da <setValue+0xfe>

	case VALUE_CALLSIGN_PAYLOAD_SPINO:
		memcpy(&gv_spinoConfig.payloadCallsign, value.value, CALLSIGN_SIZE);
 8003294:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <setValue+0x110>)
 8003296:	331e      	adds	r3, #30
 8003298:	f107 021a 	add.w	r2, r7, #26
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	6019      	str	r1, [r3, #0]
 80032a0:	8892      	ldrh	r2, [r2, #4]
 80032a2:	809a      	strh	r2, [r3, #4]
		break;
 80032a4:	e019      	b.n	80032da <setValue+0xfe>

	case VALUE_TIMESTAMP:
		logger(LOG_LEVEL_INFO, "Commande VALUE_TIMESTAMP");
 80032a6:	4912      	ldr	r1, [pc, #72]	@ (80032f0 <setValue+0x114>)
 80032a8:	2000      	movs	r0, #0
 80032aa:	f002 fad3 	bl	8005854 <logger>
		memcpy(&gv_spino.timestamps, value.value, sizeof(gv_spino.timestamps));
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	3302      	adds	r3, #2
 80032b4:	681c      	ldr	r4, [r3, #0]
 80032b6:	685d      	ldr	r5, [r3, #4]
 80032b8:	4622      	mov	r2, r4
 80032ba:	462b      	mov	r3, r5
 80032bc:	490d      	ldr	r1, [pc, #52]	@ (80032f4 <setValue+0x118>)
 80032be:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		break;
 80032c2:	e00a      	b.n	80032da <setValue+0xfe>

	case VALUE_LOG_LEVEL:
		logger(LOG_LEVEL_INFO, "Commande VALUE_LOG_LEVEL");
 80032c4:	490c      	ldr	r1, [pc, #48]	@ (80032f8 <setValue+0x11c>)
 80032c6:	2000      	movs	r0, #0
 80032c8:	f002 fac4 	bl	8005854 <logger>
		gv_SelectedLogLevel = (unsigned char) value.value[0];
 80032cc:	7eba      	ldrb	r2, [r7, #26]
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <setValue+0x120>)
 80032d0:	701a      	strb	r2, [r3, #0]
		break;
 80032d2:	e002      	b.n	80032da <setValue+0xfe>
	default:
		// generation code erreur
		returnValue = ERROR_VALUE_FIELD_UNKNOW;
 80032d4:	2365      	movs	r3, #101	@ 0x65
 80032d6:	71fb      	strb	r3, [r7, #7]
		break;
 80032d8:	bf00      	nop
	}
	//    memcpy (resp->parameter,&response,resp->size );


	return returnValue;
 80032da:	79fb      	ldrb	r3, [r7, #7]

}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80032e6:	b004      	add	sp, #16
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000256c 	.word	0x2000256c
 80032f0:	0801084c 	.word	0x0801084c
 80032f4:	20002590 	.word	0x20002590
 80032f8:	08010868 	.word	0x08010868
 80032fc:	20003d64 	.word	0x20003d64

08003300 <getValue>:
 * \return  SUCCESS if ok else 
 *          ERROR_COMMAND_NOT_IMPLEMENTED  
 * 
 * \todo : int getValue()  renforcer l'analyse par verfication de la taille des parametres
 */
static unsigned char getValue(const s_get_value value, t_tc_response *resp) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	@ 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	80b8      	strh	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
	unsigned char returnValue = SUCCESS;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	s_field response;

	response.field_id = value.field_id;
 8003310:	793b      	ldrb	r3, [r7, #4]
 8003312:	733b      	strb	r3, [r7, #12]

	switch (value.field_id) {
 8003314:	793b      	ldrb	r3, [r7, #4]
 8003316:	2b08      	cmp	r3, #8
 8003318:	dc1a      	bgt.n	8003350 <getValue+0x50>
 800331a:	2b00      	cmp	r3, #0
 800331c:	f340 80f2 	ble.w	8003504 <getValue+0x204>
 8003320:	3b01      	subs	r3, #1
 8003322:	2b07      	cmp	r3, #7
 8003324:	f200 80ee 	bhi.w	8003504 <getValue+0x204>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <getValue+0x30>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	0800338f 	.word	0x0800338f
 8003334:	080033bb 	.word	0x080033bb
 8003338:	080033f1 	.word	0x080033f1
 800333c:	08003427 	.word	0x08003427
 8003340:	08003505 	.word	0x08003505
 8003344:	0800345d 	.word	0x0800345d
 8003348:	08003495 	.word	0x08003495
 800334c:	080034cd 	.word	0x080034cd
 8003350:	2b80      	cmp	r3, #128	@ 0x80
 8003352:	f040 80d7 	bne.w	8003504 <getValue+0x204>

	case VALUE_SPINO_VERSION:
		response.size = sizeof(gv_version);
 8003356:	2302      	movs	r3, #2
 8003358:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, &gv_version, response.size);
 800335a:	7b7b      	ldrb	r3, [r7, #13]
 800335c:	461a      	mov	r2, r3
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	3302      	adds	r3, #2
 8003364:	4979      	ldr	r1, [pc, #484]	@ (800354c <getValue+0x24c>)
 8003366:	4618      	mov	r0, r3
 8003368:	f00b f9ff 	bl	800e76a <memcpy>
		resp->size = SIZE_HEADER_FIELD + response.size;
 800336c:	7b7b      	ldrb	r3, [r7, #13]
 800336e:	3302      	adds	r3, #2
 8003370:	b29a      	uxth	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f103 0012 	add.w	r0, r3, #18
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	8a1b      	ldrh	r3, [r3, #16]
 8003380:	461a      	mov	r2, r3
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	4619      	mov	r1, r3
 8003388:	f00b f9ef 	bl	800e76a <memcpy>
		break;
 800338c:	e0d8      	b.n	8003540 <getValue+0x240>

	case VALUE_SPINO_DELAY:

		response.size = sizeof(gv_spinoConfig.telemetryDelay);
 800338e:	2301      	movs	r3, #1
 8003390:	737b      	strb	r3, [r7, #13]
		response.field_value[0] = gv_spinoConfig.telemetryDelay;
 8003392:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <getValue+0x250>)
 8003394:	7b9b      	ldrb	r3, [r3, #14]
 8003396:	73bb      	strb	r3, [r7, #14]
		resp->size = SIZE_HEADER_FIELD + response.size;
 8003398:	7b7b      	ldrb	r3, [r7, #13]
 800339a:	3302      	adds	r3, #2
 800339c:	b29a      	uxth	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f103 0012 	add.w	r0, r3, #18
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	8a1b      	ldrh	r3, [r3, #16]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	4619      	mov	r1, r3
 80033b4:	f00b f9d9 	bl	800e76a <memcpy>
		break;
 80033b8:	e0c2      	b.n	8003540 <getValue+0x240>

	case VALUE_CALLSIGN_SRC_SPINO:
		response.size = 6;
 80033ba:	2306      	movs	r3, #6
 80033bc:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, gv_spinoConfig.spinoSrcCallsign, 6);
 80033be:	4a64      	ldr	r2, [pc, #400]	@ (8003550 <getValue+0x250>)
 80033c0:	f107 030e 	add.w	r3, r7, #14
 80033c4:	3212      	adds	r2, #18
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	6019      	str	r1, [r3, #0]
 80033ca:	8892      	ldrh	r2, [r2, #4]
 80033cc:	809a      	strh	r2, [r3, #4]
		resp->size = SIZE_HEADER_FIELD + response.size;
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	3302      	adds	r3, #2
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f103 0012 	add.w	r0, r3, #18
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	8a1b      	ldrh	r3, [r3, #16]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	4619      	mov	r1, r3
 80033ea:	f00b f9be 	bl	800e76a <memcpy>
		break;
 80033ee:	e0a7      	b.n	8003540 <getValue+0x240>

	case VALUE_CALLSIGN_DES_SPINO:

		response.size = 6;
 80033f0:	2306      	movs	r3, #6
 80033f2:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, gv_spinoConfig.spinoDesCallsign, 6);
 80033f4:	4a56      	ldr	r2, [pc, #344]	@ (8003550 <getValue+0x250>)
 80033f6:	f107 030e 	add.w	r3, r7, #14
 80033fa:	3218      	adds	r2, #24
 80033fc:	6810      	ldr	r0, [r2, #0]
 80033fe:	6018      	str	r0, [r3, #0]
 8003400:	8892      	ldrh	r2, [r2, #4]
 8003402:	809a      	strh	r2, [r3, #4]
		resp->size = SIZE_HEADER_FIELD + response.size;
 8003404:	7b7b      	ldrb	r3, [r7, #13]
 8003406:	3302      	adds	r3, #2
 8003408:	b29a      	uxth	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f103 0012 	add.w	r0, r3, #18
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	8a1b      	ldrh	r3, [r3, #16]
 8003418:	461a      	mov	r2, r3
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	4619      	mov	r1, r3
 8003420:	f00b f9a3 	bl	800e76a <memcpy>
		break;
 8003424:	e08c      	b.n	8003540 <getValue+0x240>

	case VALUE_CALLSIGN_PAYLOAD_SPINO:
		response.size = 6;
 8003426:	2306      	movs	r3, #6
 8003428:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, gv_spinoConfig.payloadCallsign, 6);
 800342a:	4a49      	ldr	r2, [pc, #292]	@ (8003550 <getValue+0x250>)
 800342c:	f107 030e 	add.w	r3, r7, #14
 8003430:	321e      	adds	r2, #30
 8003432:	6811      	ldr	r1, [r2, #0]
 8003434:	6019      	str	r1, [r3, #0]
 8003436:	8892      	ldrh	r2, [r2, #4]
 8003438:	809a      	strh	r2, [r3, #4]
		resp->size = SIZE_HEADER_FIELD + response.size;
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	3302      	adds	r3, #2
 800343e:	b29a      	uxth	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f103 0012 	add.w	r0, r3, #18
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	8a1b      	ldrh	r3, [r3, #16]
 800344e:	461a      	mov	r2, r3
 8003450:	f107 030c 	add.w	r3, r7, #12
 8003454:	4619      	mov	r1, r3
 8003456:	f00b f988 	bl	800e76a <memcpy>
		break;
 800345a:	e071      	b.n	8003540 <getValue+0x240>

	case VALUE_LOG_LEVEL:
		response.size = sizeof(gv_SelectedLogLevel);
 800345c:	2301      	movs	r3, #1
 800345e:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, &gv_SelectedLogLevel, response.size);
 8003460:	7b7b      	ldrb	r3, [r7, #13]
 8003462:	461a      	mov	r2, r3
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	3302      	adds	r3, #2
 800346a:	493a      	ldr	r1, [pc, #232]	@ (8003554 <getValue+0x254>)
 800346c:	4618      	mov	r0, r3
 800346e:	f00b f97c 	bl	800e76a <memcpy>
		resp->size = SIZE_HEADER_FIELD + response.size;
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	3302      	adds	r3, #2
 8003476:	b29a      	uxth	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f103 0012 	add.w	r0, r3, #18
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	8a1b      	ldrh	r3, [r3, #16]
 8003486:	461a      	mov	r2, r3
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	f00b f96c 	bl	800e76a <memcpy>
		break;
 8003492:	e055      	b.n	8003540 <getValue+0x240>

	case VALUE_ACTIVE_INFO_MESSAGE:
		response.size = sizeof(gv_spinoConfig.info_message_actif);
 8003494:	2301      	movs	r3, #1
 8003496:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, &gv_spinoConfig.info_message_actif,
				response.size);
 8003498:	7b7b      	ldrb	r3, [r7, #13]
		memcpy(response.field_value, &gv_spinoConfig.info_message_actif,
 800349a:	461a      	mov	r2, r3
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	3302      	adds	r3, #2
 80034a2:	492d      	ldr	r1, [pc, #180]	@ (8003558 <getValue+0x258>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00b f960 	bl	800e76a <memcpy>
		resp->size = SIZE_HEADER_FIELD + response.size;
 80034aa:	7b7b      	ldrb	r3, [r7, #13]
 80034ac:	3302      	adds	r3, #2
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f103 0012 	add.w	r0, r3, #18
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	8a1b      	ldrh	r3, [r3, #16]
 80034be:	461a      	mov	r2, r3
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	f00b f950 	bl	800e76a <memcpy>
		break;
 80034ca:	e039      	b.n	8003540 <getValue+0x240>

	case VALUE_DELAY_INFO_MESSAGE:
		response.size = sizeof(gv_spinoConfig.delay_info_message);
 80034cc:	2301      	movs	r3, #1
 80034ce:	737b      	strb	r3, [r7, #13]
		memcpy(response.field_value, &gv_spinoConfig.delay_info_message,
				response.size);
 80034d0:	7b7b      	ldrb	r3, [r7, #13]
		memcpy(response.field_value, &gv_spinoConfig.delay_info_message,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	3302      	adds	r3, #2
 80034da:	4920      	ldr	r1, [pc, #128]	@ (800355c <getValue+0x25c>)
 80034dc:	4618      	mov	r0, r3
 80034de:	f00b f944 	bl	800e76a <memcpy>
		resp->size = SIZE_HEADER_FIELD + response.size;
 80034e2:	7b7b      	ldrb	r3, [r7, #13]
 80034e4:	3302      	adds	r3, #2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f103 0012 	add.w	r0, r3, #18
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	8a1b      	ldrh	r3, [r3, #16]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	4619      	mov	r1, r3
 80034fe:	f00b f934 	bl	800e76a <memcpy>
		break;
 8003502:	e01d      	b.n	8003540 <getValue+0x240>

	case VALUE_TIMESTAMP: /*! Non implemented !*/
	default:
		// generation code erreur
		sprintf(gvLogMsg, "valeur inconnue %d \r\n", value.field_id);
 8003504:	793b      	ldrb	r3, [r7, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	4915      	ldr	r1, [pc, #84]	@ (8003560 <getValue+0x260>)
 800350a:	4816      	ldr	r0, [pc, #88]	@ (8003564 <getValue+0x264>)
 800350c:	f00a ff92 	bl	800e434 <siprintf>
		logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 8003510:	4914      	ldr	r1, [pc, #80]	@ (8003564 <getValue+0x264>)
 8003512:	2005      	movs	r0, #5
 8003514:	f002 f99e 	bl	8005854 <logger>
		returnValue = ERROR_VALUE_FIELD_UNKNOW;
 8003518:	2365      	movs	r3, #101	@ 0x65
 800351a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		response.size = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	737b      	strb	r3, [r7, #13]
		resp->size = SIZE_HEADER_FIELD;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &response, resp->size);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f103 0012 	add.w	r0, r3, #18
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	8a1b      	ldrh	r3, [r3, #16]
 8003532:	461a      	mov	r2, r3
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	4619      	mov	r1, r3
 800353a:	f00b f916 	bl	800e76a <memcpy>
		break;
 800353e:	bf00      	nop

	}

	return returnValue;
 8003540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 8003544:	4618      	mov	r0, r3
 8003546:	3730      	adds	r7, #48	@ 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000f30 	.word	0x20000f30
 8003550:	2000256c 	.word	0x2000256c
 8003554:	20003d64 	.word	0x20003d64
 8003558:	2000257c 	.word	0x2000257c
 800355c:	2000257d 	.word	0x2000257d
 8003560:	08010884 	.word	0x08010884
 8003564:	20003fec 	.word	0x20003fec

08003568 <interpretcommand>:
 * \return  SUCCESS if ok else 
 *          ERROR_COMMAND_NOT_IMPLEMENTED  
 * \todo implementer LOAD PROG
 */

t_tc_response interpretcommand(s_command cmd) {
 8003568:	b084      	sub	sp, #16
 800356a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356c:	b0fd      	sub	sp, #500	@ 0x1f4
 800356e:	af06      	add	r7, sp, #24
 8003570:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8003574:	f5a4 74ea 	sub.w	r4, r4, #468	@ 0x1d4
 8003578:	6020      	str	r0, [r4, #0]
 800357a:	f507 70fa 	add.w	r0, r7, #500	@ 0x1f4
 800357e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	t_tc_response resp;
	unsigned char reponse = SUCCESS;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7


	resp.header.timeStamp = gv_spino.timestamps;
 8003588:	4bd9      	ldr	r3, [pc, #868]	@ (80038f0 <interpretcommand+0x388>)
 800358a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800358e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8003592:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8003596:	e9c1 2302 	strd	r2, r3, [r1, #8]


	switch (cmd.id) {
 800359a:	f8b7 31f8 	ldrh.w	r3, [r7, #504]	@ 0x1f8
 800359e:	2b85      	cmp	r3, #133	@ 0x85
 80035a0:	f300 8096 	bgt.w	80036d0 <interpretcommand+0x168>
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	f2c0 822c 	blt.w	8003a02 <interpretcommand+0x49a>
 80035aa:	3b40      	subs	r3, #64	@ 0x40
 80035ac:	2b45      	cmp	r3, #69	@ 0x45
 80035ae:	f200 8228 	bhi.w	8003a02 <interpretcommand+0x49a>
 80035b2:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <interpretcommand+0x50>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080037bd 	.word	0x080037bd
 80035bc:	08003803 	.word	0x08003803
 80035c0:	08003919 	.word	0x08003919
 80035c4:	08003935 	.word	0x08003935
 80035c8:	08003a03 	.word	0x08003a03
 80035cc:	08003a03 	.word	0x08003a03
 80035d0:	08003a03 	.word	0x08003a03
 80035d4:	08003a03 	.word	0x08003a03
 80035d8:	08003a03 	.word	0x08003a03
 80035dc:	08003a03 	.word	0x08003a03
 80035e0:	08003a03 	.word	0x08003a03
 80035e4:	08003a03 	.word	0x08003a03
 80035e8:	08003a03 	.word	0x08003a03
 80035ec:	08003a03 	.word	0x08003a03
 80035f0:	08003a03 	.word	0x08003a03
 80035f4:	08003a03 	.word	0x08003a03
 80035f8:	08003a03 	.word	0x08003a03
 80035fc:	08003a03 	.word	0x08003a03
 8003600:	08003a03 	.word	0x08003a03
 8003604:	08003a03 	.word	0x08003a03
 8003608:	08003a03 	.word	0x08003a03
 800360c:	08003a03 	.word	0x08003a03
 8003610:	08003a03 	.word	0x08003a03
 8003614:	08003a03 	.word	0x08003a03
 8003618:	08003a03 	.word	0x08003a03
 800361c:	08003a03 	.word	0x08003a03
 8003620:	08003a03 	.word	0x08003a03
 8003624:	08003a03 	.word	0x08003a03
 8003628:	08003a03 	.word	0x08003a03
 800362c:	08003a03 	.word	0x08003a03
 8003630:	08003a03 	.word	0x08003a03
 8003634:	08003a03 	.word	0x08003a03
 8003638:	08003a03 	.word	0x08003a03
 800363c:	08003a03 	.word	0x08003a03
 8003640:	08003a03 	.word	0x08003a03
 8003644:	08003a03 	.word	0x08003a03
 8003648:	080036d7 	.word	0x080036d7
 800364c:	080036eb 	.word	0x080036eb
 8003650:	0800375d 	.word	0x0800375d
 8003654:	08003797 	.word	0x08003797
 8003658:	08003a03 	.word	0x08003a03
 800365c:	08003a03 	.word	0x08003a03
 8003660:	08003a03 	.word	0x08003a03
 8003664:	08003a03 	.word	0x08003a03
 8003668:	08003a03 	.word	0x08003a03
 800366c:	08003a03 	.word	0x08003a03
 8003670:	08003a03 	.word	0x08003a03
 8003674:	08003a03 	.word	0x08003a03
 8003678:	08003a03 	.word	0x08003a03
 800367c:	08003a03 	.word	0x08003a03
 8003680:	08003a03 	.word	0x08003a03
 8003684:	08003a03 	.word	0x08003a03
 8003688:	08003a03 	.word	0x08003a03
 800368c:	08003a03 	.word	0x08003a03
 8003690:	08003a03 	.word	0x08003a03
 8003694:	08003a03 	.word	0x08003a03
 8003698:	08003959 	.word	0x08003959
 800369c:	08003973 	.word	0x08003973
 80036a0:	08003a03 	.word	0x08003a03
 80036a4:	08003a03 	.word	0x08003a03
 80036a8:	08003a03 	.word	0x08003a03
 80036ac:	08003a03 	.word	0x08003a03
 80036b0:	08003a03 	.word	0x08003a03
 80036b4:	08003a03 	.word	0x08003a03
 80036b8:	08003a03 	.word	0x08003a03
 80036bc:	08003a03 	.word	0x08003a03
 80036c0:	0800398d 	.word	0x0800398d
 80036c4:	080039a7 	.word	0x080039a7
 80036c8:	080039c1 	.word	0x080039c1
 80036cc:	080039e3 	.word	0x080039e3
 80036d0:	2bff      	cmp	r3, #255	@ 0xff
 80036d2:	d02f      	beq.n	8003734 <interpretcommand+0x1cc>
 80036d4:	e195      	b.n	8003a02 <interpretcommand+0x49a>
	case CMD_RESET:
		logger(LOG_LEVEL_INFO, "Commande RESET");
 80036d6:	4987      	ldr	r1, [pc, #540]	@ (80038f4 <interpretcommand+0x38c>)
 80036d8:	2000      	movs	r0, #0
 80036da:	f002 f8bb 	bl	8005854 <logger>
		reponse = reset();
 80036de:	f7ff fd76 	bl	80031ce <reset>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 80036e8:	e199      	b.n	8003a1e <interpretcommand+0x4b6>
	case SET_VALUE: /*  modify configuration value */
		logger(LOG_LEVEL_INFO, "Commande SET VALUE");
 80036ea:	4983      	ldr	r1, [pc, #524]	@ (80038f8 <interpretcommand+0x390>)
 80036ec:	2000      	movs	r0, #0
 80036ee:	f002 f8b1 	bl	8005854 <logger>
		s_set_value setvalue;
		memcpy(&setvalue, cmd.parameter, cmd.size);
 80036f2:	f8b7 31f4 	ldrh.w	r3, [r7, #500]	@ 0x1f4
 80036f6:	461a      	mov	r2, r3
 80036f8:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 80036fc:	1d99      	adds	r1, r3, #6
 80036fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003702:	4618      	mov	r0, r3
 8003704:	f00b f831 	bl	800e76a <memcpy>
		reponse = setValue(setvalue, &resp);
 8003708:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800370c:	f5a3 76d4 	sub.w	r6, r3, #424	@ 0x1a8
 8003710:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003714:	9305      	str	r3, [sp, #20]
 8003716:	466d      	mov	r5, sp
 8003718:	f106 0410 	add.w	r4, r6, #16
 800371c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	802b      	strh	r3, [r5, #0]
 8003724:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003728:	f7ff fd58 	bl	80031dc <setValue>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		//resp.size = 0;
		break;
 8003732:	e174      	b.n	8003a1e <interpretcommand+0x4b6>

	case SET_STATE: /*modify mode */
		logger(LOG_LEVEL_INFO, "Commande SET STATE");
 8003734:	4971      	ldr	r1, [pc, #452]	@ (80038fc <interpretcommand+0x394>)
 8003736:	2000      	movs	r0, #0
 8003738:	f002 f88c 	bl	8005854 <logger>
		//if (cmd.size == 7) {
			//  gv_spino.currentState = cmd.parameter[0];
			reponse = changeState((int) cmd.parameter[0]);
 800373c:	f897 31fa 	ldrb.w	r3, [r7, #506]	@ 0x1fa
 8003740:	b21b      	sxth	r3, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fbd8 	bl	8003ef8 <changeState>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
	//	}
		resp.size = 0;
 800374e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003752:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003756:	2200      	movs	r2, #0
 8003758:	821a      	strh	r2, [r3, #16]
		break;
 800375a:	e160      	b.n	8003a1e <interpretcommand+0x4b6>

	case GET_VALUE: // return value of field

		logger(LOG_LEVEL_INFO, "Commande GET VALUE");
 800375c:	4968      	ldr	r1, [pc, #416]	@ (8003900 <interpretcommand+0x398>)
 800375e:	2000      	movs	r0, #0
 8003760:	f002 f878 	bl	8005854 <logger>
		s_get_value getvalue;
		memcpy(&getvalue, cmd.parameter, cmd.size);
 8003764:	f8b7 31f4 	ldrh.w	r3, [r7, #500]	@ 0x1f4
 8003768:	461a      	mov	r2, r3
 800376a:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 800376e:	1d99      	adds	r1, r3, #6
 8003770:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003774:	4618      	mov	r0, r3
 8003776:	f00a fff8 	bl	800e76a <memcpy>
		reponse = getValue(getvalue, &resp);
 800377a:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 800377e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003782:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003786:	4611      	mov	r1, r2
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f7ff fdb9 	bl	8003300 <getValue>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 8003794:	e143      	b.n	8003a1e <interpretcommand+0x4b6>

	case GET_CONGIG: // return Configuration structure
		logger(LOG_LEVEL_INFO, "Commande GET CONFIG");
 8003796:	495b      	ldr	r1, [pc, #364]	@ (8003904 <interpretcommand+0x39c>)
 8003798:	2000      	movs	r0, #0
 800379a:	f002 f85b 	bl	8005854 <logger>
		resp.size = sizeof(s_configuration_spino);
 800379e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	821a      	strh	r2, [r3, #16]
		memcpy(resp.parameter, &gv_spinoConfig, sizeof(s_configuration_spino));
 80037aa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80037ae:	3312      	adds	r3, #18
 80037b0:	2224      	movs	r2, #36	@ 0x24
 80037b2:	4955      	ldr	r1, [pc, #340]	@ (8003908 <interpretcommand+0x3a0>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f00a ffd8 	bl	800e76a <memcpy>
		break;
 80037ba:	e130      	b.n	8003a1e <interpretcommand+0x4b6>

	case PROG_INIT:  // initialise memory prog structure
		logger(LOG_LEVEL_INFO, "Commande PROG INIT");
 80037bc:	4953      	ldr	r1, [pc, #332]	@ (800390c <interpretcommand+0x3a4>)
 80037be:	2000      	movs	r0, #0
 80037c0:	f002 f848 	bl	8005854 <logger>
		gv_prog.indexCourrant = 0;
 80037c4:	4b52      	ldr	r3, [pc, #328]	@ (8003910 <interpretcommand+0x3a8>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < MAX_MEM_PRG; i++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80037d0:	e00b      	b.n	80037ea <interpretcommand+0x282>
			gv_prog.memory[i] = 0;
 80037d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003910 <interpretcommand+0x3a8>)
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037da:	4413      	add	r3, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MAX_MEM_PRG; i++) {
 80037e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80037ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	dbee      	blt.n	80037d2 <interpretcommand+0x26a>
		}
		resp.size = 0;
 80037f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037fc:	2200      	movs	r2, #0
 80037fe:	821a      	strh	r2, [r3, #16]
		break;
 8003800:	e10d      	b.n	8003a1e <interpretcommand+0x4b6>

	case PROG_LOAD:
		logger(LOG_LEVEL_INFO, "Commande PROG LOAD");
 8003802:	4944      	ldr	r1, [pc, #272]	@ (8003914 <interpretcommand+0x3ac>)
 8003804:	2000      	movs	r0, #0
 8003806:	f002 f825 	bl	8005854 <logger>
		s_load_prg load_prg;
		memcpy(&load_prg, cmd.parameter, sizeof(s_load_prg));
 800380a:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 800380e:	1d99      	adds	r1, r3, #6
 8003810:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003814:	2284      	movs	r2, #132	@ 0x84
 8003816:	4618      	mov	r0, r3
 8003818:	f00a ffa7 	bl	800e76a <memcpy>
		// check index
		if (load_prg.index + MAX_MEM_PRG_LOAD > MAX_MEM_PRG) {
 800381c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003820:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 800382a:	dd03      	ble.n	8003834 <interpretcommand+0x2cc>
			reponse = ERROR_PROG_INDEX_OUT_OF_BOUND;
 800382c:	2382      	movs	r3, #130	@ 0x82
 800382e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
			}

		} else {
			reponse = ERROR_PROG_INDEX_NOT_EQUAL;
		}
		break;
 8003832:	e0f4      	b.n	8003a1e <interpretcommand+0x4b6>
		} else if (gv_prog.indexCourrant == load_prg.index) {
 8003834:	4b36      	ldr	r3, [pc, #216]	@ (8003910 <interpretcommand+0x3a8>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800383c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d150      	bne.n	80038e8 <interpretcommand+0x380>
			if (memcmp(load_prg.mem1, load_prg.mem2, MAX_MEM_PRG_LOAD) == 0) {
 8003846:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800384a:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 800384e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003852:	3304      	adds	r3, #4
 8003854:	2240      	movs	r2, #64	@ 0x40
 8003856:	4618      	mov	r0, r3
 8003858:	f00a fee4 	bl	800e624 <memcmp>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13e      	bne.n	80038e0 <interpretcommand+0x378>
				memcpy(&gv_prog.memory[gv_prog.indexCourrant], load_prg.mem1,
 8003862:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <interpretcommand+0x3a8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a2a      	ldr	r2, [pc, #168]	@ (8003910 <interpretcommand+0x3a8>)
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	441a      	add	r2, r3
 800386c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003870:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003874:	1d1c      	adds	r4, r3, #4
 8003876:	4694      	mov	ip, r2
 8003878:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 800387c:	4665      	mov	r5, ip
 800387e:	4626      	mov	r6, r4
 8003880:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003882:	6028      	str	r0, [r5, #0]
 8003884:	6069      	str	r1, [r5, #4]
 8003886:	60aa      	str	r2, [r5, #8]
 8003888:	60eb      	str	r3, [r5, #12]
 800388a:	3410      	adds	r4, #16
 800388c:	f10c 0c10 	add.w	ip, ip, #16
 8003890:	4574      	cmp	r4, lr
 8003892:	d1f3      	bne.n	800387c <interpretcommand+0x314>
				gv_prog.indexCourrant += MAX_MEM_PRG_LOAD;
 8003894:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <interpretcommand+0x3a8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3340      	adds	r3, #64	@ 0x40
 800389a:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <interpretcommand+0x3a8>)
 800389c:	6013      	str	r3, [r2, #0]
				response.field_id = PROG_INDEX;
 800389e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038a2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038a6:	2204      	movs	r2, #4
 80038a8:	701a      	strb	r2, [r3, #0]
				response.size = sizeof(s_configuration_spino);
 80038aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038ae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038b2:	2224      	movs	r2, #36	@ 0x24
 80038b4:	705a      	strb	r2, [r3, #1]
				memcpy(resp.parameter, &gv_spinoConfig,
 80038b6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80038ba:	3312      	adds	r3, #18
 80038bc:	2224      	movs	r2, #36	@ 0x24
 80038be:	4912      	ldr	r1, [pc, #72]	@ (8003908 <interpretcommand+0x3a0>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00a ff52 	bl	800e76a <memcpy>
				resp.size = SIZE_HEADER_FIELD + response.size;
 80038c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038ca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	3302      	adds	r3, #2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038dc:	821a      	strh	r2, [r3, #16]
		break;
 80038de:	e09e      	b.n	8003a1e <interpretcommand+0x4b6>
				reponse = ERROR_PROG_MEM1_MEM2_NOT_EQUAL;
 80038e0:	2381      	movs	r3, #129	@ 0x81
 80038e2:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 80038e6:	e09a      	b.n	8003a1e <interpretcommand+0x4b6>
			reponse = ERROR_PROG_INDEX_NOT_EQUAL;
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 80038ee:	e096      	b.n	8003a1e <interpretcommand+0x4b6>
 80038f0:	20002590 	.word	0x20002590
 80038f4:	0801089c 	.word	0x0801089c
 80038f8:	080108ac 	.word	0x080108ac
 80038fc:	080108c0 	.word	0x080108c0
 8003900:	080108d4 	.word	0x080108d4
 8003904:	080108e8 	.word	0x080108e8
 8003908:	2000256c 	.word	0x2000256c
 800390c:	080108fc 	.word	0x080108fc
 8003910:	20002a90 	.word	0x20002a90
 8003914:	08010910 	.word	0x08010910
	case PROG_CHECK:
		logger(LOG_LEVEL_INFO, "Commande PROG CHECK");
 8003918:	4963      	ldr	r1, [pc, #396]	@ (8003aa8 <interpretcommand+0x540>)
 800391a:	2000      	movs	r0, #0
 800391c:	f001 ff9a 	bl	8005854 <logger>
		reponse = ERROR_COMMAND_NOT_IMPLEMENTED;
 8003920:	2302      	movs	r3, #2
 8003922:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		resp.size = 0;
 8003926:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800392a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800392e:	2200      	movs	r2, #0
 8003930:	821a      	strh	r2, [r3, #16]
		break;
 8003932:	e074      	b.n	8003a1e <interpretcommand+0x4b6>
	case PROG_SET_ADDRESS:
		logger(LOG_LEVEL_INFO, "Commande SET  ADRESS");
 8003934:	495d      	ldr	r1, [pc, #372]	@ (8003aac <interpretcommand+0x544>)
 8003936:	2000      	movs	r0, #0
 8003938:	f001 ff8c 	bl	8005854 <logger>
		logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 800393c:	495c      	ldr	r1, [pc, #368]	@ (8003ab0 <interpretcommand+0x548>)
 800393e:	2005      	movs	r0, #5
 8003940:	f001 ff88 	bl	8005854 <logger>
		reponse = ERROR_COMMAND_NOT_IMPLEMENTED;
 8003944:	2302      	movs	r3, #2
 8003946:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		resp.size = 0;
 800394a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800394e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003952:	2200      	movs	r2, #0
 8003954:	821a      	strh	r2, [r3, #16]
		break;
 8003956:	e062      	b.n	8003a1e <interpretcommand+0x4b6>
	case GET_LAST_DROPED_MESSAGE:

		logger(LOG_LEVEL_CRITICAL, "Commande GET_LAST_DROPED_MESSAGE");
 8003958:	4956      	ldr	r1, [pc, #344]	@ (8003ab4 <interpretcommand+0x54c>)
 800395a:	2005      	movs	r0, #5
 800395c:	f001 ff7a 	bl	8005854 <logger>
		reponse = getLastDroppedMessage(&resp);
 8003960:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f9e1 	bl	8004d2c <getLastDroppedMessage>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 8003970:	e055      	b.n	8003a1e <interpretcommand+0x4b6>
	case GET_ALL_DROPED_MESSAGE:
		logger(LOG_LEVEL_INFO, "Commande GET_ALL_DROPED_MESSAGE");
 8003972:	4951      	ldr	r1, [pc, #324]	@ (8003ab8 <interpretcommand+0x550>)
 8003974:	2000      	movs	r0, #0
 8003976:	f001 ff6d 	bl	8005854 <logger>
		reponse = getAllDroppedMessage(&resp);
 800397a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fa0e 	bl	8004da0 <getAllDroppedMessage>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 800398a:	e048      	b.n	8003a1e <interpretcommand+0x4b6>
	case GET_LAST_LOG:

		logger(LOG_LEVEL_CRITICAL, "Commande GET_LAST_LOG");
 800398c:	494b      	ldr	r1, [pc, #300]	@ (8003abc <interpretcommand+0x554>)
 800398e:	2005      	movs	r0, #5
 8003990:	f001 ff60 	bl	8005854 <logger>
		reponse = getLastLog(&resp);
 8003994:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003998:	4618      	mov	r0, r3
 800399a:	f001 ffbd 	bl	8005918 <getLastLog>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7

		break;
 80039a4:	e03b      	b.n	8003a1e <interpretcommand+0x4b6>
	case GET_ALL_LOG:
		logger(LOG_LEVEL_INFO, "Commande GET_ALL_LOG");
 80039a6:	4946      	ldr	r1, [pc, #280]	@ (8003ac0 <interpretcommand+0x558>)
 80039a8:	2000      	movs	r0, #0
 80039aa:	f001 ff53 	bl	8005854 <logger>
		reponse = getAllLogs(&resp);
 80039ae:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 ffe6 	bl	8005984 <getAllLogs>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 80039be:	e02e      	b.n	8003a1e <interpretcommand+0x4b6>

	case SET_INFO_MESSAGE:
		logger(LOG_LEVEL_INFO, "Commande SET_INFO_MESSAGE");
 80039c0:	4940      	ldr	r1, [pc, #256]	@ (8003ac4 <interpretcommand+0x55c>)
 80039c2:	2000      	movs	r0, #0
 80039c4:	f001 ff46 	bl	8005854 <logger>
		reponse = setInfoMessage(cmd.parameter, &resp);
 80039c8:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80039cc:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 80039d0:	3306      	adds	r3, #6
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fbdf 	bl	8004198 <setInfoMessage>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 80039e0:	e01d      	b.n	8003a1e <interpretcommand+0x4b6>
	case DEL_INFO_MESSAGE:
		logger(LOG_LEVEL_INFO, "Commande DEL_INFO_MESSAGE");
 80039e2:	4939      	ldr	r1, [pc, #228]	@ (8003ac8 <interpretcommand+0x560>)
 80039e4:	2000      	movs	r0, #0
 80039e6:	f001 ff35 	bl	8005854 <logger>
		reponse = delInfoMessage(cmd.parameter[0], &resp);
 80039ea:	f897 31fa 	ldrb.w	r3, [r7, #506]	@ 0x1fa
 80039ee:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fc3b 	bl	8004270 <delInfoMessage>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		break;
 8003a00:	e00d      	b.n	8003a1e <interpretcommand+0x4b6>

	default:
		// generation code erreur
		logger(LOG_LEVEL_CRITICAL, "erreur cmd %d ");
 8003a02:	4932      	ldr	r1, [pc, #200]	@ (8003acc <interpretcommand+0x564>)
 8003a04:	2005      	movs	r0, #5
 8003a06:	f001 ff25 	bl	8005854 <logger>
		reponse = ERROR_COMMAND_UNKNOW;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
		resp.size = 0;
 8003a10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a18:	2200      	movs	r2, #0
 8003a1a:	821a      	strh	r2, [r3, #16]

		break;
 8003a1c:	bf00      	nop
	}

	if (reponse != SUCCESS) {
 8003a1e:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <interpretcommand+0x4d6>
		resp.header.error_code = reponse;
 8003a26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a2e:	f897 21d7 	ldrb.w	r2, [r7, #471]	@ 0x1d7
 8003a32:	715a      	strb	r2, [r3, #5]
		logger(LOG_LEVEL_INFO, "ERREUR COMMAND");
 8003a34:	4926      	ldr	r1, [pc, #152]	@ (8003ad0 <interpretcommand+0x568>)
 8003a36:	2000      	movs	r0, #0
 8003a38:	f001 ff0c 	bl	8005854 <logger>
 8003a3c:	e005      	b.n	8003a4a <interpretcommand+0x4e2>
	} else {
		resp.header.error_code = SUCCESS;
 8003a3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a46:	2200      	movs	r2, #0
 8003a48:	715a      	strb	r2, [r3, #5]
	}


	resp.header.size = TC_REPONSE_HEADER_SIZE;
 8003a4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a52:	2212      	movs	r2, #18
 8003a54:	801a      	strh	r2, [r3, #0]
	resp.header.responseType = RESULT_CMD;
 8003a56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	711a      	strb	r2, [r3, #4]
//	resp.header.spare= 0x0FF05555;
	resp.header.cmd_id = cmd.id;
 8003a62:	f8b7 21f8 	ldrh.w	r2, [r7, #504]	@ 0x1f8
 8003a66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a6e:	805a      	strh	r2, [r3, #2]

	return resp;
 8003a70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a74:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f00a fe6d 	bl	800e76a <memcpy>
}
 8003a90:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a94:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003aa4:	b004      	add	sp, #16
 8003aa6:	4770      	bx	lr
 8003aa8:	08010924 	.word	0x08010924
 8003aac:	08010938 	.word	0x08010938
 8003ab0:	20003fec 	.word	0x20003fec
 8003ab4:	08010950 	.word	0x08010950
 8003ab8:	08010974 	.word	0x08010974
 8003abc:	08010994 	.word	0x08010994
 8003ac0:	080109ac 	.word	0x080109ac
 8003ac4:	080109c4 	.word	0x080109c4
 8003ac8:	080109e0 	.word	0x080109e0
 8003acc:	080109fc 	.word	0x080109fc
 8003ad0:	08010a0c 	.word	0x08010a0c

08003ad4 <processCommand>:
 * \brief process command ax25 packet
 * \param  Ax25 packet
 * \return  SUCCESS if or Error code
 *
 */
void processCommand(s_ax25_packet data_ax25) {
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad8:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 8003adc:	af42      	add	r7, sp, #264	@ 0x108
 8003ade:	f507 648c 	add.w	r4, r7, #1120	@ 0x460
 8003ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	t_tc_response result;
	s_command cmd;
//	result.header.size = sizeof(s_tm_tc_header);

	gv_spino.nbCommandeReceived++;
 8003ae6:	4b67      	ldr	r3, [pc, #412]	@ (8003c84 <processCommand+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <processCommand+0x1b0>)
 8003aee:	6013      	str	r3, [r2, #0]
	memcpy(&cmd, data_ax25.data, sizeof(s_command));
 8003af0:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8003af4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8003af8:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8003afc:	4618      	mov	r0, r3
 8003afe:	f00a fe34 	bl	800e76a <memcpy>
	if (cmd.key != gv_spino_cmd_key) {
 8003b02:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b06:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003b0a:	885a      	ldrh	r2, [r3, #2]
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c88 <processCommand+0x1b4>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d02b      	beq.n	8003b6c <processCommand+0x98>
		result.header.size = sizeof(s_tm_tc_header);
 8003b14:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	801a      	strh	r2, [r3, #0]
//		result.header.spare= 0x0FF05555;
		result.header.responseType = RESULT_CMD;
 8003b20:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	711a      	strb	r2, [r3, #4]
		result.header.timeStamp = gv_spino.timestamps;
 8003b2c:	4b55      	ldr	r3, [pc, #340]	@ (8003c84 <processCommand+0x1b0>)
 8003b2e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003b32:	f507 6189 	add.w	r1, r7, #1096	@ 0x448
 8003b36:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8003b3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		result.header.cmd_id = cmd.id;
 8003b3e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b42:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003b46:	889a      	ldrh	r2, [r3, #4]
 8003b48:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b50:	805a      	strh	r2, [r3, #2]
		result.header.error_code = ERROR_COMMAND_WITH_WRONG_KEY;
 8003b52:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	715a      	strb	r2, [r3, #5]
		result.size = 0;
 8003b5e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b66:	2200      	movs	r2, #0
 8003b68:	821a      	strh	r2, [r3, #16]
 8003b6a:	e01f      	b.n	8003bac <processCommand+0xd8>
	} else {
		result = interpretcommand(cmd);
 8003b6c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b70:	f5a3 768c 	sub.w	r6, r3, #280	@ 0x118
 8003b74:	463d      	mov	r5, r7
 8003b76:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b7a:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8003b7e:	4668      	mov	r0, sp
 8003b80:	f104 030c 	add.w	r3, r4, #12
 8003b84:	22fa      	movs	r2, #250	@ 0xfa
 8003b86:	4619      	mov	r1, r3
 8003b88:	f00a fdef 	bl	800e76a <memcpy>
 8003b8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003b90:	4628      	mov	r0, r5
 8003b92:	f7ff fce9 	bl	8003568 <interpretcommand>
 8003b96:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003b9a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f00a fddf 	bl	800e76a <memcpy>
	}

	if (result.header.error_code != SUCCESS) {
 8003bac:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003bb0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bb4:	795b      	ldrb	r3, [r3, #5]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <processCommand+0xf0>
		gv_spino.nbCommandeWithError++;
 8003bba:	4b32      	ldr	r3, [pc, #200]	@ (8003c84 <processCommand+0x1b0>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a30      	ldr	r2, [pc, #192]	@ (8003c84 <processCommand+0x1b0>)
 8003bc2:	6053      	str	r3, [r2, #4]
	}
	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerTlm;
 8003bc4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003bc8:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <processCommand+0x1b8>)
 8003bce:	461c      	mov	r4, r3
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	result.header.size =result.header.size + result.size;
 8003bdc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003be0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003bea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bee:	8a1b      	ldrh	r3, [r3, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003bf8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bfc:	801a      	strh	r2, [r3, #0]
	memcpy(ax25Frame.data, &result, TC_REPONSE_HEADER_SIZE + result.size);
 8003bfe:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003c02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c06:	8a1b      	ldrh	r3, [r3, #16]
 8003c08:	f103 0212 	add.w	r2, r3, #18
 8003c0c:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8003c10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003c14:	3310      	adds	r3, #16
 8003c16:	4618      	mov	r0, r3
 8003c18:	f00a fda7 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + result.size);
 8003c1c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003c20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c24:	8a1b      	ldrh	r3, [r3, #16]
 8003c26:	3312      	adds	r3, #18
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003c2e:	f5a3 744c 	sub.w	r4, r3, #816	@ 0x330
 8003c32:	9240      	str	r2, [sp, #256]	@ 0x100
 8003c34:	4668      	mov	r0, sp
 8003c36:	f104 0310 	add.w	r3, r4, #16
 8003c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f00a fd93 	bl	800e76a <memcpy>
 8003c44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c48:	f000 ff3c 	bl	8004ac4 <writeData>
	sprintf(gvLogMsg, "RESULT COMMAND  %x %x ", result.header.cmd_id,
 8003c4c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003c50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c54:	885b      	ldrh	r3, [r3, #2]
 8003c56:	461a      	mov	r2, r3
			result.header.error_code);
 8003c58:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8003c5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c60:	795b      	ldrb	r3, [r3, #5]
	sprintf(gvLogMsg, "RESULT COMMAND  %x %x ", result.header.cmd_id,
 8003c62:	490b      	ldr	r1, [pc, #44]	@ (8003c90 <processCommand+0x1bc>)
 8003c64:	480b      	ldr	r0, [pc, #44]	@ (8003c94 <processCommand+0x1c0>)
 8003c66:	f00a fbe5 	bl	800e434 <siprintf>
	logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 8003c6a:	490a      	ldr	r1, [pc, #40]	@ (8003c94 <processCommand+0x1c0>)
 8003c6c:	2005      	movs	r0, #5
 8003c6e:	f001 fdf1 	bl	8005854 <logger>
}
 8003c72:	bf00      	nop
 8003c74:	f207 474c 	addw	r7, r7, #1100	@ 0x44c
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c7e:	b004      	add	sp, #16
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20002590 	.word	0x20002590
 8003c88:	20000f32 	.word	0x20000f32
 8003c8c:	200025c8 	.word	0x200025c8
 8003c90:	08010a1c 	.word	0x08010a1c
 8003c94:	20003fec 	.word	0x20003fec

08003c98 <setupControl>:

t_tc_response resptlm;


void  setupControl()
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
	lv_spino_timeStampPrevious =0;
 8003c9c:	4907      	ldr	r1, [pc, #28]	@ (8003cbc <setupControl+0x24>)
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	e9c1 2300 	strd	r2, r3, [r1]
	lv_previousTick =0;
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <setupControl+0x28>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20001a28 	.word	0x20001a28
 8003cc0:	20001a30 	.word	0x20001a30

08003cc4 <inittlm>:

void inittlm() {
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	resptlm.header.responseType = TELEMETRY;
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <inittlm+0x34>)
 8003cca:	2240      	movs	r2, #64	@ 0x40
 8003ccc:	711a      	strb	r2, [r3, #4]
	resptlm.header.error_code = 0;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <inittlm+0x34>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	715a      	strb	r2, [r3, #5]
	resptlm.header.cmd_id = 0;
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <inittlm+0x34>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	805a      	strh	r2, [r3, #2]
	resptlm.header.spare = (short) 0x5555AAAA;
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <inittlm+0x34>)
 8003cdc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003ce0:	80da      	strh	r2, [r3, #6]
	resptlm.header.size = TC_REPONSE_HEADER_SIZE + sizeof(s_globalVariable) ;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <inittlm+0x34>)
 8003ce4:	224a      	movs	r2, #74	@ 0x4a
 8003ce6:	801a      	strh	r2, [r3, #0]
	resptlm.size = sizeof(s_globalVariable);
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <inittlm+0x34>)
 8003cea:	2238      	movs	r2, #56	@ 0x38
 8003cec:	821a      	strh	r2, [r3, #16]
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20001a38 	.word	0x20001a38

08003cfc <sendTLMWithoutDelay>:

void sendTLMWithoutDelay()
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8003d02:	af42      	add	r7, sp, #264	@ 0x108
	s_ax25_packet ax25Frame;
		lv_spino_timeStampPrevious = gv_spino.timestamps;
 8003d04:	4b22      	ldr	r3, [pc, #136]	@ (8003d90 <sendTLMWithoutDelay+0x94>)
 8003d06:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003d0a:	4922      	ldr	r1, [pc, #136]	@ (8003d94 <sendTLMWithoutDelay+0x98>)
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
		resptlm.header.timeStamp = gv_spino.timestamps;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	@ (8003d90 <sendTLMWithoutDelay+0x94>)
 8003d12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003d16:	4920      	ldr	r1, [pc, #128]	@ (8003d98 <sendTLMWithoutDelay+0x9c>)
 8003d18:	e9c1 2302 	strd	r2, r3, [r1, #8]
		memcpy(resptlm.parameter, &gv_spino, sizeof(s_globalVariable));
 8003d1c:	2238      	movs	r2, #56	@ 0x38
 8003d1e:	491c      	ldr	r1, [pc, #112]	@ (8003d90 <sendTLMWithoutDelay+0x94>)
 8003d20:	481e      	ldr	r0, [pc, #120]	@ (8003d9c <sendTLMWithoutDelay+0xa0>)
 8003d22:	f00a fd22 	bl	800e76a <memcpy>
		ax25Frame.header = gv_headerTlm;
 8003d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003da0 <sendTLMWithoutDelay+0xa4>)
 8003d30:	461c      	mov	r4, r3
 8003d32:	4613      	mov	r3, r2
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ax25Frame.data, &resptlm, TC_REPONSE_HEADER_SIZE + resptlm.size);
 8003d3e:	4b16      	ldr	r3, [pc, #88]	@ (8003d98 <sendTLMWithoutDelay+0x9c>)
 8003d40:	8a1b      	ldrh	r3, [r3, #16]
 8003d42:	f103 0212 	add.w	r2, r3, #18
 8003d46:	463b      	mov	r3, r7
 8003d48:	3310      	adds	r3, #16
 8003d4a:	4913      	ldr	r1, [pc, #76]	@ (8003d98 <sendTLMWithoutDelay+0x9c>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f00a fd0c 	bl	800e76a <memcpy>
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resptlm.size);
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <sendTLMWithoutDelay+0x9c>)
 8003d54:	8a1b      	ldrh	r3, [r3, #16]
 8003d56:	3312      	adds	r3, #18
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d5e:	f5a3 7488 	sub.w	r4, r3, #272	@ 0x110
 8003d62:	9240      	str	r2, [sp, #256]	@ 0x100
 8003d64:	4668      	mov	r0, sp
 8003d66:	f104 0310 	add.w	r3, r4, #16
 8003d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f00a fcfb 	bl	800e76a <memcpy>
 8003d74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d78:	f000 fea4 	bl	8004ac4 <writeData>
		logger(LOG_LEVEL_INFO, "Envoie TLM");
 8003d7c:	4909      	ldr	r1, [pc, #36]	@ (8003da4 <sendTLMWithoutDelay+0xa8>)
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f001 fd68 	bl	8005854 <logger>
}
 8003d84:	bf00      	nop
 8003d86:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20002590 	.word	0x20002590
 8003d94:	20001a28 	.word	0x20001a28
 8003d98:	20001a38 	.word	0x20001a38
 8003d9c:	20001a4a 	.word	0x20001a4a
 8003da0:	200025c8 	.word	0x200025c8
 8003da4:	08010a34 	.word	0x08010a34

08003da8 <sendTLM>:
static void sendTLM() {
 8003da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dac:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003db0:	af42      	add	r7, sp, #264	@ 0x108
	if (gv_spino.timestamps
 8003db2:	494a      	ldr	r1, [pc, #296]	@ (8003edc <sendTLM+0x134>)
 8003db4:	e9d1 890a 	ldrd	r8, r9, [r1, #40]	@ 0x28
			> (lv_spino_timeStampPrevious + gv_spinoConfig.telemetryDelay * 1000)) {
 8003db8:	4949      	ldr	r1, [pc, #292]	@ (8003ee0 <sendTLM+0x138>)
 8003dba:	7b89      	ldrb	r1, [r1, #14]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003dc2:	fb00 f101 	mul.w	r1, r0, r1
 8003dc6:	17c8      	asrs	r0, r1, #31
 8003dc8:	460c      	mov	r4, r1
 8003dca:	4605      	mov	r5, r0
 8003dcc:	4945      	ldr	r1, [pc, #276]	@ (8003ee4 <sendTLM+0x13c>)
 8003dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dd2:	1822      	adds	r2, r4, r0
 8003dd4:	eb45 0301 	adc.w	r3, r5, r1
	if (gv_spino.timestamps
 8003dd8:	4542      	cmp	r2, r8
 8003dda:	eb73 0309 	sbcs.w	r3, r3, r9
 8003dde:	d276      	bcs.n	8003ece <sendTLM+0x126>

		s_ax25_packet ax25Frame;
		lv_spino_timeStampPrevious = gv_spino.timestamps;
 8003de0:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <sendTLM+0x134>)
 8003de2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003de6:	493f      	ldr	r1, [pc, #252]	@ (8003ee4 <sendTLM+0x13c>)
 8003de8:	e9c1 2300 	strd	r2, r3, [r1]
		resptlm.header.timeStamp = gv_spino.timestamps;
 8003dec:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <sendTLM+0x134>)
 8003dee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003df2:	493d      	ldr	r1, [pc, #244]	@ (8003ee8 <sendTLM+0x140>)
 8003df4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		memcpy(resptlm.parameter, &gv_spino, sizeof(s_globalVariable));
 8003df8:	2238      	movs	r2, #56	@ 0x38
 8003dfa:	4938      	ldr	r1, [pc, #224]	@ (8003edc <sendTLM+0x134>)
 8003dfc:	483b      	ldr	r0, [pc, #236]	@ (8003eec <sendTLM+0x144>)
 8003dfe:	f00a fcb4 	bl	800e76a <memcpy>
		ax25Frame.header = gv_headerTlm;
 8003e02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003e06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e0a:	4a39      	ldr	r2, [pc, #228]	@ (8003ef0 <sendTLM+0x148>)
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	4613      	mov	r3, r2
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ax25Frame.data, &resptlm, TC_REPONSE_HEADER_SIZE + resptlm.size);
 8003e1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ee8 <sendTLM+0x140>)
 8003e1c:	8a1b      	ldrh	r3, [r3, #16]
 8003e1e:	f103 0212 	add.w	r2, r3, #18
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	3310      	adds	r3, #16
 8003e26:	4930      	ldr	r1, [pc, #192]	@ (8003ee8 <sendTLM+0x140>)
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00a fc9e 	bl	800e76a <memcpy>

		if(gv_spinoConfig.multimode==0 )
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <sendTLM+0x138>)
 8003e30:	7bdb      	ldrb	r3, [r3, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d119      	bne.n	8003e6a <sendTLM+0xc2>
		{
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resptlm.size);
 8003e36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee8 <sendTLM+0x140>)
 8003e38:	8a1b      	ldrh	r3, [r3, #16]
 8003e3a:	3312      	adds	r3, #18
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003e42:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 8003e46:	9240      	str	r2, [sp, #256]	@ 0x100
 8003e48:	4668      	mov	r0, sp
 8003e4a:	f104 0310 	add.w	r3, r4, #16
 8003e4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e52:	4619      	mov	r1, r3
 8003e54:	f00a fc89 	bl	800e76a <memcpy>
 8003e58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e5c:	f000 fe32 	bl	8004ac4 <writeData>
		logger(LOG_LEVEL_INFO, "Envoie TLM");
 8003e60:	4924      	ldr	r1, [pc, #144]	@ (8003ef4 <sendTLM+0x14c>)
 8003e62:	2000      	movs	r0, #0
 8003e64:	f001 fcf6 	bl	8005854 <logger>

	}



}
 8003e68:	e031      	b.n	8003ece <sendTLM+0x126>
			uint8_t j=0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
			for(j=0; j<MAX_MODE;j++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003e76:	e021      	b.n	8003ebc <sendTLM+0x114>
				setModemMode(j );
 8003e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fcf9 	bl	8004874 <setModemMode>
				writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resptlm.size);
 8003e82:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <sendTLM+0x140>)
 8003e84:	8a1b      	ldrh	r3, [r3, #16]
 8003e86:	3312      	adds	r3, #18
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003e8e:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 8003e92:	9240      	str	r2, [sp, #256]	@ 0x100
 8003e94:	4668      	mov	r0, sp
 8003e96:	f104 0310 	add.w	r3, r4, #16
 8003e9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f00a fc63 	bl	800e76a <memcpy>
 8003ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ea8:	f000 fe0c 	bl	8004ac4 <writeData>
				HAL_Delay(DELAY_MULTIMODE);
 8003eac:	2064      	movs	r0, #100	@ 0x64
 8003eae:	f003 fbc7 	bl	8007640 <HAL_Delay>
			for(j=0; j<MAX_MODE;j++)
 8003eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d9d9      	bls.n	8003e78 <sendTLM+0xd0>
			setModemMode(gv_spinoConfig.spinoTXModemMode );
 8003ec4:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <sendTLM+0x138>)
 8003ec6:	7b5b      	ldrb	r3, [r3, #13]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fcd3 	bl	8004874 <setModemMode>
}
 8003ece:	bf00      	nop
 8003ed0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003eda:	bf00      	nop
 8003edc:	20002590 	.word	0x20002590
 8003ee0:	2000256c 	.word	0x2000256c
 8003ee4:	20001a28 	.word	0x20001a28
 8003ee8:	20001a38 	.word	0x20001a38
 8003eec:	20001a4a 	.word	0x20001a4a
 8003ef0:	200025c8 	.word	0x200025c8
 8003ef4:	08010a34 	.word	0x08010a34

08003ef8 <changeState>:

unsigned char changeState(int state) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

	unsigned char response = SUCCESS;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]

	switch (state) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d854      	bhi.n	8003fb4 <changeState+0xbc>
 8003f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <changeState+0x18>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f29 	.word	0x08003f29
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f39 	.word	0x08003f39
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003f97 	.word	0x08003f97

	case STATE_INIT:
		gv_spino.currentState = STATE_INIT;
 8003f28:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <changeState+0xd4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	865a      	strh	r2, [r3, #50]	@ 0x32
		break;
 8003f2e:	e048      	b.n	8003fc2 <changeState+0xca>
	case STATE_SURVEY:
		gv_spino.currentState = STATE_SURVEY;
 8003f30:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <changeState+0xd4>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	865a      	strh	r2, [r3, #50]	@ 0x32
		break;
 8003f36:	e044      	b.n	8003fc2 <changeState+0xca>

	case STATE_DIGIPEATER:
		if (gv_spino.currentState == STATE_SURVEY) {
 8003f38:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <changeState+0xd4>)
 8003f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d103      	bne.n	8003f48 <changeState+0x50>
			gv_spino.currentState = STATE_DIGIPEATER;
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <changeState+0xd4>)
 8003f42:	2203      	movs	r2, #3
 8003f44:	865a      	strh	r2, [r3, #50]	@ 0x32
		} else {
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
			response = ERROR_WRONG_STATE;
		}
		break;
 8003f46:	e03c      	b.n	8003fc2 <changeState+0xca>
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
 8003f48:	4921      	ldr	r1, [pc, #132]	@ (8003fd0 <changeState+0xd8>)
 8003f4a:	2005      	movs	r0, #5
 8003f4c:	f001 fc82 	bl	8005854 <logger>
			response = ERROR_WRONG_STATE;
 8003f50:	2304      	movs	r3, #4
 8003f52:	73fb      	strb	r3, [r7, #15]
		break;
 8003f54:	e035      	b.n	8003fc2 <changeState+0xca>

	case STATE_MAILBOX:
		if (gv_spino.currentState == STATE_SURVEY) {
 8003f56:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <changeState+0xd4>)
 8003f58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d103      	bne.n	8003f66 <changeState+0x6e>
			gv_spino.currentState = STATE_MAILBOX;
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <changeState+0xd4>)
 8003f60:	2202      	movs	r2, #2
 8003f62:	865a      	strh	r2, [r3, #50]	@ 0x32
		} else {
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
			response = ERROR_WRONG_STATE;
		}
		break;
 8003f64:	e02d      	b.n	8003fc2 <changeState+0xca>
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
 8003f66:	491a      	ldr	r1, [pc, #104]	@ (8003fd0 <changeState+0xd8>)
 8003f68:	2005      	movs	r0, #5
 8003f6a:	f001 fc73 	bl	8005854 <logger>
			response = ERROR_WRONG_STATE;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	73fb      	strb	r3, [r7, #15]
		break;
 8003f72:	e026      	b.n	8003fc2 <changeState+0xca>

	case STATE_EXPE_DATA:
		if (gv_spino.currentState == STATE_SURVEY) {
 8003f74:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <changeState+0xd4>)
 8003f76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <changeState+0x90>
			gv_spino.currentState = STATE_EXPE_DATA;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <changeState+0xd4>)
 8003f7e:	2204      	movs	r2, #4
 8003f80:	865a      	strh	r2, [r3, #50]	@ 0x32
			initExpe();
 8003f82:	f000 ffe5 	bl	8004f50 <initExpe>
		} else {
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
			response = ERROR_WRONG_STATE;
		}
		break;
 8003f86:	e01c      	b.n	8003fc2 <changeState+0xca>
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
 8003f88:	4911      	ldr	r1, [pc, #68]	@ (8003fd0 <changeState+0xd8>)
 8003f8a:	2005      	movs	r0, #5
 8003f8c:	f001 fc62 	bl	8005854 <logger>
			response = ERROR_WRONG_STATE;
 8003f90:	2304      	movs	r3, #4
 8003f92:	73fb      	strb	r3, [r7, #15]
		break;
 8003f94:	e015      	b.n	8003fc2 <changeState+0xca>

	case STATE_MAIN_PAYLOAD:
		if (gv_spino.currentState == STATE_SURVEY) {
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <changeState+0xd4>)
 8003f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d103      	bne.n	8003fa6 <changeState+0xae>
			gv_spino.currentState = STATE_MAIN_PAYLOAD;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <changeState+0xd4>)
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	865a      	strh	r2, [r3, #50]	@ 0x32
		} else {
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
			response = ERROR_WRONG_STATE;
		}
		break;
 8003fa4:	e00d      	b.n	8003fc2 <changeState+0xca>
			logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
 8003fa6:	490a      	ldr	r1, [pc, #40]	@ (8003fd0 <changeState+0xd8>)
 8003fa8:	2005      	movs	r0, #5
 8003faa:	f001 fc53 	bl	8005854 <logger>
			response = ERROR_WRONG_STATE;
 8003fae:	2304      	movs	r3, #4
 8003fb0:	73fb      	strb	r3, [r7, #15]
		break;
 8003fb2:	e006      	b.n	8003fc2 <changeState+0xca>

	default:
		/* remplacer par reinit */

		logger(LOG_LEVEL_CRITICAL, "ERROR_WRONG_STATE");
 8003fb4:	4906      	ldr	r1, [pc, #24]	@ (8003fd0 <changeState+0xd8>)
 8003fb6:	2005      	movs	r0, #5
 8003fb8:	f001 fc4c 	bl	8005854 <logger>
		response = ERROR_WRONG_STATE;
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	73fb      	strb	r3, [r7, #15]
		break;
 8003fc0:	bf00      	nop
	}

	return response;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20002590 	.word	0x20002590
 8003fd0:	08010a40 	.word	0x08010a40

08003fd4 <control>:

void control() {
 8003fd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
//	inittlm();

//	while (1) {
		switch (gv_spino.currentState) {
 8003fdc:	4b48      	ldr	r3, [pc, #288]	@ (8004100 <control+0x12c>)
 8003fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d84f      	bhi.n	8004084 <control+0xb0>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <control+0x18>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004005 	.word	0x08004005
 8003ff0:	08004013 	.word	0x08004013
 8003ff4:	0800403f 	.word	0x0800403f
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	08004055 	.word	0x08004055
 8004000:	0800406b 	.word	0x0800406b

		case STATE_INIT:

			logger(LOG_LEVEL_INFO, "STATE INIT");
 8004004:	493f      	ldr	r1, [pc, #252]	@ (8004104 <control+0x130>)
 8004006:	2000      	movs	r0, #0
 8004008:	f001 fc24 	bl	8005854 <logger>
			setupGlobalVariable();
 800400c:	f000 fa8e 	bl	800452c <setupGlobalVariable>
			break;
 8004010:	e04a      	b.n	80040a8 <control+0xd4>
		case STATE_SURVEY:
			logger(LOG_LEVEL_INFO, "STATE SURVEY");
 8004012:	493d      	ldr	r1, [pc, #244]	@ (8004108 <control+0x134>)
 8004014:	2000      	movs	r0, #0
 8004016:	f001 fc1d 	bl	8005854 <logger>
			gv_spino.currentState = survey();
 800401a:	f003 fa13 	bl	8007444 <survey>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <control+0x12c>)
 8004024:	865a      	strh	r2, [r3, #50]	@ 0x32
			break;
 8004026:	e03f      	b.n	80040a8 <control+0xd4>

		case STATE_DIGIPEATER:
			logger(LOG_LEVEL_INFO, "STATE DIGIPEATER");
 8004028:	4938      	ldr	r1, [pc, #224]	@ (800410c <control+0x138>)
 800402a:	2000      	movs	r0, #0
 800402c:	f001 fc12 	bl	8005854 <logger>
			gv_spino.currentState = digipeater();
 8004030:	f000 fb5e 	bl	80046f0 <digipeater>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	4b31      	ldr	r3, [pc, #196]	@ (8004100 <control+0x12c>)
 800403a:	865a      	strh	r2, [r3, #50]	@ 0x32
			break;
 800403c:	e034      	b.n	80040a8 <control+0xd4>

		case STATE_MAILBOX:

			logger(LOG_LEVEL_INFO, "STATE MAILBOX");
 800403e:	4934      	ldr	r1, [pc, #208]	@ (8004110 <control+0x13c>)
 8004040:	2000      	movs	r0, #0
 8004042:	f001 fc07 	bl	8005854 <logger>
			gv_spino.currentState = modeMailbox();
 8004046:	f002 fe8f 	bl	8006d68 <modeMailbox>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <control+0x12c>)
 8004050:	865a      	strh	r2, [r3, #50]	@ 0x32
			break;
 8004052:	e029      	b.n	80040a8 <control+0xd4>

		case STATE_EXPE_DATA:
			logger(LOG_LEVEL_INFO, "STATE EXPE");
 8004054:	492f      	ldr	r1, [pc, #188]	@ (8004114 <control+0x140>)
 8004056:	2000      	movs	r0, #0
 8004058:	f001 fbfc 	bl	8005854 <logger>
			gv_spino.currentState = experimentalMode();
 800405c:	f001 fb5e 	bl	800571c <experimentalMode>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	4b26      	ldr	r3, [pc, #152]	@ (8004100 <control+0x12c>)
 8004066:	865a      	strh	r2, [r3, #50]	@ 0x32
			break;
 8004068:	e01e      	b.n	80040a8 <control+0xd4>

		case STATE_MAIN_PAYLOAD:
			logger(LOG_LEVEL_INFO, "STATE_MAIN_PAYLOAD");
 800406a:	492b      	ldr	r1, [pc, #172]	@ (8004118 <control+0x144>)
 800406c:	2000      	movs	r0, #0
 800406e:	f001 fbf1 	bl	8005854 <logger>
			initPayload();
 8004072:	f002 fef9 	bl	8006e68 <initPayload>
			gv_spino.currentState = payloadMode();
 8004076:	f003 f951 	bl	800731c <payloadMode>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <control+0x12c>)
 8004080:	865a      	strh	r2, [r3, #50]	@ 0x32
			break;
 8004082:	e011      	b.n	80040a8 <control+0xd4>

		default:
			/* remplacer par reinit */
			sprintf(gvLogMsg, "State default %d \r\n", gv_spino.currentState);
 8004084:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <control+0x12c>)
 8004086:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004088:	461a      	mov	r2, r3
 800408a:	4924      	ldr	r1, [pc, #144]	@ (800411c <control+0x148>)
 800408c:	4824      	ldr	r0, [pc, #144]	@ (8004120 <control+0x14c>)
 800408e:	f00a f9d1 	bl	800e434 <siprintf>
			logger(LOG_LEVEL_CRITICAL, "STATE DEFAULT");
 8004092:	4924      	ldr	r1, [pc, #144]	@ (8004124 <control+0x150>)
 8004094:	2005      	movs	r0, #5
 8004096:	f001 fbdd 	bl	8005854 <logger>
			gv_spino.currentState = STATE_INIT;
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <control+0x12c>)
 800409c:	2200      	movs	r2, #0
 800409e:	865a      	strh	r2, [r3, #50]	@ 0x32
			gv_spino.lastResetCause = RESET_CAUSE_STATE_UNKNOWN;
 80040a0:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <control+0x12c>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	861a      	strh	r2, [r3, #48]	@ 0x30
			break;
 80040a6:	bf00      	nop
		}


		uint32_t tim =  HAL_GetTick();
 80040a8:	f003 fabe 	bl	8007628 <HAL_GetTick>
 80040ac:	6038      	str	r0, [r7, #0]

		int deltaTime = tim - lv_previousTick;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <control+0x154>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	607b      	str	r3, [r7, #4]
		if (deltaTime <0)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da05      	bge.n	80040ca <control+0xf6>
		{
			deltaTime = tim + (0xFFFFFFFF - lv_previousTick);
 80040be:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <control+0x154>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	607b      	str	r3, [r7, #4]
		}
		lv_previousTick = tim;
 80040ca:	4a17      	ldr	r2, [pc, #92]	@ (8004128 <control+0x154>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6013      	str	r3, [r2, #0]

//		Sleep(SLEEP_TIME);
		gv_spino.timestamps = gv_spino.timestamps + deltaTime;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <control+0x12c>)
 80040d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	17c8      	asrs	r0, r1, #31
 80040da:	460c      	mov	r4, r1
 80040dc:	4605      	mov	r5, r0
 80040de:	eb12 0804 	adds.w	r8, r2, r4
 80040e2:	eb43 0905 	adc.w	r9, r3, r5
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <control+0x12c>)
 80040e8:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
		sendTLM();
 80040ec:	f7ff fe5c 	bl	8003da8 <sendTLM>
		sendInfoMessage();
 80040f0:	f000 f8fa 	bl	80042e8 <sendInfoMessage>
//	}

}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040fe:	bf00      	nop
 8004100:	20002590 	.word	0x20002590
 8004104:	08010a54 	.word	0x08010a54
 8004108:	08010a60 	.word	0x08010a60
 800410c:	08010a70 	.word	0x08010a70
 8004110:	08010a84 	.word	0x08010a84
 8004114:	08010a94 	.word	0x08010a94
 8004118:	08010aa0 	.word	0x08010aa0
 800411c:	08010ab4 	.word	0x08010ab4
 8004120:	20003fec 	.word	0x20003fec
 8004124:	08010ac8 	.word	0x08010ac8
 8004128:	20001a30 	.word	0x20001a30

0800412c <setupInfoMessage>:
 * \fn  void setupInfoMessage()
 * \brief initialise information global variable
 * \return  void
 *
 */
void setupInfoMessage() {
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
	int i = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
	int j = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	603b      	str	r3, [r7, #0]
	for (i = 0; i < MAX_INF_MESSAGE; i++) {
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	e01f      	b.n	8004180 <setupInfoMessage+0x54>
		gv_information_msg[i].used = INFO_MSG_NOT_USED;
 8004140:	4914      	ldr	r1, [pc, #80]	@ (8004194 <setupInfoMessage+0x68>)
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	4413      	add	r3, r2
 800414a:	440b      	add	r3, r1
 800414c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < MAX_SIZE_INF_MSG; j++) {
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	e00c      	b.n	8004174 <setupInfoMessage+0x48>
			gv_information_msg[i].message[j] = 0;
 800415a:	490e      	ldr	r1, [pc, #56]	@ (8004194 <setupInfoMessage+0x68>)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	4413      	add	r3, r2
 8004164:	18ca      	adds	r2, r1, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	4413      	add	r3, r2
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < MAX_SIZE_INF_MSG; j++) {
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2bff      	cmp	r3, #255	@ 0xff
 8004178:	ddef      	ble.n	800415a <setupInfoMessage+0x2e>
	for (i = 0; i < MAX_INF_MESSAGE; i++) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3301      	adds	r3, #1
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b09      	cmp	r3, #9
 8004184:	dddc      	ble.n	8004140 <setupInfoMessage+0x14>
		}

	}
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20001b50 	.word	0x20001b50

08004198 <setInfoMessage>:
 * \brief add information message
 *
 * \return  SUCCESS or ERROR_INFO_MSG_INDEX_OUT_OF_BOUND
 *
 */
unsigned char setInfoMessage(char *data, t_tc_response *resp) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b0c6      	sub	sp, #280	@ 0x118
 800419c:	af00      	add	r7, sp, #0
 800419e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80041a6:	6018      	str	r0, [r3, #0]
 80041a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80041b0:	6019      	str	r1, [r3, #0]

	unsigned char reponse = SUCCESS;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int index;
	s_add_inf_msg info_msg;

	memcpy(&info_msg, data, sizeof(s_add_inf_msg));
 80041b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041bc:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80041c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	f240 1301 	movw	r3, #257	@ 0x101
 80041d2:	461a      	mov	r2, r3
 80041d4:	f00a fac9 	bl	800e76a <memcpy>
	index = info_msg.index;
 80041d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	logger(LOG_LEVEL_INFO, "SET INFO MESSAGE");
 80041e6:	4920      	ldr	r1, [pc, #128]	@ (8004268 <setInfoMessage+0xd0>)
 80041e8:	2000      	movs	r0, #0
 80041ea:	f001 fb33 	bl	8005854 <logger>

	if (info_msg.index < MAX_INF_MESSAGE) {
 80041ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80041f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d823      	bhi.n	8004244 <setInfoMessage+0xac>
		gv_information_msg[index].message[0] = 0;
 80041fc:	491b      	ldr	r1, [pc, #108]	@ (800426c <setInfoMessage+0xd4>)
 80041fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004202:	4613      	mov	r3, r2
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	4413      	add	r3, r2
 8004208:	440b      	add	r3, r1
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
		gv_information_msg[index].used = INFO_MSG_USED;
 800420e:	4917      	ldr	r1, [pc, #92]	@ (800426c <setInfoMessage+0xd4>)
 8004210:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004214:	4613      	mov	r3, r2
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4413      	add	r3, r2
 800421a:	440b      	add	r3, r1
 800421c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
		strncat(gv_information_msg[index].message, info_msg.message,
 8004224:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004228:	4613      	mov	r3, r2
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	4413      	add	r3, r2
 800422e:	4a0f      	ldr	r2, [pc, #60]	@ (800426c <setInfoMessage+0xd4>)
 8004230:	1898      	adds	r0, r3, r2
 8004232:	f107 030c 	add.w	r3, r7, #12
 8004236:	3301      	adds	r3, #1
 8004238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800423c:	4619      	mov	r1, r3
 800423e:	f00a fa09 	bl	800e654 <strncat>
 8004242:	e002      	b.n	800424a <setInfoMessage+0xb2>
				MAX_SIZE_INF_MSG);
	} else {
		reponse = ERROR_INFO_MSG_INDEX_OUT_OF_BOUND;
 8004244:	2387      	movs	r3, #135	@ 0x87
 8004246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	}

	resp->size = 0;
 800424a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800424e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	821a      	strh	r2, [r3, #16]
	return reponse;
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117

}
 800425c:	4618      	mov	r0, r3
 800425e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	08010ad8 	.word	0x08010ad8
 800426c:	20001b50 	.word	0x20001b50

08004270 <delInfoMessage>:
 *
 */

unsigned char delInfoMessage(char index, t_tc_response *resp)

{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
	unsigned char reponse = SUCCESS;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
	int ind = (int) index;
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	60bb      	str	r3, [r7, #8]

	if (index < MAX_INF_MESSAGE) {
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b09      	cmp	r3, #9
 8004288:	d81f      	bhi.n	80042ca <delInfoMessage+0x5a>
		if (gv_information_msg[ind].used == INFO_MSG_NOT_USED) {
 800428a:	4916      	ldr	r1, [pc, #88]	@ (80042e4 <delInfoMessage+0x74>)
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4413      	add	r3, r2
 8004294:	440b      	add	r3, r1
 8004296:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <delInfoMessage+0x34>
			reponse = ERROR_INFO_MSG_ALREADY_NOT_USED;
 80042a0:	2388      	movs	r3, #136	@ 0x88
 80042a2:	73fb      	strb	r3, [r7, #15]
		}
		gv_information_msg[ind].used = (char) INFO_MSG_NOT_USED;
 80042a4:	490f      	ldr	r1, [pc, #60]	@ (80042e4 <delInfoMessage+0x74>)
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4413      	add	r3, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
		gv_information_msg[ind].message[0] = (char) 0;
 80042b8:	490a      	ldr	r1, [pc, #40]	@ (80042e4 <delInfoMessage+0x74>)
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	4413      	add	r3, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e001      	b.n	80042ce <delInfoMessage+0x5e>

	} else {
		reponse = ERROR_INFO_MSG_INDEX_OUT_OF_BOUND;
 80042ca:	2387      	movs	r3, #135	@ 0x87
 80042cc:	73fb      	strb	r3, [r7, #15]
	}
	resp->size = 0;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	821a      	strh	r2, [r3, #16]
	return reponse;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20001b50 	.word	0x20001b50

080042e8 <sendInfoMessage>:
 *
 * \return  void
 *
 */

void sendInfoMessage() {
 80042e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042ec:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 80042f0:	af42      	add	r7, sp, #264	@ 0x108
	int find = 0;
 80042f2:	2100      	movs	r1, #0
 80042f4:	f8c7 1334 	str.w	r1, [r7, #820]	@ 0x334
	int cpt = 0;
 80042f8:	2100      	movs	r1, #0
 80042fa:	f8c7 1330 	str.w	r1, [r7, #816]	@ 0x330

	if (gv_spinoConfig.info_message_actif == INFO_MSG_USED) {
 80042fe:	4982      	ldr	r1, [pc, #520]	@ (8004508 <sendInfoMessage+0x220>)
 8004300:	7c09      	ldrb	r1, [r1, #16]
 8004302:	2901      	cmp	r1, #1
 8004304:	f040 80f9 	bne.w	80044fa <sendInfoMessage+0x212>

		if (gv_spino.timestamps
 8004308:	4980      	ldr	r1, [pc, #512]	@ (800450c <sendInfoMessage+0x224>)
 800430a:	e9d1 890a 	ldrd	r8, r9, [r1, #40]	@ 0x28
				> (lv_spino_timeStampInfoMsgPrevious
						+ gv_spinoConfig.delay_info_message * 1000)) {
 800430e:	497e      	ldr	r1, [pc, #504]	@ (8004508 <sendInfoMessage+0x220>)
 8004310:	7c49      	ldrb	r1, [r1, #17]
 8004312:	4608      	mov	r0, r1
 8004314:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004318:	fb00 f101 	mul.w	r1, r0, r1
 800431c:	17c8      	asrs	r0, r1, #31
 800431e:	460c      	mov	r4, r1
 8004320:	4605      	mov	r5, r0
 8004322:	497b      	ldr	r1, [pc, #492]	@ (8004510 <sendInfoMessage+0x228>)
 8004324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004328:	1822      	adds	r2, r4, r0
 800432a:	eb45 0301 	adc.w	r3, r5, r1
		if (gv_spino.timestamps
 800432e:	4542      	cmp	r2, r8
 8004330:	eb73 0309 	sbcs.w	r3, r3, r9
 8004334:	f080 80e1 	bcs.w	80044fa <sendInfoMessage+0x212>

			lv_spino_timeStampInfoMsgPrevious = gv_spino.timestamps;
 8004338:	4b74      	ldr	r3, [pc, #464]	@ (800450c <sendInfoMessage+0x224>)
 800433a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800433e:	4974      	ldr	r1, [pc, #464]	@ (8004510 <sendInfoMessage+0x228>)
 8004340:	e9c1 2300 	strd	r2, r3, [r1]

			t_tc_response resp;
			s_send_inf_msg infMsg;

			resp.header.responseType = INFORMATION_MSG;
 8004344:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004348:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800434c:	2241      	movs	r2, #65	@ 0x41
 800434e:	711a      	strb	r2, [r3, #4]
			resp.header.error_code = 0;
 8004350:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004354:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004358:	2200      	movs	r2, #0
 800435a:	715a      	strb	r2, [r3, #5]
			resp.header.cmd_id = 0;
 800435c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004364:	2200      	movs	r2, #0
 8004366:	805a      	strh	r2, [r3, #2]
			resp.header.timeStamp = gv_spino.timestamps;
 8004368:	4b68      	ldr	r3, [pc, #416]	@ (800450c <sendInfoMessage+0x224>)
 800436a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800436e:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8004372:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8004376:	e9c1 2302 	strd	r2, r3, [r1, #8]

			// recherche message actif
			while (find == 0) {
 800437a:	e0b9      	b.n	80044f0 <sendInfoMessage+0x208>
				cpt++;
 800437c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8004380:	3301      	adds	r3, #1
 8004382:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

				if (gv_information_msg[lv_index_message_actif].used
 8004386:	4b63      	ldr	r3, [pc, #396]	@ (8004514 <sendInfoMessage+0x22c>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4a62      	ldr	r2, [pc, #392]	@ (8004518 <sendInfoMessage+0x230>)
 800438e:	460b      	mov	r3, r1
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	440b      	add	r3, r1
 8004394:	4413      	add	r3, r2
 8004396:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	f040 8088 	bne.w	80044b2 <sendInfoMessage+0x1ca>
						== INFO_MSG_USED) {

					find = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
					infMsg.index = lv_index_message_actif;
 80043a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004514 <sendInfoMessage+0x22c>)
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80043b0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80043b4:	701a      	strb	r2, [r3, #0]
					infMsg.used =
							gv_information_msg[lv_index_message_actif].used;
 80043b6:	4b57      	ldr	r3, [pc, #348]	@ (8004514 <sendInfoMessage+0x22c>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4a56      	ldr	r2, [pc, #344]	@ (8004518 <sendInfoMessage+0x230>)
 80043be:	460b      	mov	r3, r1
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	440b      	add	r3, r1
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043ca:	781a      	ldrb	r2, [r3, #0]
					infMsg.used =
 80043cc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80043d0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80043d4:	705a      	strb	r2, [r3, #1]
					resp.size = (unsigned short) strlen(
							gv_information_msg[lv_index_message_actif].message)
 80043d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004514 <sendInfoMessage+0x22c>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	4613      	mov	r3, r2
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	4413      	add	r3, r2
 80043e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004518 <sendInfoMessage+0x230>)
 80043e4:	4413      	add	r3, r2
					resp.size = (unsigned short) strlen(
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fb ff4a 	bl	8000280 <strlen>
 80043ec:	4603      	mov	r3, r0
 80043ee:	b29b      	uxth	r3, r3
							+ 2;
 80043f0:	3302      	adds	r3, #2
 80043f2:	b29a      	uxth	r2, r3
					resp.size = (unsigned short) strlen(
 80043f4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80043f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80043fc:	821a      	strh	r2, [r3, #16]
					infMsg.message[0] = 0;
 80043fe:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004402:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8004406:	2200      	movs	r2, #0
 8004408:	709a      	strb	r2, [r3, #2]

					strncat(infMsg.message,
							gv_information_msg[lv_index_message_actif].message,
 800440a:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <sendInfoMessage+0x22c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4613      	mov	r3, r2
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4413      	add	r3, r2
 8004416:	4a40      	ldr	r2, [pc, #256]	@ (8004518 <sendInfoMessage+0x230>)
 8004418:	1899      	adds	r1, r3, r2
					strncat(infMsg.message,
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	3302      	adds	r3, #2
 800441e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004422:	4618      	mov	r0, r3
 8004424:	f00a f916 	bl	800e654 <strncat>
							MAX_SIZE_INF_MSG);

					//  strcpy(resp.parameter, gv_information_msg[lv_index_message_actif].message);
					memcpy(resp.parameter, &infMsg, resp.size);
 8004428:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800442c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004430:	8a1b      	ldrh	r3, [r3, #16]
 8004432:	461a      	mov	r2, r3
 8004434:	1d39      	adds	r1, r7, #4
 8004436:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800443a:	3312      	adds	r3, #18
 800443c:	4618      	mov	r0, r3
 800443e:	f00a f994 	bl	800e76a <memcpy>
					s_ax25_packet ax25Frame;
					ax25Frame.header = gv_headerTlm;
 8004442:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004446:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800444a:	4a34      	ldr	r2, [pc, #208]	@ (800451c <sendInfoMessage+0x234>)
 800444c:	461c      	mov	r4, r3
 800444e:	4613      	mov	r3, r2
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
					memcpy(ax25Frame.data, &resp,
							TC_REPONSE_HEADER_SIZE + resp.size);
 800445a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800445e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004462:	8a1b      	ldrh	r3, [r3, #16]
					memcpy(ax25Frame.data, &resp,
 8004464:	f103 0212 	add.w	r2, r3, #18
 8004468:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800446c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004470:	3310      	adds	r3, #16
 8004472:	4618      	mov	r0, r3
 8004474:	f00a f979 	bl	800e76a <memcpy>
					/* envoyer la reponse de la  commande */
					writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp.size);
 8004478:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800447c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004480:	8a1b      	ldrh	r3, [r3, #16]
 8004482:	3312      	adds	r3, #18
 8004484:	461a      	mov	r2, r3
 8004486:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800448a:	f5a3 740c 	sub.w	r4, r3, #560	@ 0x230
 800448e:	9240      	str	r2, [sp, #256]	@ 0x100
 8004490:	4668      	mov	r0, sp
 8004492:	f104 0310 	add.w	r3, r4, #16
 8004496:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800449a:	4619      	mov	r1, r3
 800449c:	f00a f965 	bl	800e76a <memcpy>
 80044a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044a4:	f000 fb0e 	bl	8004ac4 <writeData>

					logger(LOG_LEVEL_INFO, "MSG INFO SENT");
 80044a8:	491d      	ldr	r1, [pc, #116]	@ (8004520 <sendInfoMessage+0x238>)
 80044aa:	2000      	movs	r0, #0
 80044ac:	f001 f9d2 	bl	8005854 <logger>
 80044b0:	e00d      	b.n	80044ce <sendInfoMessage+0x1e6>

				} else if (cpt > MAX_INF_MESSAGE) {
 80044b2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80044b6:	2b0a      	cmp	r3, #10
 80044b8:	dd09      	ble.n	80044ce <sendInfoMessage+0x1e6>
					find = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
					logger(LOG_LEVEL_CRITICAL, "NO MESSAGE INFO AVAILABLE");
 80044c0:	4918      	ldr	r1, [pc, #96]	@ (8004524 <sendInfoMessage+0x23c>)
 80044c2:	2005      	movs	r0, #5
 80044c4:	f001 f9c6 	bl	8005854 <logger>
					// stop information message transmission
					gv_spinoConfig.info_message_actif = INFO_MSG_NOT_USED;
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <sendInfoMessage+0x220>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	741a      	strb	r2, [r3, #16]

				}
				lv_index_message_actif =
						(unsigned char) ((lv_index_message_actif + 1)
 80044ce:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <sendInfoMessage+0x22c>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	1c5a      	adds	r2, r3, #1
								% MAX_INF_MESSAGE);
 80044d4:	4b14      	ldr	r3, [pc, #80]	@ (8004528 <sendInfoMessage+0x240>)
 80044d6:	fb83 1302 	smull	r1, r3, r3, r2
 80044da:	1099      	asrs	r1, r3, #2
 80044dc:	17d3      	asrs	r3, r2, #31
 80044de:	1ac9      	subs	r1, r1, r3
 80044e0:	460b      	mov	r3, r1
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	1ad1      	subs	r1, r2, r3
						(unsigned char) ((lv_index_message_actif + 1)
 80044ea:	b2ca      	uxtb	r2, r1
				lv_index_message_actif =
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <sendInfoMessage+0x22c>)
 80044ee:	701a      	strb	r2, [r3, #0]
			while (find == 0) {
 80044f0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f43f af41 	beq.w	800437c <sendInfoMessage+0x94>
			}

		}
	}  // do Nothing

}
 80044fa:	bf00      	nop
 80044fc:	f507 774e 	add.w	r7, r7, #824	@ 0x338
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004506:	bf00      	nop
 8004508:	2000256c 	.word	0x2000256c
 800450c:	20002590 	.word	0x20002590
 8004510:	20002560 	.word	0x20002560
 8004514:	20002568 	.word	0x20002568
 8004518:	20001b50 	.word	0x20001b50
 800451c:	200025c8 	.word	0x200025c8
 8004520:	08010aec 	.word	0x08010aec
 8004524:	08010afc 	.word	0x08010afc
 8004528:	66666667 	.word	0x66666667

0800452c <setupGlobalVariable>:
 * \fn void setupGlobalVariable(void)
 * \brief initialise all global variable 
 *
 */

void setupGlobalVariable() {
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af02      	add	r7, sp, #8

	char cs[6] = { 'S', 'P', 'I', 'N', 'O', 'S' };
 8004532:	4a62      	ldr	r2, [pc, #392]	@ (80046bc <setupGlobalVariable+0x190>)
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800453c:	6018      	str	r0, [r3, #0]
 800453e:	3304      	adds	r3, #4
 8004540:	8019      	strh	r1, [r3, #0]
	char cd[6] = { 'S', 'P', 'I', 'N', 'O', 'D' };
 8004542:	4a5f      	ldr	r2, [pc, #380]	@ (80046c0 <setupGlobalVariable+0x194>)
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800454c:	6018      	str	r0, [r3, #0]
 800454e:	3304      	adds	r3, #4
 8004550:	8019      	strh	r1, [r3, #0]
	char lt[6] = { 'L', 'A', 'T', 'M', 'O', 'S' };
 8004552:	4a5c      	ldr	r2, [pc, #368]	@ (80046c4 <setupGlobalVariable+0x198>)
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800455a:	6018      	str	r0, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	8019      	strh	r1, [r3, #0]
	memcpy(gv_spinoConfig.spinoSrcCallsign, cs, 6);
 8004560:	4b59      	ldr	r3, [pc, #356]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004562:	3312      	adds	r3, #18
 8004564:	f107 0214 	add.w	r2, r7, #20
 8004568:	6810      	ldr	r0, [r2, #0]
 800456a:	6018      	str	r0, [r3, #0]
 800456c:	8892      	ldrh	r2, [r2, #4]
 800456e:	809a      	strh	r2, [r3, #4]
	memcpy(gv_spinoConfig.spinoDesCallsign, cd, 6);
 8004570:	4b55      	ldr	r3, [pc, #340]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004572:	3318      	adds	r3, #24
 8004574:	f107 020c 	add.w	r2, r7, #12
 8004578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800457c:	6018      	str	r0, [r3, #0]
 800457e:	3304      	adds	r3, #4
 8004580:	8019      	strh	r1, [r3, #0]
	memcpy(gv_spinoConfig.payloadCallsign, lt, 6);
 8004582:	4b51      	ldr	r3, [pc, #324]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004584:	331e      	adds	r3, #30
 8004586:	1d3a      	adds	r2, r7, #4
 8004588:	6810      	ldr	r0, [r2, #0]
 800458a:	6018      	str	r0, [r3, #0]
 800458c:	8892      	ldrh	r2, [r2, #4]
 800458e:	809a      	strh	r2, [r3, #4]
	gv_spino.timestamps =0;
 8004590:	494e      	ldr	r1, [pc, #312]	@ (80046cc <setupGlobalVariable+0x1a0>)
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	gv_spino.nbCommandeReceived =0;
 800459e:	4b4b      	ldr	r3, [pc, #300]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
	gv_spino.nbCommandeWithError = 0;
 80045a4:	4b49      	ldr	r3, [pc, #292]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
	gv_spino.lastResetCause =0;
 80045aa:	4b48      	ldr	r3, [pc, #288]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	861a      	strh	r2, [r3, #48]	@ 0x30
	gv_spino.nbDigipeaterMesssageProcessed =0;
 80045b0:	4b46      	ldr	r3, [pc, #280]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	60da      	str	r2, [r3, #12]
	gv_spino.nbFrameNotprocessed = 0;
 80045b6:	4b45      	ldr	r3, [pc, #276]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
	gv_spino.currentState = STATE_SURVEY;
 80045bc:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045be:	2201      	movs	r2, #1
 80045c0:	865a      	strh	r2, [r3, #50]	@ 0x32
	gv_spino.nbExperiemntalCommand=0;
 80045c2:	4b42      	ldr	r3, [pc, #264]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]
	gv_spino.nbExperiemntalCommandError=0;
 80045c8:	4b40      	ldr	r3, [pc, #256]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	615a      	str	r2, [r3, #20]
	gv_spino.nbMailboxCommandeReceived = 0;
 80045ce:	4b3f      	ldr	r3, [pc, #252]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
	gv_spino.nbMailboxErrorCommandeReceived = 0;
 80045d4:	4b3d      	ldr	r3, [pc, #244]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
	gv_spino.nbPayloadCommandeWithError=0;
 80045da:	4b3c      	ldr	r3, [pc, #240]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24
	gv_spino.nbPayloadCommandeReceived=0;
 80045e0:	4b3a      	ldr	r3, [pc, #232]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	621a      	str	r2, [r3, #32]
	gv_spino.spare = 0xFF00;
 80045e6:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045e8:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80045ec:	86da      	strh	r2, [r3, #54]	@ 0x36
	gv_spino.gv_nb_I2CMAXDATA =0;
 80045ee:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <setupGlobalVariable+0x1a0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	869a      	strh	r2, [r3, #52]	@ 0x34


	gv_spinoConfig.telemetryDelay = 20;
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <setupGlobalVariable+0x19c>)
 80045f6:	2214      	movs	r2, #20
 80045f8:	739a      	strb	r2, [r3, #14]
	gv_spinoConfig.spinoTxFrequency = 435000;
 80045fa:	4b33      	ldr	r3, [pc, #204]	@ (80046c8 <setupGlobalVariable+0x19c>)
 80045fc:	4a34      	ldr	r2, [pc, #208]	@ (80046d0 <setupGlobalVariable+0x1a4>)
 80045fe:	601a      	str	r2, [r3, #0]
	gv_spinoConfig.spinoTXModemMode = 0;
 8004600:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004602:	2200      	movs	r2, #0
 8004604:	735a      	strb	r2, [r3, #13]
	gv_spinoConfig.spinoTxModemSpeed = 1200;
 8004606:	4b30      	ldr	r3, [pc, #192]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004608:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800460c:	811a      	strh	r2, [r3, #8]
	gv_spinoConfig.spinoRxFrequency = 145000;
 800460e:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <setupGlobalVariable+0x1a8>)
 8004612:	605a      	str	r2, [r3, #4]
	gv_spinoConfig.spinoRXModemMode = 0;
 8004614:	4b2c      	ldr	r3, [pc, #176]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004616:	2200      	movs	r2, #0
 8004618:	731a      	strb	r2, [r3, #12]
	gv_spinoConfig.spinoRxModemSpeed = 9600;
 800461a:	4b2b      	ldr	r3, [pc, #172]	@ (80046c8 <setupGlobalVariable+0x19c>)
 800461c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004620:	815a      	strh	r2, [r3, #10]
	gv_spinoConfig.delay_info_message = 200;
 8004622:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004624:	22c8      	movs	r2, #200	@ 0xc8
 8004626:	745a      	strb	r2, [r3, #17]
	gv_spinoConfig.info_message_actif = INFO_MSG_NOT_USED;
 8004628:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <setupGlobalVariable+0x19c>)
 800462a:	2200      	movs	r2, #0
 800462c:	741a      	strb	r2, [r3, #16]
	gv_spinoConfig.multimode=0;
 800462e:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <setupGlobalVariable+0x19c>)
 8004630:	2200      	movs	r2, #0
 8004632:	73da      	strb	r2, [r3, #15]

	gv_headerTlm.pid = 255;
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <setupGlobalVariable+0x1ac>)
 8004636:	22ff      	movs	r2, #255	@ 0xff
 8004638:	73da      	strb	r2, [r3, #15]

	convertToAX25Header(&gv_headerTlm, gv_spinoConfig.spinoDesCallsign,
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <setupGlobalVariable+0x1ac>)
 800463c:	799a      	ldrb	r2, [r3, #6]
 800463e:	4b26      	ldr	r3, [pc, #152]	@ (80046d8 <setupGlobalVariable+0x1ac>)
 8004640:	7b5b      	ldrb	r3, [r3, #13]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <setupGlobalVariable+0x1b0>)
 8004646:	4926      	ldr	r1, [pc, #152]	@ (80046e0 <setupGlobalVariable+0x1b4>)
 8004648:	4823      	ldr	r0, [pc, #140]	@ (80046d8 <setupGlobalVariable+0x1ac>)
 800464a:	f7fe fc83 	bl	8002f54 <convertToAX25Header>
			gv_headerTlm.ssidDestination, gv_spinoConfig.spinoSrcCallsign,
			gv_headerTlm.ssidSource);

	gv_prog.indexCourrant = 0;
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <setupGlobalVariable+0x1b8>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
	gv_prog.memory = mem_prg;
 8004654:	4b23      	ldr	r3, [pc, #140]	@ (80046e4 <setupGlobalVariable+0x1b8>)
 8004656:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <setupGlobalVariable+0x1bc>)
 8004658:	605a      	str	r2, [r3, #4]


	gv_unprocess_messages.index = 0;
 800465a:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <setupGlobalVariable+0x1c0>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
	int i = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < MAX_UNPROCESSED_MESSAGE_LIST_SIZE; i++) {
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e01b      	b.n	80046a2 <setupGlobalVariable+0x176>

		gv_unprocess_messages.message[i].timestamps = 0;
 800466a:	4920      	ldr	r1, [pc, #128]	@ (80046ec <setupGlobalVariable+0x1c0>)
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	440b      	add	r3, r1
 8004678:	f103 0108 	add.w	r1, r3, #8
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9c1 2300 	strd	r2, r3, [r1]
		gv_unprocess_messages.message[i].size = 0;
 8004688:	4918      	ldr	r1, [pc, #96]	@ (80046ec <setupGlobalVariable+0x1c0>)
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	440b      	add	r3, r1
 8004696:	3310      	adds	r3, #16
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < MAX_UNPROCESSED_MESSAGE_LIST_SIZE; i++) {
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	dde0      	ble.n	800466a <setupGlobalVariable+0x13e>
	}

	setupInfoMessage();
 80046a8:	f7ff fd40 	bl	800412c <setupInfoMessage>
	initExpe();
 80046ac:	f000 fc50 	bl	8004f50 <initExpe>
    setupControl();
 80046b0:	f7ff faf2 	bl	8003c98 <setupControl>

}
 80046b4:	bf00      	nop
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	08010b18 	.word	0x08010b18
 80046c0:	08010b20 	.word	0x08010b20
 80046c4:	08010b28 	.word	0x08010b28
 80046c8:	2000256c 	.word	0x2000256c
 80046cc:	20002590 	.word	0x20002590
 80046d0:	0006a338 	.word	0x0006a338
 80046d4:	00023668 	.word	0x00023668
 80046d8:	200025c8 	.word	0x200025c8
 80046dc:	2000257e 	.word	0x2000257e
 80046e0:	20002584 	.word	0x20002584
 80046e4:	20002a90 	.word	0x20002a90
 80046e8:	20002b88 	.word	0x20002b88
 80046ec:	200025d8 	.word	0x200025d8

080046f0 <digipeater>:
 * \fn unsigned short digipeater ()
 * \brief manage DIGIPEATER mode
 * \return  void
 * 
 */
unsigned short digipeater() {
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 80046f6:	af42      	add	r7, sp, #264	@ 0x108

	s_ax25_packet data_ax25;

	int nbc = readData(gv_data_rx);
 80046f8:	4857      	ldr	r0, [pc, #348]	@ (8004858 <digipeater+0x168>)
 80046fa:	f000 f8df 	bl	80048bc <readData>
 80046fe:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	if(nbc <0)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	2b00      	cmp	r3, #0
 8004708:	da04      	bge.n	8004714 <digipeater+0x24>
	{
		logger(LOG_LEVEL_CRITICAL, "ERROR DATA RECEIVED");
 800470a:	4954      	ldr	r1, [pc, #336]	@ (800485c <digipeater+0x16c>)
 800470c:	2005      	movs	r0, #5
 800470e:	f001 f8a1 	bl	8005854 <logger>
 8004712:	e09a      	b.n	800484a <digipeater+0x15a>
	}
	else  if (nbc != 0) {
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8096 	beq.w	800484a <digipeater+0x15a>
		/* traitement des donnees recues */
		int res = convertDataToAx25(&data_ax25, (char *) gv_data_rx, nbc);
 800471e:	463b      	mov	r3, r7
 8004720:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004724:	494c      	ldr	r1, [pc, #304]	@ (8004858 <digipeater+0x168>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcbc 	bl	80030a4 <convertDataToAx25>
 800472c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		if (res != SUCCESS) {
 8004730:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <digipeater+0x50>
			logger(LOG_LEVEL_CRITICAL, "AX25 CONVESTION ISSUE");
 8004738:	4949      	ldr	r1, [pc, #292]	@ (8004860 <digipeater+0x170>)
 800473a:	2005      	movs	r0, #5
 800473c:	f001 f88a 	bl	8005854 <logger>
		}
		if (memcmp(gv_spinoConfig.spinoDesCallsign,
 8004740:	463b      	mov	r3, r7
 8004742:	2206      	movs	r2, #6
 8004744:	4619      	mov	r1, r3
 8004746:	4847      	ldr	r0, [pc, #284]	@ (8004864 <digipeater+0x174>)
 8004748:	f009 ff6c 	bl	800e624 <memcmp>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d174      	bne.n	800483c <digipeater+0x14c>
				data_ax25.header.destinationAdress, 6) == 0) {

			if (data_ax25.header.ssidDestination
 8004752:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004756:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800475a:	799b      	ldrb	r3, [r3, #6]
 800475c:	2b0f      	cmp	r3, #15
 800475e:	d110      	bne.n	8004782 <digipeater+0x92>
					== (unsigned char) SSID_SPINO_TMTC) {
				processCommand(data_ax25);
 8004760:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004764:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8004768:	4668      	mov	r0, sp
 800476a:	f104 0310 	add.w	r3, r4, #16
 800476e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004772:	4619      	mov	r1, r3
 8004774:	f009 fff9 	bl	800e76a <memcpy>
 8004778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800477c:	f7ff f9aa 	bl	8003ad4 <processCommand>
 8004780:	e063      	b.n	800484a <digipeater+0x15a>
			} else if (data_ax25.header.ssidDestination
 8004782:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004786:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800478a:	799b      	ldrb	r3, [r3, #6]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d149      	bne.n	8004824 <digipeater+0x134>
					== (unsigned char) SSID_SPINO_DIGIPEATER) {
				// renvoie la trame
				memcpy(data_ax25.header.destinationAdress,
 8004790:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004794:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004798:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800479c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047a0:	3307      	adds	r3, #7
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	6010      	str	r0, [r2, #0]
 80047a6:	889b      	ldrh	r3, [r3, #4]
 80047a8:	8093      	strh	r3, [r2, #4]
						data_ax25.header.sourceAdress, 6);
				memcpy(data_ax25.header.sourceAdress,
 80047aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <digipeater+0x178>)
 80047b4:	3307      	adds	r3, #7
 80047b6:	3212      	adds	r2, #18
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	8892      	ldrh	r2, [r2, #4]
 80047be:	809a      	strh	r2, [r3, #4]
						gv_spinoConfig.spinoSrcCallsign, 6);
				data_ax25.header.ssidSource = SSID_SPINO_DIGIPEATER;
 80047c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047c8:	2203      	movs	r2, #3
 80047ca:	735a      	strb	r2, [r3, #13]
				data_ax25.header.ssidDestination = data_ax25.header.ssidSource;
 80047cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047d4:	7b5a      	ldrb	r2, [r3, #13]
 80047d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047de:	719a      	strb	r2, [r3, #6]
				encodeAX25Header(&data_ax25.header);
 80047e0:	463b      	mov	r3, r7
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fc09 	bl	8002ffa <encodeAX25Header>
				nbc = nbc - (int) sizeof(s_ax25_header);
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ec:	3b10      	subs	r3, #16
 80047ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				writeData(data_ax25, nbc);
 80047f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047f6:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	9340      	str	r3, [sp, #256]	@ 0x100
 8004800:	4668      	mov	r0, sp
 8004802:	f104 0310 	add.w	r3, r4, #16
 8004806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800480a:	4619      	mov	r1, r3
 800480c:	f009 ffad 	bl	800e76a <memcpy>
 8004810:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004814:	f000 f956 	bl	8004ac4 <writeData>
				gv_spino.nbDigipeaterMesssageProcessed++;
 8004818:	4b14      	ldr	r3, [pc, #80]	@ (800486c <digipeater+0x17c>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	4a13      	ldr	r2, [pc, #76]	@ (800486c <digipeater+0x17c>)
 8004820:	60d3      	str	r3, [r2, #12]
 8004822:	e012      	b.n	800484a <digipeater+0x15a>
			} else {
				logger(LOG_LEVEL_CRITICAL, "WRONG SSID");
 8004824:	4912      	ldr	r1, [pc, #72]	@ (8004870 <digipeater+0x180>)
 8004826:	2005      	movs	r0, #5
 8004828:	f001 f814 	bl	8005854 <logger>
				processDropMessage((char *)gv_data_rx, (unsigned short) nbc);
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	b29b      	uxth	r3, r3
 8004832:	4619      	mov	r1, r3
 8004834:	4808      	ldr	r0, [pc, #32]	@ (8004858 <digipeater+0x168>)
 8004836:	f000 fa0b 	bl	8004c50 <processDropMessage>
 800483a:	e006      	b.n	800484a <digipeater+0x15a>
			}
		} else {
			// Message not awaited   -  message dropped
			processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	b29b      	uxth	r3, r3
 8004842:	4619      	mov	r1, r3
 8004844:	4804      	ldr	r0, [pc, #16]	@ (8004858 <digipeater+0x168>)
 8004846:	f000 fa03 	bl	8004c50 <processDropMessage>
		}

	}
	return gv_spino.currentState;
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <digipeater+0x17c>)
 800484c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
}
 800484e:	4618      	mov	r0, r3
 8004850:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}
 8004858:	20002a98 	.word	0x20002a98
 800485c:	08010b30 	.word	0x08010b30
 8004860:	08010b44 	.word	0x08010b44
 8004864:	20002584 	.word	0x20002584
 8004868:	2000256c 	.word	0x2000256c
 800486c:	20002590 	.word	0x20002590
 8004870:	08010b5c 	.word	0x08010b5c

08004874 <setModemMode>:


//here is the radio TX buffer where to write when the frame is cooked.
//Declaration is performed in the ADF7030.c source file.

int setModemMode(uint8_t mode) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
	int rep = SUCCESS;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
	if (mode < (MAX_MODE - 1)) {
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d804      	bhi.n	8004892 <setModemMode+0x1e>
		config_ADF7030(mode);
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fc fd5e 	bl	800134c <config_ADF7030>
 8004890:	e002      	b.n	8004898 <setModemMode+0x24>
	} else {
		rep = ERROR_WRONG_MODEM_MODE;
 8004892:	f06f 030a 	mvn.w	r3, #10
 8004896:	60fb      	str	r3, [r7, #12]
	}

	return rep;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <ModemOpen>:

void ModemOpen() {
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0

	gv_spino_data_avalable = 0;
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <ModemOpen+0x14>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]

}
 80048ae:	bf00      	nop
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20003b8c 	.word	0x20003b8c

080048bc <readData>:

int readData(unsigned char *data)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	if (debug==1)
 80048c4:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <readData+0x2c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d104      	bne.n	80048d6 <readData+0x1a>
	{
		return readDataDebug(data);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f80d 	bl	80048ec <readDataDebug>
 80048d2:	4603      	mov	r3, r0
 80048d4:	e003      	b.n	80048de <readData+0x22>
	} else
	{
		return  readDataRX2(data);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f846 	bl	8004968 <readDataRX2>
 80048dc:	4603      	mov	r3, r0
	}
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20003b88 	.word	0x20003b88

080048ec <readDataDebug>:


int readDataDebug(unsigned char *data)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
		uint16_t crcCal1;
		uint16_t crcCal2;
		char crc1;
		char crc2;

		taille = readUART(data, 300);
 80048f4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fe fab5 	bl	8002e68 <readUART>
 80048fe:	6178      	str	r0, [r7, #20]
		if (taille != 0) {
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02a      	beq.n	800495c <readDataDebug+0x70>
			dataSize = data[POSITION_SIZE];
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3310      	adds	r3, #16
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	74fb      	strb	r3, [r7, #19]
			dataSize2 = data[POSITION_SIZE + 1];
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3311      	adds	r3, #17
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	74bb      	strb	r3, [r7, #18]

					  crc1 = data[taille-1];
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3b01      	subs	r3, #1
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	747b      	strb	r3, [r7, #17]
					  crc2 = data[taille-2];
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3b02      	subs	r3, #2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	743b      	strb	r3, [r7, #16]
					  crcCal2  =  calculateCRC(data, 0, taille-2);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3b02      	subs	r3, #2
 8004932:	461a      	mov	r2, r3
 8004934:	2100      	movs	r1, #0
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fe fc0c 	bl	8003154 <calculateCRC>
 800493c:	4603      	mov	r3, r0
 800493e:	81fb      	strh	r3, [r7, #14]
					  crcCal1 = crc1 + ((crc2 << 8)&0xFF00);
 8004940:	7c7b      	ldrb	r3, [r7, #17]
 8004942:	b29a      	uxth	r2, r3
 8004944:	7c3b      	ldrb	r3, [r7, #16]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	4413      	add	r3, r2
 800494c:	81bb      	strh	r3, [r7, #12]
					  if(crcCal2 != crcCal1 )
 800494e:	89fa      	ldrh	r2, [r7, #14]
 8004950:	89bb      	ldrh	r3, [r7, #12]
 8004952:	429a      	cmp	r2, r3
 8004954:	d002      	beq.n	800495c <readDataDebug+0x70>
					  {
						  taille = ERROR_CRC;
 8004956:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 800495a:	617b      	str	r3, [r7, #20]
					  }

		}

		return taille;
 800495c:	697b      	ldr	r3, [r7, #20]


}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <readDataRX2>:


int readDataRX2(unsigned char *data) {
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

	// to do - variable globale

	int size = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

	if (gv_spino_data_avalable == 1) {
 8004974:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <readDataRX2+0x30>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <readDataRX2+0x22>
		size =lv_taille_rx;
 800497e:	4b07      	ldr	r3, [pc, #28]	@ (800499c <readDataRX2+0x34>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
		gv_spino_data_avalable =0;
 8004984:	4b04      	ldr	r3, [pc, #16]	@ (8004998 <readDataRX2+0x30>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
	}

return size ;
 800498a:	68fb      	ldr	r3, [r7, #12]


}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20003b8c 	.word	0x20003b8c
 800499c:	20003b90 	.word	0x20003b90

080049a0 <readDataRX>:

int readDataRX(uint8_t** access) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	@ 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]


	/** SPINO */
		int taille = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
		uint16_t crcCal1;
		uint16_t crcCal2;


		if (gv_spino_data_avalable == 1) {
 80049ac:	4b41      	ldr	r3, [pc, #260]	@ (8004ab4 <readDataRX+0x114>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d178      	bne.n	8004aa8 <readDataRX+0x108>


			//read 1st part

			memcpy(gv_data_rx, &access[0][0], RCV_PACKET);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2214      	movs	r2, #20
 80049bc:	4619      	mov	r1, r3
 80049be:	483e      	ldr	r0, [pc, #248]	@ (8004ab8 <readDataRX+0x118>)
 80049c0:	f009 fed3 	bl	800e76a <memcpy>

			lv_taille_rx = gv_data_rx[POSITION_SIZE]+16;
 80049c4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab8 <readDataRX+0x118>)
 80049c6:	7c1b      	ldrb	r3, [r3, #16]
 80049c8:	3310      	adds	r3, #16
 80049ca:	4a3c      	ldr	r2, [pc, #240]	@ (8004abc <readDataRX+0x11c>)
 80049cc:	6013      	str	r3, [r2, #0]
			taille = lv_taille_rx  ;
 80049ce:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <readDataRX+0x11c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
			// taille = data[POSITION_SIZE]+  (data[POSITION_SIZE+1] >>8 & 0xFF00);

			int crt = RCV_PACKET;
 80049d4:	2314      	movs	r3, #20
 80049d6:	623b      	str	r3, [r7, #32]

			if (taille <= RCV_SIZE_MAX) {
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	2bf0      	cmp	r3, #240	@ 0xf0
 80049dc:	dc5e      	bgt.n	8004a9c <readDataRX+0xfc>
				// calcul le nb de packet util
				float nbpf = (float)taille / (float) RCV_PACKET;
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80049ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f0:	edc7 7a06 	vstr	s15, [r7, #24]
				int nbp= ceil(nbpf)-1;
 80049f4:	69b8      	ldr	r0, [r7, #24]
 80049f6:	f7fb fdaf 	bl	8000558 <__aeabi_f2d>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	ec43 2b10 	vmov	d0, r2, r3
 8004a02:	f00b fe69 	bl	80106d8 <ceil>
 8004a06:	ec51 0b10 	vmov	r0, r1, d0
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac0 <readDataRX+0x120>)
 8004a10:	f7fb fc42 	bl	8000298 <__aeabi_dsub>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc f8a4 	bl	8000b68 <__aeabi_d2iz>
 8004a20:	4603      	mov	r3, r0
 8004a22:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < nbp; i++) {
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	e012      	b.n	8004a50 <readDataRX+0xb0>
					memcpy(&gv_data_rx[crt], &access[i + 1][0], RCV_PACKET);
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	4a22      	ldr	r2, [pc, #136]	@ (8004ab8 <readDataRX+0x118>)
 8004a2e:	1898      	adds	r0, r3, r2
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	3301      	adds	r3, #1
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2214      	movs	r2, #20
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f009 fe93 	bl	800e76a <memcpy>
					crt = crt + RCV_PACKET;
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	3314      	adds	r3, #20
 8004a48:	623b      	str	r3, [r7, #32]
				for (int i = 0; i < nbp; i++) {
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	dbe8      	blt.n	8004a2a <readDataRX+0x8a>
				}

			// identification du CRC

				char crc1 = gv_data_rx[taille-1];
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <readDataRX+0x118>)
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	74fb      	strb	r3, [r7, #19]
				char crc2 = gv_data_rx[taille-2];
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	3b02      	subs	r3, #2
 8004a66:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <readDataRX+0x118>)
 8004a68:	5cd3      	ldrb	r3, [r2, r3]
 8004a6a:	74bb      	strb	r3, [r7, #18]

				crcCal2  =  calculateCRC(gv_data_rx, 0, taille-2);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	3b02      	subs	r3, #2
 8004a70:	461a      	mov	r2, r3
 8004a72:	2100      	movs	r1, #0
 8004a74:	4810      	ldr	r0, [pc, #64]	@ (8004ab8 <readDataRX+0x118>)
 8004a76:	f7fe fb6d 	bl	8003154 <calculateCRC>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	823b      	strh	r3, [r7, #16]
				crcCal1 = crc1 + ((crc2 << 8)&0xFF00);
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	7cbb      	ldrb	r3, [r7, #18]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	81fb      	strh	r3, [r7, #14]
						  if(crcCal2 != crcCal1 )
 8004a8c:	8a3a      	ldrh	r2, [r7, #16]
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d006      	beq.n	8004aa2 <readDataRX+0x102>
						  {
							  taille = ERROR_CRC;
 8004a94:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9a:	e002      	b.n	8004aa2 <readDataRX+0x102>
			// todo - Comparaison CRC + code Erreur

			}
			else
			{
				taille = ERROR_WRONG_SIZE_RCV;
 8004a9c:	f06f 030b 	mvn.w	r3, #11
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			gv_spino_data_avalable =1 ;
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <readDataRX+0x114>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]

		}

		return taille-16;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	3b10      	subs	r3, #16

}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	@ 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20003b8c 	.word	0x20003b8c
 8004ab8:	20002a98 	.word	0x20002a98
 8004abc:	20003b90 	.word	0x20003b90
 8004ac0:	3ff00000 	.word	0x3ff00000

08004ac4 <writeData>:

int writeData(const s_ax25_packet ax25Frame, const int length)
{
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b0c2      	sub	sp, #264	@ 0x108
 8004aca:	af42      	add	r7, sp, #264	@ 0x108
 8004acc:	f107 0c08 	add.w	ip, r7, #8
 8004ad0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (debug==1)
 8004ad4:	4b16      	ldr	r3, [pc, #88]	@ (8004b30 <writeData+0x6c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d111      	bne.n	8004b00 <writeData+0x3c>
	{
		return writeDataDebug(ax25Frame,length);
 8004adc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ae0:	9340      	str	r3, [sp, #256]	@ 0x100
 8004ae2:	4668      	mov	r0, sp
 8004ae4:	f107 0318 	add.w	r3, r7, #24
 8004ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aec:	4619      	mov	r1, r3
 8004aee:	f009 fe3c 	bl	800e76a <memcpy>
 8004af2:	f107 0308 	add.w	r3, r7, #8
 8004af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af8:	f000 f81c 	bl	8004b34 <writeDataDebug>
 8004afc:	4603      	mov	r3, r0
 8004afe:	e010      	b.n	8004b22 <writeData+0x5e>
	} else
	{
		return  writeDataTX(ax25Frame,length);
 8004b00:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004b04:	9340      	str	r3, [sp, #256]	@ 0x100
 8004b06:	4668      	mov	r0, sp
 8004b08:	f107 0318 	add.w	r3, r7, #24
 8004b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b10:	4619      	mov	r1, r3
 8004b12:	f009 fe2a 	bl	800e76a <memcpy>
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b1c:	f000 f852 	bl	8004bc4 <writeDataTX>
 8004b20:	4603      	mov	r3, r0
	}
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b2a:	b004      	add	sp, #16
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20003b88 	.word	0x20003b88

08004b34 <writeDataDebug>:

int writeDataDebug(const s_ax25_packet ax25Frame, const int length) {
 8004b34:	b084      	sub	sp, #16
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	f107 0c18 	add.w	ip, r7, #24
 8004b40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int rep = SUCCESS;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

	int size = length + (int) sizeof(s_ax25_header);
 8004b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	60bb      	str	r3, [r7, #8]
	if (size + 2 < PAYLOAD_SIZE)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2bed      	cmp	r3, #237	@ 0xed
 8004b54:	dc29      	bgt.n	8004baa <writeDataDebug+0x76>

	{
		// CRC Compute


		memcpy(&uhf_txbuffer, &ax25Frame, size);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f107 0118 	add.w	r1, r7, #24
 8004b5e:	4818      	ldr	r0, [pc, #96]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b60:	f009 fe03 	bl	800e76a <memcpy>
		uhf_txbuffer[POSITION_SIZE] = uhf_txbuffer[POSITION_SIZE]+2;
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b66:	7c1b      	ldrb	r3, [r3, #16]
 8004b68:	3302      	adds	r3, #2
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b6e:	741a      	strb	r2, [r3, #16]

		uint16_t crc = calculateCRC((unsigned char*) &uhf_txbuffer,0, size);
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	2100      	movs	r1, #0
 8004b74:	4812      	ldr	r0, [pc, #72]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b76:	f7fe faed 	bl	8003154 <calculateCRC>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
//		writeUART((unsigned char*) &crc, (int) sizeof(crc));

		// SPINO TX


		uhf_txbuffer[size] = crc & 0xFF;
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	b2d9      	uxtb	r1, r3
 8004b82:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4413      	add	r3, r2
 8004b88:	460a      	mov	r2, r1
 8004b8a:	701a      	strb	r2, [r3, #0]
		uhf_txbuffer[size + 1] = (crc >> 8) & 0xFF;
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2d1      	uxtb	r1, r2
 8004b98:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004b9a:	54d1      	strb	r1, [r2, r3]

		writeUART((unsigned char*) &uhf_txbuffer, size+2);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4807      	ldr	r0, [pc, #28]	@ (8004bc0 <writeDataDebug+0x8c>)
 8004ba4:	f7fe f9c2 	bl	8002f2c <writeUART>
 8004ba8:	e002      	b.n	8004bb0 <writeDataDebug+0x7c>

	}

	else //ERROR
	{
		rep = ERROR_BUFFER_OVERFLOW;
 8004baa:	f06f 0309 	mvn.w	r3, #9
 8004bae:	60fb      	str	r3, [r7, #12]
	}

	return rep;
 8004bb0:	68fb      	ldr	r3, [r7, #12]

}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbc:	b004      	add	sp, #16
 8004bbe:	4770      	bx	lr
 8004bc0:	20001124 	.word	0x20001124

08004bc4 <writeDataTX>:

int writeDataTX(const s_ax25_packet ax25Frame, const int length) {
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f107 0c18 	add.w	ip, r7, #24
 8004bd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int rep = SUCCESS;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

	int size = length + (int) sizeof(s_ax25_header);
 8004bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004bdc:	3310      	adds	r3, #16
 8004bde:	60bb      	str	r3, [r7, #8]
	if (size + 2 < PAYLOAD_SIZE)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2bed      	cmp	r3, #237	@ 0xed
 8004be4:	dc27      	bgt.n	8004c36 <writeDataTX+0x72>

	{
		// CRC Compute


		memcpy(&uhf_txbuffer, &ax25Frame, size);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	461a      	mov	r2, r3
 8004bea:	f107 0118 	add.w	r1, r7, #24
 8004bee:	4817      	ldr	r0, [pc, #92]	@ (8004c4c <writeDataTX+0x88>)
 8004bf0:	f009 fdbb 	bl	800e76a <memcpy>

		uhf_txbuffer[POSITION_SIZE] = uhf_txbuffer[POSITION_SIZE]+2;
 8004bf4:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <writeDataTX+0x88>)
 8004bf6:	7c1b      	ldrb	r3, [r3, #16]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <writeDataTX+0x88>)
 8004bfe:	741a      	strb	r2, [r3, #16]

		uint16_t crc = calculateCRC((unsigned char*) &uhf_txbuffer,0,size);
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	2100      	movs	r1, #0
 8004c04:	4811      	ldr	r0, [pc, #68]	@ (8004c4c <writeDataTX+0x88>)
 8004c06:	f7fe faa5 	bl	8003154 <calculateCRC>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	80fb      	strh	r3, [r7, #6]
//		writeUART((unsigned char*) &crc, (int) sizeof(crc));

		// SPINO TX


		uhf_txbuffer[size] = crc & 0xFF;
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	b2d9      	uxtb	r1, r3
 8004c12:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <writeDataTX+0x88>)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4413      	add	r3, r2
 8004c18:	460a      	mov	r2, r1
 8004c1a:	701a      	strb	r2, [r3, #0]
		uhf_txbuffer[size + 1] = (crc >> 8) & 0xFF;
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3301      	adds	r3, #1
 8004c26:	b2d1      	uxtb	r1, r2
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <writeDataTX+0x88>)
 8004c2a:	54d1      	strb	r1, [r2, r3]

	//	writeUART((unsigned char*) &uhf_txbuffer, size+2);

		rep = adf_tx_data();
 8004c2c:	f7fc fc3a 	bl	80014a4 <adf_tx_data>
 8004c30:	4603      	mov	r3, r0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <writeDataTX+0x78>

	}

	else //ERROR
	{
		rep = ERROR_BUFFER_OVERFLOW;
 8004c36:	f06f 0309 	mvn.w	r3, #9
 8004c3a:	60fb      	str	r3, [r7, #12]
	}

	return rep;
 8004c3c:	68fb      	ldr	r3, [r7, #12]

}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c48:	b004      	add	sp, #16
 8004c4a:	4770      	bx	lr
 8004c4c:	20001124 	.word	0x20001124

08004c50 <processDropMessage>:
 * \return  void
 * 
 */
extern s_unprocessedmessageList gv_unprocess_messages;

void processDropMessage(char *data_ax25, unsigned short size) {
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]


	logger(LOG_LEVEL_CRITICAL, "MESSAGE DROPPED");
 8004c5c:	492f      	ldr	r1, [pc, #188]	@ (8004d1c <processDropMessage+0xcc>)
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f000 fdf8 	bl	8005854 <logger>
	gv_spino.nbFrameNotprocessed++;
 8004c64:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <processDropMessage+0xd0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <processDropMessage+0xd0>)
 8004c6c:	6093      	str	r3, [r2, #8]

	gv_unprocess_messages.index = (gv_unprocess_messages.index + 1)
 8004c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d24 <processDropMessage+0xd4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1c59      	adds	r1, r3, #1
			% MAX_UNPROCESSED_MESSAGE_LIST_SIZE;
 8004c74:	4b2c      	ldr	r3, [pc, #176]	@ (8004d28 <processDropMessage+0xd8>)
 8004c76:	fb83 2301 	smull	r2, r3, r3, r1
 8004c7a:	105a      	asrs	r2, r3, #1
 8004c7c:	17cb      	asrs	r3, r1, #31
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	1aca      	subs	r2, r1, r3
	gv_unprocess_messages.index = (gv_unprocess_messages.index + 1)
 8004c88:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <processDropMessage+0xd4>)
 8004c8a:	601a      	str	r2, [r3, #0]
	gv_unprocess_messages.message[gv_unprocess_messages.index].timestamps =
 8004c8c:	4b25      	ldr	r3, [pc, #148]	@ (8004d24 <processDropMessage+0xd4>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
			gv_spino.timestamps;
 8004c90:	4b23      	ldr	r3, [pc, #140]	@ (8004d20 <processDropMessage+0xd0>)
 8004c92:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
	gv_unprocess_messages.message[gv_unprocess_messages.index].timestamps =
 8004c96:	4c23      	ldr	r4, [pc, #140]	@ (8004d24 <processDropMessage+0xd4>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4423      	add	r3, r4
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	e9c3 0100 	strd	r0, r1, [r3]

	if (size > MAX_UNPROCESSED_MESSAGE_LENGHT) {
 8004ca8:	887b      	ldrh	r3, [r7, #2]
 8004caa:	2be6      	cmp	r3, #230	@ 0xe6
 8004cac:	d90b      	bls.n	8004cc6 <processDropMessage+0x76>
		// trunck to MAX_MESSAGE_SIZE
		gv_unprocess_messages.message[gv_unprocess_messages.index].size =
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <processDropMessage+0xd4>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	491c      	ldr	r1, [pc, #112]	@ (8004d24 <processDropMessage+0xd4>)
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	22e6      	movs	r2, #230	@ 0xe6
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e00a      	b.n	8004cdc <processDropMessage+0x8c>
				MAX_UNPROCESSED_MESSAGE_LENGHT;

	} else {

		gv_unprocess_messages.message[gv_unprocess_messages.index].size = size;
 8004cc6:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <processDropMessage+0xd4>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4916      	ldr	r1, [pc, #88]	@ (8004d24 <processDropMessage+0xd4>)
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	801a      	strh	r2, [r3, #0]
	}

	logger(LOG_LEVEL_CRITICAL, data_ax25);
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	2005      	movs	r0, #5
 8004ce0:	f000 fdb8 	bl	8005854 <logger>
	memcpy(&gv_unprocess_messages.message[gv_unprocess_messages.index].data,
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <processDropMessage+0xd4>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	3310      	adds	r3, #16
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8004d24 <processDropMessage+0xd4>)
 8004cf4:	4413      	add	r3, r2
 8004cf6:	1c98      	adds	r0, r3, #2
			data_ax25,
			gv_unprocess_messages.message[gv_unprocess_messages.index].size);
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <processDropMessage+0xd4>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4909      	ldr	r1, [pc, #36]	@ (8004d24 <processDropMessage+0xd4>)
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	440b      	add	r3, r1
 8004d08:	3310      	adds	r3, #16
 8004d0a:	881b      	ldrh	r3, [r3, #0]
	memcpy(&gv_unprocess_messages.message[gv_unprocess_messages.index].data,
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	f009 fd2b 	bl	800e76a <memcpy>

}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd90      	pop	{r4, r7, pc}
 8004d1c:	08010b68 	.word	0x08010b68
 8004d20:	20002590 	.word	0x20002590
 8004d24:	200025d8 	.word	0x200025d8
 8004d28:	66666667 	.word	0x66666667

08004d2c <getLastDroppedMessage>:
 * \param *resp output structure with result of command
 * \return  SUCCESS 
 * 
 */

unsigned char getLastDroppedMessage(t_tc_response *resp) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

	logger(LOG_LEVEL_CRITICAL, " GET_LAST_DROPED_MESSAGE");
 8004d34:	4918      	ldr	r1, [pc, #96]	@ (8004d98 <getLastDroppedMessage+0x6c>)
 8004d36:	2005      	movs	r0, #5
 8004d38:	f000 fd8c 	bl	8005854 <logger>
	unsigned short taille_message =
			gv_unprocess_messages.message[gv_unprocess_messages.index].size;
 8004d3c:	4b17      	ldr	r3, [pc, #92]	@ (8004d9c <getLastDroppedMessage+0x70>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
	unsigned short taille_message =
 8004d40:	4916      	ldr	r1, [pc, #88]	@ (8004d9c <getLastDroppedMessage+0x70>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	81fb      	strh	r3, [r7, #14]
	taille_message = taille_message + (unsigned short) SIZE_HEADER_DROP;
 8004d52:	89fb      	ldrh	r3, [r7, #14]
 8004d54:	330a      	adds	r3, #10
 8004d56:	81fb      	strh	r3, [r7, #14]
	if (taille_message > MAX_DATA_SIZE) {
 8004d58:	89fb      	ldrh	r3, [r7, #14]
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	d902      	bls.n	8004d66 <getLastDroppedMessage+0x3a>
		taille_message = MAX_DATA_SIZE;
 8004d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d64:	81fb      	strh	r3, [r7, #14]
	}
	memcpy(resp->parameter,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f103 0012 	add.w	r0, r3, #18
			&gv_unprocess_messages.message[gv_unprocess_messages.index],
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <getLastDroppedMessage+0x70>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	3308      	adds	r3, #8
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <getLastDroppedMessage+0x70>)
 8004d7c:	4413      	add	r3, r2
	memcpy(resp->parameter,
 8004d7e:	89fa      	ldrh	r2, [r7, #14]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f009 fcf2 	bl	800e76a <memcpy>
			(size_t) taille_message);
	resp->size = taille_message;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	89fa      	ldrh	r2, [r7, #14]
 8004d8a:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8004d8c:	2300      	movs	r3, #0

}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08010b78 	.word	0x08010b78
 8004d9c:	200025d8 	.word	0x200025d8

08004da0 <getAllDroppedMessage>:
 * 
 * \todo : suprimer répétition dernier message dropped 
 * 
 */

unsigned char getAllDroppedMessage(t_tc_response *resp) {
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8004da6:	af42      	add	r7, sp, #264	@ 0x108
 8004da8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004db0:	6018      	str	r0, [r3, #0]
	s_ax25_packet ax25Frame;




	ax25Frame.header = gv_headerTlm;
 8004db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004db6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dba:	4a63      	ldr	r2, [pc, #396]	@ (8004f48 <getAllDroppedMessage+0x1a8>)
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	resp->header.error_code = SUCCESS;
 8004dca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	715a      	strb	r2, [r3, #5]
	resp->header.cmd_id =  GET_DROP;
 8004dd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ddc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	227a      	movs	r2, #122	@ 0x7a
 8004de4:	805a      	strh	r2, [r3, #2]
	resp->header.responseType = RESULT_CMD;
 8004de6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2280      	movs	r2, #128	@ 0x80
 8004df2:	711a      	strb	r2, [r3, #4]
	resp->header.size =  TC_REPONSE_HEADER_SIZE;
 8004df4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004df8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2212      	movs	r2, #18
 8004e00:	801a      	strh	r2, [r3, #0]
	resp->header.spare = (short) 0x01020304;
 8004e02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 7241 	mov.w	r2, #772	@ 0x304
 8004e10:	80da      	strh	r2, [r3, #6]


	unsigned short taille_message;
	int i = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	for (i = 0; i < MAX_UNPROCESSED_MESSAGE_LIST_SIZE; i++) {
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e1e:	e07a      	b.n	8004f16 <getAllDroppedMessage+0x176>

		taille_message = gv_unprocess_messages.message[i].size;
 8004e20:	494a      	ldr	r1, [pc, #296]	@ (8004f4c <getAllDroppedMessage+0x1ac>)
 8004e22:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	440b      	add	r3, r1
 8004e30:	3310      	adds	r3, #16
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		taille_message = taille_message + SIZE_HEADER_DROP;
 8004e38:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8004e3c:	330a      	adds	r3, #10
 8004e3e:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		if (taille_message > MAX_DATA_SIZE) {
 8004e42:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4a:	d903      	bls.n	8004e54 <getAllDroppedMessage+0xb4>
			taille_message = MAX_DATA_SIZE;
 8004e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e50:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		}
		resp->size = taille_message;
 8004e54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8004e62:	821a      	strh	r2, [r3, #16]
		memcpy(resp->parameter, &gv_unprocess_messages.message[i],
 8004e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e68:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f103 0012 	add.w	r0, r3, #18
 8004e72:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	3308      	adds	r3, #8
 8004e80:	4a32      	ldr	r2, [pc, #200]	@ (8004f4c <getAllDroppedMessage+0x1ac>)
 8004e82:	4413      	add	r3, r2
 8004e84:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f009 fc6e 	bl	800e76a <memcpy>
				(size_t) taille_message);
		resp->header.size =  TC_REPONSE_HEADER_SIZE+resp->size;
 8004e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	8a1b      	ldrh	r3, [r3, #16]
 8004e9a:	3312      	adds	r3, #18
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	801a      	strh	r2, [r3, #0]
		memcpy(ax25Frame.data, resp,
				(size_t) (TC_REPONSE_HEADER_SIZE + resp->size));
 8004eaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004eae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	8a1b      	ldrh	r3, [r3, #16]
		memcpy(ax25Frame.data, resp,
 8004eb6:	f103 0112 	add.w	r1, r3, #18
 8004eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ebe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ec2:	f107 0208 	add.w	r2, r7, #8
 8004ec6:	f102 0010 	add.w	r0, r2, #16
 8004eca:	460a      	mov	r2, r1
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	f009 fc4c 	bl	800e76a <memcpy>
		/* envoyer la reponse de la  commande */
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp->size);
 8004ed2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ed6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	8a1b      	ldrh	r3, [r3, #16]
 8004ede:	3312      	adds	r3, #18
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ee6:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8004eea:	9240      	str	r2, [sp, #256]	@ 0x100
 8004eec:	4668      	mov	r0, sp
 8004eee:	f104 0310 	add.w	r3, r4, #16
 8004ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f009 fc37 	bl	800e76a <memcpy>
 8004efc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f00:	f7ff fde0 	bl	8004ac4 <writeData>

		HAL_Delay(1000);
 8004f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f08:	f002 fb9a 	bl	8007640 <HAL_Delay>
	for (i = 0; i < MAX_UNPROCESSED_MESSAGE_LIST_SIZE; i++) {
 8004f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f10:	3301      	adds	r3, #1
 8004f12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f16:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	dd80      	ble.n	8004e20 <getAllDroppedMessage+0x80>
	}
	resp->header.cmd_id =  GET_ALL_DROPED_MESSAGE;
 8004f1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2279      	movs	r2, #121	@ 0x79
 8004f2a:	805a      	strh	r2, [r3, #2]
	resp->size = 0;
 8004f2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8004f3a:	2300      	movs	r3, #0

}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200025c8 	.word	0x200025c8
 8004f4c:	200025d8 	.word	0x200025d8

08004f50 <initExpe>:

t_tc_response respexpBeacon;
s_tle gv_tle;
s_experimental_beacon expBeacon;

void initExpe() {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af02      	add	r7, sp, #8

	expBeacon.id = (long) 0x0F55F0AA0;
 8004f56:	4b18      	ldr	r3, [pc, #96]	@ (8004fb8 <initExpe+0x68>)
 8004f58:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <initExpe+0x6c>)
 8004f5a:	601a      	str	r2, [r3, #0]
	expBeacon.delay = 10;
 8004f5c:	4b16      	ldr	r3, [pc, #88]	@ (8004fb8 <initExpe+0x68>)
 8004f5e:	220a      	movs	r2, #10
 8004f60:	819a      	strh	r2, [r3, #12]
	expBeacon.idf = (short)0x0F55;
 8004f62:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <initExpe+0x68>)
 8004f64:	f640 7255 	movw	r2, #3925	@ 0xf55
 8004f68:	81da      	strh	r2, [r3, #14]
	expBeacon.expereceived =0;
 8004f6a:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <initExpe+0x68>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
	expBeacon.expereceivedfail =0;
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <initExpe+0x68>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
	respexpBeacon.header.responseType = EXPEBEACON;
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <initExpe+0x70>)
 8004f78:	2210      	movs	r2, #16
 8004f7a:	711a      	strb	r2, [r3, #4]
	respexpBeacon.header.error_code = 0;
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <initExpe+0x70>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	715a      	strb	r2, [r3, #5]
	respexpBeacon.header.cmd_id = CMD_BEACON;
 8004f82:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <initExpe+0x70>)
 8004f84:	2251      	movs	r2, #81	@ 0x51
 8004f86:	805a      	strh	r2, [r3, #2]
	respexpBeacon.size = sizeof(s_experimental_beacon);
 8004f88:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <initExpe+0x70>)
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	821a      	strh	r2, [r3, #16]
	respexpBeacon.header.size = TC_REPONSE_HEADER_SIZE + respexpBeacon.size ;
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <initExpe+0x70>)
 8004f90:	8a1b      	ldrh	r3, [r3, #16]
 8004f92:	3312      	adds	r3, #18
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <initExpe+0x70>)
 8004f98:	801a      	strh	r2, [r3, #0]

	gv_headerExp.pid = 255;
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <initExpe+0x74>)
 8004f9c:	22ff      	movs	r2, #255	@ 0xff
 8004f9e:	73da      	strb	r2, [r3, #15]

	convertToAX25Header(&gv_headerExp, gv_spinoConfig.spinoDesCallsign,
 8004fa0:	2305      	movs	r3, #5
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <initExpe+0x78>)
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	4908      	ldr	r1, [pc, #32]	@ (8004fcc <initExpe+0x7c>)
 8004faa:	4806      	ldr	r0, [pc, #24]	@ (8004fc4 <initExpe+0x74>)
 8004fac:	f7fd ffd2 	bl	8002f54 <convertToAX25Header>
			SSID_SPINO_EXPERIMENTAL, gv_spinoConfig.spinoSrcCallsign,
			SSID_SPINO_EXPERIMENTAL);

}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20003d54 	.word	0x20003d54
 8004fbc:	f55f0aa0 	.word	0xf55f0aa0
 8004fc0:	20003bb0 	.word	0x20003bb0
 8004fc4:	20003ba0 	.word	0x20003ba0
 8004fc8:	2000257e 	.word	0x2000257e
 8004fcc:	20002584 	.word	0x20002584

08004fd0 <expDownloadTLE>:

static unsigned char expDownloadTLE(t_tc_response *resp) {
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8004fd6:	af42      	add	r7, sp, #264	@ 0x108
 8004fd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fdc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004fe0:	6018      	str	r0, [r3, #0]

	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerExp;
 8004fe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fe6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004fea:	4a63      	ldr	r2, [pc, #396]	@ (8005178 <expDownloadTLE+0x1a8>)
 8004fec:	461c      	mov	r4, r3
 8004fee:	4613      	mov	r3, r2
 8004ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	unsigned short taille_message = SIZE_TLE;
 8004ff6:	2346      	movs	r3, #70	@ 0x46
 8004ff8:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	resp->header.cmd_id = CMD_DOWNLOAD_TLE_1;
 8004ffc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005000:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2249      	movs	r2, #73	@ 0x49
 8005008:	805a      	strh	r2, [r3, #2]
	resp->parameter[0] = 0;
 800500a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800500e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	749a      	strb	r2, [r3, #18]
	strncat(resp->parameter, gv_tle.tleLine1, SIZE_TLE);
 8005018:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800501c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3312      	adds	r3, #18
 8005024:	2246      	movs	r2, #70	@ 0x46
 8005026:	4955      	ldr	r1, [pc, #340]	@ (800517c <expDownloadTLE+0x1ac>)
 8005028:	4618      	mov	r0, r3
 800502a:	f009 fb13 	bl	800e654 <strncat>
	resp->size = taille_message;
 800502e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005032:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 800503c:	821a      	strh	r2, [r3, #16]
	resp->header.size = TC_REPONSE_HEADER_SIZE +resp->size;
 800503e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005042:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	8a1b      	ldrh	r3, [r3, #16]
 800504a:	3312      	adds	r3, #18
 800504c:	b29a      	uxth	r2, r3
 800504e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005052:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	801a      	strh	r2, [r3, #0]
	memcpy(ax25Frame.data, resp, TC_REPONSE_HEADER_SIZE + resp->size);
 800505a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800505e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	8a1b      	ldrh	r3, [r3, #16]
 8005066:	f103 0112 	add.w	r1, r3, #18
 800506a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800506e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005072:	f107 020c 	add.w	r2, r7, #12
 8005076:	f102 0010 	add.w	r0, r2, #16
 800507a:	460a      	mov	r2, r1
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	f009 fb74 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp->size);
 8005082:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005086:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	8a1b      	ldrh	r3, [r3, #16]
 800508e:	3312      	adds	r3, #18
 8005090:	461a      	mov	r2, r3
 8005092:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005096:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 800509a:	9240      	str	r2, [sp, #256]	@ 0x100
 800509c:	4668      	mov	r0, sp
 800509e:	f104 0310 	add.w	r3, r4, #16
 80050a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050a6:	4619      	mov	r1, r3
 80050a8:	f009 fb5f 	bl	800e76a <memcpy>
 80050ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050b0:	f7ff fd08 	bl	8004ac4 <writeData>
	resp->header.cmd_id = CMD_DOWNLOAD_TLE_2;
 80050b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	224a      	movs	r2, #74	@ 0x4a
 80050c0:	805a      	strh	r2, [r3, #2]
	resp->parameter[0] = 0;
 80050c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	749a      	strb	r2, [r3, #18]
	strncat(resp->parameter, gv_tle.tleLine2, SIZE_TLE);
 80050d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3312      	adds	r3, #18
 80050dc:	2246      	movs	r2, #70	@ 0x46
 80050de:	4928      	ldr	r1, [pc, #160]	@ (8005180 <expDownloadTLE+0x1b0>)
 80050e0:	4618      	mov	r0, r3
 80050e2:	f009 fab7 	bl	800e654 <strncat>
	resp->size = taille_message;
 80050e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80050f4:	821a      	strh	r2, [r3, #16]
	resp->header.size = TC_REPONSE_HEADER_SIZE +resp->size;
 80050f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	8a1b      	ldrh	r3, [r3, #16]
 8005102:	3312      	adds	r3, #18
 8005104:	b29a      	uxth	r2, r3
 8005106:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800510a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	801a      	strh	r2, [r3, #0]
	memcpy(ax25Frame.data, resp, TC_REPONSE_HEADER_SIZE + resp->size);
 8005112:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005116:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	8a1b      	ldrh	r3, [r3, #16]
 800511e:	f103 0112 	add.w	r1, r3, #18
 8005122:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005126:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800512a:	f107 020c 	add.w	r2, r7, #12
 800512e:	f102 0010 	add.w	r0, r2, #16
 8005132:	460a      	mov	r2, r1
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	f009 fb18 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp->size);
 800513a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800513e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	8a1b      	ldrh	r3, [r3, #16]
 8005146:	3312      	adds	r3, #18
 8005148:	461a      	mov	r2, r3
 800514a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800514e:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 8005152:	9240      	str	r2, [sp, #256]	@ 0x100
 8005154:	4668      	mov	r0, sp
 8005156:	f104 0310 	add.w	r3, r4, #16
 800515a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800515e:	4619      	mov	r1, r3
 8005160:	f009 fb03 	bl	800e76a <memcpy>
 8005164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005168:	f7ff fcac 	bl	8004ac4 <writeData>


	return SUCCESS;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}
 8005178:	20003ba0 	.word	0x20003ba0
 800517c:	20003cc8 	.word	0x20003cc8
 8005180:	20003d0e 	.word	0x20003d0e

08005184 <interpretExperimentalCommmand>:

t_tc_response interpretExperimentalCommmand(s_command cmd,
		unsigned char *callsign) {
 8005184:	b084      	sub	sp, #16
 8005186:	b590      	push	{r4, r7, lr}
 8005188:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 800518c:	af00      	add	r7, sp, #0
 800518e:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8005192:	f5a4 74fe 	sub.w	r4, r4, #508	@ 0x1fc
 8005196:	6020      	str	r0, [r4, #0]
 8005198:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800519c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	t_tc_response resp;

	resp.header.responseType = RESULT_CMD;
 80051a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051a8:	2280      	movs	r2, #128	@ 0x80
 80051aa:	711a      	strb	r2, [r3, #4]
	resp.header.timeStamp = gv_spino.timestamps;
 80051ac:	4bc6      	ldr	r3, [pc, #792]	@ (80054c8 <interpretExperimentalCommmand+0x344>)
 80051ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80051b2:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 80051b6:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 80051ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	resp.header.cmd_id = cmd.id;
 80051be:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 80051c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051ca:	805a      	strh	r2, [r3, #2]
	resp.header.error_code = SUCCESS;
 80051cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051d4:	2200      	movs	r2, #0
 80051d6:	715a      	strb	r2, [r3, #5]

	switch (cmd.id) {
 80051d8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80051dc:	3b46      	subs	r3, #70	@ 0x46
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	f200 8126 	bhi.w	8005430 <interpretExperimentalCommmand+0x2ac>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <interpretExperimentalCommmand+0x68>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005289 	.word	0x08005289
 80051f0:	080052d3 	.word	0x080052d3
 80051f4:	08005317 	.word	0x08005317
 80051f8:	08005431 	.word	0x08005431
 80051fc:	08005431 	.word	0x08005431
 8005200:	08005351 	.word	0x08005351
 8005204:	080053bf 	.word	0x080053bf
 8005208:	080053e1 	.word	0x080053e1
 800520c:	0800540d 	.word	0x0800540d
 8005210:	08005219 	.word	0x08005219
 8005214:	08005241 	.word	0x08005241

	case CMD_EXPE_INIT:
		logger(LOG_LEVEL_INFO, "Commande EXP  RESET");
 8005218:	49ac      	ldr	r1, [pc, #688]	@ (80054cc <interpretExperimentalCommmand+0x348>)
 800521a:	2000      	movs	r0, #0
 800521c:	f000 fb1a 	bl	8005854 <logger>
		resp.header.error_code = initialise();
 8005220:	f000 fc8c 	bl	8005b3c <initialise>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800522c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005230:	715a      	strb	r2, [r3, #5]
		resp.size = 0;
 8005232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005236:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800523a:	2200      	movs	r2, #0
 800523c:	821a      	strh	r2, [r3, #16]
		break;
 800523e:	e10f      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>

	case CMD_SET_EXPE_BEACON_DELAY:
		logger(LOG_LEVEL_INFO, "Commande CMD_SET_EXPE_BEACON_DELAY");
 8005240:	49a3      	ldr	r1, [pc, #652]	@ (80054d0 <interpretExperimentalCommmand+0x34c>)
 8005242:	2000      	movs	r0, #0
 8005244:	f000 fb06 	bl	8005854 <logger>
		s_set_value setvalue;
		memcpy(&setvalue, cmd.parameter, cmd.size);
 8005248:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800524c:	461a      	mov	r2, r3
 800524e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8005252:	1d99      	adds	r1, r3, #6
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	4618      	mov	r0, r3
 800525a:	f009 fa86 	bl	800e76a <memcpy>
		expBeacon.delay = (unsigned short) setvalue.value[0];
 800525e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005262:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8005266:	789b      	ldrb	r3, [r3, #2]
 8005268:	b21a      	sxth	r2, r3
 800526a:	4b9a      	ldr	r3, [pc, #616]	@ (80054d4 <interpretExperimentalCommmand+0x350>)
 800526c:	819a      	strh	r2, [r3, #12]
		resp.header.error_code = SUCCESS;
 800526e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005272:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005276:	2200      	movs	r2, #0
 8005278:	715a      	strb	r2, [r3, #5]
		resp.size = 0;
 800527a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005282:	2200      	movs	r2, #0
 8005284:	821a      	strh	r2, [r3, #16]
		break;
 8005286:	e0eb      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>

	case CMD_LOAD_TLE_1:
		logger(LOG_LEVEL_INFO, "Commande CMD_LOAD_TLE_1");
 8005288:	4993      	ldr	r1, [pc, #588]	@ (80054d8 <interpretExperimentalCommmand+0x354>)
 800528a:	2000      	movs	r0, #0
 800528c:	f000 fae2 	bl	8005854 <logger>
		if (cmd.size != SIZE_TLE) {
 8005290:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8005294:	2b46      	cmp	r3, #70	@ 0x46
 8005296:	d00f      	beq.n	80052b8 <interpretExperimentalCommmand+0x134>
			logger(LOG_LEVEL_INFO, "Commande CMD_LOAD_TLE_1 SIZE OK");
 8005298:	4990      	ldr	r1, [pc, #576]	@ (80054dc <interpretExperimentalCommmand+0x358>)
 800529a:	2000      	movs	r0, #0
 800529c:	f000 fada 	bl	8005854 <logger>
			gv_tle.tleLine1[0] = 0;
 80052a0:	4b8f      	ldr	r3, [pc, #572]	@ (80054e0 <interpretExperimentalCommmand+0x35c>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
			strncat(gv_tle.tleLine1, cmd.parameter, SIZE_TLE);
 80052a6:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80052aa:	3306      	adds	r3, #6
 80052ac:	2246      	movs	r2, #70	@ 0x46
 80052ae:	4619      	mov	r1, r3
 80052b0:	488b      	ldr	r0, [pc, #556]	@ (80054e0 <interpretExperimentalCommmand+0x35c>)
 80052b2:	f009 f9cf 	bl	800e654 <strncat>
 80052b6:	e005      	b.n	80052c4 <interpretExperimentalCommmand+0x140>
		} else {
			resp.header.error_code = ERROR_TLE_WRONG_SIZE;
 80052b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052c0:	228c      	movs	r2, #140	@ 0x8c
 80052c2:	715a      	strb	r2, [r3, #5]

		}
		resp.size = 0;
 80052c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052cc:	2200      	movs	r2, #0
 80052ce:	821a      	strh	r2, [r3, #16]
		break;
 80052d0:	e0c6      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>
	case CMD_LOAD_TLE_2:
		logger(LOG_LEVEL_INFO, "Commande CMD_LOAD_TLE_2");
 80052d2:	4984      	ldr	r1, [pc, #528]	@ (80054e4 <interpretExperimentalCommmand+0x360>)
 80052d4:	2000      	movs	r0, #0
 80052d6:	f000 fabd 	bl	8005854 <logger>
		if (cmd.size != SIZE_TLE) {
 80052da:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 80052de:	2b46      	cmp	r3, #70	@ 0x46
 80052e0:	d00c      	beq.n	80052fc <interpretExperimentalCommmand+0x178>
			gv_tle.tleLine2[0] = 0;
 80052e2:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <interpretExperimentalCommmand+0x35c>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			strncat(gv_tle.tleLine2, cmd.parameter, SIZE_TLE);
 80052ea:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80052ee:	3306      	adds	r3, #6
 80052f0:	2246      	movs	r2, #70	@ 0x46
 80052f2:	4619      	mov	r1, r3
 80052f4:	487c      	ldr	r0, [pc, #496]	@ (80054e8 <interpretExperimentalCommmand+0x364>)
 80052f6:	f009 f9ad 	bl	800e654 <strncat>
 80052fa:	e005      	b.n	8005308 <interpretExperimentalCommmand+0x184>
		} else {
			resp.header.error_code = ERROR_TLE_WRONG_SIZE;
 80052fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005300:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005304:	228c      	movs	r2, #140	@ 0x8c
 8005306:	715a      	strb	r2, [r3, #5]
		}
		resp.size = 0;
 8005308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800530c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005310:	2200      	movs	r2, #0
 8005312:	821a      	strh	r2, [r3, #16]
		break;
 8005314:	e0a4      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>

	case CMD_DOWNLOAD_TLE:
		logger(LOG_LEVEL_INFO, "Commande CMD_DOWNLOAD_TLE");
 8005316:	4975      	ldr	r1, [pc, #468]	@ (80054ec <interpretExperimentalCommmand+0x368>)
 8005318:	2000      	movs	r0, #0
 800531a:	f000 fa9b 	bl	8005854 <logger>
		resp.header.error_code = expDownloadTLE(&resp);
 800531e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fe54 	bl	8004fd0 <expDownloadTLE>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005330:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005334:	715a      	strb	r2, [r3, #5]
		resp.header.cmd_id = CMD_DOWNLOAD_TLE;
 8005336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800533e:	2248      	movs	r2, #72	@ 0x48
 8005340:	805a      	strh	r2, [r3, #2]
		resp.size = 0;
 8005342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005346:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800534a:	2200      	movs	r2, #0
 800534c:	821a      	strh	r2, [r3, #16]
		break;
 800534e:	e087      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>
	case CMD_EXP_ADD_DATA:
		logger(LOG_LEVEL_INFO, "Commande CMD_EXP_ADD_DATA");
 8005350:	4967      	ldr	r1, [pc, #412]	@ (80054f0 <interpretExperimentalCommmand+0x36c>)
 8005352:	2000      	movs	r0, #0
 8005354:	f000 fa7e 	bl	8005854 <logger>
		if (cmd.size > MAX_LENGHT_MESSAGE) {
 8005358:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800535c:	2bdc      	cmp	r3, #220	@ 0xdc
 800535e:	d906      	bls.n	800536e <interpretExperimentalCommmand+0x1ea>
			resp.header.error_code = ERROR_ADD_MSG_EXCED_SIZE;
 8005360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005364:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005368:	220d      	movs	r2, #13
 800536a:	715a      	strb	r2, [r3, #5]
 800536c:	e020      	b.n	80053b0 <interpretExperimentalCommmand+0x22c>
		} else {
			char message[MAX_LENGHT_MESSAGE];
			memcpy(message, &cmd.parameter, cmd.size);
 800536e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8005372:	461a      	mov	r2, r3
 8005374:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8005378:	1d99      	adds	r1, r3, #6
 800537a:	f107 030c 	add.w	r3, r7, #12
 800537e:	4618      	mov	r0, r3
 8005380:	f009 f9f3 	bl	800e76a <memcpy>
			logger(LOG_LEVEL_INFO, message);
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	4619      	mov	r1, r3
 800538a:	2000      	movs	r0, #0
 800538c:	f000 fa62 	bl	8005854 <logger>
			resp.header.error_code = addMessage(callsign, message, cmd.size);
 8005390:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 8005394:	f107 030c 	add.w	r3, r7, #12
 8005398:	4619      	mov	r1, r3
 800539a:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 800539e:	f000 fc7f 	bl	8005ca0 <addMessage>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053ae:	715a      	strb	r2, [r3, #5]
		}
		resp.size = 0;
 80053b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053b8:	2200      	movs	r2, #0
 80053ba:	821a      	strh	r2, [r3, #16]
		break;
 80053bc:	e050      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>
	case CMD_EXPE_GET_LIST:
		logger(LOG_LEVEL_INFO, "Commande CMD_EXPE_GET_LIST");
 80053be:	494d      	ldr	r1, [pc, #308]	@ (80054f4 <interpretExperimentalCommmand+0x370>)
 80053c0:	2000      	movs	r0, #0
 80053c2:	f000 fa47 	bl	8005854 <logger>
		resp.header.error_code = getListMailbox(&resp);
 80053c6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fe4a 	bl	8006064 <getListMailbox>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053dc:	715a      	strb	r2, [r3, #5]
		break;
 80053de:	e03f      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>
	case CMD_EXPE_DELETTE_ALL:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX DELETE MAILBOX");
 80053e0:	4945      	ldr	r1, [pc, #276]	@ (80054f8 <interpretExperimentalCommmand+0x374>)
 80053e2:	2000      	movs	r0, #0
 80053e4:	f000 fa36 	bl	8005854 <logger>
		resp.header.error_code = deleteMailBox(callsign );
 80053e8:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 80053ec:	f000 fe8c 	bl	8006108 <deleteMailBox>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053fc:	715a      	strb	r2, [r3, #5]
		resp.size = 0;
 80053fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005402:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005406:	2200      	movs	r2, #0
 8005408:	821a      	strh	r2, [r3, #16]
		break;
 800540a:	e029      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>
	case CMD_EXPE_GET_ALL_DATA:
		resp.header.error_code = getAllMesage(callsign);
 800540c:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8005410:	f001 f918 	bl	8006644 <getAllMesage>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800541c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005420:	715a      	strb	r2, [r3, #5]
		resp.size = 0;
 8005422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005426:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800542a:	2200      	movs	r2, #0
 800542c:	821a      	strh	r2, [r3, #16]
		break;
 800542e:	e017      	b.n	8005460 <interpretExperimentalCommmand+0x2dc>

	default:
		sprintf(gvLogMsg, "erreur Experimental cmd %d \r\n", cmd.id);
 8005430:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005434:	461a      	mov	r2, r3
 8005436:	4931      	ldr	r1, [pc, #196]	@ (80054fc <interpretExperimentalCommmand+0x378>)
 8005438:	4831      	ldr	r0, [pc, #196]	@ (8005500 <interpretExperimentalCommmand+0x37c>)
 800543a:	f008 fffb 	bl	800e434 <siprintf>
		logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 800543e:	4930      	ldr	r1, [pc, #192]	@ (8005500 <interpretExperimentalCommmand+0x37c>)
 8005440:	2005      	movs	r0, #5
 8005442:	f000 fa07 	bl	8005854 <logger>
		resp.header.error_code = ERROR_COMMAND_UNKNOW;
 8005446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800544a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800544e:	2201      	movs	r2, #1
 8005450:	715a      	strb	r2, [r3, #5]
		resp.size = 0;
 8005452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005456:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800545a:	2200      	movs	r2, #0
 800545c:	821a      	strh	r2, [r3, #16]
		break;
 800545e:	bf00      	nop
	}

	if(resp.header.error_code!= SUCCESS)
 8005460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005464:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005468:	795b      	ldrb	r3, [r3, #5]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <interpretExperimentalCommmand+0x2f4>
	{
		expBeacon.expereceivedfail++;
 800546e:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <interpretExperimentalCommmand+0x350>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	3301      	adds	r3, #1
 8005474:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <interpretExperimentalCommmand+0x350>)
 8005476:	6093      	str	r3, [r2, #8]
	}

	 resp.header.size = TC_REPONSE_HEADER_SIZE + resp.size;
 8005478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800547c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005480:	8a1b      	ldrh	r3, [r3, #16]
 8005482:	3312      	adds	r3, #18
 8005484:	b29a      	uxth	r2, r3
 8005486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800548a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800548e:	801a      	strh	r2, [r3, #0]
	return resp;
 8005490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800549e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80054aa:	461a      	mov	r2, r3
 80054ac:	f009 f95d 	bl	800e76a <memcpy>
}
 80054b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80054be:	46bd      	mov	sp, r7
 80054c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80054c4:	b004      	add	sp, #16
 80054c6:	4770      	bx	lr
 80054c8:	20002590 	.word	0x20002590
 80054cc:	08010b94 	.word	0x08010b94
 80054d0:	08010ba8 	.word	0x08010ba8
 80054d4:	20003d54 	.word	0x20003d54
 80054d8:	08010bcc 	.word	0x08010bcc
 80054dc:	08010be4 	.word	0x08010be4
 80054e0:	20003cc8 	.word	0x20003cc8
 80054e4:	08010c04 	.word	0x08010c04
 80054e8:	20003d0e 	.word	0x20003d0e
 80054ec:	08010c1c 	.word	0x08010c1c
 80054f0:	08010c38 	.word	0x08010c38
 80054f4:	08010c54 	.word	0x08010c54
 80054f8:	08010c70 	.word	0x08010c70
 80054fc:	08010c90 	.word	0x08010c90
 8005500:	20003fec 	.word	0x20003fec

08005504 <sendBeaconExpe>:

void sendBeaconExpe() {
 8005504:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005508:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800550c:	af42      	add	r7, sp, #264	@ 0x108

	if (gv_spino.timestamps
 800550e:	492f      	ldr	r1, [pc, #188]	@ (80055cc <sendBeaconExpe+0xc8>)
 8005510:	e9d1 890a 	ldrd	r8, r9, [r1, #40]	@ 0x28
			> (lv_spino_expe_timeStampPrevious
					+ (unsigned long long) (expBeacon.delay * 1000))) {
 8005514:	492e      	ldr	r1, [pc, #184]	@ (80055d0 <sendBeaconExpe+0xcc>)
 8005516:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800551a:	4608      	mov	r0, r1
 800551c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005520:	fb00 f101 	mul.w	r1, r0, r1
 8005524:	17c8      	asrs	r0, r1, #31
 8005526:	460c      	mov	r4, r1
 8005528:	4605      	mov	r5, r0
 800552a:	492a      	ldr	r1, [pc, #168]	@ (80055d4 <sendBeaconExpe+0xd0>)
 800552c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005530:	1822      	adds	r2, r4, r0
 8005532:	eb45 0301 	adc.w	r3, r5, r1
	if (gv_spino.timestamps
 8005536:	4542      	cmp	r2, r8
 8005538:	eb73 0309 	sbcs.w	r3, r3, r9
 800553c:	d240      	bcs.n	80055c0 <sendBeaconExpe+0xbc>
		s_ax25_packet ax25Frame;
		lv_spino_expe_timeStampPrevious = gv_spino.timestamps;
 800553e:	4b23      	ldr	r3, [pc, #140]	@ (80055cc <sendBeaconExpe+0xc8>)
 8005540:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005544:	4923      	ldr	r1, [pc, #140]	@ (80055d4 <sendBeaconExpe+0xd0>)
 8005546:	e9c1 2300 	strd	r2, r3, [r1]
		respexpBeacon.header.timeStamp = gv_spino.timestamps;
 800554a:	4b20      	ldr	r3, [pc, #128]	@ (80055cc <sendBeaconExpe+0xc8>)
 800554c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005550:	4921      	ldr	r1, [pc, #132]	@ (80055d8 <sendBeaconExpe+0xd4>)
 8005552:	e9c1 2302 	strd	r2, r3, [r1, #8]
		respexpBeacon.header.cmd_id = CMD_BEACON;
 8005556:	4b20      	ldr	r3, [pc, #128]	@ (80055d8 <sendBeaconExpe+0xd4>)
 8005558:	2251      	movs	r2, #81	@ 0x51
 800555a:	805a      	strh	r2, [r3, #2]
		memcpy(respexpBeacon.parameter, &expBeacon,
 800555c:	2210      	movs	r2, #16
 800555e:	491c      	ldr	r1, [pc, #112]	@ (80055d0 <sendBeaconExpe+0xcc>)
 8005560:	481e      	ldr	r0, [pc, #120]	@ (80055dc <sendBeaconExpe+0xd8>)
 8005562:	f009 f902 	bl	800e76a <memcpy>
				sizeof(s_experimental_beacon));
		ax25Frame.header = gv_headerExp;
 8005566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800556a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800556e:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <sendBeaconExpe+0xdc>)
 8005570:	461c      	mov	r4, r3
 8005572:	4613      	mov	r3, r2
 8005574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(ax25Frame.data, &respexpBeacon,
				TC_REPONSE_HEADER_SIZE + respexpBeacon.size);
 800557a:	4b17      	ldr	r3, [pc, #92]	@ (80055d8 <sendBeaconExpe+0xd4>)
 800557c:	8a1b      	ldrh	r3, [r3, #16]
		memcpy(ax25Frame.data, &respexpBeacon,
 800557e:	f103 0212 	add.w	r2, r3, #18
 8005582:	463b      	mov	r3, r7
 8005584:	3310      	adds	r3, #16
 8005586:	4914      	ldr	r1, [pc, #80]	@ (80055d8 <sendBeaconExpe+0xd4>)
 8005588:	4618      	mov	r0, r3
 800558a:	f009 f8ee 	bl	800e76a <memcpy>
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + respexpBeacon.size);
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <sendBeaconExpe+0xd4>)
 8005590:	8a1b      	ldrh	r3, [r3, #16]
 8005592:	3312      	adds	r3, #18
 8005594:	461a      	mov	r2, r3
 8005596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800559a:	f5a3 7488 	sub.w	r4, r3, #272	@ 0x110
 800559e:	9240      	str	r2, [sp, #256]	@ 0x100
 80055a0:	4668      	mov	r0, sp
 80055a2:	f104 0310 	add.w	r3, r4, #16
 80055a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055aa:	4619      	mov	r1, r3
 80055ac:	f009 f8dd 	bl	800e76a <memcpy>
 80055b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80055b4:	f7ff fa86 	bl	8004ac4 <writeData>
		logger(LOG_LEVEL_INFO, "Envoie BEACON");
 80055b8:	490a      	ldr	r1, [pc, #40]	@ (80055e4 <sendBeaconExpe+0xe0>)
 80055ba:	2000      	movs	r0, #0
 80055bc:	f000 f94a 	bl	8005854 <logger>
	}

}
 80055c0:	bf00      	nop
 80055c2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055cc:	20002590 	.word	0x20002590
 80055d0:	20003d54 	.word	0x20003d54
 80055d4:	20003b98 	.word	0x20003b98
 80055d8:	20003bb0 	.word	0x20003bb0
 80055dc:	20003bc2 	.word	0x20003bc2
 80055e0:	20003ba0 	.word	0x20003ba0
 80055e4:	08010cb0 	.word	0x08010cb0

080055e8 <processExperimental>:

static void processExperimental(s_ax25_packet data_ax25) {
 80055e8:	b084      	sub	sp, #16
 80055ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ec:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 80055f0:	af42      	add	r7, sp, #264	@ 0x108
 80055f2:	f507 648c 	add.w	r4, r7, #1120	@ 0x460
 80055f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	t_tc_response result;
	s_command cmd;

	gv_spino.nbExperiemntalCommand++;
 80055fa:	4b44      	ldr	r3, [pc, #272]	@ (800570c <processExperimental+0x124>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a42      	ldr	r2, [pc, #264]	@ (800570c <processExperimental+0x124>)
 8005602:	6113      	str	r3, [r2, #16]


	memcpy(&cmd, data_ax25.data, sizeof(s_command));
 8005604:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8005608:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800560c:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8005610:	4618      	mov	r0, r3
 8005612:	f009 f8aa 	bl	800e76a <memcpy>
	result = interpretExperimentalCommmand(cmd, data_ax25.header.sourceAdress);
 8005616:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800561a:	f5a3 768c 	sub.w	r6, r3, #280	@ 0x118
 800561e:	463d      	mov	r5, r7
 8005620:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005624:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8005628:	f207 4367 	addw	r3, r7, #1127	@ 0x467
 800562c:	933f      	str	r3, [sp, #252]	@ 0xfc
 800562e:	4668      	mov	r0, sp
 8005630:	f104 030c 	add.w	r3, r4, #12
 8005634:	22fa      	movs	r2, #250	@ 0xfa
 8005636:	4619      	mov	r1, r3
 8005638:	f009 f897 	bl	800e76a <memcpy>
 800563c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005640:	4628      	mov	r0, r5
 8005642:	f7ff fd9f 	bl	8005184 <interpretExperimentalCommmand>
 8005646:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800564a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800564e:	4630      	mov	r0, r6
 8005650:	4619      	mov	r1, r3
 8005652:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8005656:	461a      	mov	r2, r3
 8005658:	f009 f887 	bl	800e76a <memcpy>
	if (result.header.error_code != SUCCESS) {
 800565c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005660:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005664:	795b      	ldrb	r3, [r3, #5]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <processExperimental+0x8c>
		gv_spino.nbExperiemntalCommandError++;
 800566a:	4b28      	ldr	r3, [pc, #160]	@ (800570c <processExperimental+0x124>)
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	3301      	adds	r3, #1
 8005670:	4a26      	ldr	r2, [pc, #152]	@ (800570c <processExperimental+0x124>)
 8005672:	6153      	str	r3, [r2, #20]

	}
	s_ax25_packet ax25Frame;

	ax25Frame.header = gv_headerExp;
 8005674:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005678:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 800567c:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <processExperimental+0x128>)
 800567e:	461c      	mov	r4, r3
 8005680:	4613      	mov	r3, r2
 8005682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(ax25Frame.data, &result, TC_REPONSE_HEADER_SIZE + result.size);
 8005688:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800568c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005690:	8a1b      	ldrh	r3, [r3, #16]
 8005692:	f103 0212 	add.w	r2, r3, #18
 8005696:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 800569a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800569e:	3310      	adds	r3, #16
 80056a0:	4618      	mov	r0, r3
 80056a2:	f009 f862 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + result.size);
 80056a6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80056aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056ae:	8a1b      	ldrh	r3, [r3, #16]
 80056b0:	3312      	adds	r3, #18
 80056b2:	461a      	mov	r2, r3
 80056b4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80056b8:	f5a3 744c 	sub.w	r4, r3, #816	@ 0x330
 80056bc:	9240      	str	r2, [sp, #256]	@ 0x100
 80056be:	4668      	mov	r0, sp
 80056c0:	f104 0310 	add.w	r3, r4, #16
 80056c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056c8:	4619      	mov	r1, r3
 80056ca:	f009 f84e 	bl	800e76a <memcpy>
 80056ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80056d2:	f7ff f9f7 	bl	8004ac4 <writeData>
	sprintf(gvLogMsg, "RESULT EXPE COMMAND  %x %x ", result.header.cmd_id,
 80056d6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80056da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056de:	885b      	ldrh	r3, [r3, #2]
 80056e0:	461a      	mov	r2, r3
			result.header.error_code);
 80056e2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80056e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056ea:	795b      	ldrb	r3, [r3, #5]
	sprintf(gvLogMsg, "RESULT EXPE COMMAND  %x %x ", result.header.cmd_id,
 80056ec:	4909      	ldr	r1, [pc, #36]	@ (8005714 <processExperimental+0x12c>)
 80056ee:	480a      	ldr	r0, [pc, #40]	@ (8005718 <processExperimental+0x130>)
 80056f0:	f008 fea0 	bl	800e434 <siprintf>
	logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 80056f4:	4908      	ldr	r1, [pc, #32]	@ (8005718 <processExperimental+0x130>)
 80056f6:	2005      	movs	r0, #5
 80056f8:	f000 f8ac 	bl	8005854 <logger>

}
 80056fc:	bf00      	nop
 80056fe:	f207 474c 	addw	r7, r7, #1100	@ 0x44c
 8005702:	46bd      	mov	sp, r7
 8005704:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005708:	b004      	add	sp, #16
 800570a:	4770      	bx	lr
 800570c:	20002590 	.word	0x20002590
 8005710:	20003ba0 	.word	0x20003ba0
 8005714:	08010cc0 	.word	0x08010cc0
 8005718:	20003fec 	.word	0x20003fec

0800571c <experimentalMode>:

unsigned short experimentalMode() {
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8005722:	af40      	add	r7, sp, #256	@ 0x100

	s_ax25_packet data_ax25;

	logger(LOG_LEVEL_CRITICAL, "EXPERIMENTAL MODE ");
 8005724:	4942      	ldr	r1, [pc, #264]	@ (8005830 <experimentalMode+0x114>)
 8005726:	2005      	movs	r0, #5
 8005728:	f000 f894 	bl	8005854 <logger>
	int nbc = readData(gv_data_rx);
 800572c:	4841      	ldr	r0, [pc, #260]	@ (8005834 <experimentalMode+0x118>)
 800572e:	f7ff f8c5 	bl	80048bc <readData>
 8005732:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	if(nbc <0)
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	2b00      	cmp	r3, #0
 800573c:	da04      	bge.n	8005748 <experimentalMode+0x2c>
	{
		logger(LOG_LEVEL_CRITICAL, "ERROR DATA RECEIVED");
 800573e:	493e      	ldr	r1, [pc, #248]	@ (8005838 <experimentalMode+0x11c>)
 8005740:	2005      	movs	r0, #5
 8005742:	f000 f887 	bl	8005854 <logger>
 8005746:	e069      	b.n	800581c <experimentalMode+0x100>
	}
	else  if (nbc != 0) {
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	2b00      	cmp	r3, #0
 800574e:	d065      	beq.n	800581c <experimentalMode+0x100>
		/* traitement des donnees recues */
		int res = convertDataToAx25(&data_ax25, (char *) gv_data_rx, nbc);
 8005750:	463b      	mov	r3, r7
 8005752:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005756:	4937      	ldr	r1, [pc, #220]	@ (8005834 <experimentalMode+0x118>)
 8005758:	4618      	mov	r0, r3
 800575a:	f7fd fca3 	bl	80030a4 <convertDataToAx25>
 800575e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		if (res != SUCCESS) {
 8005762:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <experimentalMode+0x56>
			logger(LOG_LEVEL_CRITICAL, "AX25 CONVESTION ISSUE");
 800576a:	4934      	ldr	r1, [pc, #208]	@ (800583c <experimentalMode+0x120>)
 800576c:	2005      	movs	r0, #5
 800576e:	f000 f871 	bl	8005854 <logger>
		}

		if (memcmp(gv_spinoConfig.spinoDesCallsign,
 8005772:	463b      	mov	r3, r7
 8005774:	2206      	movs	r2, #6
 8005776:	4619      	mov	r1, r3
 8005778:	4831      	ldr	r0, [pc, #196]	@ (8005840 <experimentalMode+0x124>)
 800577a:	f008 ff53 	bl	800e624 <memcmp>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d144      	bne.n	800580e <experimentalMode+0xf2>
				data_ax25.header.destinationAdress, 6) == 0) {
			if (data_ax25.header.ssidDestination
 8005784:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005788:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800578c:	799b      	ldrb	r3, [r3, #6]
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d114      	bne.n	80057bc <experimentalMode+0xa0>
					== (unsigned char) SSID_SPINO_TMTC) {
				logger(LOG_LEVEL_CRITICAL, "TRT COMMANDE NORMAL");
 8005792:	492c      	ldr	r1, [pc, #176]	@ (8005844 <experimentalMode+0x128>)
 8005794:	2005      	movs	r0, #5
 8005796:	f000 f85d 	bl	8005854 <logger>
				processCommand(data_ax25);
 800579a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800579e:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 80057a2:	4668      	mov	r0, sp
 80057a4:	f104 0310 	add.w	r3, r4, #16
 80057a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057ac:	4619      	mov	r1, r3
 80057ae:	f008 ffdc 	bl	800e76a <memcpy>
 80057b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057b6:	f7fe f98d 	bl	8003ad4 <processCommand>
 80057ba:	e02f      	b.n	800581c <experimentalMode+0x100>
			} else if (data_ax25.header.ssidDestination
 80057bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057c4:	799b      	ldrb	r3, [r3, #6]
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d119      	bne.n	80057fe <experimentalMode+0xe2>
					== (unsigned char) SSID_SPINO_EXPERIMENTAL) {
				logger(LOG_LEVEL_CRITICAL, "TRT COMMANDE EXPE");
 80057ca:	491f      	ldr	r1, [pc, #124]	@ (8005848 <experimentalMode+0x12c>)
 80057cc:	2005      	movs	r0, #5
 80057ce:	f000 f841 	bl	8005854 <logger>
				expBeacon.expereceived++;
 80057d2:	4b1e      	ldr	r3, [pc, #120]	@ (800584c <experimentalMode+0x130>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <experimentalMode+0x130>)
 80057da:	6053      	str	r3, [r2, #4]
				processExperimental(data_ax25);
 80057dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057e0:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 80057e4:	4668      	mov	r0, sp
 80057e6:	f104 0310 	add.w	r3, r4, #16
 80057ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057ee:	4619      	mov	r1, r3
 80057f0:	f008 ffbb 	bl	800e76a <memcpy>
 80057f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057f8:	f7ff fef6 	bl	80055e8 <processExperimental>
 80057fc:	e00e      	b.n	800581c <experimentalMode+0x100>
			} else {
				// Message not awaited   -  message dropped
				processDropMessage((char *)gv_data_rx, (unsigned short) nbc);
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005802:	b29b      	uxth	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	480b      	ldr	r0, [pc, #44]	@ (8005834 <experimentalMode+0x118>)
 8005808:	f7ff fa22 	bl	8004c50 <processDropMessage>
 800580c:	e006      	b.n	800581c <experimentalMode+0x100>
			}
		} else {
			processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	b29b      	uxth	r3, r3
 8005814:	4619      	mov	r1, r3
 8005816:	4807      	ldr	r0, [pc, #28]	@ (8005834 <experimentalMode+0x118>)
 8005818:	f7ff fa1a 	bl	8004c50 <processDropMessage>
		}
	}

	sendBeaconExpe();
 800581c:	f7ff fe72 	bl	8005504 <sendBeaconExpe>

	return gv_spino.currentState;
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <experimentalMode+0x134>)
 8005822:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
}
 8005824:	4618      	mov	r0, r3
 8005826:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}
 800582e:	bf00      	nop
 8005830:	08010cdc 	.word	0x08010cdc
 8005834:	20002a98 	.word	0x20002a98
 8005838:	08010cf0 	.word	0x08010cf0
 800583c:	08010d04 	.word	0x08010d04
 8005840:	20002584 	.word	0x20002584
 8005844:	08010d1c 	.word	0x08010d1c
 8005848:	08010d30 	.word	0x08010d30
 800584c:	20003d54 	.word	0x20003d54
 8005850:	20002590 	.word	0x20002590

08005854 <logger>:
 * \param level  define type of log
 *  \param message Ascii message
 * \return  void
 *
 */
void logger(char level, char *message) {
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]

	if (level >= gv_SelectedLogLevel) {
 8005860:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <logger+0xac>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	79fa      	ldrb	r2, [r7, #7]
 8005866:	429a      	cmp	r2, r3
 8005868:	d346      	bcc.n	80058f8 <logger+0xa4>
		gvLogIndex = (gvLogIndex + 1) % MAX_LOG;
 800586a:	4b26      	ldr	r3, [pc, #152]	@ (8005904 <logger+0xb0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	425a      	negs	r2, r3
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	f002 0207 	and.w	r2, r2, #7
 800587a:	bf58      	it	pl
 800587c:	4253      	negpl	r3, r2
 800587e:	4a21      	ldr	r2, [pc, #132]	@ (8005904 <logger+0xb0>)
 8005880:	6013      	str	r3, [r2, #0]
		logs[gvLogIndex].priority = level;
 8005882:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <logger+0xb0>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4920      	ldr	r1, [pc, #128]	@ (8005908 <logger+0xb4>)
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	440b      	add	r3, r1
 8005892:	3308      	adds	r3, #8
 8005894:	79fa      	ldrb	r2, [r7, #7]
 8005896:	701a      	strb	r2, [r3, #0]
		logs[gvLogIndex].timeStamps = gv_spino.timestamps;
 8005898:	4b1a      	ldr	r3, [pc, #104]	@ (8005904 <logger+0xb0>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b1b      	ldr	r3, [pc, #108]	@ (800590c <logger+0xb8>)
 800589e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80058a2:	4c19      	ldr	r4, [pc, #100]	@ (8005908 <logger+0xb4>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4423      	add	r3, r4
 80058ae:	e9c3 0100 	strd	r0, r1, [r3]
		logs[gvLogIndex].log[0] = 0;
 80058b2:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <logger+0xb0>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4914      	ldr	r1, [pc, #80]	@ (8005908 <logger+0xb4>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	440b      	add	r3, r1
 80058c2:	3309      	adds	r3, #9
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
		strncat(logs[gvLogIndex].log, message, MAX_SIZE_MSG_LOG - 1);
 80058c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <logger+0xb0>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	3308      	adds	r3, #8
 80058d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005908 <logger+0xb4>)
 80058d8:	4413      	add	r3, r2
 80058da:	3301      	adds	r3, #1
 80058dc:	223f      	movs	r2, #63	@ 0x3f
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f008 feb7 	bl	800e654 <strncat>
		printf("LOG : ");
 80058e6:	480a      	ldr	r0, [pc, #40]	@ (8005910 <logger+0xbc>)
 80058e8:	f008 fd00 	bl	800e2ec <iprintf>
		printf(message);
 80058ec:	6838      	ldr	r0, [r7, #0]
 80058ee:	f008 fcfd 	bl	800e2ec <iprintf>
		printf("\r\n");
 80058f2:	4808      	ldr	r0, [pc, #32]	@ (8005914 <logger+0xc0>)
 80058f4:	f008 fd62 	bl	800e3bc <puts>
	}

}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd90      	pop	{r4, r7, pc}
 8005900:	20003d64 	.word	0x20003d64
 8005904:	20003fe8 	.word	0x20003fe8
 8005908:	20003d68 	.word	0x20003d68
 800590c:	20002590 	.word	0x20002590
 8005910:	08010d44 	.word	0x08010d44
 8005914:	08010d4c 	.word	0x08010d4c

08005918 <getLastLog>:
 * 
 * \todo : optimise message lenght in response
 *
 */

unsigned char getLastLog(t_tc_response *resp) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	logger(LOG_LEVEL_INFO, " GET_LAST_LOG_MESSAGE");
 8005920:	4915      	ldr	r1, [pc, #84]	@ (8005978 <getLastLog+0x60>)
 8005922:	2000      	movs	r0, #0
 8005924:	f7ff ff96 	bl	8005854 <logger>
	unsigned short taille_message = (unsigned short) strlen(
			logs[gvLogIndex].log) + SIZE_S_LOG + 1; // +1 pour inclure le 0
 8005928:	4b14      	ldr	r3, [pc, #80]	@ (800597c <getLastLog+0x64>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	3308      	adds	r3, #8
 8005936:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <getLastLog+0x68>)
 8005938:	4413      	add	r3, r2
 800593a:	3301      	adds	r3, #1
	unsigned short taille_message = (unsigned short) strlen(
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fc9f 	bl	8000280 <strlen>
 8005942:	4603      	mov	r3, r0
 8005944:	b29b      	uxth	r3, r3
 8005946:	330a      	adds	r3, #10
 8005948:	81fb      	strh	r3, [r7, #14]
	memcpy(resp->parameter, &logs[gvLogIndex], taille_message);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f103 0012 	add.w	r0, r3, #18
 8005950:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <getLastLog+0x64>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	4a08      	ldr	r2, [pc, #32]	@ (8005980 <getLastLog+0x68>)
 800595e:	4413      	add	r3, r2
 8005960:	89fa      	ldrh	r2, [r7, #14]
 8005962:	4619      	mov	r1, r3
 8005964:	f008 ff01 	bl	800e76a <memcpy>
	resp->size = taille_message;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	89fa      	ldrh	r2, [r7, #14]
 800596c:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 800596e:	2300      	movs	r3, #0

}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	08010d50 	.word	0x08010d50
 800597c:	20003fe8 	.word	0x20003fe8
 8005980:	20003d68 	.word	0x20003d68

08005984 <getAllLogs>:
 * 
 * \todo : suprimer répétition dernier logs 
 * 
 */

unsigned char getAllLogs(t_tc_response *resp) {
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 800598a:	af42      	add	r7, sp, #264	@ 0x108
 800598c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005990:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005994:	6018      	str	r0, [r3, #0]
	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerTlm;
 8005996:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800599a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800599e:	4a63      	ldr	r2, [pc, #396]	@ (8005b2c <getAllLogs+0x1a8>)
 80059a0:	461c      	mov	r4, r3
 80059a2:	4613      	mov	r3, r2
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	resp->header.error_code = SUCCESS;
 80059ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	715a      	strb	r2, [r3, #5]
	resp->header.cmd_id =  GET_LOG;
 80059bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2286      	movs	r2, #134	@ 0x86
 80059c8:	805a      	strh	r2, [r3, #2]
	resp->header.responseType = RESULT_CMD;
 80059ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2280      	movs	r2, #128	@ 0x80
 80059d6:	711a      	strb	r2, [r3, #4]
	resp->header.size =  TC_REPONSE_HEADER_SIZE;
 80059d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2212      	movs	r2, #18
 80059e4:	801a      	strh	r2, [r3, #0]
	resp->header.spare = (short) 0x01020304;
 80059e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f44f 7241 	mov.w	r2, #772	@ 0x304
 80059f4:	80da      	strh	r2, [r3, #6]

	logger(LOG_LEVEL_CRITICAL, " GET_ALL_LOG_MESSAGE");
 80059f6:	494e      	ldr	r1, [pc, #312]	@ (8005b30 <getAllLogs+0x1ac>)
 80059f8:	2005      	movs	r0, #5
 80059fa:	f7ff ff2b 	bl	8005854 <logger>
	int i = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	for (i = 0; i < MAX_LOG; i++) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a0a:	e077      	b.n	8005afc <getAllLogs+0x178>

		unsigned short taille_message = (unsigned short) strlen(logs[i].log)
 8005a0c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3308      	adds	r3, #8
 8005a1a:	4a46      	ldr	r2, [pc, #280]	@ (8005b34 <getAllLogs+0x1b0>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3301      	adds	r3, #1
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fa fc2d 	bl	8000280 <strlen>
 8005a26:	4603      	mov	r3, r0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	330a      	adds	r3, #10
 8005a2c:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
				+ SIZE_S_LOG + 1; // +1 pour inclure le 0
		memcpy(resp->parameter, &logs[i], taille_message);
 8005a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a34:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f103 0012 	add.w	r0, r3, #18
 8005a3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	4a3a      	ldr	r2, [pc, #232]	@ (8005b34 <getAllLogs+0x1b0>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8005a52:	4619      	mov	r1, r3
 8005a54:	f008 fe89 	bl	800e76a <memcpy>
		resp->size = taille_message;
 8005a58:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8005a66:	821a      	strh	r2, [r3, #16]
		resp->header.size =  TC_REPONSE_HEADER_SIZE+taille_message;
 8005a68:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8005a6c:	3312      	adds	r3, #18
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	801a      	strh	r2, [r3, #0]
		resp->header.timeStamp =  gv_spino.timestamps;
 8005a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b38 <getAllLogs+0x1b4>)
 8005a7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005a82:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8005a86:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8005a8a:	6809      	ldr	r1, [r1, #0]
 8005a8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		memcpy(ax25Frame.data, resp, TC_REPONSE_HEADER_SIZE + resp->size);
 8005a90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	8a1b      	ldrh	r3, [r3, #16]
 8005a9c:	f103 0112 	add.w	r1, r3, #18
 8005aa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005aa4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005aa8:	f107 0208 	add.w	r2, r7, #8
 8005aac:	f102 0010 	add.w	r0, r2, #16
 8005ab0:	460a      	mov	r2, r1
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	f008 fe59 	bl	800e76a <memcpy>
		/* envoyer la reponse de la  commande */
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp->size);
 8005ab8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005abc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	8a1b      	ldrh	r3, [r3, #16]
 8005ac4:	3312      	adds	r3, #18
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005acc:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8005ad0:	9240      	str	r2, [sp, #256]	@ 0x100
 8005ad2:	4668      	mov	r0, sp
 8005ad4:	f104 0310 	add.w	r3, r4, #16
 8005ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005adc:	4619      	mov	r1, r3
 8005ade:	f008 fe44 	bl	800e76a <memcpy>
 8005ae2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ae6:	f7fe ffed 	bl	8004ac4 <writeData>

		HAL_Delay(1000);
 8005aea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005aee:	f001 fda7 	bl	8007640 <HAL_Delay>
	for (i = 0; i < MAX_LOG; i++) {
 8005af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af6:	3301      	adds	r3, #1
 8005af8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b00:	2b07      	cmp	r3, #7
 8005b02:	dd83      	ble.n	8005a0c <getAllLogs+0x88>
	}
	/* return success of the command */
	resp->header.cmd_id =  GET_ALL_LOG;
 8005b04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b08:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2283      	movs	r2, #131	@ 0x83
 8005b10:	805a      	strh	r2, [r3, #2]
	resp->size = 0;
 8005b12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8005b20:	2300      	movs	r3, #0

}
 8005b22:	4618      	mov	r0, r3
 8005b24:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}
 8005b2c:	200025c8 	.word	0x200025c8
 8005b30:	08010d68 	.word	0x08010d68
 8005b34:	20003d68 	.word	0x20003d68
 8005b38:	20002590 	.word	0x20002590

08005b3c <initialise>:
 *
 * \return  SUCCESS 
 * 
 */

unsigned char initialise() {
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
	int i = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
	int k = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]

	gvMailboxes.indexfreeMailbox = 0;
 8005b4e:	4b53      	ldr	r3, [pc, #332]	@ (8005c9c <initialise+0x160>)
 8005b50:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005b54:	461a      	mov	r2, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
	gvMailboxes.usedMailboxNumber = 0;
 8005b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005c9c <initialise+0x160>)
 8005b5e:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005b62:	461a      	mov	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300


	for (i = 0; i < MAX_MAILBOX; i++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e089      	b.n	8005c84 <initialise+0x148>
		gvMailboxes.mailbox[i].indexFreeMessage = MAX_MAILBOX - 1;
 8005b70:	4a4a      	ldr	r2, [pc, #296]	@ (8005c9c <initialise+0x160>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3302      	adds	r3, #2
 8005b80:	221f      	movs	r2, #31
 8005b82:	701a      	strb	r2, [r3, #0]
		gvMailboxes.mailbox[i].indexNextMessage = 0;
 8005b84:	4a45      	ldr	r2, [pc, #276]	@ (8005c9c <initialise+0x160>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	4413      	add	r3, r2
 8005b92:	3301      	adds	r3, #1
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
		gvMailboxes.mailbox[i].messageNumber = 0;
 8005b98:	4a40      	ldr	r2, [pc, #256]	@ (8005c9c <initialise+0x160>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
		gvMailboxes.mailbox[i].timestampCreation = 0;
 8005baa:	4a3c      	ldr	r2, [pc, #240]	@ (8005c9c <initialise+0x160>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f103 0110 	add.w	r1, r3, #16
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9c1 2300 	strd	r2, r3, [r1]

		for (j = 0; j < CALLSIGN_SIZE; j++) {
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	e00e      	b.n	8005bec <initialise+0xb0>
			gvMailboxes.mailbox[i].callsign[j] = ' ';
 8005bce:	4a33      	ldr	r2, [pc, #204]	@ (8005c9c <initialise+0x160>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	441a      	add	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	3303      	adds	r3, #3
 8005be2:	2220      	movs	r2, #32
 8005be4:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < CALLSIGN_SIZE; j++) {
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	dded      	ble.n	8005bce <initialise+0x92>
		}
		for (j = 0; j < MAX_MESSAGE; j++) {
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	e03f      	b.n	8005c78 <initialise+0x13c>
			for (k = 0; k < MAX_LENGHT_MESSAGE; k++) {
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e013      	b.n	8005c26 <initialise+0xea>
				gvMailboxes.mailbox[i].messages[j].message[k] = 0;
 8005bfe:	4927      	ldr	r1, [pc, #156]	@ (8005c9c <initialise+0x160>)
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	20e8      	movs	r0, #232	@ 0xe8
 8005c06:	fb00 f202 	mul.w	r2, r0, r2
 8005c0a:	f640 6098 	movw	r0, #3736	@ 0xe98
 8005c0e:	fb00 f303 	mul.w	r3, r0, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	18ca      	adds	r2, r1, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	3322      	adds	r3, #34	@ 0x22
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
			for (k = 0; k < MAX_LENGHT_MESSAGE; k++) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3301      	adds	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2bdb      	cmp	r3, #219	@ 0xdb
 8005c2a:	dde8      	ble.n	8005bfe <initialise+0xc2>
			}

			gvMailboxes.mailbox[i].messages[j].size = 0;
 8005c2c:	491b      	ldr	r1, [pc, #108]	@ (8005c9c <initialise+0x160>)
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	20e8      	movs	r0, #232	@ 0xe8
 8005c34:	fb00 f202 	mul.w	r2, r0, r2
 8005c38:	f640 6098 	movw	r0, #3736	@ 0xe98
 8005c3c:	fb00 f303 	mul.w	r3, r0, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	440b      	add	r3, r1
 8005c44:	3320      	adds	r3, #32
 8005c46:	2200      	movs	r2, #0
 8005c48:	801a      	strh	r2, [r3, #0]
			gvMailboxes.mailbox[i].messages[j].timestamps = 0;
 8005c4a:	4914      	ldr	r1, [pc, #80]	@ (8005c9c <initialise+0x160>)
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	20e8      	movs	r0, #232	@ 0xe8
 8005c52:	fb00 f202 	mul.w	r2, r0, r2
 8005c56:	f640 6098 	movw	r0, #3736	@ 0xe98
 8005c5a:	fb00 f303 	mul.w	r3, r0, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	440b      	add	r3, r1
 8005c62:	f103 0118 	add.w	r1, r3, #24
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	e9c1 2300 	strd	r2, r3, [r1]
		for (j = 0; j < MAX_MESSAGE; j++) {
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	ddbc      	ble.n	8005bf8 <initialise+0xbc>
	for (i = 0; i < MAX_MAILBOX; i++) {
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b1f      	cmp	r3, #31
 8005c88:	f77f af72 	ble.w	8005b70 <initialise+0x34>
		}
	}
	return SUCCESS;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20004030 	.word	0x20004030

08005ca0 <addMessage>:
 * \return  SUCCESS else ERROR_MAILBOX_FULL, 
 * 
 * 
 */
unsigned char addMessage(unsigned char *callsign, char *message,
		const unsigned short sizemMessage) {
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b089      	sub	sp, #36	@ 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
	unsigned char reponse = SUCCESS;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	77fb      	strb	r3, [r7, #31]
	s_mailbox *pMailbox;
	// create 1st mailbox
	if (gvMailboxes.usedMailboxNumber == 0) {
 8005cb2:	4bad      	ldr	r3, [pc, #692]	@ (8005f68 <addMessage+0x2c8>)
 8005cb4:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005cb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d16a      	bne.n	8005d96 <addMessage+0xf6>

		pMailbox = &gvMailboxes.mailbox[gvMailboxes.indexfreeMailbox];
 8005cc0:	4ba9      	ldr	r3, [pc, #676]	@ (8005f68 <addMessage+0x2c8>)
 8005cc2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005cc6:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8005cca:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	4aa5      	ldr	r2, [pc, #660]	@ (8005f68 <addMessage+0x2c8>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
		// creation de la mailbox
		memcpy(pMailbox->callsign, callsign, 6);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3303      	adds	r3, #3
 8005cdc:	2206      	movs	r2, #6
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f008 fd42 	bl	800e76a <memcpy>

		memcpy(pMailbox->messages[pMailbox->indexNextMessage].message, message,
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	461a      	mov	r2, r3
 8005cec:	23e8      	movs	r3, #232	@ 0xe8
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f008 fd33 	bl	800e76a <memcpy>
				sizemMessage);
		pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	461c      	mov	r4, r3
				gv_spino.timestamps;
 8005d0a:	4b98      	ldr	r3, [pc, #608]	@ (8005f6c <addMessage+0x2cc>)
 8005d0c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
		pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	21e8      	movs	r1, #232	@ 0xe8
 8005d14:	fb04 f101 	mul.w	r1, r4, r1
 8005d18:	4401      	add	r1, r0
 8005d1a:	3118      	adds	r1, #24
 8005d1c:	e9c1 2300 	strd	r2, r3, [r1]
		pMailbox->messages[pMailbox->indexNextMessage].size = sizemMessage;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	4619      	mov	r1, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	23e8      	movs	r3, #232	@ 0xe8
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3320      	adds	r3, #32
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	801a      	strh	r2, [r3, #0]

		pMailbox->indexNextMessage =
				(unsigned char) ((pMailbox->indexNextMessage + 1) % MAX_MAILBOX);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	425a      	negs	r2, r3
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	f002 021f 	and.w	r2, r2, #31
 8005d46:	bf58      	it	pl
 8005d48:	4253      	negpl	r3, r2
 8005d4a:	b2da      	uxtb	r2, r3
		pMailbox->indexNextMessage =
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	705a      	strb	r2, [r3, #1]
		pMailbox->messageNumber++;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	701a      	strb	r2, [r3, #0]
		pMailbox->timestampCreation = gv_spino.timestamps;
 8005d5c:	4b83      	ldr	r3, [pc, #524]	@ (8005f6c <addMessage+0x2cc>)
 8005d5e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005d62:	6939      	ldr	r1, [r7, #16]
 8005d64:	e9c1 2304 	strd	r2, r3, [r1, #16]

		gvMailboxes.usedMailboxNumber++;
 8005d68:	4b7f      	ldr	r3, [pc, #508]	@ (8005f68 <addMessage+0x2c8>)
 8005d6a:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005d6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a7c      	ldr	r2, [pc, #496]	@ (8005f68 <addMessage+0x2c8>)
 8005d76:	f502 32e8 	add.w	r2, r2, #118784	@ 0x1d000
 8005d7a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
		gvMailboxes.indexfreeMailbox++;
 8005d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8005f68 <addMessage+0x2c8>)
 8005d80:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005d84:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8005d88:	3301      	adds	r3, #1
 8005d8a:	4a77      	ldr	r2, [pc, #476]	@ (8005f68 <addMessage+0x2c8>)
 8005d8c:	f502 32e8 	add.w	r2, r2, #118784	@ 0x1d000
 8005d90:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8005d94:	e0ff      	b.n	8005f96 <addMessage+0x2f6>
	} else { /* recherche si BAL existe */

		int i = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
		char find = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]

		while ((i < MAX_MAILBOX) & (find == 0)) {
 8005d9e:	e05e      	b.n	8005e5e <addMessage+0x1be>
			//if (gvMailboxes.mailbox[i].messageNumber != 0)
			//{
			if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0))
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	4a6f      	ldr	r2, [pc, #444]	@ (8005f68 <addMessage+0x2c8>)
 8005dac:	4413      	add	r3, r2
 8005dae:	3303      	adds	r3, #3
 8005db0:	2206      	movs	r2, #6
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f008 fc35 	bl	800e624 <memcmp>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d14b      	bne.n	8005e58 <addMessage+0x1b8>

			{  // ajout de message

				pMailbox = &gvMailboxes.mailbox[i];
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	4a67      	ldr	r2, [pc, #412]	@ (8005f68 <addMessage+0x2c8>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
				// verifie place dispo
				if (pMailbox->messageNumber < MAX_MESSAGE) {
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d83b      	bhi.n	8005e50 <addMessage+0x1b0>
					memcpy(
							pMailbox->messages[pMailbox->indexNextMessage].message,
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	23e8      	movs	r3, #232	@ 0xe8
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	3320      	adds	r3, #32
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	3302      	adds	r3, #2
					memcpy(
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f008 fcba 	bl	800e76a <memcpy>
							message, sizemMessage);
					pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	461c      	mov	r4, r3
							gv_spino.timestamps;
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f6c <addMessage+0x2cc>)
 8005dfe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
					pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005e02:	6938      	ldr	r0, [r7, #16]
 8005e04:	21e8      	movs	r1, #232	@ 0xe8
 8005e06:	fb04 f101 	mul.w	r1, r4, r1
 8005e0a:	4401      	add	r1, r0
 8005e0c:	3118      	adds	r1, #24
 8005e0e:	e9c1 2300 	strd	r2, r3, [r1]
					pMailbox->messages[pMailbox->indexNextMessage].size =
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	4619      	mov	r1, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	23e8      	movs	r3, #232	@ 0xe8
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	3320      	adds	r3, #32
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	801a      	strh	r2, [r3, #0]
							sizemMessage;

					pMailbox->indexNextMessage =
							(unsigned char) ((pMailbox->indexNextMessage + 1)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	3301      	adds	r3, #1
									% MAX_MAILBOX);
 8005e2e:	425a      	negs	r2, r3
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	f002 021f 	and.w	r2, r2, #31
 8005e38:	bf58      	it	pl
 8005e3a:	4253      	negpl	r3, r2
							(unsigned char) ((pMailbox->indexNextMessage + 1)
 8005e3c:	b2da      	uxtb	r2, r3
					pMailbox->indexNextMessage =
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	705a      	strb	r2, [r3, #1]
					pMailbox->messageNumber++;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e001      	b.n	8005e54 <addMessage+0x1b4>

				} else {
					reponse = ERROR_MAILBOX_FULL;
 8005e50:	230a      	movs	r3, #10
 8005e52:	77fb      	strb	r3, [r7, #31]
				}
				find = 1;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75fb      	strb	r3, [r7, #23]
			}
			//}
			i++;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61bb      	str	r3, [r7, #24]
		while ((i < MAX_MAILBOX) & (find == 0)) {
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b1f      	cmp	r3, #31
 8005e62:	bfd4      	ite	le
 8005e64:	2301      	movle	r3, #1
 8005e66:	2300      	movgt	r3, #0
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	4013      	ands	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d190      	bne.n	8005da0 <addMessage+0x100>
		}

		if (find == 0) {
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 8088 	bne.w	8005f96 <addMessage+0x2f6>
			// creation BAL + ajout Message

			if (gvMailboxes.usedMailboxNumber < MAX_MAILBOX) {
 8005e86:	4b38      	ldr	r3, [pc, #224]	@ (8005f68 <addMessage+0x2c8>)
 8005e88:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005e8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8005e90:	2b1f      	cmp	r3, #31
 8005e92:	f300 8080 	bgt.w	8005f96 <addMessage+0x2f6>
				// reste de la place
				pMailbox = &gvMailboxes.mailbox[gvMailboxes.indexfreeMailbox];
 8005e96:	4b34      	ldr	r3, [pc, #208]	@ (8005f68 <addMessage+0x2c8>)
 8005e98:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005e9c:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8005ea0:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f68 <addMessage+0x2c8>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
				// creation de la mailbox
				memcpy(pMailbox->callsign, callsign, 6);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3303      	adds	r3, #3
 8005eb2:	2206      	movs	r2, #6
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f008 fc57 	bl	800e76a <memcpy>

				memcpy(pMailbox->messages[pMailbox->indexNextMessage].message,
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	23e8      	movs	r3, #232	@ 0xe8
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	3320      	adds	r3, #32
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3302      	adds	r3, #2
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f008 fc48 	bl	800e76a <memcpy>
						message, sizemMessage);
				pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	461c      	mov	r4, r3
						gv_spino.timestamps;
 8005ee0:	4b22      	ldr	r3, [pc, #136]	@ (8005f6c <addMessage+0x2cc>)
 8005ee2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
				pMailbox->messages[pMailbox->indexNextMessage].timestamps =
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	21e8      	movs	r1, #232	@ 0xe8
 8005eea:	fb04 f101 	mul.w	r1, r4, r1
 8005eee:	4401      	add	r1, r0
 8005ef0:	3118      	adds	r1, #24
 8005ef2:	e9c1 2300 	strd	r2, r3, [r1]
				pMailbox->messages[pMailbox->indexNextMessage].size =
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	4619      	mov	r1, r3
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	23e8      	movs	r3, #232	@ 0xe8
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	3320      	adds	r3, #32
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	801a      	strh	r2, [r3, #0]
						sizemMessage;
				pMailbox->indexNextMessage =
						(unsigned char) ((pMailbox->indexNextMessage + 1)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	3301      	adds	r3, #1
								% MAX_MAILBOX);
 8005f12:	425a      	negs	r2, r3
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	f002 021f 	and.w	r2, r2, #31
 8005f1c:	bf58      	it	pl
 8005f1e:	4253      	negpl	r3, r2
						(unsigned char) ((pMailbox->indexNextMessage + 1)
 8005f20:	b2da      	uxtb	r2, r3
				pMailbox->indexNextMessage =
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	705a      	strb	r2, [r3, #1]

				pMailbox->messageNumber++;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	701a      	strb	r2, [r3, #0]
				pMailbox->timestampCreation = gv_spino.timestamps;
 8005f32:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <addMessage+0x2cc>)
 8005f34:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005f38:	6939      	ldr	r1, [r7, #16]
 8005f3a:	e9c1 2304 	strd	r2, r3, [r1, #16]

				// recher de la nouvelle mailbox libre
				while ((i < MAX_MAILBOX) & (find == 0)) {
 8005f3e:	e01a      	b.n	8005f76 <addMessage+0x2d6>
					if (gvMailboxes.mailbox[i].messageNumber == 0) {
 8005f40:	4a09      	ldr	r2, [pc, #36]	@ (8005f68 <addMessage+0x2c8>)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f640 6198 	movw	r1, #3736	@ 0xe98
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <addMessage+0x2d0>
						find = 1;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
						gvMailboxes.indexfreeMailbox = i;
 8005f58:	4b03      	ldr	r3, [pc, #12]	@ (8005f68 <addMessage+0x2c8>)
 8005f5a:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8005f5e:	461a      	mov	r2, r3
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8005f66:	e006      	b.n	8005f76 <addMessage+0x2d6>
 8005f68:	20004030 	.word	0x20004030
 8005f6c:	20002590 	.word	0x20002590
					} else {
						i++;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61bb      	str	r3, [r7, #24]
				while ((i < MAX_MAILBOX) & (find == 0)) {
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b1f      	cmp	r3, #31
 8005f7a:	bfd4      	ite	le
 8005f7c:	2301      	movle	r3, #1
 8005f7e:	2300      	movgt	r3, #0
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1d4      	bne.n	8005f40 <addMessage+0x2a0>

			}

		}
	}
	return reponse;
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3724      	adds	r7, #36	@ 0x24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd90      	pop	{r4, r7, pc}

08005fa0 <deletteMessage>:
 * \return  SUCCESS or ERROR_MAILBOX_EMPTY
 * 
 */

static unsigned char deletteMessage(unsigned char *callsign,
		t_tc_response *resp) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	int i = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
	int find = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
	s_mailbox *pMailbox;
	unsigned char reponse = SUCCESS;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
	while ((i < MAX_MAILBOX) & (find == 0)) {
 8005fb6:	e036      	b.n	8006026 <deletteMessage+0x86>

		if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0)) { // delete message
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	4a27      	ldr	r2, [pc, #156]	@ (8006060 <deletteMessage+0xc0>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3303      	adds	r3, #3
 8005fc8:	2206      	movs	r2, #6
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f008 fb29 	bl	800e624 <memcmp>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d123      	bne.n	8006020 <deletteMessage+0x80>
			find = 1;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
			pMailbox = &gvMailboxes.mailbox[i];
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f640 6298 	movw	r2, #3736	@ 0xe98
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8006060 <deletteMessage+0xc0>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
			if (gvMailboxes.mailbox->messageNumber > 0) {
 8005fec:	4b1c      	ldr	r3, [pc, #112]	@ (8006060 <deletteMessage+0xc0>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <deletteMessage+0x7c>
				pMailbox->indexFreeMessage =
						(unsigned char) ((pMailbox->indexFreeMessage + 1)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	789b      	ldrb	r3, [r3, #2]
 8005ff8:	3301      	adds	r3, #1
								% MAX_MESSAGE);
 8005ffa:	425a      	negs	r2, r3
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	f002 020f 	and.w	r2, r2, #15
 8006004:	bf58      	it	pl
 8006006:	4253      	negpl	r3, r2
						(unsigned char) ((pMailbox->indexFreeMessage + 1)
 8006008:	b2da      	uxtb	r2, r3
				pMailbox->indexFreeMessage =
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	709a      	strb	r2, [r3, #2]
				pMailbox->messageNumber--;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e001      	b.n	8006020 <deletteMessage+0x80>

			} else {
				reponse = ERROR_MAILBOX_EMPTY;
 800601c:	230c      	movs	r3, #12
 800601e:	73fb      	strb	r3, [r7, #15]

			}

		}
		i++;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
	while ((i < MAX_MAILBOX) & (find == 0)) {
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b1f      	cmp	r3, #31
 800602a:	bfd4      	ite	le
 800602c:	2301      	movle	r3, #1
 800602e:	2300      	movgt	r3, #0
 8006030:	b2da      	uxtb	r2, r3
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	4013      	ands	r3, r2
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1b8      	bne.n	8005fb8 <deletteMessage+0x18>

	}

	if (find == 0) {
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <deletteMessage+0xb0>
		reponse = ERROR_MAILBOX_NOT_FOUND;
 800604c:	230b      	movs	r3, #11
 800604e:	73fb      	strb	r3, [r7, #15]
	}

	resp->size = 0;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	821a      	strh	r2, [r3, #16]

	return reponse;
 8006056:	7bfb      	ldrb	r3, [r7, #15]

}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20004030 	.word	0x20004030

08006064 <getListMailbox>:
 * \return  SUCCESS else ERROR_MAILBOX_FULL, 
 * 
 * 
 */

unsigned char getListMailbox(t_tc_response *resp) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b0bc      	sub	sp, #240	@ 0xf0
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	s_list_mailbox list[MAX_MAILBOX];
	unsigned char response = SUCCESS;
 800606c:	2300      	movs	r3, #0
 800606e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
	int i;

	for (i = 0; i < MAX_MAILBOX; i++) {
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006078:	e02c      	b.n	80060d4 <getListMailbox+0x70>

		memcpy(list[i].callsign, gvMailboxes.mailbox[i].callsign, (int) 6);
 800607a:	f107 0108 	add.w	r1, r7, #8
 800607e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	18c8      	adds	r0, r1, r3
 800608a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800608e:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <getListMailbox+0xa0>)
 8006098:	4413      	add	r3, r2
 800609a:	3303      	adds	r3, #3
 800609c:	2206      	movs	r2, #6
 800609e:	4619      	mov	r1, r3
 80060a0:	f008 fb63 	bl	800e76a <memcpy>
		list[i].nb_message = gvMailboxes.mailbox[i].messageNumber;
 80060a4:	4a17      	ldr	r2, [pc, #92]	@ (8006104 <getListMailbox+0xa0>)
 80060a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80060aa:	f640 6198 	movw	r1, #3736	@ 0xe98
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	33f0      	adds	r3, #240	@ 0xf0
 80060c2:	443b      	add	r3, r7
 80060c4:	3be2      	subs	r3, #226	@ 0xe2
 80060c6:	460a      	mov	r2, r1
 80060c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_MAILBOX; i++) {
 80060ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80060ce:	3301      	adds	r3, #1
 80060d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80060d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80060d8:	2b1f      	cmp	r3, #31
 80060da:	ddce      	ble.n	800607a <getListMailbox+0x16>

	}

	resp->size = sizeof(s_list_mailbox) * MAX_MAILBOX;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	22e0      	movs	r2, #224	@ 0xe0
 80060e0:	821a      	strh	r2, [r3, #16]
	memcpy(resp->parameter, list, resp->size);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 0012 	add.w	r0, r3, #18
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8a1b      	ldrh	r3, [r3, #16]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4619      	mov	r1, r3
 80060f4:	f008 fb39 	bl	800e76a <memcpy>

	return response;
 80060f8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	37f0      	adds	r7, #240	@ 0xf0
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20004030 	.word	0x20004030

08006108 <deleteMailBox>:
 *
 * \return  SUCCESS else ERROR_MAILBOX_NOT_FOUND, 
 * 
 * 
 */
unsigned char deleteMailBox(unsigned char *callsign) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
	int j = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	61bb      	str	r3, [r7, #24]
	int find = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
	s_mailbox *pMailbox;
	unsigned char reponse = SUCCESS;
 800611c:	2300      	movs	r3, #0
 800611e:	74fb      	strb	r3, [r7, #19]

	while ((i < MAX_MAILBOX) & (find == 0)) {
 8006120:	e04d      	b.n	80061be <deleteMailBox+0xb6>

		if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0)) { // delete message
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	4a31      	ldr	r2, [pc, #196]	@ (80061f4 <deleteMailBox+0xec>)
 800612e:	4413      	add	r3, r2
 8006130:	3303      	adds	r3, #3
 8006132:	2206      	movs	r2, #6
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4618      	mov	r0, r3
 8006138:	f008 fa74 	bl	800e624 <memcmp>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d13a      	bne.n	80061b8 <deleteMailBox+0xb0>

			pMailbox = &gvMailboxes.mailbox[i];
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	4a29      	ldr	r2, [pc, #164]	@ (80061f4 <deleteMailBox+0xec>)
 800614e:	4413      	add	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

			pMailbox->indexFreeMessage = MAX_MESSAGE - 1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	220f      	movs	r2, #15
 8006156:	709a      	strb	r2, [r3, #2]
			pMailbox->indexNextMessage = 0;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	705a      	strb	r2, [r3, #1]
			pMailbox->messageNumber = 0;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
			pMailbox->timestampCreation = 0;
 8006164:	68f9      	ldr	r1, [r7, #12]
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	e9c1 2304 	strd	r2, r3, [r1, #16]

			gvMailboxes.indexfreeMailbox = i;
 8006172:	4b20      	ldr	r3, [pc, #128]	@ (80061f4 <deleteMailBox+0xec>)
 8006174:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8006178:	461a      	mov	r2, r3
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
			gvMailboxes.usedMailboxNumber--;
 8006180:	4b1c      	ldr	r3, [pc, #112]	@ (80061f4 <deleteMailBox+0xec>)
 8006182:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8006186:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800618a:	3b01      	subs	r3, #1
 800618c:	4a19      	ldr	r2, [pc, #100]	@ (80061f4 <deleteMailBox+0xec>)
 800618e:	f502 32e8 	add.w	r2, r2, #118784	@ 0x1d000
 8006192:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
			for (j = 0; j < CALLSIGN_SIZE; j++) {
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e008      	b.n	80061ae <deleteMailBox+0xa6>
				pMailbox->callsign[j] = ' ';
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	3303      	adds	r3, #3
 80061a4:	2220      	movs	r2, #32
 80061a6:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < CALLSIGN_SIZE; j++) {
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	ddf3      	ble.n	800619c <deleteMailBox+0x94>
			}

			find = 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]

		}

		i++;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
	while ((i < MAX_MAILBOX) & (find == 0)) {
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2b1f      	cmp	r3, #31
 80061c2:	bfd4      	ite	le
 80061c4:	2301      	movle	r3, #1
 80061c6:	2300      	movgt	r3, #0
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	4013      	ands	r3, r2
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1a1      	bne.n	8006122 <deleteMailBox+0x1a>

	}

	if (find == 0) {
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <deleteMailBox+0xe0>
		reponse = ERROR_MAILBOX_NOT_FOUND;
 80061e4:	230b      	movs	r3, #11
 80061e6:	74fb      	strb	r3, [r7, #19]

	}

	return reponse;
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20004030 	.word	0x20004030

080061f8 <getLastMessage>:
 * 
 * 
 */

static unsigned char getLastMessage(unsigned char *callsign,
		t_tc_response *resp) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0c4      	sub	sp, #272	@ 0x110
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006206:	6018      	str	r0, [r3, #0]
 8006208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800620c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006210:	6019      	str	r1, [r3, #0]

	int i = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	int find = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	s_mailbox *pMailbox;
	unsigned char reponse = SUCCESS;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	s_get_message messagelue;

	while ((i < MAX_MAILBOX) & (find == 0)) {
 8006224:	e0ad      	b.n	8006382 <getLastMessage+0x18a>

		if (gvMailboxes.mailbox[i].messageNumber != 0) {
 8006226:	4a70      	ldr	r2, [pc, #448]	@ (80063e8 <getLastMessage+0x1f0>)
 8006228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622c:	f640 6198 	movw	r1, #3736	@ 0xe98
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	4413      	add	r3, r2
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 809d 	beq.w	8006378 <getLastMessage+0x180>

			if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0)) { // retourn  message
 800623e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006242:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a67      	ldr	r2, [pc, #412]	@ (80063e8 <getLastMessage+0x1f0>)
 800624c:	4413      	add	r3, r2
 800624e:	1cd8      	adds	r0, r3, #3
 8006250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006254:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006258:	2206      	movs	r2, #6
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	f008 f9e2 	bl	800e624 <memcmp>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 8088 	bne.w	8006378 <getLastMessage+0x180>

				pMailbox = &gvMailboxes.mailbox[i];
 8006268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800626c:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	4a5c      	ldr	r2, [pc, #368]	@ (80063e8 <getLastMessage+0x1f0>)
 8006276:	4413      	add	r3, r2
 8006278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				int message_index = ((pMailbox->indexNextMessage - 1) % MAX_MESSAGE);
 800627c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	3b01      	subs	r3, #1
 8006284:	425a      	negs	r2, r3
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	f002 020f 	and.w	r2, r2, #15
 800628e:	bf58      	it	pl
 8006290:	4253      	negpl	r3, r2
 8006292:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
				if (message_index < 0) {
 8006296:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	da02      	bge.n	80062a4 <getLastMessage+0xac>
					message_index = MAX_MESSAGE - 1;
 800629e:	230f      	movs	r3, #15
 80062a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
				}

				messagelue.index = (unsigned char) message_index;
 80062a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	739a      	strb	r2, [r3, #14]
				memcpy(messagelue.callsign, callsign, 6);
 80062b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80062c0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	6810      	ldr	r0, [r2, #0]
 80062ca:	6018      	str	r0, [r3, #0]
 80062cc:	8892      	ldrh	r2, [r2, #4]
 80062ce:	809a      	strh	r2, [r3, #4]
				messagelue.timestamps =
						pMailbox->messages[message_index].timestamps;
 80062d0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80062d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80062d8:	21e8      	movs	r1, #232	@ 0xe8
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	3318      	adds	r3, #24
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
				messagelue.timestamps =
 80062e6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80062ea:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80062ee:	e9c1 2300 	strd	r2, r3, [r1]

				memcpy(messagelue.message,
						pMailbox->messages[message_index].message,
 80062f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80062f6:	22e8      	movs	r2, #232	@ 0xe8
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
 80062fc:	3320      	adds	r3, #32
 80062fe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8006302:	4413      	add	r3, r2
 8006304:	1c99      	adds	r1, r3, #2
						pMailbox->messages[message_index].size);
 8006306:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800630a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800630e:	20e8      	movs	r0, #232	@ 0xe8
 8006310:	fb00 f303 	mul.w	r3, r0, r3
 8006314:	4413      	add	r3, r2
 8006316:	3320      	adds	r3, #32
 8006318:	881b      	ldrh	r3, [r3, #0]
				memcpy(messagelue.message,
 800631a:	461a      	mov	r2, r3
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	330f      	adds	r3, #15
 8006322:	4618      	mov	r0, r3
 8006324:	f008 fa21 	bl	800e76a <memcpy>

				resp->size = pMailbox->messages[message_index].size
 8006328:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800632c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006330:	21e8      	movs	r1, #232	@ 0xe8
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	4413      	add	r3, r2
 8006338:	3320      	adds	r3, #32
 800633a:	881b      	ldrh	r3, [r3, #0]
						+ SIZE_T_GET_MESSAGE;
 800633c:	330f      	adds	r3, #15
 800633e:	b29a      	uxth	r2, r3
				resp->size = pMailbox->messages[message_index].size
 8006340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006344:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	821a      	strh	r2, [r3, #16]
				memcpy(resp->parameter, &messagelue, resp->size);
 800634c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006350:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f103 0012 	add.w	r0, r3, #18
 800635a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800635e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	8a1b      	ldrh	r3, [r3, #16]
 8006366:	461a      	mov	r2, r3
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4619      	mov	r1, r3
 800636e:	f008 f9fc 	bl	800e76a <memcpy>
				find = 1;
 8006372:	2301      	movs	r3, #1
 8006374:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			}

		}
		i++;
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637c:	3301      	adds	r3, #1
 800637e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	while ((i < MAX_MAILBOX) & (find == 0)) {
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006386:	2b1f      	cmp	r3, #31
 8006388:	bfd4      	ite	le
 800638a:	2301      	movle	r3, #1
 800638c:	2300      	movgt	r3, #0
 800638e:	b2da      	uxtb	r2, r3
 8006390:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	4013      	ands	r3, r2
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f47f af3f 	bne.w	8006226 <getLastMessage+0x2e>

	}

	if (find == 0) {
 80063a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d114      	bne.n	80063da <getLastMessage+0x1e2>
		logger(LOG_LEVEL_INFO, "Mesage not find ");
 80063b0:	490e      	ldr	r1, [pc, #56]	@ (80063ec <getLastMessage+0x1f4>)
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7ff fa4e 	bl	8005854 <logger>
		reponse = ERROR_MAILBOX_NOT_FOUND;
 80063b8:	230b      	movs	r3, #11
 80063ba:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
		resp->size = 0;
 80063be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	821a      	strh	r2, [r3, #16]
		resp->header.error_code = ERROR_MAILBOX_NOT_FOUND;
 80063cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	220b      	movs	r2, #11
 80063d8:	715a      	strb	r2, [r3, #5]
	}

	return reponse;
 80063da:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107

}
 80063de:	4618      	mov	r0, r3
 80063e0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20004030 	.word	0x20004030
 80063ec:	08010d80 	.word	0x08010d80

080063f0 <getMessage>:
 * \return  SUCCESS else ERROR_MAILBOX_NOT_FOUND, 
 * 
 */

static unsigned char getMessage(unsigned char *callsign, unsigned char index,
		t_tc_response *resp) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b0c4      	sub	sp, #272	@ 0x110
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fe:	6018      	str	r0, [r3, #0]
 8006400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006404:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800640e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8006412:	460a      	mov	r2, r1
 8006414:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	int find = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	s_mailbox *pMailbox;
	unsigned char reponse = SUCCESS;
 8006422:	2300      	movs	r3, #0
 8006424:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	s_get_message messagelue;

	while ((i < MAX_MAILBOX) & (find == 0)) {
 8006428:	e0d6      	b.n	80065d8 <getMessage+0x1e8>

		if (gvMailboxes.mailbox[i].messageNumber != 0) {
 800642a:	4a83      	ldr	r2, [pc, #524]	@ (8006638 <getMessage+0x248>)
 800642c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006430:	f640 6198 	movw	r1, #3736	@ 0xe98
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80c6 	beq.w	80065ce <getMessage+0x1de>

			if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0)) { // retourn  message
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006446:	f640 6298 	movw	r2, #3736	@ 0xe98
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	4a7a      	ldr	r2, [pc, #488]	@ (8006638 <getMessage+0x248>)
 8006450:	4413      	add	r3, r2
 8006452:	1cd8      	adds	r0, r3, #3
 8006454:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800645c:	2206      	movs	r2, #6
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	f008 f8e0 	bl	800e624 <memcmp>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	f040 80b1 	bne.w	80065ce <getMessage+0x1de>

				pMailbox = &gvMailboxes.mailbox[i];
 800646c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006470:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	4a6f      	ldr	r2, [pc, #444]	@ (8006638 <getMessage+0x248>)
 800647a:	4413      	add	r3, r2
 800647c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

				sprintf(gvLogMsg, "Taille INDEX %d LAST %d\r\n",
						pMailbox->indexNextMessage, index);
 8006480:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006484:	785b      	ldrb	r3, [r3, #1]
				sprintf(gvLogMsg, "Taille INDEX %d LAST %d\r\n",
 8006486:	461a      	mov	r2, r3
 8006488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800648c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	496a      	ldr	r1, [pc, #424]	@ (800663c <getMessage+0x24c>)
 8006494:	486a      	ldr	r0, [pc, #424]	@ (8006640 <getMessage+0x250>)
 8006496:	f007 ffcd 	bl	800e434 <siprintf>
				logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 800649a:	4969      	ldr	r1, [pc, #420]	@ (8006640 <getMessage+0x250>)
 800649c:	2005      	movs	r0, #5
 800649e:	f7ff f9d9 	bl	8005854 <logger>
				if (pMailbox->messages[index].size != 0) {
 80064a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064a6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80064b0:	21e8      	movs	r1, #232	@ 0xe8
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	4413      	add	r3, r2
 80064b8:	3320      	adds	r3, #32
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d075      	beq.n	80065ac <getMessage+0x1bc>
					messagelue.index = index;
 80064c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80064c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80064cc:	f2a2 1205 	subw	r2, r2, #261	@ 0x105
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	739a      	strb	r2, [r3, #14]
					memcpy(messagelue.callsign, callsign, 6);
 80064d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80064dc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80064e0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	6810      	ldr	r0, [r2, #0]
 80064ea:	6018      	str	r0, [r3, #0]
 80064ec:	8892      	ldrh	r2, [r2, #4]
 80064ee:	809a      	strh	r2, [r3, #4]
					messagelue.timestamps =
							pMailbox->messages[index].timestamps;
 80064f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064f4:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80064fe:	21e8      	movs	r1, #232	@ 0xe8
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	3318      	adds	r3, #24
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
					messagelue.timestamps =
 800650c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8006510:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8006514:	e9c1 2300 	strd	r2, r3, [r1]
					memcpy(messagelue.message,
							pMailbox->messages[index].message,
 8006518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800651c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	22e8      	movs	r2, #232	@ 0xe8
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	3320      	adds	r3, #32
 800652a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800652e:	4413      	add	r3, r2
 8006530:	1c99      	adds	r1, r3, #2
							pMailbox->messages[index].size);
 8006532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006536:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8006540:	20e8      	movs	r0, #232	@ 0xe8
 8006542:	fb00 f303 	mul.w	r3, r0, r3
 8006546:	4413      	add	r3, r2
 8006548:	3320      	adds	r3, #32
 800654a:	881b      	ldrh	r3, [r3, #0]
					memcpy(messagelue.message,
 800654c:	461a      	mov	r2, r3
 800654e:	f107 0310 	add.w	r3, r7, #16
 8006552:	330f      	adds	r3, #15
 8006554:	4618      	mov	r0, r3
 8006556:	f008 f908 	bl	800e76a <memcpy>
					resp->size = pMailbox->messages[index].size
 800655a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800655e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8006568:	21e8      	movs	r1, #232	@ 0xe8
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3320      	adds	r3, #32
 8006572:	881b      	ldrh	r3, [r3, #0]
							+ SIZE_T_GET_MESSAGE;
 8006574:	330f      	adds	r3, #15
 8006576:	b29a      	uxth	r2, r3
					resp->size = pMailbox->messages[index].size
 8006578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800657c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	821a      	strh	r2, [r3, #16]
					memcpy(resp->parameter, &messagelue, resp->size);
 8006584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f103 0012 	add.w	r0, r3, #18
 8006592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	8a1b      	ldrh	r3, [r3, #16]
 800659e:	461a      	mov	r2, r3
 80065a0:	f107 0310 	add.w	r3, r7, #16
 80065a4:	4619      	mov	r1, r3
 80065a6:	f008 f8e0 	bl	800e76a <memcpy>
 80065aa:	e00d      	b.n	80065c8 <getMessage+0x1d8>
				} else {
					resp->size = 0;
 80065ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	821a      	strh	r2, [r3, #16]
					resp->header.error_code = ERROR_MESSAGE_EMPTY;
 80065ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	220f      	movs	r2, #15
 80065c6:	715a      	strb	r2, [r3, #5]
				}

				find = 1;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			}

		}
		i++;
 80065ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d2:	3301      	adds	r3, #1
 80065d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	while ((i < MAX_MAILBOX) & (find == 0)) {
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	2b1f      	cmp	r3, #31
 80065de:	bfd4      	ite	le
 80065e0:	2301      	movle	r3, #1
 80065e2:	2300      	movgt	r3, #0
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4013      	ands	r3, r2
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f af16 	bne.w	800642a <getMessage+0x3a>

	}

	if (find == 0) {
 80065fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006602:	2b00      	cmp	r3, #0
 8006604:	d110      	bne.n	8006628 <getMessage+0x238>

		reponse = ERROR_MAILBOX_NOT_FOUND;
 8006606:	230b      	movs	r3, #11
 8006608:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
		resp->size = 0;
 800660c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006610:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	821a      	strh	r2, [r3, #16]
		resp->header.error_code = ERROR_MAILBOX_NOT_FOUND;
 800661a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800661e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	220b      	movs	r2, #11
 8006626:	715a      	strb	r2, [r3, #5]
	}

	return reponse;
 8006628:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
}
 800662c:	4618      	mov	r0, r3
 800662e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20004030 	.word	0x20004030
 800663c:	08010d94 	.word	0x08010d94
 8006640:	20003fec 	.word	0x20003fec

08006644 <getAllMesage>:
 * 
 * \return  SUCCESS else ERROR_MAILBOX_NOT_FOUND, 
 * 
 */

unsigned char getAllMesage(unsigned char *callsign) {
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 800664a:	af42      	add	r7, sp, #264	@ 0x108
 800664c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006650:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8006654:	6018      	str	r0, [r3, #0]

	int i = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
	int find = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
	s_mailbox *pMailbox;
	unsigned char reponse = SUCCESS;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
	s_get_message messagelue;

	t_tc_response resp;
	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerTlm;
 8006668:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800666c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8006670:	4aa0      	ldr	r2, [pc, #640]	@ (80068f4 <getAllMesage+0x2b0>)
 8006672:	461c      	mov	r4, r3
 8006674:	4613      	mov	r3, r2
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	logger(LOG_LEVEL_CRITICAL, " GET_ALL_MESSAGE");
 8006680:	499d      	ldr	r1, [pc, #628]	@ (80068f8 <getAllMesage+0x2b4>)
 8006682:	2005      	movs	r0, #5
 8006684:	f7ff f8e6 	bl	8005854 <logger>

	memcpy(messagelue.callsign, callsign, 6);
 8006688:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800668c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006690:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8006694:	f5a2 724b 	sub.w	r2, r2, #812	@ 0x32c
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	6810      	ldr	r0, [r2, #0]
 800669e:	6018      	str	r0, [r3, #0]
 80066a0:	8892      	ldrh	r2, [r2, #4]
 80066a2:	809a      	strh	r2, [r3, #4]

	while ((i < MAX_MAILBOX) & (find == 0)) {
 80066a4:	e0f1      	b.n	800688a <getAllMesage+0x246>

		if (gvMailboxes.mailbox[i].messageNumber != 0) {
 80066a6:	4a95      	ldr	r2, [pc, #596]	@ (80068fc <getAllMesage+0x2b8>)
 80066a8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80066ac:	f640 6198 	movw	r1, #3736	@ 0xe98
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	4413      	add	r3, r2
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80e1 	beq.w	8006880 <getAllMesage+0x23c>

			if ((memcmp(gvMailboxes.mailbox[i].callsign, callsign, 6) == 0)) { // retourn  message
 80066be:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80066c2:	f640 6298 	movw	r2, #3736	@ 0xe98
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	4a8c      	ldr	r2, [pc, #560]	@ (80068fc <getAllMesage+0x2b8>)
 80066cc:	4413      	add	r3, r2
 80066ce:	1cd8      	adds	r0, r3, #3
 80066d0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80066d4:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80066d8:	2206      	movs	r2, #6
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	f007 ffa2 	bl	800e624 <memcmp>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 80cc 	bne.w	8006880 <getAllMesage+0x23c>

				pMailbox = &gvMailboxes.mailbox[i];
 80066e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80066ec:	f640 6298 	movw	r2, #3736	@ 0xe98
 80066f0:	fb02 f303 	mul.w	r3, r2, r3
 80066f4:	4a81      	ldr	r2, [pc, #516]	@ (80068fc <getAllMesage+0x2b8>)
 80066f6:	4413      	add	r3, r2
 80066f8:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320

				// envoie des messages de la boite
				unsigned char j;
				resp.header.cmd_id = CMD_MAILBOX_GET_MSG;
 80066fc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006700:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006704:	2226      	movs	r2, #38	@ 0x26
 8006706:	805a      	strh	r2, [r3, #2]
				resp.header.error_code = SUCCESS;
 8006708:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800670c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006710:	2200      	movs	r2, #0
 8006712:	715a      	strb	r2, [r3, #5]
				resp.header.responseType = RESULT_CMD;
 8006714:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006718:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800671c:	2280      	movs	r2, #128	@ 0x80
 800671e:	711a      	strb	r2, [r3, #4]
		//		resp.header.spare = 0;
				resp.header.timeStamp = gv_spino.timestamps;
 8006720:	4b77      	ldr	r3, [pc, #476]	@ (8006900 <getAllMesage+0x2bc>)
 8006722:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006726:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 800672a:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 800672e:	e9c1 2302 	strd	r2, r3, [r1, #8]
				for (j = 0; j < (unsigned char) MAX_MESSAGE; j++) {
 8006732:	2300      	movs	r3, #0
 8006734:	f887 3326 	strb.w	r3, [r7, #806]	@ 0x326
 8006738:	e09a      	b.n	8006870 <getAllMesage+0x22c>
					if (pMailbox->messages[j].size != 0) {
 800673a:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 800673e:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8006742:	21e8      	movs	r1, #232	@ 0xe8
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	3320      	adds	r3, #32
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8089 	beq.w	8006866 <getAllMesage+0x222>
						messagelue.index = j;
 8006754:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006758:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800675c:	f897 2326 	ldrb.w	r2, [r7, #806]	@ 0x326
 8006760:	739a      	strb	r2, [r3, #14]
						messagelue.timestamps =
								pMailbox->messages[j].timestamps;
 8006762:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 8006766:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 800676a:	21e8      	movs	r1, #232	@ 0xe8
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	3318      	adds	r3, #24
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
						messagelue.timestamps =
 8006778:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 800677c:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8006780:	e9c1 2300 	strd	r2, r3, [r1]
						memcpy(messagelue.message,
								pMailbox->messages[j].message,
 8006784:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 8006788:	22e8      	movs	r2, #232	@ 0xe8
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	3320      	adds	r3, #32
 8006790:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8006794:	4413      	add	r3, r2
 8006796:	1c99      	adds	r1, r3, #2
								pMailbox->messages[j].size);
 8006798:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 800679c:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80067a0:	20e8      	movs	r0, #232	@ 0xe8
 80067a2:	fb00 f303 	mul.w	r3, r0, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	3320      	adds	r3, #32
 80067aa:	881b      	ldrh	r3, [r3, #0]
						memcpy(messagelue.message,
 80067ac:	461a      	mov	r2, r3
 80067ae:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067b2:	330f      	adds	r3, #15
 80067b4:	4618      	mov	r0, r3
 80067b6:	f007 ffd8 	bl	800e76a <memcpy>
						resp.size = pMailbox->messages[j].size
 80067ba:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 80067be:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80067c2:	21e8      	movs	r1, #232	@ 0xe8
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	3320      	adds	r3, #32
 80067cc:	881b      	ldrh	r3, [r3, #0]
								+ SIZE_T_GET_MESSAGE;
 80067ce:	330f      	adds	r3, #15
 80067d0:	b29a      	uxth	r2, r3
						resp.size = pMailbox->messages[j].size
 80067d2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80067d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80067da:	821a      	strh	r2, [r3, #16]
						resp.header.size =  TC_REPONSE_HEADER_SIZE + resp.size;
 80067dc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80067e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80067e4:	8a1b      	ldrh	r3, [r3, #16]
 80067e6:	3312      	adds	r3, #18
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80067ee:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80067f2:	801a      	strh	r2, [r3, #0]
						memcpy(resp.parameter, &messagelue, resp.size);
 80067f4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80067f8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80067fc:	8a1b      	ldrh	r3, [r3, #16]
 80067fe:	461a      	mov	r2, r3
 8006800:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006804:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006808:	3312      	adds	r3, #18
 800680a:	4618      	mov	r0, r3
 800680c:	f007 ffad 	bl	800e76a <memcpy>
						memcpy(ax25Frame.data, &resp,
								TC_REPONSE_HEADER_SIZE + resp.size);
 8006810:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006814:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006818:	8a1b      	ldrh	r3, [r3, #16]
						memcpy(ax25Frame.data, &resp,
 800681a:	f103 0212 	add.w	r2, r3, #18
 800681e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	3310      	adds	r3, #16
 8006828:	4618      	mov	r0, r3
 800682a:	f007 ff9e 	bl	800e76a <memcpy>
						/* envoyer la reponse de la  commande */
						writeData(ax25Frame,
								TC_REPONSE_HEADER_SIZE + resp.size);
 800682e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006832:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006836:	8a1b      	ldrh	r3, [r3, #16]
 8006838:	3312      	adds	r3, #18
						writeData(ax25Frame,
 800683a:	461a      	mov	r2, r3
 800683c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8006840:	f5a3 744a 	sub.w	r4, r3, #808	@ 0x328
 8006844:	9240      	str	r2, [sp, #256]	@ 0x100
 8006846:	4668      	mov	r0, sp
 8006848:	f104 0310 	add.w	r3, r4, #16
 800684c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006850:	4619      	mov	r1, r3
 8006852:	f007 ff8a 	bl	800e76a <memcpy>
 8006856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800685a:	f7fe f933 	bl	8004ac4 <writeData>
						HAL_Delay(1000);
 800685e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006862:	f000 feed 	bl	8007640 <HAL_Delay>
				for (j = 0; j < (unsigned char) MAX_MESSAGE; j++) {
 8006866:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 800686a:	3301      	adds	r3, #1
 800686c:	f887 3326 	strb.w	r3, [r7, #806]	@ 0x326
 8006870:	f897 3326 	ldrb.w	r3, [r7, #806]	@ 0x326
 8006874:	2b0f      	cmp	r3, #15
 8006876:	f67f af60 	bls.w	800673a <getAllMesage+0xf6>
					}
				}

				find = 1;
 800687a:	2301      	movs	r3, #1
 800687c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328

			}

		}
		i++;
 8006880:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8006884:	3301      	adds	r3, #1
 8006886:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
	while ((i < MAX_MAILBOX) & (find == 0)) {
 800688a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800688e:	2b1f      	cmp	r3, #31
 8006890:	bfd4      	ite	le
 8006892:	2301      	movle	r3, #1
 8006894:	2300      	movgt	r3, #0
 8006896:	b2da      	uxtb	r2, r3
 8006898:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	4013      	ands	r3, r2
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f aefb 	bne.w	80066a6 <getAllMesage+0x62>

	}

	if (find == 0) {
 80068b0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <getAllMesage+0x27c>

		reponse = ERROR_MAILBOX_NOT_FOUND;
 80068b8:	230b      	movs	r3, #11
 80068ba:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
 80068be:	e011      	b.n	80068e4 <getAllMesage+0x2a0>

	} else
	{
		resp.size=0;
 80068c0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80068c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80068c8:	2200      	movs	r2, #0
 80068ca:	821a      	strh	r2, [r3, #16]
		resp.header.size =  TC_REPONSE_HEADER_SIZE + resp.size;
 80068cc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80068d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80068d4:	8a1b      	ldrh	r3, [r3, #16]
 80068d6:	3312      	adds	r3, #18
 80068d8:	b29a      	uxth	r2, r3
 80068da:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80068de:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80068e2:	801a      	strh	r2, [r3, #0]
	}

	return reponse;
 80068e4:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	f507 774d 	add.w	r7, r7, #820	@ 0x334
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	bf00      	nop
 80068f4:	200025c8 	.word	0x200025c8
 80068f8:	08010db0 	.word	0x08010db0
 80068fc:	20004030 	.word	0x20004030
 8006900:	20002590 	.word	0x20002590

08006904 <dumpMailbox>:
 * \param none
 * \return  SUCCESS else ERROR_MAILBOX_NOT_FOUND, 
 * 
 */

static unsigned char dumpMailbox() {
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0

	int i = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
	unsigned char response = SUCCESS;
 800690e:	2300      	movs	r3, #0
 8006910:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < MAX_MAILBOX; i++) {
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e019      	b.n	800694c <dumpMailbox+0x48>
		if (gvMailboxes.mailbox[i].messageNumber != 0) {
 8006918:	4a10      	ldr	r2, [pc, #64]	@ (800695c <dumpMailbox+0x58>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f640 6198 	movw	r1, #3736	@ 0xe98
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	4413      	add	r3, r2
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00c      	beq.n	8006946 <dumpMailbox+0x42>
			response = getAllMesage(gvMailboxes.mailbox[i].callsign);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f640 6298 	movw	r2, #3736	@ 0xe98
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	4a09      	ldr	r2, [pc, #36]	@ (800695c <dumpMailbox+0x58>)
 8006938:	4413      	add	r3, r2
 800693a:	3303      	adds	r3, #3
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fe81 	bl	8006644 <getAllMesage>
 8006942:	4603      	mov	r3, r0
 8006944:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < MAX_MAILBOX; i++) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3301      	adds	r3, #1
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b1f      	cmp	r3, #31
 8006950:	dde2      	ble.n	8006918 <dumpMailbox+0x14>

		}
	}

	return response;
 8006952:	78fb      	ldrb	r3, [r7, #3]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20004030 	.word	0x20004030

08006960 <interpretMailBoxcommand>:

static t_tc_response interpretMailBoxcommand(s_command cmd,
		unsigned char *callsign) {
 8006960:	b084      	sub	sp, #16
 8006962:	b590      	push	{r4, r7, lr}
 8006964:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8006968:	af00      	add	r7, sp, #0
 800696a:	f507 7404 	add.w	r4, r7, #528	@ 0x210
 800696e:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8006972:	6020      	str	r0, [r4, #0]
 8006974:	f507 7009 	add.w	r0, r7, #548	@ 0x224
 8006978:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	t_tc_response resp;
	unsigned char reponse = SUCCESS;
 800697c:	2300      	movs	r3, #0
 800697e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


	resp.header.timeStamp = gv_spino.timestamps;
 8006982:	4b9f      	ldr	r3, [pc, #636]	@ (8006c00 <interpretMailBoxcommand+0x2a0>)
 8006984:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006988:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800698c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8006990:	e9c1 2302 	strd	r2, r3, [r1, #8]


	switch (cmd.id) {
 8006994:	f8b7 3228 	ldrh.w	r3, [r7, #552]	@ 0x228
 8006998:	3b20      	subs	r3, #32
 800699a:	2b08      	cmp	r3, #8
 800699c:	f200 80d7 	bhi.w	8006b4e <interpretMailBoxcommand+0x1ee>
 80069a0:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <interpretMailBoxcommand+0x48>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069ed 	.word	0x080069ed
 80069b0:	08006a49 	.word	0x08006a49
 80069b4:	08006a73 	.word	0x08006a73
 80069b8:	08006a8d 	.word	0x08006a8d
 80069bc:	08006ab1 	.word	0x08006ab1
 80069c0:	08006b03 	.word	0x08006b03
 80069c4:	08006b27 	.word	0x08006b27
 80069c8:	08006b43 	.word	0x08006b43

	case CMD_MAILBOX_INIT:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX RESET");
 80069cc:	498d      	ldr	r1, [pc, #564]	@ (8006c04 <interpretMailBoxcommand+0x2a4>)
 80069ce:	2000      	movs	r0, #0
 80069d0:	f7fe ff40 	bl	8005854 <logger>
		reponse = initialise();
 80069d4:	f7ff f8b2 	bl	8005b3c <initialise>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		resp.size = 0;
 80069de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80069e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80069e6:	2200      	movs	r2, #0
 80069e8:	821a      	strh	r2, [r3, #16]
		break;
 80069ea:	e0c5      	b.n	8006b78 <interpretMailBoxcommand+0x218>

	case CMD_MAILBOX_ADD_MSG:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX ADD MSG");
 80069ec:	4986      	ldr	r1, [pc, #536]	@ (8006c08 <interpretMailBoxcommand+0x2a8>)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7fe ff30 	bl	8005854 <logger>
		if (cmd.size > MAX_LENGHT_MESSAGE) {
 80069f4:	f8b7 3224 	ldrh.w	r3, [r7, #548]	@ 0x224
 80069f8:	2bdc      	cmp	r3, #220	@ 0xdc
 80069fa:	d903      	bls.n	8006a04 <interpretMailBoxcommand+0xa4>
			reponse = ERROR_ADD_MSG_EXCED_SIZE;
 80069fc:	230d      	movs	r3, #13
 80069fe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8006a02:	e01a      	b.n	8006a3a <interpretMailBoxcommand+0xda>
		} else {
			char message[MAX_LENGHT_MESSAGE];
			logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 8006a04:	4981      	ldr	r1, [pc, #516]	@ (8006c0c <interpretMailBoxcommand+0x2ac>)
 8006a06:	2005      	movs	r0, #5
 8006a08:	f7fe ff24 	bl	8005854 <logger>
			memcpy(message, cmd.parameter, cmd.size);
 8006a0c:	f8b7 3224 	ldrh.w	r3, [r7, #548]	@ 0x224
 8006a10:	461a      	mov	r2, r3
 8006a12:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8006a16:	1d99      	adds	r1, r3, #6
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f007 fea4 	bl	800e76a <memcpy>
			reponse = addMessage(callsign, message, cmd.size);
 8006a22:	f8b7 2224 	ldrh.w	r2, [r7, #548]	@ 0x224
 8006a26:	f107 030c 	add.w	r3, r7, #12
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8006a30:	f7ff f936 	bl	8005ca0 <addMessage>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		}
		resp.size = 0;
 8006a3a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006a42:	2200      	movs	r2, #0
 8006a44:	821a      	strh	r2, [r3, #16]
		break;
 8006a46:	e097      	b.n	8006b78 <interpretMailBoxcommand+0x218>

	case CMD_MAILBOX_DEL_MSG:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX DELETE MSG !!!");
 8006a48:	4971      	ldr	r1, [pc, #452]	@ (8006c10 <interpretMailBoxcommand+0x2b0>)
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f7fe ff02 	bl	8005854 <logger>
		reponse = deletteMessage(callsign, &resp);
 8006a50:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006a54:	4619      	mov	r1, r3
 8006a56:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8006a5a:	f7ff faa1 	bl	8005fa0 <deletteMessage>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		resp.size = 0;
 8006a64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	821a      	strh	r2, [r3, #16]
		break;
 8006a70:	e082      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	case CMD_MAILBOX_GET_LIST_BOX:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX LIST MAILBOXES");
 8006a72:	4968      	ldr	r1, [pc, #416]	@ (8006c14 <interpretMailBoxcommand+0x2b4>)
 8006a74:	2000      	movs	r0, #0
 8006a76:	f7fe feed 	bl	8005854 <logger>
		reponse = getListMailbox(&resp);
 8006a7a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff faf0 	bl	8006064 <getListMailbox>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		break;
 8006a8a:	e075      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	case CMD_MAILBOX_DELETTE_BOX:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX DELETE MAILBOX");
 8006a8c:	4962      	ldr	r1, [pc, #392]	@ (8006c18 <interpretMailBoxcommand+0x2b8>)
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f7fe fee0 	bl	8005854 <logger>
		reponse = deleteMailBox(callsign);
 8006a94:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8006a98:	f7ff fb36 	bl	8006108 <deleteMailBox>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		resp.size = 0;
 8006aa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006aa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006aaa:	2200      	movs	r2, #0
 8006aac:	821a      	strh	r2, [r3, #16]
		break;
 8006aae:	e063      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	case CMD_MAILBOX_GET_LAST_MSG:
		logger(LOG_LEVEL_INFO, "Commande MAILBOX GET LAST MESSAGE");
 8006ab0:	495a      	ldr	r1, [pc, #360]	@ (8006c1c <interpretMailBoxcommand+0x2bc>)
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f7fe fece 	bl	8005854 <logger>
		if (cmd.size == 12) {
 8006ab8:	f8b7 3224 	ldrh.w	r3, [r7, #548]	@ 0x224
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	d116      	bne.n	8006aee <interpretMailBoxcommand+0x18e>
			unsigned char callsignMailbox[6];
			memcpy(callsignMailbox, cmd.parameter, cmd.size);
 8006ac0:	f8b7 3224 	ldrh.w	r3, [r7, #548]	@ 0x224
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8006aca:	1d99      	adds	r1, r3, #6
 8006acc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f007 fe4a 	bl	800e76a <memcpy>
			reponse = getLastMessage(callsignMailbox, &resp);
 8006ad6:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8006ada:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff fb89 	bl	80061f8 <getLastMessage>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		} else {
			reponse = ERROR_GET_LAST_MSG_CALLSIGN_WRONG_SIZE;
			resp.size = 0;
		}

		break;
 8006aec:	e044      	b.n	8006b78 <interpretMailBoxcommand+0x218>
			reponse = ERROR_GET_LAST_MSG_CALLSIGN_WRONG_SIZE;
 8006aee:	230e      	movs	r3, #14
 8006af0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			resp.size = 0;
 8006af4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006af8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006afc:	2200      	movs	r2, #0
 8006afe:	821a      	strh	r2, [r3, #16]
		break;
 8006b00:	e03a      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	case CMD_MAILBOX_GET_MSG:

		logger(LOG_LEVEL_INFO, "Commande MAILBOX GET MESSAGE INDEX");
 8006b02:	4947      	ldr	r1, [pc, #284]	@ (8006c20 <interpretMailBoxcommand+0x2c0>)
 8006b04:	2000      	movs	r0, #0
 8006b06:	f7fe fea5 	bl	8005854 <logger>
		reponse = getMessage((unsigned char*) &cmd.parameter[1],
				(unsigned char) cmd.parameter[0], &resp);
 8006b0a:	f897 122a 	ldrb.w	r1, [r7, #554]	@ 0x22a
		reponse = getMessage((unsigned char*) &cmd.parameter[1],
 8006b0e:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8006b12:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8006b16:	3307      	adds	r3, #7
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fc69 	bl	80063f0 <getMessage>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		break;
 8006b24:	e028      	b.n	8006b78 <interpretMailBoxcommand+0x218>

	case CMD_MAILBOX_GET_ALL_MSG:
		reponse = getAllMesage(callsign);
 8006b26:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8006b2a:	f7ff fd8b 	bl	8006644 <getAllMesage>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		resp.size = 0;
 8006b34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b38:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	821a      	strh	r2, [r3, #16]
		break;
 8006b40:	e01a      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	case CMD_MAILBOX_DUMP_MAILBOX:
		reponse = dumpMailbox();
 8006b42:	f7ff fedf 	bl	8006904 <dumpMailbox>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		break;
 8006b4c:	e014      	b.n	8006b78 <interpretMailBoxcommand+0x218>
	default:
		// generation code erreur
		sprintf(gvLogMsg, "erreur mailbox cmd %d \r\n", cmd.id);
 8006b4e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	@ 0x228
 8006b52:	461a      	mov	r2, r3
 8006b54:	4933      	ldr	r1, [pc, #204]	@ (8006c24 <interpretMailBoxcommand+0x2c4>)
 8006b56:	482d      	ldr	r0, [pc, #180]	@ (8006c0c <interpretMailBoxcommand+0x2ac>)
 8006b58:	f007 fc6c 	bl	800e434 <siprintf>
		logger(LOG_LEVEL_CRITICAL, gvLogMsg);
 8006b5c:	492b      	ldr	r1, [pc, #172]	@ (8006c0c <interpretMailBoxcommand+0x2ac>)
 8006b5e:	2005      	movs	r0, #5
 8006b60:	f7fe fe78 	bl	8005854 <logger>
		reponse = ERROR_COMMAND_UNKNOW;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
		resp.size = 0;
 8006b6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006b72:	2200      	movs	r2, #0
 8006b74:	821a      	strh	r2, [r3, #16]
		break;
 8006b76:	bf00      	nop
	}

	resp.header.size = TC_REPONSE_HEADER_SIZE+resp.size;
 8006b78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006b80:	8a1b      	ldrh	r3, [r3, #16]
 8006b82:	3312      	adds	r3, #18
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006b8e:	801a      	strh	r2, [r3, #0]
	resp.header.responseType = RESULT_CMD;
 8006b90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b94:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006b98:	2280      	movs	r2, #128	@ 0x80
 8006b9a:	711a      	strb	r2, [r3, #4]
 	resp.header.spare= (short) 0x0FF05555;
 8006b9c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006ba0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006ba4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006ba8:	80da      	strh	r2, [r3, #6]
	resp.header.cmd_id = cmd.id;
 8006baa:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 8006bae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006bb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006bb6:	805a      	strh	r2, [r3, #2]
	resp.header.error_code = reponse;
 8006bb8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006bbc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006bc0:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8006bc4:	715a      	strb	r2, [r3, #5]
	return resp;
 8006bc6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006bca:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006bd4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4619      	mov	r1, r3
 8006bdc:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8006be0:	461a      	mov	r2, r3
 8006be2:	f007 fdc2 	bl	800e76a <memcpy>
}
 8006be6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006bea:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006bfa:	b004      	add	sp, #16
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20002590 	.word	0x20002590
 8006c04:	08010dc4 	.word	0x08010dc4
 8006c08:	08010ddc 	.word	0x08010ddc
 8006c0c:	20003fec 	.word	0x20003fec
 8006c10:	08010df8 	.word	0x08010df8
 8006c14:	08010e18 	.word	0x08010e18
 8006c18:	08010e38 	.word	0x08010e38
 8006c1c:	08010e58 	.word	0x08010e58
 8006c20:	08010e7c 	.word	0x08010e7c
 8006c24:	08010ea0 	.word	0x08010ea0

08006c28 <processMailbox>:

void processMailbox(s_ax25_packet data_ax25) {
 8006c28:	b084      	sub	sp, #16
 8006c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c2c:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 8006c30:	af42      	add	r7, sp, #264	@ 0x108
 8006c32:	f507 648c 	add.w	r4, r7, #1120	@ 0x460
 8006c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	t_tc_response result;
	s_command cmd;

	gv_spino.nbMailboxCommandeReceived++;
 8006c3a:	4b49      	ldr	r3, [pc, #292]	@ (8006d60 <processMailbox+0x138>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a47      	ldr	r2, [pc, #284]	@ (8006d60 <processMailbox+0x138>)
 8006c42:	6193      	str	r3, [r2, #24]
	memcpy(&cmd, data_ax25.data, sizeof(s_command));
 8006c44:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8006c48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006c4c:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8006c50:	4618      	mov	r0, r3
 8006c52:	f007 fd8a 	bl	800e76a <memcpy>
	result = interpretMailBoxcommand(cmd, data_ax25.header.sourceAdress);
 8006c56:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006c5a:	f5a3 768c 	sub.w	r6, r3, #280	@ 0x118
 8006c5e:	463d      	mov	r5, r7
 8006c60:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006c64:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8006c68:	f207 4367 	addw	r3, r7, #1127	@ 0x467
 8006c6c:	933f      	str	r3, [sp, #252]	@ 0xfc
 8006c6e:	4668      	mov	r0, sp
 8006c70:	f104 030c 	add.w	r3, r4, #12
 8006c74:	22fa      	movs	r2, #250	@ 0xfa
 8006c76:	4619      	mov	r1, r3
 8006c78:	f007 fd77 	bl	800e76a <memcpy>
 8006c7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8006c80:	4628      	mov	r0, r5
 8006c82:	f7ff fe6d 	bl	8006960 <interpretMailBoxcommand>
 8006c86:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006c8a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006c8e:	4630      	mov	r0, r6
 8006c90:	4619      	mov	r1, r3
 8006c92:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8006c96:	461a      	mov	r2, r3
 8006c98:	f007 fd67 	bl	800e76a <memcpy>
	if (result.header.error_code != SUCCESS) {
 8006c9c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006ca0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ca4:	795b      	ldrb	r3, [r3, #5]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <processMailbox+0x8c>
		gv_spino.nbMailboxErrorCommandeReceived++;
 8006caa:	4b2d      	ldr	r3, [pc, #180]	@ (8006d60 <processMailbox+0x138>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d60 <processMailbox+0x138>)
 8006cb2:	61d3      	str	r3, [r2, #28]
	}
	s_ax25_packet ax25Frame;

	memcpy(ax25Frame.header.sourceAdress, gv_spinoConfig.spinoDesCallsign, 6);
 8006cb4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006cb8:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8006cbc:	4a29      	ldr	r2, [pc, #164]	@ (8006d64 <processMailbox+0x13c>)
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	3218      	adds	r2, #24
 8006cc2:	6810      	ldr	r0, [r2, #0]
 8006cc4:	6018      	str	r0, [r3, #0]
 8006cc6:	8892      	ldrh	r2, [r2, #4]
 8006cc8:	809a      	strh	r2, [r3, #4]
	ax25Frame.header.ssidSource = SSID_SPINO_MAILBOX;
 8006cca:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006cce:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	735a      	strb	r2, [r3, #13]
	memcpy(ax25Frame.header.destinationAdress, data_ax25.header.sourceAdress,
 8006cd6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006cda:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f207 4367 	addw	r3, r7, #1127	@ 0x467
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	6010      	str	r0, [r2, #0]
 8006ce8:	889b      	ldrh	r3, [r3, #4]
 8006cea:	8093      	strh	r3, [r2, #4]
			6);
	ax25Frame.header.ssidDestination = SSID_SPINO_MAILBOX;
 8006cec:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006cf0:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	719a      	strb	r2, [r3, #6]
	encodeAX25Header(&ax25Frame.header);
 8006cf8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fc f97c 	bl	8002ffa <encodeAX25Header>
	memcpy(ax25Frame.data, &result, TC_REPONSE_HEADER_SIZE + result.size);
 8006d02:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006d06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006d0a:	8a1b      	ldrh	r3, [r3, #16]
 8006d0c:	f103 0212 	add.w	r2, r3, #18
 8006d10:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8006d14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006d18:	3310      	adds	r3, #16
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f007 fd25 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + result.size);
 8006d20:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006d24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006d28:	8a1b      	ldrh	r3, [r3, #16]
 8006d2a:	3312      	adds	r3, #18
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006d32:	f5a3 744c 	sub.w	r4, r3, #816	@ 0x330
 8006d36:	9240      	str	r2, [sp, #256]	@ 0x100
 8006d38:	4668      	mov	r0, sp
 8006d3a:	f104 0310 	add.w	r3, r4, #16
 8006d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d42:	4619      	mov	r1, r3
 8006d44:	f007 fd11 	bl	800e76a <memcpy>
 8006d48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006d4c:	f7fd feba 	bl	8004ac4 <writeData>

}
 8006d50:	bf00      	nop
 8006d52:	f207 474c 	addw	r7, r7, #1100	@ 0x44c
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006d5c:	b004      	add	sp, #16
 8006d5e:	4770      	bx	lr
 8006d60:	20002590 	.word	0x20002590
 8006d64:	2000256c 	.word	0x2000256c

08006d68 <modeMailbox>:
#include "core/setup.h"
#include "drivers/modem.h"
#include "mailboxMode/mailbox.h"
#include "errorMngt/error.h"

unsigned short modeMailbox() {
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8006d6e:	af40      	add	r7, sp, #256	@ 0x100
	s_ax25_packet data_ax25;

	int nbc = readData(gv_data_rx);
 8006d70:	4838      	ldr	r0, [pc, #224]	@ (8006e54 <modeMailbox+0xec>)
 8006d72:	f7fd fda3 	bl	80048bc <readData>
 8006d76:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	if(nbc <0)
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da04      	bge.n	8006d8c <modeMailbox+0x24>
	{
		logger(LOG_LEVEL_CRITICAL, "ERROR DATA RECEIVED");
 8006d82:	4935      	ldr	r1, [pc, #212]	@ (8006e58 <modeMailbox+0xf0>)
 8006d84:	2005      	movs	r0, #5
 8006d86:	f7fe fd65 	bl	8005854 <logger>
 8006d8a:	e05c      	b.n	8006e46 <modeMailbox+0xde>
	}
	else if (nbc != 0) {
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d058      	beq.n	8006e46 <modeMailbox+0xde>
		/* traitement des donnees recues */
		int res = convertDataToAx25(&data_ax25, (char *) gv_data_rx, nbc);
 8006d94:	463b      	mov	r3, r7
 8006d96:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006d9a:	492e      	ldr	r1, [pc, #184]	@ (8006e54 <modeMailbox+0xec>)
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fc f981 	bl	80030a4 <convertDataToAx25>
 8006da2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		if (res != SUCCESS) {
 8006da6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <modeMailbox+0x4e>
			logger(LOG_LEVEL_CRITICAL, "AX25 CONVESTION ISSUE");
 8006dae:	492b      	ldr	r1, [pc, #172]	@ (8006e5c <modeMailbox+0xf4>)
 8006db0:	2005      	movs	r0, #5
 8006db2:	f7fe fd4f 	bl	8005854 <logger>
		}

		if (memcmp(gv_spinoConfig.spinoDesCallsign,
 8006db6:	463b      	mov	r3, r7
 8006db8:	2206      	movs	r2, #6
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4828      	ldr	r0, [pc, #160]	@ (8006e60 <modeMailbox+0xf8>)
 8006dbe:	f007 fc31 	bl	800e624 <memcmp>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d137      	bne.n	8006e38 <modeMailbox+0xd0>
				data_ax25.header.destinationAdress, 6) == 0) {
			if (data_ax25.header.ssidDestination
 8006dc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006dcc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006dd0:	799b      	ldrb	r3, [r3, #6]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	d110      	bne.n	8006df8 <modeMailbox+0x90>
					== (unsigned char) SSID_SPINO_TMTC) {
				processCommand(data_ax25);
 8006dd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006dda:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8006dde:	4668      	mov	r0, sp
 8006de0:	f104 0310 	add.w	r3, r4, #16
 8006de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006de8:	4619      	mov	r1, r3
 8006dea:	f007 fcbe 	bl	800e76a <memcpy>
 8006dee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006df2:	f7fc fe6f 	bl	8003ad4 <processCommand>
 8006df6:	e026      	b.n	8006e46 <modeMailbox+0xde>
			} else if (data_ax25.header.ssidDestination
 8006df8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006dfc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006e00:	799b      	ldrb	r3, [r3, #6]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d110      	bne.n	8006e28 <modeMailbox+0xc0>
					== (unsigned char) SSID_SPINO_MAILBOX) {
				processMailbox(data_ax25);
 8006e06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006e0a:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8006e0e:	4668      	mov	r0, sp
 8006e10:	f104 0310 	add.w	r3, r4, #16
 8006e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f007 fca6 	bl	800e76a <memcpy>
 8006e1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006e22:	f7ff ff01 	bl	8006c28 <processMailbox>
 8006e26:	e00e      	b.n	8006e46 <modeMailbox+0xde>

			} else {
				// Message not awaited   -  message dropped
				processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4808      	ldr	r0, [pc, #32]	@ (8006e54 <modeMailbox+0xec>)
 8006e32:	f7fd ff0d 	bl	8004c50 <processDropMessage>
 8006e36:	e006      	b.n	8006e46 <modeMailbox+0xde>
			}

		} else {
			// Message not awaited   -  message dropped
			processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4804      	ldr	r0, [pc, #16]	@ (8006e54 <modeMailbox+0xec>)
 8006e42:	f7fd ff05 	bl	8004c50 <processDropMessage>
		}
	}
	return gv_spino.currentState;
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <modeMailbox+0xfc>)
 8006e48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd90      	pop	{r4, r7, pc}
 8006e54:	20002a98 	.word	0x20002a98
 8006e58:	08010ebc 	.word	0x08010ebc
 8006e5c:	08010ed0 	.word	0x08010ed0
 8006e60:	20002584 	.word	0x20002584
 8006e64:	20002590 	.word	0x20002590

08006e68 <initPayload>:
s_I2C_data gv_I2C_Write_Data[I2CMAXDATA];

short gv_nb_I2CMAXDATA;

void initPayload()
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
//	I2CReadDataStatus = 0;
	I2CWriteDataStatus = 0;
 8006e6c:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <initPayload+0x1c>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
	gv_spino.gv_nb_I2CMAXDATA =0;
 8006e72:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <initPayload+0x20>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8006e78:	bf00      	nop
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20021338 	.word	0x20021338
 8006e88:	20002590 	.word	0x20002590

08006e8c <getAllI2Cdata>:

unsigned char getAllI2Cdata(t_tc_response *resp) {
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8006e92:	af42      	add	r7, sp, #264	@ 0x108
 8006e94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e98:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006e9c:	6018      	str	r0, [r3, #0]
	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerTlm;
 8006e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006ea6:	4a60      	ldr	r2, [pc, #384]	@ (8007028 <getAllI2Cdata+0x19c>)
 8006ea8:	461c      	mov	r4, r3
 8006eaa:	4613      	mov	r3, r2
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	resp->header.error_code = SUCCESS;
 8006eb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006eba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	715a      	strb	r2, [r3, #5]
	resp->header.cmd_id =  CMD_PAYLOAD_READ_DATA_ALL;
 8006ec4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ec8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	220c      	movs	r2, #12
 8006ed0:	805a      	strh	r2, [r3, #2]
	resp->header.responseType = RESULT_CMD;
 8006ed2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ed6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2280      	movs	r2, #128	@ 0x80
 8006ede:	711a      	strb	r2, [r3, #4]
	resp->header.size =  TC_REPONSE_HEADER_SIZE;
 8006ee0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ee4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2212      	movs	r2, #18
 8006eec:	801a      	strh	r2, [r3, #0]
	resp->header.spare = (short) 0x01020304;
 8006eee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ef2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f44f 7241 	mov.w	r2, #772	@ 0x304
 8006efc:	80da      	strh	r2, [r3, #6]


	int i = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	for (i = 0; i < gv_spino.gv_nb_I2CMAXDATA; i++) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006f0a:	e06e      	b.n	8006fea <getAllI2Cdata+0x15e>
		resp->size = sizeof(s_I2C_data);
 8006f0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f240 1201 	movw	r2, #257	@ 0x101
 8006f1a:	821a      	strh	r2, [r3, #16]
		resp->header.size = TC_REPONSE_HEADER_SIZE + resp->size;
 8006f1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	8a1b      	ldrh	r3, [r3, #16]
 8006f28:	3312      	adds	r3, #18
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	801a      	strh	r2, [r3, #0]
		memcpy(resp->parameter, &gv_I2C_Write_Data[i].data, resp->size);
 8006f38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f103 0012 	add.w	r0, r3, #18
 8006f46:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4413      	add	r3, r2
 8006f50:	4a36      	ldr	r2, [pc, #216]	@ (800702c <getAllI2Cdata+0x1a0>)
 8006f52:	4413      	add	r3, r2
 8006f54:	1c59      	adds	r1, r3, #1
 8006f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	8a1b      	ldrh	r3, [r3, #16]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f007 fc01 	bl	800e76a <memcpy>
		memcpy(ax25Frame.data, resp, TC_REPONSE_HEADER_SIZE + resp->size);
 8006f68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	8a1b      	ldrh	r3, [r3, #16]
 8006f74:	f103 0112 	add.w	r1, r3, #18
 8006f78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f7c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f80:	f107 020c 	add.w	r2, r7, #12
 8006f84:	f102 0010 	add.w	r0, r2, #16
 8006f88:	460a      	mov	r2, r1
 8006f8a:	6819      	ldr	r1, [r3, #0]
 8006f8c:	f007 fbed 	bl	800e76a <memcpy>
		writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + resp->size);
 8006f90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	8a1b      	ldrh	r3, [r3, #16]
 8006f9c:	3312      	adds	r3, #18
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fa4:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 8006fa8:	9240      	str	r2, [sp, #256]	@ 0x100
 8006faa:	4668      	mov	r0, sp
 8006fac:	f104 0310 	add.w	r3, r4, #16
 8006fb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f007 fbd8 	bl	800e76a <memcpy>
 8006fba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fbe:	f7fd fd81 	bl	8004ac4 <writeData>
		gv_I2C_Write_Data[i].size =0;
 8006fc2:	491a      	ldr	r1, [pc, #104]	@ (800702c <getAllI2Cdata+0x1a0>)
 8006fc4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006fc8:	4613      	mov	r3, r2
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	4413      	add	r3, r2
 8006fce:	440b      	add	r3, r1
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
		gv_spino.gv_nb_I2CMAXDATA--;
 8006fd4:	4b16      	ldr	r3, [pc, #88]	@ (8007030 <getAllI2Cdata+0x1a4>)
 8006fd6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	4b14      	ldr	r3, [pc, #80]	@ (8007030 <getAllI2Cdata+0x1a4>)
 8006fde:	869a      	strh	r2, [r3, #52]	@ 0x34
	for (i = 0; i < gv_spino.gv_nb_I2CMAXDATA; i++) {
 8006fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006fea:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <getAllI2Cdata+0x1a4>)
 8006fec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	db89      	blt.n	8006f0c <getAllI2Cdata+0x80>


	}
	gv_spino.gv_nb_I2CMAXDATA =0;
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <getAllI2Cdata+0x1a4>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	869a      	strh	r2, [r3, #52]	@ 0x34
	resp->header.cmd_id =  CMD_PAYLOAD_READ_DATA;
 8006ffe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007002:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	220b      	movs	r2, #11
 800700a:	805a      	strh	r2, [r3, #2]
	resp->size = 0;
 800700c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007010:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 800701a:	2300      	movs	r3, #0

}
 800701c:	4618      	mov	r0, r3
 800701e:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8007022:	46bd      	mov	sp, r7
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	bf00      	nop
 8007028:	200025c8 	.word	0x200025c8
 800702c:	2002133c 	.word	0x2002133c
 8007030:	20002590 	.word	0x20002590

08007034 <interpretcommandPayload>:

t_tc_response interpretcommandPayload(s_command cmd) {
 8007034:	b084      	sub	sp, #16
 8007036:	b590      	push	{r4, r7, lr}
 8007038:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800703c:	af00      	add	r7, sp, #0
 800703e:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 8007042:	f5a4 740b 	sub.w	r4, r4, #556	@ 0x22c
 8007046:	6020      	str	r0, [r4, #0]
 8007048:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800704c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	t_tc_response resp;

	resp.header.size =TC_REPONSE_HEADER_SIZE;
 8007050:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007054:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007058:	2212      	movs	r2, #18
 800705a:	801a      	strh	r2, [r3, #0]
	resp.header.responseType = RESULT_CMD;
 800705c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007060:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007064:	2280      	movs	r2, #128	@ 0x80
 8007066:	711a      	strb	r2, [r3, #4]
	resp.header.timeStamp = gv_spino.timestamps;
 8007068:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <interpretcommandPayload+0x164>)
 800706a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800706e:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007072:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8007076:	e9c1 2302 	strd	r2, r3, [r1, #8]
	resp.header.cmd_id = cmd.id;
 800707a:	f8b7 2248 	ldrh.w	r2, [r7, #584]	@ 0x248
 800707e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007082:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007086:	805a      	strh	r2, [r3, #2]
	resp.header.error_code = SUCCESS;
 8007088:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800708c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007090:	2200      	movs	r2, #0
 8007092:	715a      	strb	r2, [r3, #5]

	switch (cmd.id) {
 8007094:	f8b7 3248 	ldrh.w	r3, [r7, #584]	@ 0x248
 8007098:	2b0a      	cmp	r3, #10
 800709a:	d002      	beq.n	80070a2 <interpretcommandPayload+0x6e>
 800709c:	2b0b      	cmp	r3, #11
 800709e:	d047      	beq.n	8007130 <interpretcommandPayload+0xfc>
 80070a0:	e057      	b.n	8007152 <interpretcommandPayload+0x11e>
	case CMD_PAYLOAD_LOAD_DATA:
		logger(LOG_LEVEL_INFO, " CMD_PAYLOAD_LOAD_DATA");
 80070a2:	493e      	ldr	r1, [pc, #248]	@ (800719c <interpretcommandPayload+0x168>)
 80070a4:	2000      	movs	r0, #0
 80070a6:	f7fe fbd5 	bl	8005854 <logger>
		s_I2C_data data;
		memcpy(&data, cmd.parameter, cmd.size);
 80070aa:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 80070ae:	461a      	mov	r2, r3
 80070b0:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80070b4:	1d99      	adds	r1, r3, #6
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	4618      	mov	r0, r3
 80070bc:	f007 fb55 	bl	800e76a <memcpy>
		if(cmd.size < I2C_BUFFER_SIZE)
 80070c0:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 80070c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80070c6:	d826      	bhi.n	8007116 <interpretcommandPayload+0xe2>
		{
		CSKB_I2C_TX_BUFFER[0]=cmd.size;
 80070c8:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	4b34      	ldr	r3, [pc, #208]	@ (80071a0 <interpretcommandPayload+0x16c>)
 80070d0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < cmd.size; i++) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 80070d8:	e00f      	b.n	80070fa <interpretcommandPayload+0xc6>
		   CSKB_I2C_TX_BUFFER[i+1] = cmd.parameter[i];
 80070da:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80070de:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80070e2:	3301      	adds	r3, #1
 80070e4:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80070e8:	443a      	add	r2, r7
 80070ea:	7a91      	ldrb	r1, [r2, #10]
 80070ec:	4a2c      	ldr	r2, [pc, #176]	@ (80071a0 <interpretcommandPayload+0x16c>)
 80070ee:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < cmd.size; i++) {
 80070f0:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80070f4:	3301      	adds	r3, #1
 80070f6:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 80070fa:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 8007104:	429a      	cmp	r2, r3
 8007106:	d3e8      	bcc.n	80070da <interpretcommandPayload+0xa6>
			}
		resp.header.error_code = SUCCESS;
 8007108:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800710c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007110:	2200      	movs	r2, #0
 8007112:	715a      	strb	r2, [r3, #5]
 8007114:	e005      	b.n	8007122 <interpretcommandPayload+0xee>
		  } else
		  {
				resp.header.error_code = ERROR_LOAD_DATA_PAYLOAD_WRONG_SIZE;
 8007116:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800711a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800711e:	221e      	movs	r2, #30
 8007120:	715a      	strb	r2, [r3, #5]
		  }




		resp.size = 0;
 8007122:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007126:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800712a:	2200      	movs	r2, #0
 800712c:	821a      	strh	r2, [r3, #16]
		break;
 800712e:	e016      	b.n	800715e <interpretcommandPayload+0x12a>

	case CMD_PAYLOAD_READ_DATA: /*  modify configuration value */
		logger(LOG_LEVEL_INFO, "  CMD_PAYLOAD_READ_DATA");
 8007130:	491c      	ldr	r1, [pc, #112]	@ (80071a4 <interpretcommandPayload+0x170>)
 8007132:	2000      	movs	r0, #0
 8007134:	f7fe fb8e 	bl	8005854 <logger>
		resp.header.error_code = getAllI2Cdata(&resp);
 8007138:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fea5 	bl	8006e8c <getAllI2Cdata>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800714a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800714e:	715a      	strb	r2, [r3, #5]
		break;
 8007150:	e005      	b.n	800715e <interpretcommandPayload+0x12a>
	default:
		resp.header.error_code = ERROR_COMMAND_UNKNOW;
 8007152:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007156:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800715a:	2201      	movs	r2, #1
 800715c:	715a      	strb	r2, [r3, #5]
	}
	return resp;
 800715e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007162:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800716c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8007178:	461a      	mov	r2, r3
 800717a:	f007 faf6 	bl	800e76a <memcpy>
}
 800717e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007182:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 800718c:	46bd      	mov	sp, r7
 800718e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007192:	b004      	add	sp, #16
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20002590 	.word	0x20002590
 800719c:	08010ee8 	.word	0x08010ee8
 80071a0:	20001914 	.word	0x20001914
 80071a4:	08010f00 	.word	0x08010f00

080071a8 <processCommandePayload>:
 * \brief process command ax25 packet
 * \param  Ax25 packet
 * \return  SUCCESS if or Error code
 *
 */
void processCommandePayload(s_ax25_packet data_ax25) {
 80071a8:	b084      	sub	sp, #16
 80071aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ac:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 80071b0:	af42      	add	r7, sp, #264	@ 0x108
 80071b2:	f507 648c 	add.w	r4, r7, #1120	@ 0x460
 80071b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	t_tc_response result;
	s_command cmd;

	gv_spino.nbPayloadCommandeReceived++;
 80071ba:	4b55      	ldr	r3, [pc, #340]	@ (8007310 <processCommandePayload+0x168>)
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	3301      	adds	r3, #1
 80071c0:	4a53      	ldr	r2, [pc, #332]	@ (8007310 <processCommandePayload+0x168>)
 80071c2:	6213      	str	r3, [r2, #32]
	memcpy(&cmd, data_ax25.data, sizeof(s_command));
 80071c4:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 80071c8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80071cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80071d0:	4618      	mov	r0, r3
 80071d2:	f007 faca 	bl	800e76a <memcpy>
	if (cmd.key != gv_spino_cmd_key) {
 80071d6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80071da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80071de:	885a      	ldrh	r2, [r3, #2]
 80071e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007314 <processCommandePayload+0x16c>)
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d02b      	beq.n	8007240 <processCommandePayload+0x98>
		result.header.size = sizeof(s_tm_tc_header);
 80071e8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80071ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80071f0:	2210      	movs	r2, #16
 80071f2:	801a      	strh	r2, [r3, #0]

		result.header.responseType = RESULT_CMD;
 80071f4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80071f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80071fc:	2280      	movs	r2, #128	@ 0x80
 80071fe:	711a      	strb	r2, [r3, #4]
		result.header.timeStamp = gv_spino.timestamps;
 8007200:	4b43      	ldr	r3, [pc, #268]	@ (8007310 <processCommandePayload+0x168>)
 8007202:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007206:	f507 6189 	add.w	r1, r7, #1096	@ 0x448
 800720a:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800720e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		result.header.cmd_id = cmd.id;
 8007212:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8007216:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800721a:	889a      	ldrh	r2, [r3, #4]
 800721c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8007220:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007224:	805a      	strh	r2, [r3, #2]
		result.header.error_code = ERROR_COMMAND_WITH_WRONG_KEY;
 8007226:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800722a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800722e:	2203      	movs	r2, #3
 8007230:	715a      	strb	r2, [r3, #5]
		result.size = 0;
 8007232:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8007236:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800723a:	2200      	movs	r2, #0
 800723c:	821a      	strh	r2, [r3, #16]
 800723e:	e01f      	b.n	8007280 <processCommandePayload+0xd8>

	} else {
		result = interpretcommandPayload(cmd);
 8007240:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8007244:	f5a3 768c 	sub.w	r6, r3, #280	@ 0x118
 8007248:	463d      	mov	r5, r7
 800724a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800724e:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8007252:	4668      	mov	r0, sp
 8007254:	f104 030c 	add.w	r3, r4, #12
 8007258:	22fa      	movs	r2, #250	@ 0xfa
 800725a:	4619      	mov	r1, r3
 800725c:	f007 fa85 	bl	800e76a <memcpy>
 8007260:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007264:	4628      	mov	r0, r5
 8007266:	f7ff fee5 	bl	8007034 <interpretcommandPayload>
 800726a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800726e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007272:	4630      	mov	r0, r6
 8007274:	4619      	mov	r1, r3
 8007276:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800727a:	461a      	mov	r2, r3
 800727c:	f007 fa75 	bl	800e76a <memcpy>

	}

	if (result.header.error_code != SUCCESS) {
 8007280:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8007284:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <processCommandePayload+0xf0>
		gv_spino.nbPayloadCommandeWithError++;
 800728e:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <processCommandePayload+0x168>)
 8007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	4a1e      	ldr	r2, [pc, #120]	@ (8007310 <processCommandePayload+0x168>)
 8007296:	6253      	str	r3, [r2, #36]	@ 0x24
	}
	s_ax25_packet ax25Frame;
	ax25Frame.header = gv_headerTlm;
 8007298:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800729c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80072a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007318 <processCommandePayload+0x170>)
 80072a2:	461c      	mov	r4, r3
 80072a4:	4613      	mov	r3, r2
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	memcpy(ax25Frame.data, &result, TC_REPONSE_HEADER_SIZE + result.size);
 80072b0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80072b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80072b8:	8a1b      	ldrh	r3, [r3, #16]
 80072ba:	f103 0212 	add.w	r2, r3, #18
 80072be:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 80072c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072c6:	3310      	adds	r3, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f007 fa4e 	bl	800e76a <memcpy>
	/* envoyer la reponse de la  commande */
	writeData(ax25Frame, TC_REPONSE_HEADER_SIZE + result.size);
 80072ce:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80072d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80072d6:	8a1b      	ldrh	r3, [r3, #16]
 80072d8:	3312      	adds	r3, #18
 80072da:	461a      	mov	r2, r3
 80072dc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80072e0:	f5a3 744c 	sub.w	r4, r3, #816	@ 0x330
 80072e4:	9240      	str	r2, [sp, #256]	@ 0x100
 80072e6:	4668      	mov	r0, sp
 80072e8:	f104 0310 	add.w	r3, r4, #16
 80072ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072f0:	4619      	mov	r1, r3
 80072f2:	f007 fa3a 	bl	800e76a <memcpy>
 80072f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80072fa:	f7fd fbe3 	bl	8004ac4 <writeData>

}
 80072fe:	bf00      	nop
 8007300:	f207 474c 	addw	r7, r7, #1100	@ 0x44c
 8007304:	46bd      	mov	sp, r7
 8007306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800730a:	b004      	add	sp, #16
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20002590 	.word	0x20002590
 8007314:	20000f32 	.word	0x20000f32
 8007318:	200025c8 	.word	0x200025c8

0800731c <payloadMode>:

unsigned short payloadMode() {
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8007322:	af40      	add	r7, sp, #256	@ 0x100


	s_ax25_packet data_ax25;

	int nbc = readData(gv_data_rx);
 8007324:	4840      	ldr	r0, [pc, #256]	@ (8007428 <payloadMode+0x10c>)
 8007326:	f7fd fac9 	bl	80048bc <readData>
 800732a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	if(nbc <0)
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007332:	2b00      	cmp	r3, #0
 8007334:	da04      	bge.n	8007340 <payloadMode+0x24>
	{
		logger(LOG_LEVEL_CRITICAL, "ERROR DATA RECEIVED");
 8007336:	493d      	ldr	r1, [pc, #244]	@ (800742c <payloadMode+0x110>)
 8007338:	2005      	movs	r0, #5
 800733a:	f7fe fa8b 	bl	8005854 <logger>
 800733e:	e06c      	b.n	800741a <payloadMode+0xfe>
	}
	else if (nbc != 0) {
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	2b00      	cmp	r3, #0
 8007346:	d068      	beq.n	800741a <payloadMode+0xfe>
		/* traitement des donnees recues */
		int res = convertDataToAx25(&data_ax25,(char *)  gv_data_rx, nbc);
 8007348:	463b      	mov	r3, r7
 800734a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800734e:	4936      	ldr	r1, [pc, #216]	@ (8007428 <payloadMode+0x10c>)
 8007350:	4618      	mov	r0, r3
 8007352:	f7fb fea7 	bl	80030a4 <convertDataToAx25>
 8007356:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		if (res != SUCCESS) {
 800735a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <payloadMode+0x4e>
			logger(LOG_LEVEL_CRITICAL, "AX25 CONVERSION ISSUE");
 8007362:	4933      	ldr	r1, [pc, #204]	@ (8007430 <payloadMode+0x114>)
 8007364:	2005      	movs	r0, #5
 8007366:	f7fe fa75 	bl	8005854 <logger>
		}

		if (memcmp(gv_spinoConfig.spinoDesCallsign,
 800736a:	463b      	mov	r3, r7
 800736c:	2206      	movs	r2, #6
 800736e:	4619      	mov	r1, r3
 8007370:	4830      	ldr	r0, [pc, #192]	@ (8007434 <payloadMode+0x118>)
 8007372:	f007 f957 	bl	800e624 <memcmp>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d116      	bne.n	80073aa <payloadMode+0x8e>
				data_ax25.header.destinationAdress, 6) == 0) {

			if (data_ax25.header.ssidDestination
 800737c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007380:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007384:	799b      	ldrb	r3, [r3, #6]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d10f      	bne.n	80073aa <payloadMode+0x8e>
					== (unsigned char) SSID_SPINO_TMTC) {
				processCommand(data_ax25);
 800738a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800738e:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8007392:	4668      	mov	r0, sp
 8007394:	f104 0310 	add.w	r3, r4, #16
 8007398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800739c:	4619      	mov	r1, r3
 800739e:	f007 f9e4 	bl	800e76a <memcpy>
 80073a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073a6:	f7fc fb95 	bl	8003ad4 <processCommand>
			}
		}
		if (memcmp(gv_spinoConfig.payloadCallsign,
 80073aa:	463b      	mov	r3, r7
 80073ac:	2206      	movs	r2, #6
 80073ae:	4619      	mov	r1, r3
 80073b0:	4821      	ldr	r0, [pc, #132]	@ (8007438 <payloadMode+0x11c>)
 80073b2:	f007 f937 	bl	800e624 <memcmp>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d123      	bne.n	8007404 <payloadMode+0xe8>
				data_ax25.header.destinationAdress, 6) == 0) {

			if (data_ax25.header.ssidDestination
 80073bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80073c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80073c4:	799b      	ldrb	r3, [r3, #6]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d110      	bne.n	80073ec <payloadMode+0xd0>
					== (unsigned char) SSID_SPINO_CUBESAT) {
				processCommandePayload(data_ax25);
 80073ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80073ce:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 80073d2:	4668      	mov	r0, sp
 80073d4:	f104 0310 	add.w	r3, r4, #16
 80073d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073dc:	4619      	mov	r1, r3
 80073de:	f007 f9c4 	bl	800e76a <memcpy>
 80073e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073e6:	f7ff fedf 	bl	80071a8 <processCommandePayload>
 80073ea:	e016      	b.n	800741a <payloadMode+0xfe>
			} else {
				logger(LOG_LEVEL_CRITICAL, "MESSAGE DROPED");
 80073ec:	4913      	ldr	r1, [pc, #76]	@ (800743c <payloadMode+0x120>)
 80073ee:	2005      	movs	r0, #5
 80073f0:	f7fe fa30 	bl	8005854 <logger>
				processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	480a      	ldr	r0, [pc, #40]	@ (8007428 <payloadMode+0x10c>)
 80073fe:	f7fd fc27 	bl	8004c50 <processDropMessage>
 8007402:	e00a      	b.n	800741a <payloadMode+0xfe>

			}

		} else {
			// Message not awaited   -  message dropped
			processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	b29b      	uxth	r3, r3
 800740a:	4619      	mov	r1, r3
 800740c:	4806      	ldr	r0, [pc, #24]	@ (8007428 <payloadMode+0x10c>)
 800740e:	f7fd fc1f 	bl	8004c50 <processDropMessage>
			logger(LOG_LEVEL_CRITICAL, "MESSAGE DROPED");
 8007412:	490a      	ldr	r1, [pc, #40]	@ (800743c <payloadMode+0x120>)
 8007414:	2005      	movs	r0, #5
 8007416:	f7fe fa1d 	bl	8005854 <logger>
		}

	}
	return gv_spino.currentState;
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <payloadMode+0x124>)
 800741c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
}
 800741e:	4618      	mov	r0, r3
 8007420:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}
 8007428:	20002a98 	.word	0x20002a98
 800742c:	08010f18 	.word	0x08010f18
 8007430:	08010f2c 	.word	0x08010f2c
 8007434:	20002584 	.word	0x20002584
 8007438:	2000258a 	.word	0x2000258a
 800743c:	08010f44 	.word	0x08010f44
 8007440:	20002590 	.word	0x20002590

08007444 <survey>:
#include "core/setup.h"
#include "drivers/modem.h"
#include "errorMngt/error.h"
#include "dropMsgMngt/DropMessage.h"

unsigned short survey() {
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800744a:	af40      	add	r7, sp, #256	@ 0x100

	s_ax25_packet data_ax25;
 int nbc = readData(gv_data_rx);
 800744c:	4828      	ldr	r0, [pc, #160]	@ (80074f0 <survey+0xac>)
 800744e:	f7fd fa35 	bl	80048bc <readData>
 8007452:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	if(nbc <0)
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	2b00      	cmp	r3, #0
 800745c:	da04      	bge.n	8007468 <survey+0x24>
	{
		logger(LOG_LEVEL_CRITICAL, "ERROR DATA RECEIVED");
 800745e:	4925      	ldr	r1, [pc, #148]	@ (80074f4 <survey+0xb0>)
 8007460:	2005      	movs	r0, #5
 8007462:	f7fe f9f7 	bl	8005854 <logger>
 8007466:	e03c      	b.n	80074e2 <survey+0x9e>
	}
	else 	if (nbc != 0) {
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	2b00      	cmp	r3, #0
 800746e:	d038      	beq.n	80074e2 <survey+0x9e>
		/* traitement des donnees recues */
		int res = convertDataToAx25(&data_ax25, (char *) gv_data_rx, nbc);
 8007470:	463b      	mov	r3, r7
 8007472:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8007476:	491e      	ldr	r1, [pc, #120]	@ (80074f0 <survey+0xac>)
 8007478:	4618      	mov	r0, r3
 800747a:	f7fb fe13 	bl	80030a4 <convertDataToAx25>
 800747e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		if (res != SUCCESS) {
 8007482:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <survey+0x4e>
			logger(LOG_LEVEL_CRITICAL, "AX25 CONVERSION ISSUE");
 800748a:	491b      	ldr	r1, [pc, #108]	@ (80074f8 <survey+0xb4>)
 800748c:	2005      	movs	r0, #5
 800748e:	f7fe f9e1 	bl	8005854 <logger>
		}

		if (memcmp(gv_spinoConfig.spinoDesCallsign,
 8007492:	463b      	mov	r3, r7
 8007494:	2206      	movs	r2, #6
 8007496:	4619      	mov	r1, r3
 8007498:	4818      	ldr	r0, [pc, #96]	@ (80074fc <survey+0xb8>)
 800749a:	f007 f8c3 	bl	800e624 <memcmp>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d117      	bne.n	80074d4 <survey+0x90>
				data_ax25.header.destinationAdress, 6) == 0) {

			if (data_ax25.header.ssidDestination
 80074a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80074a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80074ac:	799b      	ldrb	r3, [r3, #6]
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d117      	bne.n	80074e2 <survey+0x9e>
					== (unsigned char) SSID_SPINO_TMTC) {
				processCommand(data_ax25);
 80074b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80074b6:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 80074ba:	4668      	mov	r0, sp
 80074bc:	f104 0310 	add.w	r3, r4, #16
 80074c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074c4:	4619      	mov	r1, r3
 80074c6:	f007 f950 	bl	800e76a <memcpy>
 80074ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80074ce:	f7fc fb01 	bl	8003ad4 <processCommand>
 80074d2:	e006      	b.n	80074e2 <survey+0x9e>
			}
		} else {
			// Message not awaited   -  message dropped
			processDropMessage((char *) gv_data_rx, (unsigned short) nbc);
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	4804      	ldr	r0, [pc, #16]	@ (80074f0 <survey+0xac>)
 80074de:	f7fd fbb7 	bl	8004c50 <processDropMessage>

		}

	}
	return gv_spino.currentState;
 80074e2:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <survey+0xbc>)
 80074e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd90      	pop	{r4, r7, pc}
 80074f0:	20002a98 	.word	0x20002a98
 80074f4:	08010f54 	.word	0x08010f54
 80074f8:	08010f68 	.word	0x08010f68
 80074fc:	20002584 	.word	0x20002584
 8007500:	20002590 	.word	0x20002590

08007504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800753c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007508:	f7fb fc9c 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800750c:	480c      	ldr	r0, [pc, #48]	@ (8007540 <LoopForever+0x6>)
  ldr r1, =_edata
 800750e:	490d      	ldr	r1, [pc, #52]	@ (8007544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007510:	4a0d      	ldr	r2, [pc, #52]	@ (8007548 <LoopForever+0xe>)
  movs r3, #0
 8007512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007514:	e002      	b.n	800751c <LoopCopyDataInit>

08007516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800751a:	3304      	adds	r3, #4

0800751c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800751c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800751e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007520:	d3f9      	bcc.n	8007516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007522:	4a0a      	ldr	r2, [pc, #40]	@ (800754c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007524:	4c0a      	ldr	r4, [pc, #40]	@ (8007550 <LoopForever+0x16>)
  movs r3, #0
 8007526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007528:	e001      	b.n	800752e <LoopFillZerobss>

0800752a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800752a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800752c:	3204      	adds	r2, #4

0800752e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800752e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007530:	d3fb      	bcc.n	800752a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007532:	f007 f8f3 	bl	800e71c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007536:	f7fa fb65 	bl	8001c04 <main>

0800753a <LoopForever>:

LoopForever:
    b LoopForever
 800753a:	e7fe      	b.n	800753a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800753c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8007540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007544:	20001104 	.word	0x20001104
  ldr r2, =_sidata
 8007548:	08011348 	.word	0x08011348
  ldr r2, =_sbss
 800754c:	20001108 	.word	0x20001108
  ldr r4, =_ebss
 8007550:	20021994 	.word	0x20021994

08007554 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007554:	e7fe      	b.n	8007554 <ADC1_IRQHandler>

08007556 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007560:	2003      	movs	r0, #3
 8007562:	f000 f977 	bl	8007854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007566:	200f      	movs	r0, #15
 8007568:	f000 f80e 	bl	8007588 <HAL_InitTick>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	71fb      	strb	r3, [r7, #7]
 8007576:	e001      	b.n	800757c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007578:	f7fb f934 	bl	80027e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800757c:	79fb      	ldrb	r3, [r7, #7]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007594:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <HAL_InitTick+0x6c>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d023      	beq.n	80075e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800759c:	4b16      	ldr	r3, [pc, #88]	@ (80075f8 <HAL_InitTick+0x70>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	4b14      	ldr	r3, [pc, #80]	@ (80075f4 <HAL_InitTick+0x6c>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80075aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f987 	bl	80078c6 <HAL_SYSTICK_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d809      	bhi.n	80075d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075c4:	2200      	movs	r2, #0
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075cc:	f000 f94d 	bl	800786a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80075d0:	4a0a      	ldr	r2, [pc, #40]	@ (80075fc <HAL_InitTick+0x74>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e007      	b.n	80075e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	e004      	b.n	80075e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	e001      	b.n	80075e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000f38 	.word	0x20000f38
 80075f8:	20000f2c 	.word	0x20000f2c
 80075fc:	20000f34 	.word	0x20000f34

08007600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007604:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <HAL_IncTick+0x20>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <HAL_IncTick+0x24>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4413      	add	r3, r2
 8007610:	4a04      	ldr	r2, [pc, #16]	@ (8007624 <HAL_IncTick+0x24>)
 8007612:	6013      	str	r3, [r2, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20000f38 	.word	0x20000f38
 8007624:	20021844 	.word	0x20021844

08007628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  return uwTick;
 800762c:	4b03      	ldr	r3, [pc, #12]	@ (800763c <HAL_GetTick+0x14>)
 800762e:	681b      	ldr	r3, [r3, #0]
}
 8007630:	4618      	mov	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20021844 	.word	0x20021844

08007640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007648:	f7ff ffee 	bl	8007628 <HAL_GetTick>
 800764c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007658:	d005      	beq.n	8007666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800765a:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <HAL_Delay+0x44>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007666:	bf00      	nop
 8007668:	f7ff ffde 	bl	8007628 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	429a      	cmp	r2, r3
 8007676:	d8f7      	bhi.n	8007668 <HAL_Delay+0x28>
  {
  }
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000f38 	.word	0x20000f38

08007688 <__NVIC_SetPriorityGrouping>:
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007698:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <__NVIC_SetPriorityGrouping+0x44>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80076a4:	4013      	ands	r3, r2
 80076a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076ba:	4a04      	ldr	r2, [pc, #16]	@ (80076cc <__NVIC_SetPriorityGrouping+0x44>)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	60d3      	str	r3, [r2, #12]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	e000ed00 	.word	0xe000ed00

080076d0 <__NVIC_GetPriorityGrouping>:
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076d4:	4b04      	ldr	r3, [pc, #16]	@ (80076e8 <__NVIC_GetPriorityGrouping+0x18>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	f003 0307 	and.w	r3, r3, #7
}
 80076de:	4618      	mov	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	e000ed00 	.word	0xe000ed00

080076ec <__NVIC_EnableIRQ>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db0b      	blt.n	8007716 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	f003 021f 	and.w	r2, r3, #31
 8007704:	4907      	ldr	r1, [pc, #28]	@ (8007724 <__NVIC_EnableIRQ+0x38>)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	2001      	movs	r0, #1
 800770e:	fa00 f202 	lsl.w	r2, r0, r2
 8007712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	e000e100 	.word	0xe000e100

08007728 <__NVIC_SetPriority>:
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	6039      	str	r1, [r7, #0]
 8007732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007738:	2b00      	cmp	r3, #0
 800773a:	db0a      	blt.n	8007752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	490c      	ldr	r1, [pc, #48]	@ (8007774 <__NVIC_SetPriority+0x4c>)
 8007742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007746:	0112      	lsls	r2, r2, #4
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	440b      	add	r3, r1
 800774c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007750:	e00a      	b.n	8007768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	4908      	ldr	r1, [pc, #32]	@ (8007778 <__NVIC_SetPriority+0x50>)
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	3b04      	subs	r3, #4
 8007760:	0112      	lsls	r2, r2, #4
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	440b      	add	r3, r1
 8007766:	761a      	strb	r2, [r3, #24]
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	e000e100 	.word	0xe000e100
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <NVIC_EncodePriority>:
{
 800777c:	b480      	push	{r7}
 800777e:	b089      	sub	sp, #36	@ 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	f1c3 0307 	rsb	r3, r3, #7
 8007796:	2b04      	cmp	r3, #4
 8007798:	bf28      	it	cs
 800779a:	2304      	movcs	r3, #4
 800779c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3304      	adds	r3, #4
 80077a2:	2b06      	cmp	r3, #6
 80077a4:	d902      	bls.n	80077ac <NVIC_EncodePriority+0x30>
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	3b03      	subs	r3, #3
 80077aa:	e000      	b.n	80077ae <NVIC_EncodePriority+0x32>
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	43da      	mvns	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	401a      	ands	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	43d9      	mvns	r1, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d4:	4313      	orrs	r3, r2
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3724      	adds	r7, #36	@ 0x24
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <__NVIC_SystemReset>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80077e8:	f3bf 8f4f 	dsb	sy
}
 80077ec:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80077ee:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <__NVIC_SystemReset+0x24>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80077f6:	4904      	ldr	r1, [pc, #16]	@ (8007808 <__NVIC_SystemReset+0x24>)
 80077f8:	4b04      	ldr	r3, [pc, #16]	@ (800780c <__NVIC_SystemReset+0x28>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80077fe:	f3bf 8f4f 	dsb	sy
}
 8007802:	bf00      	nop
    __NOP();
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <__NVIC_SystemReset+0x20>
 8007808:	e000ed00 	.word	0xe000ed00
 800780c:	05fa0004 	.word	0x05fa0004

08007810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3b01      	subs	r3, #1
 800781c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007820:	d301      	bcc.n	8007826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007822:	2301      	movs	r3, #1
 8007824:	e00f      	b.n	8007846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007826:	4a0a      	ldr	r2, [pc, #40]	@ (8007850 <SysTick_Config+0x40>)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3b01      	subs	r3, #1
 800782c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800782e:	210f      	movs	r1, #15
 8007830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007834:	f7ff ff78 	bl	8007728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007838:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <SysTick_Config+0x40>)
 800783a:	2200      	movs	r2, #0
 800783c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800783e:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <SysTick_Config+0x40>)
 8007840:	2207      	movs	r2, #7
 8007842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	e000e010 	.word	0xe000e010

08007854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff13 	bl	8007688 <__NVIC_SetPriorityGrouping>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af00      	add	r7, sp, #0
 8007870:	4603      	mov	r3, r0
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800787c:	f7ff ff28 	bl	80076d0 <__NVIC_GetPriorityGrouping>
 8007880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ff78 	bl	800777c <NVIC_EncodePriority>
 800788c:	4602      	mov	r2, r0
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff47 	bl	8007728 <__NVIC_SetPriority>
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff ff1b 	bl	80076ec <__NVIC_EnableIRQ>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80078c2:	f7ff ff8f 	bl	80077e4 <__NVIC_SystemReset>

080078c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff ff9e 	bl	8007810 <SysTick_Config>
 80078d4:	4603      	mov	r3, r0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d005      	beq.n	8007902 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2204      	movs	r2, #4
 80078fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
 8007900:	e029      	b.n	8007956 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 020e 	bic.w	r2, r2, #14
 8007910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	f003 021c 	and.w	r2, r3, #28
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f202 	lsl.w	r2, r1, r2
 8007934:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
    }
  }
  return status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800796e:	b2db      	uxtb	r3, r3
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800798a:	e154      	b.n	8007c36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	2101      	movs	r1, #1
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	fa01 f303 	lsl.w	r3, r1, r3
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8146 	beq.w	8007c30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f003 0303 	and.w	r3, r3, #3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d005      	beq.n	80079bc <HAL_GPIO_Init+0x40>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d130      	bne.n	8007a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	2203      	movs	r2, #3
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4013      	ands	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079f2:	2201      	movs	r2, #1
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4013      	ands	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 0201 	and.w	r2, r3, #1
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d017      	beq.n	8007a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	2203      	movs	r2, #3
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d123      	bne.n	8007aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	08da      	lsrs	r2, r3, #3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3208      	adds	r2, #8
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	220f      	movs	r2, #15
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43db      	mvns	r3, r3
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4013      	ands	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	08da      	lsrs	r2, r3, #3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3208      	adds	r2, #8
 8007aa8:	6939      	ldr	r1, [r7, #16]
 8007aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	2203      	movs	r2, #3
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f003 0203 	and.w	r2, r3, #3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80a0 	beq.w	8007c30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007af0:	4b58      	ldr	r3, [pc, #352]	@ (8007c54 <HAL_GPIO_Init+0x2d8>)
 8007af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af4:	4a57      	ldr	r2, [pc, #348]	@ (8007c54 <HAL_GPIO_Init+0x2d8>)
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	6613      	str	r3, [r2, #96]	@ 0x60
 8007afc:	4b55      	ldr	r3, [pc, #340]	@ (8007c54 <HAL_GPIO_Init+0x2d8>)
 8007afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007b08:	4a53      	ldr	r2, [pc, #332]	@ (8007c58 <HAL_GPIO_Init+0x2dc>)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	089b      	lsrs	r3, r3, #2
 8007b0e:	3302      	adds	r3, #2
 8007b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	220f      	movs	r2, #15
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	43db      	mvns	r3, r3
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007b32:	d019      	beq.n	8007b68 <HAL_GPIO_Init+0x1ec>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a49      	ldr	r2, [pc, #292]	@ (8007c5c <HAL_GPIO_Init+0x2e0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d013      	beq.n	8007b64 <HAL_GPIO_Init+0x1e8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a48      	ldr	r2, [pc, #288]	@ (8007c60 <HAL_GPIO_Init+0x2e4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00d      	beq.n	8007b60 <HAL_GPIO_Init+0x1e4>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a47      	ldr	r2, [pc, #284]	@ (8007c64 <HAL_GPIO_Init+0x2e8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d007      	beq.n	8007b5c <HAL_GPIO_Init+0x1e0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a46      	ldr	r2, [pc, #280]	@ (8007c68 <HAL_GPIO_Init+0x2ec>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d101      	bne.n	8007b58 <HAL_GPIO_Init+0x1dc>
 8007b54:	2304      	movs	r3, #4
 8007b56:	e008      	b.n	8007b6a <HAL_GPIO_Init+0x1ee>
 8007b58:	2307      	movs	r3, #7
 8007b5a:	e006      	b.n	8007b6a <HAL_GPIO_Init+0x1ee>
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e004      	b.n	8007b6a <HAL_GPIO_Init+0x1ee>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e002      	b.n	8007b6a <HAL_GPIO_Init+0x1ee>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_GPIO_Init+0x1ee>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	f002 0203 	and.w	r2, r2, #3
 8007b70:	0092      	lsls	r2, r2, #2
 8007b72:	4093      	lsls	r3, r2
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b7a:	4937      	ldr	r1, [pc, #220]	@ (8007c58 <HAL_GPIO_Init+0x2dc>)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	089b      	lsrs	r3, r3, #2
 8007b80:	3302      	adds	r3, #2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b88:	4b38      	ldr	r3, [pc, #224]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	43db      	mvns	r3, r3
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4013      	ands	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bac:	4a2f      	ldr	r2, [pc, #188]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bd6:	4a25      	ldr	r2, [pc, #148]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007bdc:	4b23      	ldr	r3, [pc, #140]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4013      	ands	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c00:	4a1a      	ldr	r2, [pc, #104]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007c06:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4013      	ands	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c2a:	4a10      	ldr	r2, [pc, #64]	@ (8007c6c <HAL_GPIO_Init+0x2f0>)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3301      	adds	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f aea3 	bne.w	800798c <HAL_GPIO_Init+0x10>
  }
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40021000 	.word	0x40021000
 8007c58:	40010000 	.word	0x40010000
 8007c5c:	48000400 	.word	0x48000400
 8007c60:	48000800 	.word	0x48000800
 8007c64:	48000c00 	.word	0x48000c00
 8007c68:	48001000 	.word	0x48001000
 8007c6c:	40010400 	.word	0x40010400

08007c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c80:	787b      	ldrb	r3, [r7, #1]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c8c:	e002      	b.n	8007c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007caa:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	88fb      	ldrh	r3, [r7, #6]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d006      	beq.n	8007cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cb6:	4a05      	ldr	r2, [pc, #20]	@ (8007ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f806 	bl	8007cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40010400 	.word	0x40010400

08007cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e08d      	b.n	8007e14 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d106      	bne.n	8007d12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fa fd8d 	bl	800282c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2224      	movs	r2, #36	@ 0x24
 8007d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007d36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d107      	bne.n	8007d60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d5c:	609a      	str	r2, [r3, #8]
 8007d5e:	e006      	b.n	8007d6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d108      	bne.n	8007d88 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	e007      	b.n	8007d98 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007daa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69d9      	ldr	r1, [r3, #28]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1a      	ldr	r2, [r3, #32]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0201 	orr.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	@ 0x28
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	f040 80d6 	bne.w	8007fea <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e4c:	d101      	bne.n	8007e52 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e0cc      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_I2C_IsDeviceReady+0x44>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e0c5      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2224      	movs	r2, #36	@ 0x24
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d107      	bne.n	8007e8e <HAL_I2C_IsDeviceReady+0x72>
 8007e7e:	897b      	ldrh	r3, [r7, #10]
 8007e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e8c:	e006      	b.n	8007e9c <HAL_I2C_IsDeviceReady+0x80>
 8007e8e:	897b      	ldrh	r3, [r7, #10]
 8007e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e98:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007ea2:	f7ff fbc1 	bl	8007628 <HAL_GetTick>
 8007ea6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	2300      	movne	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007ed4:	e034      	b.n	8007f40 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007edc:	d01a      	beq.n	8007f14 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7ff fba3 	bl	8007628 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <HAL_I2C_IsDeviceReady+0xd8>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10f      	bne.n	8007f14 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f00:	f043 0220 	orr.w	r2, r3, #32
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e06b      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	bf0c      	ite	eq
 8007f22:	2301      	moveq	r3, #1
 8007f24:	2300      	movne	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007f40:	7ffb      	ldrb	r3, [r7, #31]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <HAL_I2C_IsDeviceReady+0x130>
 8007f46:	7fbb      	ldrb	r3, [r7, #30]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0c4      	beq.n	8007ed6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d01a      	beq.n	8007f90 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2200      	movs	r2, #0
 8007f62:	2120      	movs	r1, #32
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 fb8e 	bl	8009686 <I2C_WaitOnFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e03b      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e02d      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2120      	movs	r1, #32
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f001 fb73 	bl	8009686 <I2C_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e020      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	f63f af56 	bhi.w	8007e76 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd6:	f043 0220 	orr.w	r2, r3, #32
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008010:	2b28      	cmp	r3, #40	@ 0x28
 8008012:	f040 8098 	bne.w	8008146 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008028:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e08c      	b.n	8008148 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800802e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f001 fd16 	bl	8009a64 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8008042:	2302      	movs	r3, #2
 8008044:	e080      	b.n	8008148 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b2a      	cmp	r3, #42	@ 0x2a
 8008058:	d12a      	bne.n	80080b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800805a:	2102      	movs	r1, #2
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 fd01 	bl	8009a64 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800806c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008070:	d11e      	bne.n	80080b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008080:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d012      	beq.n	80080b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808e:	4a30      	ldr	r2, [pc, #192]	@ (8008150 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8008090:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fc21 	bl	80078de <HAL_DMA_Abort_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2229      	movs	r2, #41	@ 0x29
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a17      	ldr	r2, [pc, #92]	@ (8008154 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80080f6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b08      	cmp	r3, #8
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d106      	bne.n	8008130 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2208      	movs	r2, #8
 800812e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8008138:	f248 0101 	movw	r1, #32769	@ 0x8001
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f001 fc0d 	bl	800995c <I2C_Enable_IRQ>

    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	0800964b 	.word	0x0800964b
 8008154:	0800847f 	.word	0x0800847f

08008158 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008174:	2b28      	cmp	r3, #40	@ 0x28
 8008176:	f040 8098 	bne.w	80082aa <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d105      	bne.n	8008192 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800818c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e08c      	b.n	80082ac <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008192:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f001 fc64 	bl	8009a64 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d101      	bne.n	80081aa <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80081a6:	2302      	movs	r3, #2
 80081a8:	e080      	b.n	80082ac <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b29      	cmp	r3, #41	@ 0x29
 80081bc:	d12a      	bne.n	8008214 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081be:	2101      	movs	r1, #1
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f001 fc4f 	bl	8009a64 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081d4:	d11e      	bne.n	8008214 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081e4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d012      	beq.n	8008214 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f2:	4a30      	ldr	r2, [pc, #192]	@ (80082b4 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80081f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fb6f 	bl	80078de <HAL_DMA_Abort_IT>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d006      	beq.n	8008214 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008210:	4610      	mov	r0, r2
 8008212:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	222a      	movs	r2, #42	@ 0x2a
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008238:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	88fa      	ldrh	r2, [r7, #6]
 8008244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4a17      	ldr	r2, [pc, #92]	@ (80082b8 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 800825a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b08      	cmp	r3, #8
 8008268:	bf0c      	ite	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	2300      	movne	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2208      	movs	r2, #8
 8008292:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800829c:	f248 0102 	movw	r1, #32770	@ 0x8002
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 fb5b 	bl	800995c <I2C_Enable_IRQ>

    return HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
  }
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	0800964b 	.word	0x0800964b
 80082b8:	0800847f 	.word	0x0800847f

080082bc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d10d      	bne.n	80082ec <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2228      	movs	r2, #40	@ 0x28
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a07      	ldr	r2, [pc, #28]	@ (80082f8 <HAL_I2C_EnableListen_IT+0x3c>)
 80082dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80082de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fb3a 	bl	800995c <I2C_Enable_IRQ>

    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	0800847f 	.word	0x0800847f

080082fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	68f9      	ldr	r1, [r7, #12]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
  }
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00f      	beq.n	8008372 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008360:	f043 0201 	orr.w	r2, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008370:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00f      	beq.n	800839c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838a:	f043 0208 	orr.w	r2, r3, #8
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800839a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00f      	beq.n	80083c6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b4:	f043 0202 	orr.w	r2, r3, #2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 030b 	and.w	r3, r3, #11
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083d6:	68f9      	ldr	r1, [r7, #12]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fffb 	bl	80093d4 <I2C_ITError>
  }
}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008458:	b2db      	uxtb	r3, r3
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <I2C_Slave_ISR_IT+0x24>
 800849e:	2302      	movs	r3, #2
 80084a0:	e0e2      	b.n	8008668 <I2C_Slave_ISR_IT+0x1ea>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80084be:	6939      	ldr	r1, [r7, #16]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fdcf 	bl	8009064 <I2C_ITSlaveCplt>
 80084c6:	e0ca      	b.n	800865e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04b      	beq.n	800856a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d046      	beq.n	800856a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d128      	bne.n	8008538 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b28      	cmp	r3, #40	@ 0x28
 80084f0:	d108      	bne.n	8008504 <I2C_Slave_ISR_IT+0x86>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084f8:	d104      	bne.n	8008504 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084fa:	6939      	ldr	r1, [r7, #16]
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 ff15 	bl	800932c <I2C_ITListenCplt>
 8008502:	e031      	b.n	8008568 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b29      	cmp	r3, #41	@ 0x29
 800850e:	d10e      	bne.n	800852e <I2C_Slave_ISR_IT+0xb0>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008516:	d00a      	beq.n	800852e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2210      	movs	r2, #16
 800851e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 f86e 	bl	8009602 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fc78 	bl	8008e1c <I2C_ITSlaveSeqCplt>
 800852c:	e01c      	b.n	8008568 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2210      	movs	r2, #16
 8008534:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008536:	e08f      	b.n	8008658 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2210      	movs	r2, #16
 800853e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008544:	f043 0204 	orr.w	r2, r3, #4
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <I2C_Slave_ISR_IT+0xdc>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008558:	d17e      	bne.n	8008658 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 ff37 	bl	80093d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008566:	e077      	b.n	8008658 <I2C_Slave_ISR_IT+0x1da>
 8008568:	e076      	b.n	8008658 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800857a:	2b00      	cmp	r3, #0
 800857c:	d02a      	beq.n	80085d4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d018      	beq.n	80085ba <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d14b      	bne.n	800865c <I2C_Slave_ISR_IT+0x1de>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085ca:	d047      	beq.n	800865c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fc25 	bl	8008e1c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80085d2:	e043      	b.n	800865c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80085e8:	6939      	ldr	r1, [r7, #16]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fb55 	bl	8008c9a <I2C_ITAddrCplt>
 80085f0:	e035      	b.n	800865e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d030      	beq.n	800865e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02b      	beq.n	800865e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d018      	beq.n	8008642 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008638:	3b01      	subs	r3, #1
 800863a:	b29a      	uxth	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008640:	e00d      	b.n	800865e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008648:	d002      	beq.n	8008650 <I2C_Slave_ISR_IT+0x1d2>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fbe3 	bl	8008e1c <I2C_ITSlaveSeqCplt>
 8008656:	e002      	b.n	800865e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008658:	bf00      	nop
 800865a:	e000      	b.n	800865e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800865c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <I2C_Master_ISR_DMA+0x1a>
 8008686:	2302      	movs	r3, #2
 8008688:	e0e7      	b.n	800885a <I2C_Master_ISR_DMA+0x1ea>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	d016      	beq.n	80086ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2210      	movs	r2, #16
 80086ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b2:	f043 0204 	orr.w	r2, r3, #4
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80086ba:	2120      	movs	r1, #32
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f001 f94d 	bl	800995c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 ff9d 	bl	8009602 <I2C_Flush_TXDR>
 80086c8:	e0c2      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d07f      	beq.n	80087d4 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d07a      	beq.n	80087d4 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008704:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800870a:	b29b      	uxth	r3, r3
 800870c:	2bff      	cmp	r3, #255	@ 0xff
 800870e:	d914      	bls.n	800873a <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	0c1b      	lsrs	r3, r3, #16
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d103      	bne.n	800872c <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	851a      	strh	r2, [r3, #40]	@ 0x28
 800872a:	e002      	b.n	8008732 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	22ff      	movs	r2, #255	@ 0xff
 8008730:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8008732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e010      	b.n	800875c <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800874c:	d003      	beq.n	8008756 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e002      	b.n	800875c <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800875a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008760:	b2da      	uxtb	r2, r3
 8008762:	8a79      	ldrh	r1, [r7, #18]
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f001 f8c4 	bl	80098f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008774:	b29a      	uxth	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b22      	cmp	r3, #34	@ 0x22
 800878c:	d108      	bne.n	80087a0 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800879c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800879e:	e057      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80087b0:	e04e      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c0:	d003      	beq.n	80087ca <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 faed 	bl	8008da2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80087c8:	e042      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80087ca:	2140      	movs	r1, #64	@ 0x40
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 fe01 	bl	80093d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80087d2:	e03d      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d028      	beq.n	8008830 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d023      	beq.n	8008830 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d119      	bne.n	8008826 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008800:	d025      	beq.n	800884e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008806:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800880a:	d108      	bne.n	800881e <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800881a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800881c:	e017      	b.n	800884e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fabf 	bl	8008da2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008824:	e013      	b.n	800884e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008826:	2140      	movs	r1, #64	@ 0x40
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fdd3 	bl	80093d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800882e:	e00e      	b.n	800884e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fb44 	bl	8008ed4 <I2C_ITMasterCplt>
 800884c:	e000      	b.n	8008850 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800884e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008870:	4b90      	ldr	r3, [pc, #576]	@ (8008ab4 <I2C_Mem_ISR_DMA+0x250>)
 8008872:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <I2C_Mem_ISR_DMA+0x1e>
 800887e:	2302      	movs	r3, #2
 8008880:	e12f      	b.n	8008ae2 <I2C_Mem_ISR_DMA+0x27e>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d016      	beq.n	80088c2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2210      	movs	r2, #16
 80088a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80088b2:	2120      	movs	r1, #32
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 f851 	bl	800995c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fea1 	bl	8009602 <I2C_Flush_TXDR>
 80088c0:	e10a      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80088e8:	e0f6      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d06d      	beq.n	80089d0 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d068      	beq.n	80089d0 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80088fe:	2101      	movs	r1, #1
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 f8af 	bl	8009a64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008906:	2110      	movs	r1, #16
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 f827 	bl	800995c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d056      	beq.n	80089c6 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2bff      	cmp	r3, #255	@ 0xff
 8008920:	d91e      	bls.n	8008960 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	0c1b      	lsrs	r3, r3, #16
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b01      	cmp	r3, #1
 8008934:	d103      	bne.n	800893e <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800893c:	e002      	b.n	8008944 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	@ 0xff
 8008942:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008948:	b299      	uxth	r1, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894e:	b2da      	uxtb	r2, r3
 8008950:	2300      	movs	r3, #0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 ffcd 	bl	80098f8 <I2C_TransferConfig>
 800895e:	e011      	b.n	8008984 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896e:	b299      	uxth	r1, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008974:	b2da      	uxtb	r2, r3
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 ffba 	bl	80098f8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b22      	cmp	r3, #34	@ 0x22
 80089a0:	d108      	bne.n	80089b4 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089b2:	e091      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089c4:	e088      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80089c6:	2140      	movs	r1, #64	@ 0x40
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fd03 	bl	80093d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80089ce:	e083      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d070      	beq.n	8008abc <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d06b      	beq.n	8008abc <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089e4:	2101      	movs	r1, #1
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f001 f83c 	bl	8009a64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80089ec:	2110      	movs	r1, #16
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 ffb4 	bl	800995c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b22      	cmp	r3, #34	@ 0x22
 80089fe:	d101      	bne.n	8008a04 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8008a00:	4b2d      	ldr	r3, [pc, #180]	@ (8008ab8 <I2C_Mem_ISR_DMA+0x254>)
 8008a02:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2bff      	cmp	r3, #255	@ 0xff
 8008a0c:	d91e      	bls.n	8008a4c <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d103      	bne.n	8008a2a <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a28:	e002      	b.n	8008a30 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	22ff      	movs	r2, #255	@ 0xff
 8008a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a34:	b299      	uxth	r1, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 ff57 	bl	80098f8 <I2C_TransferConfig>
 8008a4a:	e011      	b.n	8008a70 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a5a:	b299      	uxth	r1, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 ff44 	bl	80098f8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b22      	cmp	r3, #34	@ 0x22
 8008a8c:	d108      	bne.n	8008aa0 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a9c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a9e:	e01b      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ab0:	e012      	b.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
 8008ab2:	bf00      	nop
 8008ab4:	80002000 	.word	0x80002000
 8008ab8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f9fe 	bl	8008ed4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop

08008aec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <I2C_Slave_ISR_DMA+0x24>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e0c0      	b.n	8008c92 <I2C_Slave_ISR_DMA+0x1a6>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa98 	bl	8009064 <I2C_ITSlaveCplt>
 8008b34:	e0a8      	b.n	8008c88 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 8095 	beq.w	8008c6c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 808f 	beq.w	8008c6c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d07d      	beq.n	8008c5e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00c      	beq.n	8008b84 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8008b80:	2301      	movs	r3, #1
 8008b82:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00c      	beq.n	8008ba6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d128      	bne.n	8008bfe <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b28      	cmp	r3, #40	@ 0x28
 8008bb6:	d108      	bne.n	8008bca <I2C_Slave_ISR_DMA+0xde>
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bbe:	d104      	bne.n	8008bca <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fbb2 	bl	800932c <I2C_ITListenCplt>
 8008bc8:	e048      	b.n	8008c5c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b29      	cmp	r3, #41	@ 0x29
 8008bd4:	d10e      	bne.n	8008bf4 <I2C_Slave_ISR_DMA+0x108>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bdc:	d00a      	beq.n	8008bf4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2210      	movs	r2, #16
 8008be4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fd0b 	bl	8009602 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f915 	bl	8008e1c <I2C_ITSlaveSeqCplt>
 8008bf2:	e033      	b.n	8008c5c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008bfc:	e034      	b.n	8008c68 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2210      	movs	r2, #16
 8008c04:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c0a:	f043 0204 	orr.w	r2, r3, #4
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c18:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <I2C_Slave_ISR_DMA+0x13c>
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c26:	d11f      	bne.n	8008c68 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b21      	cmp	r3, #33	@ 0x21
 8008c2c:	d002      	beq.n	8008c34 <I2C_Slave_ISR_DMA+0x148>
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b29      	cmp	r3, #41	@ 0x29
 8008c32:	d103      	bne.n	8008c3c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2221      	movs	r2, #33	@ 0x21
 8008c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c3a:	e008      	b.n	8008c4e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	2b22      	cmp	r3, #34	@ 0x22
 8008c40:	d002      	beq.n	8008c48 <I2C_Slave_ISR_DMA+0x15c>
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c46:	d102      	bne.n	8008c4e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2222      	movs	r2, #34	@ 0x22
 8008c4c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c52:	4619      	mov	r1, r3
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 fbbd 	bl	80093d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8008c5a:	e005      	b.n	8008c68 <I2C_Slave_ISR_DMA+0x17c>
 8008c5c:	e004      	b.n	8008c68 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2210      	movs	r2, #16
 8008c64:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c66:	e00f      	b.n	8008c88 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8008c68:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c6a:	e00d      	b.n	8008c88 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f809 	bl	8008c9a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008cb0:	2b28      	cmp	r3, #40	@ 0x28
 8008cb2:	d16a      	bne.n	8008d8a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008cd2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ce0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008cee:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d138      	bne.n	8008d6a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	09db      	lsrs	r3, r3, #7
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	89bb      	ldrh	r3, [r7, #12]
 8008d00:	4053      	eors	r3, r2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f003 0306 	and.w	r3, r3, #6
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11c      	bne.n	8008d46 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008d0c:	897b      	ldrh	r3, [r7, #10]
 8008d0e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d13b      	bne.n	8008d9a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d38:	89ba      	ldrh	r2, [r7, #12]
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7f9 fbe0 	bl	8002504 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d44:	e029      	b.n	8008d9a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008d46:	893b      	ldrh	r3, [r7, #8]
 8008d48:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fe88 	bl	8009a64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d5c:	89ba      	ldrh	r2, [r7, #12]
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f9 fbce 	bl	8002504 <HAL_I2C_AddrCallback>
}
 8008d68:	e017      	b.n	8008d9a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fe78 	bl	8009a64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d7c:	89ba      	ldrh	r2, [r7, #12]
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 fbbe 	bl	8002504 <HAL_I2C_AddrCallback>
}
 8008d88:	e007      	b.n	8008d9a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2208      	movs	r2, #8
 8008d90:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b21      	cmp	r3, #33	@ 0x21
 8008dbc:	d115      	bne.n	8008dea <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2211      	movs	r2, #17
 8008dca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fe45 	bl	8009a64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff faff 	bl	80083e6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008de8:	e014      	b.n	8008e14 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2212      	movs	r2, #18
 8008df6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008dfe:	2102      	movs	r1, #2
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fe2f 	bl	8009a64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff faf3 	bl	80083fa <HAL_I2C_MasterRxCpltCallback>
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d008      	beq.n	8008e50 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e00c      	b.n	8008e6a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d007      	beq.n	8008e6a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b29      	cmp	r3, #41	@ 0x29
 8008e74:	d112      	bne.n	8008e9c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2228      	movs	r2, #40	@ 0x28
 8008e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2221      	movs	r2, #33	@ 0x21
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e84:	2101      	movs	r1, #1
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fdec 	bl	8009a64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7f9 fb21 	bl	80024dc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e9a:	e017      	b.n	8008ecc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea6:	d111      	bne.n	8008ecc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2228      	movs	r2, #40	@ 0x28
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2222      	movs	r2, #34	@ 0x22
 8008eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008eb6:	2102      	movs	r1, #2
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fdd3 	bl	8009a64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7f9 fb12 	bl	80024f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ecc:	bf00      	nop
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b21      	cmp	r3, #33	@ 0x21
 8008ef4:	d107      	bne.n	8008f06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fdb3 	bl	8009a64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2211      	movs	r2, #17
 8008f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f04:	e00c      	b.n	8008f20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b22      	cmp	r3, #34	@ 0x22
 8008f10:	d106      	bne.n	8008f20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f12:	2102      	movs	r1, #2
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fda5 	bl	8009a64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2212      	movs	r2, #18
 8008f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6859      	ldr	r1, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800905c <I2C_ITMasterCplt+0x188>)
 8008f2c:	400b      	ands	r3, r1
 8008f2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a49      	ldr	r2, [pc, #292]	@ (8009060 <I2C_ITMasterCplt+0x18c>)
 8008f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f52:	f043 0204 	orr.w	r2, r3, #4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b60      	cmp	r3, #96	@ 0x60
 8008f64:	d10a      	bne.n	8008f7c <I2C_ITMasterCplt+0xa8>
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fb40 	bl	8009602 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b60      	cmp	r3, #96	@ 0x60
 8008f92:	d002      	beq.n	8008f9a <I2C_ITMasterCplt+0xc6>
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fa17 	bl	80093d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fa6:	e054      	b.n	8009052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b21      	cmp	r3, #33	@ 0x21
 8008fb2:	d124      	bne.n	8008ffe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b40      	cmp	r3, #64	@ 0x40
 8008fcc:	d10b      	bne.n	8008fe6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff fa15 	bl	800840e <HAL_I2C_MemTxCpltCallback>
}
 8008fe4:	e035      	b.n	8009052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff f9f5 	bl	80083e6 <HAL_I2C_MasterTxCpltCallback>
}
 8008ffc:	e029      	b.n	8009052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b22      	cmp	r3, #34	@ 0x22
 8009008:	d123      	bne.n	8009052 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b40      	cmp	r3, #64	@ 0x40
 8009022:	d10b      	bne.n	800903c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f9f4 	bl	8008422 <HAL_I2C_MemRxCpltCallback>
}
 800903a:	e00a      	b.n	8009052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff f9d4 	bl	80083fa <HAL_I2C_MasterRxCpltCallback>
}
 8009052:	bf00      	nop
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	fe00e800 	.word	0xfe00e800
 8009060:	ffff0000 	.word	0xffff0000

08009064 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009086:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2220      	movs	r2, #32
 800908e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	2b21      	cmp	r3, #33	@ 0x21
 8009094:	d002      	beq.n	800909c <I2C_ITSlaveCplt+0x38>
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	2b29      	cmp	r3, #41	@ 0x29
 800909a:	d108      	bne.n	80090ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800909c:	f248 0101 	movw	r1, #32769	@ 0x8001
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fcdf 	bl	8009a64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2221      	movs	r2, #33	@ 0x21
 80090aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80090ac:	e019      	b.n	80090e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	2b22      	cmp	r3, #34	@ 0x22
 80090b2:	d002      	beq.n	80090ba <I2C_ITSlaveCplt+0x56>
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090b8:	d108      	bne.n	80090cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80090ba:	f248 0102 	movw	r1, #32770	@ 0x8002
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fcd0 	bl	8009a64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2222      	movs	r2, #34	@ 0x22
 80090c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80090ca:	e00a      	b.n	80090e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	2b28      	cmp	r3, #40	@ 0x28
 80090d0:	d107      	bne.n	80090e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80090d2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fcc4 	bl	8009a64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6859      	ldr	r1, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b89      	ldr	r3, [pc, #548]	@ (8009324 <I2C_ITSlaveCplt+0x2c0>)
 80090fe:	400b      	ands	r3, r1
 8009100:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa7d 	bl	8009602 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d013      	beq.n	800913a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009120:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01f      	beq.n	800916a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009138:	e017      	b.n	800916a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d012      	beq.n	800916a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009152:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d020      	beq.n	80091b6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f023 0304 	bic.w	r3, r3, #4
 800917a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c4:	f043 0204 	orr.w	r2, r3, #4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d049      	beq.n	800926a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d044      	beq.n	800926a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d128      	bne.n	800923c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b28      	cmp	r3, #40	@ 0x28
 80091f4:	d108      	bne.n	8009208 <I2C_ITSlaveCplt+0x1a4>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091fc:	d104      	bne.n	8009208 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f893 	bl	800932c <I2C_ITListenCplt>
 8009206:	e030      	b.n	800926a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b29      	cmp	r3, #41	@ 0x29
 8009212:	d10e      	bne.n	8009232 <I2C_ITSlaveCplt+0x1ce>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800921a:	d00a      	beq.n	8009232 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2210      	movs	r2, #16
 8009222:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9ec 	bl	8009602 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fdf6 	bl	8008e1c <I2C_ITSlaveSeqCplt>
 8009230:	e01b      	b.n	800926a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2210      	movs	r2, #16
 8009238:	61da      	str	r2, [r3, #28]
 800923a:	e016      	b.n	800926a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2210      	movs	r2, #16
 8009242:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009248:	f043 0204 	orr.w	r2, r3, #4
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <I2C_ITSlaveCplt+0x1fa>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800925c:	d105      	bne.n	800926a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f8b5 	bl	80093d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927c:	2b00      	cmp	r3, #0
 800927e:	d010      	beq.n	80092a2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f8a4 	bl	80093d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b28      	cmp	r3, #40	@ 0x28
 8009296:	d141      	bne.n	800931c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009298:	6979      	ldr	r1, [r7, #20]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f846 	bl	800932c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092a0:	e03c      	b.n	800931c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092aa:	d014      	beq.n	80092d6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7ff fdb5 	bl	8008e1c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009328 <I2C_ITSlaveCplt+0x2c4>)
 80092b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7f9 f95a 	bl	8002588 <HAL_I2C_ListenCpltCallback>
}
 80092d4:	e022      	b.n	800931c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b22      	cmp	r3, #34	@ 0x22
 80092e0:	d10e      	bne.n	8009300 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7f9 f8f9 	bl	80024f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80092fe:	e00d      	b.n	800931c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7f9 f8e0 	bl	80024dc <HAL_I2C_SlaveTxCpltCallback>
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	fe00e800 	.word	0xfe00e800
 8009328:	ffff0000 	.word	0xffff0000

0800932c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a25      	ldr	r2, [pc, #148]	@ (80093d0 <I2C_ITListenCplt+0xa4>)
 800933a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	d022      	beq.n	80093a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d012      	beq.n	80093a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a0:	f043 0204 	orr.w	r2, r3, #4
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fb59 	bl	8009a64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2210      	movs	r2, #16
 80093b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f9 f8e0 	bl	8002588 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	ffff0000 	.word	0xffff0000

080093d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a6d      	ldr	r2, [pc, #436]	@ (80095a8 <I2C_ITError+0x1d4>)
 80093f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b28      	cmp	r3, #40	@ 0x28
 800940a:	d005      	beq.n	8009418 <I2C_ITError+0x44>
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	2b29      	cmp	r3, #41	@ 0x29
 8009410:	d002      	beq.n	8009418 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b2a      	cmp	r3, #42	@ 0x2a
 8009416:	d10b      	bne.n	8009430 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009418:	2103      	movs	r1, #3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fb22 	bl	8009a64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2228      	movs	r2, #40	@ 0x28
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a60      	ldr	r2, [pc, #384]	@ (80095ac <I2C_ITError+0x1d8>)
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34
 800942e:	e030      	b.n	8009492 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009430:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb15 	bl	8009a64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f8e1 	bl	8009602 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b60      	cmp	r3, #96	@ 0x60
 800944a:	d01f      	beq.n	800948c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d114      	bne.n	800948c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b10      	cmp	r3, #16
 800946e:	d109      	bne.n	8009484 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947c:	f043 0204 	orr.w	r2, r3, #4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2220      	movs	r2, #32
 800948a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d039      	beq.n	8009514 <I2C_ITError+0x140>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b11      	cmp	r3, #17
 80094a4:	d002      	beq.n	80094ac <I2C_ITError+0xd8>
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b21      	cmp	r3, #33	@ 0x21
 80094aa:	d133      	bne.n	8009514 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094ba:	d107      	bne.n	80094cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fa45 	bl	8007960 <HAL_DMA_GetState>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d017      	beq.n	800950c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e0:	4a33      	ldr	r2, [pc, #204]	@ (80095b0 <I2C_ITError+0x1dc>)
 80094e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe f9f4 	bl	80078de <HAL_DMA_Abort_IT>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d04d      	beq.n	8009598 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009506:	4610      	mov	r0, r2
 8009508:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800950a:	e045      	b.n	8009598 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f851 	bl	80095b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009512:	e041      	b.n	8009598 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d039      	beq.n	8009590 <I2C_ITError+0x1bc>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b12      	cmp	r3, #18
 8009520:	d002      	beq.n	8009528 <I2C_ITError+0x154>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b22      	cmp	r3, #34	@ 0x22
 8009526:	d133      	bne.n	8009590 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009536:	d107      	bne.n	8009548 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009546:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fa07 	bl	8007960 <HAL_DMA_GetState>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d017      	beq.n	8009588 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955c:	4a14      	ldr	r2, [pc, #80]	@ (80095b0 <I2C_ITError+0x1dc>)
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe f9b6 	bl	80078de <HAL_DMA_Abort_IT>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d011      	beq.n	800959c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009582:	4610      	mov	r0, r2
 8009584:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009586:	e009      	b.n	800959c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f813 	bl	80095b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800958e:	e005      	b.n	800959c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f80f 	bl	80095b4 <I2C_TreatErrorCallback>
  }
}
 8009596:	e002      	b.n	800959e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800959c:	bf00      	nop
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	ffff0000 	.word	0xffff0000
 80095ac:	0800847f 	.word	0x0800847f
 80095b0:	0800964b 	.word	0x0800964b

080095b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b60      	cmp	r3, #96	@ 0x60
 80095c6:	d10e      	bne.n	80095e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fe ff29 	bl	8008436 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095e4:	e009      	b.n	80095fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7f9 f80d 	bl	8002614 <HAL_I2C_ErrorCallback>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b02      	cmp	r3, #2
 8009616:	d103      	bne.n	8009620 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2200      	movs	r2, #0
 800961e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b01      	cmp	r3, #1
 800962c:	d007      	beq.n	800963e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699a      	ldr	r2, [r3, #24]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0201 	orr.w	r2, r2, #1
 800963c:	619a      	str	r2, [r3, #24]
  }
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009664:	2200      	movs	r2, #0
 8009666:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009674:	2200      	movs	r2, #0
 8009676:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff ff9b 	bl	80095b4 <I2C_TreatErrorCallback>
}
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	603b      	str	r3, [r7, #0]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009696:	e03b      	b.n	8009710 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f84b 	bl	8009738 <I2C_IsErrorOccurred>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e041      	b.n	8009730 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096b2:	d02d      	beq.n	8009710 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b4:	f7fd ffb8 	bl	8007628 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d302      	bcc.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d122      	bne.n	8009710 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4013      	ands	r3, r2
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d113      	bne.n	8009710 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ec:	f043 0220 	orr.w	r2, r3, #32
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e00f      	b.n	8009730 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699a      	ldr	r2, [r3, #24]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	4013      	ands	r3, r2
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	429a      	cmp	r2, r3
 800971e:	bf0c      	ite	eq
 8009720:	2301      	moveq	r3, #1
 8009722:	2300      	movne	r3, #0
 8009724:	b2db      	uxtb	r3, r3
 8009726:	461a      	mov	r2, r3
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	429a      	cmp	r2, r3
 800972c:	d0b4      	beq.n	8009698 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	@ 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d068      	beq.n	8009836 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2210      	movs	r2, #16
 800976a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800976c:	e049      	b.n	8009802 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009774:	d045      	beq.n	8009802 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009776:	f7fd ff57 	bl	8007628 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <I2C_IsErrorOccurred+0x54>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d13a      	bne.n	8009802 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009796:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800979e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097ae:	d121      	bne.n	80097f4 <I2C_IsErrorOccurred+0xbc>
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097b6:	d01d      	beq.n	80097f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097b8:	7cfb      	ldrb	r3, [r7, #19]
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d01a      	beq.n	80097f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80097ce:	f7fd ff2b 	bl	8007628 <HAL_GetTick>
 80097d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097d4:	e00e      	b.n	80097f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80097d6:	f7fd ff27 	bl	8007628 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	2b19      	cmp	r3, #25
 80097e2:	d907      	bls.n	80097f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	f043 0320 	orr.w	r3, r3, #32
 80097ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80097f2:	e006      	b.n	8009802 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d1e9      	bne.n	80097d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b20      	cmp	r3, #32
 800980e:	d003      	beq.n	8009818 <I2C_IsErrorOccurred+0xe0>
 8009810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0aa      	beq.n	800976e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2220      	movs	r2, #32
 8009826:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	f043 0304 	orr.w	r3, r3, #4
 800982e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f043 0301 	orr.w	r3, r3, #1
 800984e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f043 0308 	orr.w	r3, r3, #8
 8009870:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800987a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	f043 0302 	orr.w	r3, r3, #2
 8009892:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800989c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01c      	beq.n	80098e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f7ff fea8 	bl	8009602 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <I2C_IsErrorOccurred+0x1bc>)
 80098be:	400b      	ands	r3, r1
 80098c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80098e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3728      	adds	r7, #40	@ 0x28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	fe00e800 	.word	0xfe00e800

080098f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	817b      	strh	r3, [r7, #10]
 8009906:	4613      	mov	r3, r2
 8009908:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800990a:	897b      	ldrh	r3, [r7, #10]
 800990c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009910:	7a7b      	ldrb	r3, [r7, #9]
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009918:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	4313      	orrs	r3, r2
 8009922:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009926:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	0d5b      	lsrs	r3, r3, #21
 8009932:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009936:	4b08      	ldr	r3, [pc, #32]	@ (8009958 <I2C_TransferConfig+0x60>)
 8009938:	430b      	orrs	r3, r1
 800993a:	43db      	mvns	r3, r3
 800993c:	ea02 0103 	and.w	r1, r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	03ff63ff 	.word	0x03ff63ff

0800995c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009970:	4a39      	ldr	r2, [pc, #228]	@ (8009a58 <I2C_Enable_IRQ+0xfc>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d032      	beq.n	80099dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800997a:	4a38      	ldr	r2, [pc, #224]	@ (8009a5c <I2C_Enable_IRQ+0x100>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d02d      	beq.n	80099dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009984:	4a36      	ldr	r2, [pc, #216]	@ (8009a60 <I2C_Enable_IRQ+0x104>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d028      	beq.n	80099dc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800998a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800998e:	2b00      	cmp	r3, #0
 8009990:	da03      	bge.n	800999a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009998:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800999a:	887b      	ldrh	r3, [r7, #2]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80099aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099ac:	887b      	ldrh	r3, [r7, #2]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80099bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80099be:	887b      	ldrh	r3, [r7, #2]
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d103      	bne.n	80099cc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80099ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099cc:	887b      	ldrh	r3, [r7, #2]
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d133      	bne.n	8009a3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f043 0320 	orr.w	r3, r3, #32
 80099d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099da:	e02e      	b.n	8009a3a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	da03      	bge.n	80099ec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099ec:	887b      	ldrh	r3, [r7, #2]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80099fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099fe:	887b      	ldrh	r3, [r7, #2]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009a0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a10:	887b      	ldrh	r3, [r7, #2]
 8009a12:	2b10      	cmp	r3, #16
 8009a14:	d103      	bne.n	8009a1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a1e:	887b      	ldrh	r3, [r7, #2]
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d103      	bne.n	8009a2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009a2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a2c:	887b      	ldrh	r3, [r7, #2]
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	d103      	bne.n	8009a3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	601a      	str	r2, [r3, #0]
}
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	08008671 	.word	0x08008671
 8009a5c:	08008aed 	.word	0x08008aed
 8009a60:	08008865 	.word	0x08008865

08009a64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a74:	887b      	ldrh	r3, [r7, #2]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00f      	beq.n	8009a9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009a84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a92:	2b28      	cmp	r3, #40	@ 0x28
 8009a94:	d003      	beq.n	8009a9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009a9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a9e:	887b      	ldrh	r3, [r7, #2]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00f      	beq.n	8009ac8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009aae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009abc:	2b28      	cmp	r3, #40	@ 0x28
 8009abe:	d003      	beq.n	8009ac8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da03      	bge.n	8009ad8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009ad6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ad8:	887b      	ldrh	r3, [r7, #2]
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d103      	bne.n	8009ae6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009ae4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d103      	bne.n	8009af4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f043 0320 	orr.w	r3, r3, #32
 8009af2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009af4:	887b      	ldrh	r3, [r7, #2]
 8009af6:	2b40      	cmp	r3, #64	@ 0x40
 8009af8:	d103      	bne.n	8009b02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	43da      	mvns	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	400a      	ands	r2, r1
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d138      	bne.n	8009ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e032      	b.n	8009baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2224      	movs	r2, #36	@ 0x24
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0201 	bic.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0201 	orr.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e000      	b.n	8009baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ba8:	2302      	movs	r3, #2
  }
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d139      	bne.n	8009c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e033      	b.n	8009c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2224      	movs	r2, #36	@ 0x24
 8009be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0201 	orr.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e000      	b.n	8009c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
  }
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c54:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a04      	ldr	r2, [pc, #16]	@ (8009c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c5e:	6013      	str	r3, [r2, #0]
}
 8009c60:	bf00      	nop
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	40007000 	.word	0x40007000

08009c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009c74:	4b04      	ldr	r3, [pc, #16]	@ (8009c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	40007000 	.word	0x40007000

08009c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c9a:	d130      	bne.n	8009cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c9c:	4b23      	ldr	r3, [pc, #140]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ca8:	d038      	beq.n	8009d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009caa:	4b20      	ldr	r3, [pc, #128]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009cb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009cba:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2232      	movs	r2, #50	@ 0x32
 8009cc0:	fb02 f303 	mul.w	r3, r2, r3
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	0c9b      	lsrs	r3, r3, #18
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cd0:	e002      	b.n	8009cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cd8:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ce4:	d102      	bne.n	8009cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f2      	bne.n	8009cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cf8:	d110      	bne.n	8009d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e00f      	b.n	8009d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0a:	d007      	beq.n	8009d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009d0c:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009d14:	4a05      	ldr	r2, [pc, #20]	@ (8009d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	40007000 	.word	0x40007000
 8009d30:	20000f2c 	.word	0x20000f2c
 8009d34:	431bde83 	.word	0x431bde83

08009d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f000 bc02 	b.w	800a550 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d4c:	4b96      	ldr	r3, [pc, #600]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f003 030c 	and.w	r3, r3, #12
 8009d54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d56:	4b94      	ldr	r3, [pc, #592]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80e4 	beq.w	8009f36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <HAL_RCC_OscConfig+0x4c>
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b0c      	cmp	r3, #12
 8009d78:	f040 808b 	bne.w	8009e92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	f040 8087 	bne.w	8009e92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009d84:	4b88      	ldr	r3, [pc, #544]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <HAL_RCC_OscConfig+0x64>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e3d9      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1a      	ldr	r2, [r3, #32]
 8009da0:	4b81      	ldr	r3, [pc, #516]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <HAL_RCC_OscConfig+0x7e>
 8009dac:	4b7e      	ldr	r3, [pc, #504]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009db4:	e005      	b.n	8009dc2 <HAL_RCC_OscConfig+0x8a>
 8009db6:	4b7c      	ldr	r3, [pc, #496]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dbc:	091b      	lsrs	r3, r3, #4
 8009dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d223      	bcs.n	8009e0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fd8c 	bl	800a8e8 <RCC_SetFlashLatencyFromMSIRange>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e3ba      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dda:	4b73      	ldr	r3, [pc, #460]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a72      	ldr	r2, [pc, #456]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009de0:	f043 0308 	orr.w	r3, r3, #8
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4b70      	ldr	r3, [pc, #448]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	496d      	ldr	r1, [pc, #436]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009df8:	4b6b      	ldr	r3, [pc, #428]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	021b      	lsls	r3, r3, #8
 8009e06:	4968      	ldr	r1, [pc, #416]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	604b      	str	r3, [r1, #4]
 8009e0c:	e025      	b.n	8009e5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e0e:	4b66      	ldr	r3, [pc, #408]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a65      	ldr	r2, [pc, #404]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e14:	f043 0308 	orr.w	r3, r3, #8
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	4b63      	ldr	r3, [pc, #396]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	4960      	ldr	r1, [pc, #384]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	021b      	lsls	r3, r3, #8
 8009e3a:	495b      	ldr	r1, [pc, #364]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fd4c 	bl	800a8e8 <RCC_SetFlashLatencyFromMSIRange>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e37a      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e5a:	f000 fc81 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	4b51      	ldr	r3, [pc, #324]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	091b      	lsrs	r3, r3, #4
 8009e66:	f003 030f 	and.w	r3, r3, #15
 8009e6a:	4950      	ldr	r1, [pc, #320]	@ (8009fac <HAL_RCC_OscConfig+0x274>)
 8009e6c:	5ccb      	ldrb	r3, [r1, r3]
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	fa22 f303 	lsr.w	r3, r2, r3
 8009e76:	4a4e      	ldr	r2, [pc, #312]	@ (8009fb0 <HAL_RCC_OscConfig+0x278>)
 8009e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8009fb4 <HAL_RCC_OscConfig+0x27c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fd fb82 	bl	8007588 <HAL_InitTick>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d052      	beq.n	8009f34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	e35e      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d032      	beq.n	8009f00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009e9a:	4b43      	ldr	r3, [pc, #268]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a42      	ldr	r2, [pc, #264]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009ea6:	f7fd fbbf 	bl	8007628 <HAL_GetTick>
 8009eaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009eac:	e008      	b.n	8009ec0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009eae:	f7fd fbbb 	bl	8007628 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d901      	bls.n	8009ec0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e347      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009ec0:	4b39      	ldr	r3, [pc, #228]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0f0      	beq.n	8009eae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ecc:	4b36      	ldr	r3, [pc, #216]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a35      	ldr	r2, [pc, #212]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ed2:	f043 0308 	orr.w	r3, r3, #8
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	4b33      	ldr	r3, [pc, #204]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	4930      	ldr	r1, [pc, #192]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009eea:	4b2f      	ldr	r3, [pc, #188]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	492b      	ldr	r1, [pc, #172]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	604b      	str	r3, [r1, #4]
 8009efe:	e01a      	b.n	8009f36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009f00:	4b29      	ldr	r3, [pc, #164]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a28      	ldr	r2, [pc, #160]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f06:	f023 0301 	bic.w	r3, r3, #1
 8009f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009f0c:	f7fd fb8c 	bl	8007628 <HAL_GetTick>
 8009f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009f12:	e008      	b.n	8009f26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f14:	f7fd fb88 	bl	8007628 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e314      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009f26:	4b20      	ldr	r3, [pc, #128]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1f0      	bne.n	8009f14 <HAL_RCC_OscConfig+0x1dc>
 8009f32:	e000      	b.n	8009f36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d073      	beq.n	800a02a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d005      	beq.n	8009f54 <HAL_RCC_OscConfig+0x21c>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b0c      	cmp	r3, #12
 8009f4c:	d10e      	bne.n	8009f6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d10b      	bne.n	8009f6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f54:	4b14      	ldr	r3, [pc, #80]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d063      	beq.n	800a028 <HAL_RCC_OscConfig+0x2f0>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d15f      	bne.n	800a028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e2f1      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f74:	d106      	bne.n	8009f84 <HAL_RCC_OscConfig+0x24c>
 8009f76:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	e025      	b.n	8009fd0 <HAL_RCC_OscConfig+0x298>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f8c:	d114      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x280>
 8009f8e:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a05      	ldr	r2, [pc, #20]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a02      	ldr	r2, [pc, #8]	@ (8009fa8 <HAL_RCC_OscConfig+0x270>)
 8009fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e013      	b.n	8009fd0 <HAL_RCC_OscConfig+0x298>
 8009fa8:	40021000 	.word	0x40021000
 8009fac:	08010f80 	.word	0x08010f80
 8009fb0:	20000f2c 	.word	0x20000f2c
 8009fb4:	20000f34 	.word	0x20000f34
 8009fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 8009fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	4b9d      	ldr	r3, [pc, #628]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a9c      	ldr	r2, [pc, #624]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 8009fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d013      	beq.n	800a000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd8:	f7fd fb26 	bl	8007628 <HAL_GetTick>
 8009fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fde:	e008      	b.n	8009ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fe0:	f7fd fb22 	bl	8007628 <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b64      	cmp	r3, #100	@ 0x64
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e2ae      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ff2:	4b92      	ldr	r3, [pc, #584]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0f0      	beq.n	8009fe0 <HAL_RCC_OscConfig+0x2a8>
 8009ffe:	e014      	b.n	800a02a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a000:	f7fd fb12 	bl	8007628 <HAL_GetTick>
 800a004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a006:	e008      	b.n	800a01a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a008:	f7fd fb0e 	bl	8007628 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b64      	cmp	r3, #100	@ 0x64
 800a014:	d901      	bls.n	800a01a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e29a      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a01a:	4b88      	ldr	r3, [pc, #544]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1f0      	bne.n	800a008 <HAL_RCC_OscConfig+0x2d0>
 800a026:	e000      	b.n	800a02a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d060      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d005      	beq.n	800a048 <HAL_RCC_OscConfig+0x310>
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	2b0c      	cmp	r3, #12
 800a040:	d119      	bne.n	800a076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d116      	bne.n	800a076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a048:	4b7c      	ldr	r3, [pc, #496]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <HAL_RCC_OscConfig+0x328>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e277      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a060:	4b76      	ldr	r3, [pc, #472]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	4973      	ldr	r1, [pc, #460]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a070:	4313      	orrs	r3, r2
 800a072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a074:	e040      	b.n	800a0f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d023      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a07e:	4b6f      	ldr	r3, [pc, #444]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a6e      	ldr	r2, [pc, #440]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08a:	f7fd facd 	bl	8007628 <HAL_GetTick>
 800a08e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a090:	e008      	b.n	800a0a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a092:	f7fd fac9 	bl	8007628 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d901      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e255      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0a4:	4b65      	ldr	r3, [pc, #404]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0f0      	beq.n	800a092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b0:	4b62      	ldr	r3, [pc, #392]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	061b      	lsls	r3, r3, #24
 800a0be:	495f      	ldr	r1, [pc, #380]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	604b      	str	r3, [r1, #4]
 800a0c4:	e018      	b.n	800a0f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0c6:	4b5d      	ldr	r3, [pc, #372]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a5c      	ldr	r2, [pc, #368]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d2:	f7fd faa9 	bl	8007628 <HAL_GetTick>
 800a0d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0d8:	e008      	b.n	800a0ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0da:	f7fd faa5 	bl	8007628 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e231      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0ec:	4b53      	ldr	r3, [pc, #332]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f0      	bne.n	800a0da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0308 	and.w	r3, r3, #8
 800a100:	2b00      	cmp	r3, #0
 800a102:	d03c      	beq.n	800a17e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01c      	beq.n	800a146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a10c:	4b4b      	ldr	r3, [pc, #300]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a112:	4a4a      	ldr	r2, [pc, #296]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a114:	f043 0301 	orr.w	r3, r3, #1
 800a118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11c:	f7fd fa84 	bl	8007628 <HAL_GetTick>
 800a120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a124:	f7fd fa80 	bl	8007628 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e20c      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a136:	4b41      	ldr	r3, [pc, #260]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0ef      	beq.n	800a124 <HAL_RCC_OscConfig+0x3ec>
 800a144:	e01b      	b.n	800a17e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a146:	4b3d      	ldr	r3, [pc, #244]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a14c:	4a3b      	ldr	r2, [pc, #236]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a156:	f7fd fa67 	bl	8007628 <HAL_GetTick>
 800a15a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a15c:	e008      	b.n	800a170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a15e:	f7fd fa63 	bl	8007628 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e1ef      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a170:	4b32      	ldr	r3, [pc, #200]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1ef      	bne.n	800a15e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80a6 	beq.w	800a2d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a18c:	2300      	movs	r3, #0
 800a18e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a190:	4b2a      	ldr	r3, [pc, #168]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10d      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a19c:	4b27      	ldr	r3, [pc, #156]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a0:	4a26      	ldr	r2, [pc, #152]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a1a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1a8:	4b24      	ldr	r3, [pc, #144]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1b0:	60bb      	str	r3, [r7, #8]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1b8:	4b21      	ldr	r3, [pc, #132]	@ (800a240 <HAL_RCC_OscConfig+0x508>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d118      	bne.n	800a1f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a240 <HAL_RCC_OscConfig+0x508>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a240 <HAL_RCC_OscConfig+0x508>)
 800a1ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1d0:	f7fd fa2a 	bl	8007628 <HAL_GetTick>
 800a1d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1d6:	e008      	b.n	800a1ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1d8:	f7fd fa26 	bl	8007628 <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d901      	bls.n	800a1ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e1b2      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ea:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <HAL_RCC_OscConfig+0x508>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0f0      	beq.n	800a1d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d108      	bne.n	800a210 <HAL_RCC_OscConfig+0x4d8>
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a204:	4a0d      	ldr	r2, [pc, #52]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a206:	f043 0301 	orr.w	r3, r3, #1
 800a20a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a20e:	e029      	b.n	800a264 <HAL_RCC_OscConfig+0x52c>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	2b05      	cmp	r3, #5
 800a216:	d115      	bne.n	800a244 <HAL_RCC_OscConfig+0x50c>
 800a218:	4b08      	ldr	r3, [pc, #32]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21e:	4a07      	ldr	r2, [pc, #28]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a220:	f043 0304 	orr.w	r3, r3, #4
 800a224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a228:	4b04      	ldr	r3, [pc, #16]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a22e:	4a03      	ldr	r2, [pc, #12]	@ (800a23c <HAL_RCC_OscConfig+0x504>)
 800a230:	f043 0301 	orr.w	r3, r3, #1
 800a234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a238:	e014      	b.n	800a264 <HAL_RCC_OscConfig+0x52c>
 800a23a:	bf00      	nop
 800a23c:	40021000 	.word	0x40021000
 800a240:	40007000 	.word	0x40007000
 800a244:	4b9a      	ldr	r3, [pc, #616]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a24a:	4a99      	ldr	r2, [pc, #612]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a254:	4b96      	ldr	r3, [pc, #600]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a25a:	4a95      	ldr	r2, [pc, #596]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a25c:	f023 0304 	bic.w	r3, r3, #4
 800a260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d016      	beq.n	800a29a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a26c:	f7fd f9dc 	bl	8007628 <HAL_GetTick>
 800a270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a272:	e00a      	b.n	800a28a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a274:	f7fd f9d8 	bl	8007628 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e162      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a28a:	4b89      	ldr	r3, [pc, #548]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0ed      	beq.n	800a274 <HAL_RCC_OscConfig+0x53c>
 800a298:	e015      	b.n	800a2c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a29a:	f7fd f9c5 	bl	8007628 <HAL_GetTick>
 800a29e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2a0:	e00a      	b.n	800a2b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a2:	f7fd f9c1 	bl	8007628 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e14b      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2b8:	4b7d      	ldr	r3, [pc, #500]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1ed      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2c6:	7ffb      	ldrb	r3, [r7, #31]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d105      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2cc:	4b78      	ldr	r3, [pc, #480]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d0:	4a77      	ldr	r2, [pc, #476]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a2d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0320 	and.w	r3, r3, #32
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d03c      	beq.n	800a35e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01c      	beq.n	800a326 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2ec:	4b70      	ldr	r3, [pc, #448]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a2ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2f2:	4a6f      	ldr	r2, [pc, #444]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a2f4:	f043 0301 	orr.w	r3, r3, #1
 800a2f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2fc:	f7fd f994 	bl	8007628 <HAL_GetTick>
 800a300:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a304:	f7fd f990 	bl	8007628 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e11c      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a316:	4b66      	ldr	r3, [pc, #408]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0ef      	beq.n	800a304 <HAL_RCC_OscConfig+0x5cc>
 800a324:	e01b      	b.n	800a35e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a326:	4b62      	ldr	r3, [pc, #392]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a32c:	4a60      	ldr	r2, [pc, #384]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a32e:	f023 0301 	bic.w	r3, r3, #1
 800a332:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a336:	f7fd f977 	bl	8007628 <HAL_GetTick>
 800a33a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a33c:	e008      	b.n	800a350 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a33e:	f7fd f973 	bl	8007628 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e0ff      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a350:	4b57      	ldr	r3, [pc, #348]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1ef      	bne.n	800a33e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 80f3 	beq.w	800a54e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	f040 80c9 	bne.w	800a504 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a372:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f003 0203 	and.w	r2, r3, #3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a382:	429a      	cmp	r2, r3
 800a384:	d12c      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a390:	3b01      	subs	r3, #1
 800a392:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a394:	429a      	cmp	r2, r3
 800a396:	d123      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d113      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d109      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d06b      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b0c      	cmp	r3, #12
 800a3e4:	d062      	beq.n	800a4ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a3e6:	4b32      	ldr	r3, [pc, #200]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e0ac      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a3f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a2d      	ldr	r2, [pc, #180]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a3fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a400:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a402:	f7fd f911 	bl	8007628 <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a408:	e008      	b.n	800a41c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a40a:	f7fd f90d 	bl	8007628 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e099      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a41c:	4b24      	ldr	r3, [pc, #144]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1f0      	bne.n	800a40a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a428:	4b21      	ldr	r3, [pc, #132]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	4b21      	ldr	r3, [pc, #132]	@ (800a4b4 <HAL_RCC_OscConfig+0x77c>)
 800a42e:	4013      	ands	r3, r2
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a438:	3a01      	subs	r2, #1
 800a43a:	0112      	lsls	r2, r2, #4
 800a43c:	4311      	orrs	r1, r2
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a442:	0212      	lsls	r2, r2, #8
 800a444:	4311      	orrs	r1, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a44a:	0852      	lsrs	r2, r2, #1
 800a44c:	3a01      	subs	r2, #1
 800a44e:	0552      	lsls	r2, r2, #21
 800a450:	4311      	orrs	r1, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a456:	0852      	lsrs	r2, r2, #1
 800a458:	3a01      	subs	r2, #1
 800a45a:	0652      	lsls	r2, r2, #25
 800a45c:	4311      	orrs	r1, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a462:	06d2      	lsls	r2, r2, #27
 800a464:	430a      	orrs	r2, r1
 800a466:	4912      	ldr	r1, [pc, #72]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a468:	4313      	orrs	r3, r2
 800a46a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a46c:	4b10      	ldr	r3, [pc, #64]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a0f      	ldr	r2, [pc, #60]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a478:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a47e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a484:	f7fd f8d0 	bl	8007628 <HAL_GetTick>
 800a488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a48c:	f7fd f8cc 	bl	8007628 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e058      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a49e:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <HAL_RCC_OscConfig+0x778>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f0      	beq.n	800a48c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a4aa:	e050      	b.n	800a54e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e04f      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
 800a4b0:	40021000 	.word	0x40021000
 800a4b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4b8:	4b27      	ldr	r3, [pc, #156]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d144      	bne.n	800a54e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a4c4:	4b24      	ldr	r3, [pc, #144]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a23      	ldr	r2, [pc, #140]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a4d0:	4b21      	ldr	r3, [pc, #132]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	4a20      	ldr	r2, [pc, #128]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a4dc:	f7fd f8a4 	bl	8007628 <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4e4:	f7fd f8a0 	bl	8007628 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e02c      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4f6:	4b18      	ldr	r3, [pc, #96]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0f0      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x7ac>
 800a502:	e024      	b.n	800a54e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	2b0c      	cmp	r3, #12
 800a508:	d01f      	beq.n	800a54a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a50a:	4b13      	ldr	r3, [pc, #76]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a12      	ldr	r2, [pc, #72]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a516:	f7fd f887 	bl	8007628 <HAL_GetTick>
 800a51a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a51c:	e008      	b.n	800a530 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a51e:	f7fd f883 	bl	8007628 <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d901      	bls.n	800a530 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e00f      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a530:	4b09      	ldr	r3, [pc, #36]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f0      	bne.n	800a51e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	4905      	ldr	r1, [pc, #20]	@ (800a558 <HAL_RCC_OscConfig+0x820>)
 800a542:	4b06      	ldr	r3, [pc, #24]	@ (800a55c <HAL_RCC_OscConfig+0x824>)
 800a544:	4013      	ands	r3, r2
 800a546:	60cb      	str	r3, [r1, #12]
 800a548:	e001      	b.n	800a54e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	40021000 	.word	0x40021000
 800a55c:	feeefffc 	.word	0xfeeefffc

0800a560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e0e7      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a574:	4b75      	ldr	r3, [pc, #468]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0307 	and.w	r3, r3, #7
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d910      	bls.n	800a5a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a582:	4b72      	ldr	r3, [pc, #456]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f023 0207 	bic.w	r2, r3, #7
 800a58a:	4970      	ldr	r1, [pc, #448]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	4313      	orrs	r3, r2
 800a590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a592:	4b6e      	ldr	r3, [pc, #440]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d001      	beq.n	800a5a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e0cf      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d010      	beq.n	800a5d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	4b66      	ldr	r3, [pc, #408]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d908      	bls.n	800a5d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5c0:	4b63      	ldr	r3, [pc, #396]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	4960      	ldr	r1, [pc, #384]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d04c      	beq.n	800a678 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d107      	bne.n	800a5f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5e6:	4b5a      	ldr	r3, [pc, #360]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d121      	bne.n	800a636 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e0a6      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d107      	bne.n	800a60e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5fe:	4b54      	ldr	r3, [pc, #336]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d115      	bne.n	800a636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e09a      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d107      	bne.n	800a626 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a616:	4b4e      	ldr	r3, [pc, #312]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d109      	bne.n	800a636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e08e      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a626:	4b4a      	ldr	r3, [pc, #296]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e086      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a636:	4b46      	ldr	r3, [pc, #280]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f023 0203 	bic.w	r2, r3, #3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	4943      	ldr	r1, [pc, #268]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a644:	4313      	orrs	r3, r2
 800a646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a648:	f7fc ffee 	bl	8007628 <HAL_GetTick>
 800a64c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a64e:	e00a      	b.n	800a666 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a650:	f7fc ffea 	bl	8007628 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a65e:	4293      	cmp	r3, r2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e06e      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a666:	4b3a      	ldr	r3, [pc, #232]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f003 020c 	and.w	r2, r3, #12
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	429a      	cmp	r2, r3
 800a676:	d1eb      	bne.n	800a650 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	4b31      	ldr	r3, [pc, #196]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a690:	429a      	cmp	r2, r3
 800a692:	d208      	bcs.n	800a6a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a694:	4b2e      	ldr	r3, [pc, #184]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	492b      	ldr	r1, [pc, #172]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6a6:	4b29      	ldr	r3, [pc, #164]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d210      	bcs.n	800a6d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6b4:	4b25      	ldr	r3, [pc, #148]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f023 0207 	bic.w	r2, r3, #7
 800a6bc:	4923      	ldr	r1, [pc, #140]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6c4:	4b21      	ldr	r3, [pc, #132]	@ (800a74c <HAL_RCC_ClockConfig+0x1ec>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d001      	beq.n	800a6d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e036      	b.n	800a744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d008      	beq.n	800a6f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	4918      	ldr	r1, [pc, #96]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a700:	4b13      	ldr	r3, [pc, #76]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4910      	ldr	r1, [pc, #64]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a710:	4313      	orrs	r3, r2
 800a712:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a714:	f000 f824 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800a718:	4602      	mov	r2, r0
 800a71a:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <HAL_RCC_ClockConfig+0x1f0>)
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	091b      	lsrs	r3, r3, #4
 800a720:	f003 030f 	and.w	r3, r3, #15
 800a724:	490b      	ldr	r1, [pc, #44]	@ (800a754 <HAL_RCC_ClockConfig+0x1f4>)
 800a726:	5ccb      	ldrb	r3, [r1, r3]
 800a728:	f003 031f 	and.w	r3, r3, #31
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
 800a730:	4a09      	ldr	r2, [pc, #36]	@ (800a758 <HAL_RCC_ClockConfig+0x1f8>)
 800a732:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a734:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <HAL_RCC_ClockConfig+0x1fc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fc ff25 	bl	8007588 <HAL_InitTick>
 800a73e:	4603      	mov	r3, r0
 800a740:	72fb      	strb	r3, [r7, #11]

  return status;
 800a742:	7afb      	ldrb	r3, [r7, #11]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	40022000 	.word	0x40022000
 800a750:	40021000 	.word	0x40021000
 800a754:	08010f80 	.word	0x08010f80
 800a758:	20000f2c 	.word	0x20000f2c
 800a75c:	20000f34 	.word	0x20000f34

0800a760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a760:	b480      	push	{r7}
 800a762:	b089      	sub	sp, #36	@ 0x24
 800a764:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	61fb      	str	r3, [r7, #28]
 800a76a:	2300      	movs	r3, #0
 800a76c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a76e:	4b3e      	ldr	r3, [pc, #248]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 030c 	and.w	r3, r3, #12
 800a776:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a778:	4b3b      	ldr	r3, [pc, #236]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d005      	beq.n	800a794 <HAL_RCC_GetSysClockFreq+0x34>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2b0c      	cmp	r3, #12
 800a78c:	d121      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d11e      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a794:	4b34      	ldr	r3, [pc, #208]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d107      	bne.n	800a7b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a7a0:	4b31      	ldr	r3, [pc, #196]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a6:	0a1b      	lsrs	r3, r3, #8
 800a7a8:	f003 030f 	and.w	r3, r3, #15
 800a7ac:	61fb      	str	r3, [r7, #28]
 800a7ae:	e005      	b.n	800a7bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a7b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a7bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a86c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7d0:	e00a      	b.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d102      	bne.n	800a7de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7d8:	4b25      	ldr	r3, [pc, #148]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e004      	b.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d101      	bne.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7e4:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <HAL_RCC_GetSysClockFreq+0x114>)
 800a7e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b0c      	cmp	r3, #12
 800a7ec:	d134      	bne.n	800a858 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d003      	beq.n	800a806 <HAL_RCC_GetSysClockFreq+0xa6>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d003      	beq.n	800a80c <HAL_RCC_GetSysClockFreq+0xac>
 800a804:	e005      	b.n	800a812 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a806:	4b1a      	ldr	r3, [pc, #104]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a808:	617b      	str	r3, [r7, #20]
      break;
 800a80a:	e005      	b.n	800a818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a80c:	4b19      	ldr	r3, [pc, #100]	@ (800a874 <HAL_RCC_GetSysClockFreq+0x114>)
 800a80e:	617b      	str	r3, [r7, #20]
      break;
 800a810:	e002      	b.n	800a818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	617b      	str	r3, [r7, #20]
      break;
 800a816:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a818:	4b13      	ldr	r3, [pc, #76]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	091b      	lsrs	r3, r3, #4
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	3301      	adds	r3, #1
 800a824:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a826:	4b10      	ldr	r3, [pc, #64]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	fb03 f202 	mul.w	r2, r3, r2
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a83e:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	0e5b      	lsrs	r3, r3, #25
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	3301      	adds	r3, #1
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	fbb2 f3f3 	udiv	r3, r2, r3
 800a856:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a858:	69bb      	ldr	r3, [r7, #24]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3724      	adds	r7, #36	@ 0x24
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40021000 	.word	0x40021000
 800a86c:	08010f98 	.word	0x08010f98
 800a870:	00f42400 	.word	0x00f42400
 800a874:	007a1200 	.word	0x007a1200

0800a878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a87c:	4b03      	ldr	r3, [pc, #12]	@ (800a88c <HAL_RCC_GetHCLKFreq+0x14>)
 800a87e:	681b      	ldr	r3, [r3, #0]
}
 800a880:	4618      	mov	r0, r3
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20000f2c 	.word	0x20000f2c

0800a890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a894:	f7ff fff0 	bl	800a878 <HAL_RCC_GetHCLKFreq>
 800a898:	4602      	mov	r2, r0
 800a89a:	4b06      	ldr	r3, [pc, #24]	@ (800a8b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	0a1b      	lsrs	r3, r3, #8
 800a8a0:	f003 0307 	and.w	r3, r3, #7
 800a8a4:	4904      	ldr	r1, [pc, #16]	@ (800a8b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8a6:	5ccb      	ldrb	r3, [r1, r3]
 800a8a8:	f003 031f 	and.w	r3, r3, #31
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	40021000 	.word	0x40021000
 800a8b8:	08010f90 	.word	0x08010f90

0800a8bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a8c0:	f7ff ffda 	bl	800a878 <HAL_RCC_GetHCLKFreq>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	0adb      	lsrs	r3, r3, #11
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	4904      	ldr	r1, [pc, #16]	@ (800a8e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8d2:	5ccb      	ldrb	r3, [r1, r3]
 800a8d4:	f003 031f 	and.w	r3, r3, #31
 800a8d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	40021000 	.word	0x40021000
 800a8e4:	08010f90 	.word	0x08010f90

0800a8e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a8f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a900:	f7ff f9b6 	bl	8009c70 <HAL_PWREx_GetVoltageRange>
 800a904:	6178      	str	r0, [r7, #20]
 800a906:	e014      	b.n	800a932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a908:	4b25      	ldr	r3, [pc, #148]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a90a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a90c:	4a24      	ldr	r2, [pc, #144]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a90e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a912:	6593      	str	r3, [r2, #88]	@ 0x58
 800a914:	4b22      	ldr	r3, [pc, #136]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a920:	f7ff f9a6 	bl	8009c70 <HAL_PWREx_GetVoltageRange>
 800a924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a926:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a92a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a92c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a930:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a938:	d10b      	bne.n	800a952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b80      	cmp	r3, #128	@ 0x80
 800a93e:	d919      	bls.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2ba0      	cmp	r3, #160	@ 0xa0
 800a944:	d902      	bls.n	800a94c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a946:	2302      	movs	r3, #2
 800a948:	613b      	str	r3, [r7, #16]
 800a94a:	e013      	b.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a94c:	2301      	movs	r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	e010      	b.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b80      	cmp	r3, #128	@ 0x80
 800a956:	d902      	bls.n	800a95e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a958:	2303      	movs	r3, #3
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	e00a      	b.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b80      	cmp	r3, #128	@ 0x80
 800a962:	d102      	bne.n	800a96a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a964:	2302      	movs	r3, #2
 800a966:	613b      	str	r3, [r7, #16]
 800a968:	e004      	b.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b70      	cmp	r3, #112	@ 0x70
 800a96e:	d101      	bne.n	800a974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a970:	2301      	movs	r3, #1
 800a972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a974:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f023 0207 	bic.w	r2, r3, #7
 800a97c:	4909      	ldr	r1, [pc, #36]	@ (800a9a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a984:	4b07      	ldr	r3, [pc, #28]	@ (800a9a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d001      	beq.n	800a996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	40021000 	.word	0x40021000
 800a9a4:	40022000 	.word	0x40022000

0800a9a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d031      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a9cc:	d01a      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a9ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a9d2:	d814      	bhi.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d009      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a9d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9dc:	d10f      	bne.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a9de:	4b5d      	ldr	r3, [pc, #372]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	4a5c      	ldr	r2, [pc, #368]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a9ea:	e00c      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fa14 	bl	800ae20 <RCCEx_PLLSAI1_Config>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a9fc:	e003      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	74fb      	strb	r3, [r7, #19]
      break;
 800aa02:	e000      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800aa04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa06:	7cfb      	ldrb	r3, [r7, #19]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10b      	bne.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa0c:	4b51      	ldr	r3, [pc, #324]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa1a:	494e      	ldr	r1, [pc, #312]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800aa22:	e001      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa24:	7cfb      	ldrb	r3, [r7, #19]
 800aa26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 809e 	beq.w	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa36:	2300      	movs	r3, #0
 800aa38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aa3a:	4b46      	ldr	r3, [pc, #280]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00d      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa50:	4b40      	ldr	r3, [pc, #256]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa54:	4a3f      	ldr	r2, [pc, #252]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa5c:	4b3d      	ldr	r3, [pc, #244]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa64:	60bb      	str	r3, [r7, #8]
 800aa66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a39      	ldr	r2, [pc, #228]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aa72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa78:	f7fc fdd6 	bl	8007628 <HAL_GetTick>
 800aa7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa7e:	e009      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa80:	f7fc fdd2 	bl	8007628 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d902      	bls.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	74fb      	strb	r3, [r7, #19]
        break;
 800aa92:	e005      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa94:	4b30      	ldr	r3, [pc, #192]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0ef      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800aaa0:	7cfb      	ldrb	r3, [r7, #19]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d15a      	bne.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aaa6:	4b2b      	ldr	r3, [pc, #172]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01e      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d019      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aac2:	4b24      	ldr	r3, [pc, #144]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aacc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aace:	4b21      	ldr	r3, [pc, #132]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad4:	4a1f      	ldr	r2, [pc, #124]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aade:	4b1d      	ldr	r3, [pc, #116]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aaea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aaee:	4a19      	ldr	r2, [pc, #100]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d016      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab00:	f7fc fd92 	bl	8007628 <HAL_GetTick>
 800ab04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab06:	e00b      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab08:	f7fc fd8e 	bl	8007628 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d902      	bls.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	74fb      	strb	r3, [r7, #19]
            break;
 800ab1e:	e006      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab20:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ab22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0ec      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800ab2e:	7cfb      	ldrb	r3, [r7, #19]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab34:	4b07      	ldr	r3, [pc, #28]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ab36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab42:	4904      	ldr	r1, [pc, #16]	@ (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ab4a:	e009      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab4c:	7cfb      	ldrb	r3, [r7, #19]
 800ab4e:	74bb      	strb	r3, [r7, #18]
 800ab50:	e006      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ab52:	bf00      	nop
 800ab54:	40021000 	.word	0x40021000
 800ab58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5c:	7cfb      	ldrb	r3, [r7, #19]
 800ab5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab60:	7c7b      	ldrb	r3, [r7, #17]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d105      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab66:	4b86      	ldr	r3, [pc, #536]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ab68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab6a:	4a85      	ldr	r2, [pc, #532]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ab6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab7e:	4b80      	ldr	r3, [pc, #512]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab84:	f023 0203 	bic.w	r2, r3, #3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	497c      	ldr	r1, [pc, #496]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00a      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aba0:	4b77      	ldr	r3, [pc, #476]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800aba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba6:	f023 020c 	bic.w	r2, r3, #12
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abae:	4974      	ldr	r1, [pc, #464]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800abb0:	4313      	orrs	r3, r2
 800abb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abc2:	4b6f      	ldr	r3, [pc, #444]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800abc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd0:	496b      	ldr	r1, [pc, #428]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0308 	and.w	r3, r3, #8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800abe4:	4b66      	ldr	r3, [pc, #408]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800abe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	4963      	ldr	r1, [pc, #396]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac06:	4b5e      	ldr	r3, [pc, #376]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac14:	495a      	ldr	r1, [pc, #360]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00a      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac28:	4b55      	ldr	r3, [pc, #340]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac2e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac36:	4952      	ldr	r1, [pc, #328]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ac4a:	4b4d      	ldr	r3, [pc, #308]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac58:	4949      	ldr	r1, [pc, #292]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00a      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac6c:	4b44      	ldr	r3, [pc, #272]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7a:	4941      	ldr	r1, [pc, #260]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac8e:	4b3c      	ldr	r3, [pc, #240]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9c:	4938      	ldr	r1, [pc, #224]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00a      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800acb0:	4b33      	ldr	r3, [pc, #204]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800acb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbe:	4930      	ldr	r1, [pc, #192]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800acc0:	4313      	orrs	r3, r2
 800acc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00a      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800acd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800acd8:	f023 0203 	bic.w	r2, r3, #3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace0:	4927      	ldr	r1, [pc, #156]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d028      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acf4:	4b22      	ldr	r3, [pc, #136]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad02:	491f      	ldr	r1, [pc, #124]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad12:	d106      	bne.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad14:	4b1a      	ldr	r3, [pc, #104]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	4a19      	ldr	r2, [pc, #100]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad1e:	60d3      	str	r3, [r2, #12]
 800ad20:	e011      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad2a:	d10c      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	2101      	movs	r1, #1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f874 	bl	800ae20 <RCCEx_PLLSAI1_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad3c:	7cfb      	ldrb	r3, [r7, #19]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 800ad42:	7cfb      	ldrb	r3, [r7, #19]
 800ad44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d02a      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x400>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad52:	4b0b      	ldr	r3, [pc, #44]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad60:	4907      	ldr	r1, [pc, #28]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad70:	d108      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad72:	4b03      	ldr	r3, [pc, #12]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	4a02      	ldr	r2, [pc, #8]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800ad78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad7c:	60d3      	str	r3, [r2, #12]
 800ad7e:	e013      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800ad80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad8c:	d10c      	bne.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x400>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	2101      	movs	r1, #1
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f843 	bl	800ae20 <RCCEx_PLLSAI1_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad9e:	7cfb      	ldrb	r3, [r7, #19]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      {
        /* set overall return value */
        status = ret;
 800ada4:	7cfb      	ldrb	r3, [r7, #19]
 800ada6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01c      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800adb4:	4b19      	ldr	r3, [pc, #100]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800adb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adc2:	4916      	ldr	r1, [pc, #88]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add2:	d10c      	bne.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3304      	adds	r3, #4
 800add8:	2102      	movs	r1, #2
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f820 	bl	800ae20 <RCCEx_PLLSAI1_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ade4:	7cfb      	ldrb	r3, [r7, #19]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* set overall return value */
        status = ret;
 800adea:	7cfb      	ldrb	r3, [r7, #19]
 800adec:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800adfa:	4b08      	ldr	r3, [pc, #32]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800adfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae08:	4904      	ldr	r1, [pc, #16]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ae10:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40021000 	.word	0x40021000

0800ae20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ae2e:	4b74      	ldr	r3, [pc, #464]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d018      	beq.n	800ae6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ae3a:	4b71      	ldr	r3, [pc, #452]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f003 0203 	and.w	r2, r3, #3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d10d      	bne.n	800ae66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
       ||
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d009      	beq.n	800ae66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ae52:	4b6b      	ldr	r3, [pc, #428]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	091b      	lsrs	r3, r3, #4
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
       ||
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d047      	beq.n	800aef6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	73fb      	strb	r3, [r7, #15]
 800ae6a:	e044      	b.n	800aef6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d018      	beq.n	800aea6 <RCCEx_PLLSAI1_Config+0x86>
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d825      	bhi.n	800aec4 <RCCEx_PLLSAI1_Config+0xa4>
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d002      	beq.n	800ae82 <RCCEx_PLLSAI1_Config+0x62>
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d009      	beq.n	800ae94 <RCCEx_PLLSAI1_Config+0x74>
 800ae80:	e020      	b.n	800aec4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ae82:	4b5f      	ldr	r3, [pc, #380]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d11d      	bne.n	800aeca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae92:	e01a      	b.n	800aeca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae94:	4b5a      	ldr	r3, [pc, #360]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d116      	bne.n	800aece <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aea4:	e013      	b.n	800aece <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aea6:	4b56      	ldr	r3, [pc, #344]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10f      	bne.n	800aed2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aeb2:	4b53      	ldr	r3, [pc, #332]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aec2:	e006      	b.n	800aed2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	73fb      	strb	r3, [r7, #15]
      break;
 800aec8:	e004      	b.n	800aed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aeca:	bf00      	nop
 800aecc:	e002      	b.n	800aed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aece:	bf00      	nop
 800aed0:	e000      	b.n	800aed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aed2:	bf00      	nop
    }

    if(status == HAL_OK)
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10d      	bne.n	800aef6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aeda:	4b49      	ldr	r3, [pc, #292]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	430b      	orrs	r3, r1
 800aef0:	4943      	ldr	r1, [pc, #268]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d17c      	bne.n	800aff6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800aefc:	4b40      	ldr	r3, [pc, #256]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a3f      	ldr	r2, [pc, #252]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af08:	f7fc fb8e 	bl	8007628 <HAL_GetTick>
 800af0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af0e:	e009      	b.n	800af24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af10:	f7fc fb8a 	bl	8007628 <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d902      	bls.n	800af24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	73fb      	strb	r3, [r7, #15]
        break;
 800af22:	e005      	b.n	800af30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af24:	4b36      	ldr	r3, [pc, #216]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1ef      	bne.n	800af10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d15f      	bne.n	800aff6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d110      	bne.n	800af5e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af3c:	4b30      	ldr	r3, [pc, #192]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800af44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	6892      	ldr	r2, [r2, #8]
 800af4c:	0211      	lsls	r1, r2, #8
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68d2      	ldr	r2, [r2, #12]
 800af52:	06d2      	lsls	r2, r2, #27
 800af54:	430a      	orrs	r2, r1
 800af56:	492a      	ldr	r1, [pc, #168]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	610b      	str	r3, [r1, #16]
 800af5c:	e027      	b.n	800afae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d112      	bne.n	800af8a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af64:	4b26      	ldr	r3, [pc, #152]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800af6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	6892      	ldr	r2, [r2, #8]
 800af74:	0211      	lsls	r1, r2, #8
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6912      	ldr	r2, [r2, #16]
 800af7a:	0852      	lsrs	r2, r2, #1
 800af7c:	3a01      	subs	r2, #1
 800af7e:	0552      	lsls	r2, r2, #21
 800af80:	430a      	orrs	r2, r1
 800af82:	491f      	ldr	r1, [pc, #124]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af84:	4313      	orrs	r3, r2
 800af86:	610b      	str	r3, [r1, #16]
 800af88:	e011      	b.n	800afae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af8a:	4b1d      	ldr	r3, [pc, #116]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800af92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	6892      	ldr	r2, [r2, #8]
 800af9a:	0211      	lsls	r1, r2, #8
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6952      	ldr	r2, [r2, #20]
 800afa0:	0852      	lsrs	r2, r2, #1
 800afa2:	3a01      	subs	r2, #1
 800afa4:	0652      	lsls	r2, r2, #25
 800afa6:	430a      	orrs	r2, r1
 800afa8:	4915      	ldr	r1, [pc, #84]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800afae:	4b14      	ldr	r3, [pc, #80]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a13      	ldr	r2, [pc, #76]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800afb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afba:	f7fc fb35 	bl	8007628 <HAL_GetTick>
 800afbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800afc0:	e009      	b.n	800afd6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800afc2:	f7fc fb31 	bl	8007628 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d902      	bls.n	800afd6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	73fb      	strb	r3, [r7, #15]
          break;
 800afd4:	e005      	b.n	800afe2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800afd6:	4b0a      	ldr	r3, [pc, #40]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0ef      	beq.n	800afc2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d106      	bne.n	800aff6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800afe8:	4b05      	ldr	r3, [pc, #20]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	4903      	ldr	r1, [pc, #12]	@ (800b000 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	40021000 	.word	0x40021000

0800b004 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d079      	beq.n	800b10a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f7 fd10 	bl	8002a50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2202      	movs	r2, #2
 800b034:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f003 0310 	and.w	r3, r3, #16
 800b042:	2b10      	cmp	r3, #16
 800b044:	d058      	beq.n	800b0f8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	22ca      	movs	r2, #202	@ 0xca
 800b04c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2253      	movs	r2, #83	@ 0x53
 800b054:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f880 	bl	800b15c <RTC_EnterInitMode>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d127      	bne.n	800b0b6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6812      	ldr	r2, [r2, #0]
 800b070:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b078:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6899      	ldr	r1, [r3, #8]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	431a      	orrs	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	68d2      	ldr	r2, [r2, #12]
 800b0a0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6919      	ldr	r1, [r3, #16]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	041a      	lsls	r2, r3, #16
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f884 	bl	800b1c4 <RTC_ExitInitMode>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d113      	bne.n	800b0ee <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0203 	bic.w	r2, r2, #3
 800b0d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	431a      	orrs	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	22ff      	movs	r2, #255	@ 0xff
 800b0f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b0f6:	e001      	b.n	800b0fc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a0d      	ldr	r2, [pc, #52]	@ (800b158 <HAL_RTC_WaitForSynchro+0x44>)
 800b122:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800b124:	f7fc fa80 	bl	8007628 <HAL_GetTick>
 800b128:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b12a:	e009      	b.n	800b140 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b12c:	f7fc fa7c 	bl	8007628 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b13a:	d901      	bls.n	800b140 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e007      	b.n	800b150 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0ee      	beq.n	800b12c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	0003ff5f 	.word	0x0003ff5f

0800b15c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d120      	bne.n	800b1b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b17e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b180:	f7fc fa52 	bl	8007628 <HAL_GetTick>
 800b184:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b186:	e00d      	b.n	800b1a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b188:	f7fc fa4e 	bl	8007628 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b196:	d905      	bls.n	800b1a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2203      	movs	r2, #3
 800b1a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d102      	bne.n	800b1b8 <RTC_EnterInitMode+0x5c>
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d1e7      	bne.n	800b188 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	4a19      	ldr	r2, [pc, #100]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b1d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b1dc:	4b17      	ldr	r3, [pc, #92]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10c      	bne.n	800b202 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ff93 	bl	800b114 <HAL_RTC_WaitForSynchro>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d01e      	beq.n	800b232 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	73fb      	strb	r3, [r7, #15]
 800b200:	e017      	b.n	800b232 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b202:	4b0e      	ldr	r3, [pc, #56]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	4a0d      	ldr	r2, [pc, #52]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b208:	f023 0320 	bic.w	r3, r3, #32
 800b20c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff ff80 	bl	800b114 <HAL_RTC_WaitForSynchro>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2203      	movs	r2, #3
 800b21e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b226:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	4a04      	ldr	r2, [pc, #16]	@ (800b23c <RTC_ExitInitMode+0x78>)
 800b22c:	f043 0320 	orr.w	r3, r3, #32
 800b230:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	40002800 	.word	0x40002800

0800b240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e095      	b.n	800b37e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d108      	bne.n	800b26c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b262:	d009      	beq.n	800b278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	61da      	str	r2, [r3, #28]
 800b26a:	e005      	b.n	800b278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7f7 fc0c 	bl	8002ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b2b8:	d902      	bls.n	800b2c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	e002      	b.n	800b2c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b2c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b2ce:	d007      	beq.n	800b2e0 <HAL_SPI_Init+0xa0>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b2d8:	d002      	beq.n	800b2e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b322:	ea42 0103 	orr.w	r1, r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	0c1b      	lsrs	r3, r3, #16
 800b33c:	f003 0204 	and.w	r2, r3, #4
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b34e:	f003 0308 	and.w	r3, r3, #8
 800b352:	431a      	orrs	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b35c:	ea42 0103 	orr.w	r1, r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b088      	sub	sp, #32
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	603b      	str	r3, [r7, #0]
 800b392:	4613      	mov	r3, r2
 800b394:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b396:	f7fc f947 	bl	8007628 <HAL_GetTick>
 800b39a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d001      	beq.n	800b3b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e15c      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <HAL_SPI_Transmit+0x36>
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e154      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <HAL_SPI_Transmit+0x48>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	e14d      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2203      	movs	r2, #3
 800b3da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	88fa      	ldrh	r2, [r7, #6]
 800b3ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b420:	d10f      	bne.n	800b442 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44c:	2b40      	cmp	r3, #64	@ 0x40
 800b44e:	d007      	beq.n	800b460 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b45e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b468:	d952      	bls.n	800b510 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_SPI_Transmit+0xf2>
 800b472:	8b7b      	ldrh	r3, [r7, #26]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d145      	bne.n	800b504 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b47c:	881a      	ldrh	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b488:	1c9a      	adds	r2, r3, #2
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b492:	b29b      	uxth	r3, r3
 800b494:	3b01      	subs	r3, #1
 800b496:	b29a      	uxth	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b49c:	e032      	b.n	800b504 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d112      	bne.n	800b4d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b0:	881a      	ldrh	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4bc:	1c9a      	adds	r2, r3, #2
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b4d0:	e018      	b.n	800b504 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4d2:	f7fc f8a9 	bl	8007628 <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d803      	bhi.n	800b4ea <HAL_SPI_Transmit+0x164>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4e8:	d102      	bne.n	800b4f0 <HAL_SPI_Transmit+0x16a>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e0b2      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b508:	b29b      	uxth	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1c7      	bne.n	800b49e <HAL_SPI_Transmit+0x118>
 800b50e:	e083      	b.n	800b618 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <HAL_SPI_Transmit+0x198>
 800b518:	8b7b      	ldrh	r3, [r7, #26]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d177      	bne.n	800b60e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b522:	b29b      	uxth	r3, r3
 800b524:	2b01      	cmp	r3, #1
 800b526:	d912      	bls.n	800b54e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b52c:	881a      	ldrh	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b538:	1c9a      	adds	r2, r3, #2
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b542:	b29b      	uxth	r3, r3
 800b544:	3b02      	subs	r3, #2
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b54c:	e05f      	b.n	800b60e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	330c      	adds	r3, #12
 800b558:	7812      	ldrb	r2, [r2, #0]
 800b55a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b574:	e04b      	b.n	800b60e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b02      	cmp	r3, #2
 800b582:	d12b      	bne.n	800b5dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b588:	b29b      	uxth	r3, r3
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d912      	bls.n	800b5b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b592:	881a      	ldrh	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b59e:	1c9a      	adds	r2, r3, #2
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b02      	subs	r3, #2
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b5b2:	e02c      	b.n	800b60e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	330c      	adds	r3, #12
 800b5be:	7812      	ldrb	r2, [r2, #0]
 800b5c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b5da:	e018      	b.n	800b60e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5dc:	f7fc f824 	bl	8007628 <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d803      	bhi.n	800b5f4 <HAL_SPI_Transmit+0x26e>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5f2:	d102      	bne.n	800b5fa <HAL_SPI_Transmit+0x274>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d109      	bne.n	800b60e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e02d      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b612:	b29b      	uxth	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1ae      	bne.n	800b576 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b618:	69fa      	ldr	r2, [r7, #28]
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 fe37 	bl	800c290 <SPI_EndRxTxTransaction>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2220      	movs	r2, #32
 800b62c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e000      	b.n	800b66a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800b668:	2300      	movs	r3, #0
  }
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b08a      	sub	sp, #40	@ 0x28
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b680:	2301      	movs	r3, #1
 800b682:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b684:	f7fb ffd0 	bl	8007628 <HAL_GetTick>
 800b688:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b690:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b698:	887b      	ldrh	r3, [r7, #2]
 800b69a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800b69c:	887b      	ldrh	r3, [r7, #2]
 800b69e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b6a0:	7ffb      	ldrb	r3, [r7, #31]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d00c      	beq.n	800b6c0 <HAL_SPI_TransmitReceive+0x4e>
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b6ac:	d106      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x4a>
 800b6b6:	7ffb      	ldrb	r3, [r7, #31]
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d001      	beq.n	800b6c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e1f3      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d005      	beq.n	800b6d2 <HAL_SPI_TransmitReceive+0x60>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <HAL_SPI_TransmitReceive+0x60>
 800b6cc:	887b      	ldrh	r3, [r7, #2]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e1e8      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d101      	bne.n	800b6e4 <HAL_SPI_TransmitReceive+0x72>
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e1e1      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d003      	beq.n	800b700 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2205      	movs	r2, #5
 800b6fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	887a      	ldrh	r2, [r7, #2]
 800b710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	887a      	ldrh	r2, [r7, #2]
 800b718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	887a      	ldrh	r2, [r7, #2]
 800b726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	887a      	ldrh	r2, [r7, #2]
 800b72c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b742:	d802      	bhi.n	800b74a <HAL_SPI_TransmitReceive+0xd8>
 800b744:	8abb      	ldrh	r3, [r7, #20]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d908      	bls.n	800b75c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b758:	605a      	str	r2, [r3, #4]
 800b75a:	e007      	b.n	800b76c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b76a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b776:	2b40      	cmp	r3, #64	@ 0x40
 800b778:	d007      	beq.n	800b78a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b792:	f240 8083 	bls.w	800b89c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <HAL_SPI_TransmitReceive+0x132>
 800b79e:	8afb      	ldrh	r3, [r7, #22]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d16f      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	1c9a      	adds	r2, r3, #2
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7c8:	e05c      	b.n	800b884 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d11b      	bne.n	800b810 <HAL_SPI_TransmitReceive+0x19e>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d016      	beq.n	800b810 <HAL_SPI_TransmitReceive+0x19e>
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d113      	bne.n	800b810 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ec:	881a      	ldrh	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f8:	1c9a      	adds	r2, r3, #2
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b802:	b29b      	uxth	r3, r3
 800b804:	3b01      	subs	r3, #1
 800b806:	b29a      	uxth	r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b80c:	2300      	movs	r3, #0
 800b80e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d11c      	bne.n	800b858 <HAL_SPI_TransmitReceive+0x1e6>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b824:	b29b      	uxth	r3, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d016      	beq.n	800b858 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b834:	b292      	uxth	r2, r2
 800b836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83c:	1c9a      	adds	r2, r3, #2
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b854:	2301      	movs	r3, #1
 800b856:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b858:	f7fb fee6 	bl	8007628 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b864:	429a      	cmp	r2, r3
 800b866:	d80d      	bhi.n	800b884 <HAL_SPI_TransmitReceive+0x212>
 800b868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b86e:	d009      	beq.n	800b884 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e111      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b888:	b29b      	uxth	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d19d      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x158>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b894:	b29b      	uxth	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d197      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x158>
 800b89a:	e0e5      	b.n	800ba68 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_SPI_TransmitReceive+0x23a>
 800b8a4:	8afb      	ldrh	r3, [r7, #22]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	f040 80d1 	bne.w	800ba4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d912      	bls.n	800b8dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ba:	881a      	ldrh	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c6:	1c9a      	adds	r2, r3, #2
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	3b02      	subs	r3, #2
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b8da:	e0b8      	b.n	800ba4e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b902:	e0a4      	b.n	800ba4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d134      	bne.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b916:	b29b      	uxth	r3, r3
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02f      	beq.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d12c      	bne.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b926:	b29b      	uxth	r3, r3
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d912      	bls.n	800b952 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b930:	881a      	ldrh	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93c:	1c9a      	adds	r2, r3, #2
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b946:	b29b      	uxth	r3, r3
 800b948:	3b02      	subs	r3, #2
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b950:	e012      	b.n	800b978 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	330c      	adds	r3, #12
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b01      	cmp	r3, #1
 800b988:	d148      	bne.n	800ba1c <HAL_SPI_TransmitReceive+0x3aa>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d042      	beq.n	800ba1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d923      	bls.n	800b9ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ac:	b292      	uxth	r2, r2
 800b9ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b4:	1c9a      	adds	r2, r3, #2
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b02      	subs	r3, #2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d81f      	bhi.n	800ba18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b9e6:	605a      	str	r2, [r3, #4]
 800b9e8:	e016      	b.n	800ba18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f103 020c 	add.w	r2, r3, #12
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f6:	7812      	ldrb	r2, [r2, #0]
 800b9f8:	b2d2      	uxtb	r2, r2
 800b9fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba1c:	f7fb fe04 	bl	8007628 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d803      	bhi.n	800ba34 <HAL_SPI_TransmitReceive+0x3c2>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba32:	d102      	bne.n	800ba3a <HAL_SPI_TransmitReceive+0x3c8>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e02c      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f af55 	bne.w	800b904 <HAL_SPI_TransmitReceive+0x292>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f47f af4e 	bne.w	800b904 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba68:	6a3a      	ldr	r2, [r7, #32]
 800ba6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fc0f 	bl	800c290 <SPI_EndRxTxTransaction>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d008      	beq.n	800ba8a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e00e      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800baa6:	2300      	movs	r3, #0
  }
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3728      	adds	r7, #40	@ 0x28
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bac4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d00c      	beq.n	800baec <HAL_SPI_TransmitReceive_IT+0x3c>
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bad8:	d106      	bne.n	800bae8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d102      	bne.n	800bae8 <HAL_SPI_TransmitReceive_IT+0x38>
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d001      	beq.n	800baec <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800bae8:	2302      	movs	r3, #2
 800baea:	e07d      	b.n	800bbe8 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <HAL_SPI_TransmitReceive_IT+0x4e>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <HAL_SPI_TransmitReceive_IT+0x4e>
 800baf8:	887b      	ldrh	r3, [r7, #2]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e072      	b.n	800bbe8 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d101      	bne.n	800bb10 <HAL_SPI_TransmitReceive_IT+0x60>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e06b      	b.n	800bbe8 <HAL_SPI_TransmitReceive_IT+0x138>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d003      	beq.n	800bb2c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2205      	movs	r2, #5
 800bb28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	887a      	ldrh	r2, [r7, #2]
 800bb3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	887a      	ldrh	r2, [r7, #2]
 800bb42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	887a      	ldrh	r2, [r7, #2]
 800bb4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	887a      	ldrh	r2, [r7, #2]
 800bb56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bb62:	d906      	bls.n	800bb72 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4a23      	ldr	r2, [pc, #140]	@ (800bbf4 <HAL_SPI_TransmitReceive_IT+0x144>)
 800bb68:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4a22      	ldr	r2, [pc, #136]	@ (800bbf8 <HAL_SPI_TransmitReceive_IT+0x148>)
 800bb6e:	651a      	str	r2, [r3, #80]	@ 0x50
 800bb70:	e005      	b.n	800bb7e <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	4a21      	ldr	r2, [pc, #132]	@ (800bbfc <HAL_SPI_TransmitReceive_IT+0x14c>)
 800bb76:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4a21      	ldr	r2, [pc, #132]	@ (800bc00 <HAL_SPI_TransmitReceive_IT+0x150>)
 800bb7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bb86:	d802      	bhi.n	800bb8e <HAL_SPI_TransmitReceive_IT+0xde>
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d908      	bls.n	800bba0 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	e007      	b.n	800bbb0 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bbae:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d007      	beq.n	800bbce <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbcc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800bbe4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	0800bf8f 	.word	0x0800bf8f
 800bbf8:	0800bff5 	.word	0x0800bff5
 800bbfc:	0800be3f 	.word	0x0800be3f
 800bc00:	0800befd 	.word	0x0800befd

0800bc04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10e      	bne.n	800bc44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d004      	beq.n	800bc44 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	4798      	blx	r3
    return;
 800bc42:	e0ce      	b.n	800bde2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d009      	beq.n	800bc62 <HAL_SPI_IRQHandler+0x5e>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	4798      	blx	r3
    return;
 800bc60:	e0bf      	b.n	800bde2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	f003 0320 	and.w	r3, r3, #32
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <HAL_SPI_IRQHandler+0x7e>
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d105      	bne.n	800bc82 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 80b0 	beq.w	800bde2 <HAL_SPI_IRQHandler+0x1de>
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 80aa 	beq.w	800bde2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d023      	beq.n	800bce0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d011      	beq.n	800bcc8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bca8:	f043 0204 	orr.w	r2, r3, #4
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	e00b      	b.n	800bce0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	613b      	str	r3, [r7, #16]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	693b      	ldr	r3, [r7, #16]
        return;
 800bcde:	e080      	b.n	800bde2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	f003 0320 	and.w	r3, r3, #32
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d014      	beq.n	800bd14 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcee:	f043 0201 	orr.w	r2, r3, #1
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00c      	beq.n	800bd38 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd22:	f043 0208 	orr.w	r2, r3, #8
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	60bb      	str	r3, [r7, #8]
 800bd36:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d04f      	beq.n	800bde0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bd4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	f003 0302 	and.w	r3, r3, #2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d104      	bne.n	800bd6c <HAL_SPI_IRQHandler+0x168>
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	f003 0301 	and.w	r3, r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d034      	beq.n	800bdd6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0203 	bic.w	r2, r2, #3
 800bd7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d011      	beq.n	800bda8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd88:	4a17      	ldr	r2, [pc, #92]	@ (800bde8 <HAL_SPI_IRQHandler+0x1e4>)
 800bd8a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fb fda4 	bl	80078de <HAL_DMA_Abort_IT>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bda0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d016      	beq.n	800bdde <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb4:	4a0c      	ldr	r2, [pc, #48]	@ (800bde8 <HAL_SPI_IRQHandler+0x1e4>)
 800bdb6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fb fd8e 	bl	80078de <HAL_DMA_Abort_IT>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800bdd4:	e003      	b.n	800bdde <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f812 	bl	800be00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bddc:	e000      	b.n	800bde0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800bdde:	bf00      	nop
    return;
 800bde0:	bf00      	nop
  }
}
 800bde2:	3720      	adds	r7, #32
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	0800be15 	.word	0x0800be15

0800bdec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff ffe5 	bl	800be00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be36:	bf00      	nop
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d923      	bls.n	800be9a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68da      	ldr	r2, [r3, #12]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5c:	b292      	uxth	r2, r2
 800be5e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be64:	1c9a      	adds	r2, r3, #2
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b02      	subs	r3, #2
 800be74:	b29a      	uxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800be82:	b29b      	uxth	r3, r3
 800be84:	2b01      	cmp	r3, #1
 800be86:	d11f      	bne.n	800bec8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	e016      	b.n	800bec8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f103 020c 	add.w	r2, r3, #12
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	b2d2      	uxtb	r2, r2
 800beaa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bece:	b29b      	uxth	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10f      	bne.n	800bef4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800bee2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bee8:	b29b      	uxth	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa14 	bl	800c31c <SPI_CloseRxTx_ISR>
    }
  }
}
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d912      	bls.n	800bf34 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf12:	881a      	ldrh	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf1e:	1c9a      	adds	r2, r3, #2
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b02      	subs	r3, #2
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bf32:	e012      	b.n	800bf5a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	3b01      	subs	r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d110      	bne.n	800bf86 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf72:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f9cb 	bl	800c31c <SPI_CloseRxTx_ISR>
    }
  }
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa0:	b292      	uxth	r2, r2
 800bfa2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa8:	1c9a      	adds	r2, r3, #2
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10f      	bne.n	800bfec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d102      	bne.n	800bfec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f998 	bl	800c31c <SPI_CloseRxTx_ISR>
    }
  }
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c000:	881a      	ldrh	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00c:	1c9a      	adds	r2, r3, #2
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c016:	b29b      	uxth	r3, r3
 800c018:	3b01      	subs	r3, #1
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d110      	bne.n	800c04c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c038:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c040:	b29b      	uxth	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d102      	bne.n	800c04c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f968 	bl	800c31c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c064:	f7fb fae0 	bl	8007628 <HAL_GetTick>
 800c068:	4602      	mov	r2, r0
 800c06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06c:	1a9b      	subs	r3, r3, r2
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	4413      	add	r3, r2
 800c072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c074:	f7fb fad8 	bl	8007628 <HAL_GetTick>
 800c078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c07a:	4b39      	ldr	r3, [pc, #228]	@ (800c160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	015b      	lsls	r3, r3, #5
 800c080:	0d1b      	lsrs	r3, r3, #20
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	fb02 f303 	mul.w	r3, r2, r3
 800c088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c08a:	e054      	b.n	800c136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c092:	d050      	beq.n	800c136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c094:	f7fb fac8 	bl	8007628 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	69fa      	ldr	r2, [r7, #28]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d902      	bls.n	800c0aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d13d      	bne.n	800c126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c0b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c0c2:	d111      	bne.n	800c0e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0cc:	d004      	beq.n	800c0d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0d6:	d107      	bne.n	800c0e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c0e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0f0:	d10f      	bne.n	800c112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e017      	b.n	800c156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	3b01      	subs	r3, #1
 800c134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	4013      	ands	r3, r2
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	429a      	cmp	r2, r3
 800c144:	bf0c      	ite	eq
 800c146:	2301      	moveq	r3, #1
 800c148:	2300      	movne	r3, #0
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	429a      	cmp	r2, r3
 800c152:	d19b      	bne.n	800c08c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3720      	adds	r7, #32
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000f2c 	.word	0x20000f2c

0800c164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08a      	sub	sp, #40	@ 0x28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c176:	f7fb fa57 	bl	8007628 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	4413      	add	r3, r2
 800c184:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800c186:	f7fb fa4f 	bl	8007628 <HAL_GetTick>
 800c18a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	330c      	adds	r3, #12
 800c192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c194:	4b3d      	ldr	r3, [pc, #244]	@ (800c28c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	00da      	lsls	r2, r3, #3
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	0d1b      	lsrs	r3, r3, #20
 800c1a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a6:	fb02 f303 	mul.w	r3, r2, r3
 800c1aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c1ac:	e060      	b.n	800c270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c1b4:	d107      	bne.n	800c1c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d104      	bne.n	800c1c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1cc:	d050      	beq.n	800c270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1ce:	f7fb fa2b 	bl	8007628 <HAL_GetTick>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d902      	bls.n	800c1e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d13d      	bne.n	800c260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c1f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c1fc:	d111      	bne.n	800c222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c206:	d004      	beq.n	800c212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c210:	d107      	bne.n	800c222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c22a:	d10f      	bne.n	800c24c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c24a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e010      	b.n	800c282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	689a      	ldr	r2, [r3, #8]
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	4013      	ands	r3, r2
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d196      	bne.n	800c1ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3728      	adds	r7, #40	@ 0x28
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20000f2c 	.word	0x20000f2c

0800c290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af02      	add	r7, sp, #8
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7ff ff5b 	bl	800c164 <SPI_WaitFifoStateUntilTimeout>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2b8:	f043 0220 	orr.w	r2, r3, #32
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e027      	b.n	800c314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2180      	movs	r1, #128	@ 0x80
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f7ff fec0 	bl	800c054 <SPI_WaitFlagStateUntilTimeout>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2de:	f043 0220 	orr.w	r2, r3, #32
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e014      	b.n	800c314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f7ff ff34 	bl	800c164 <SPI_WaitFifoStateUntilTimeout>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c306:	f043 0220 	orr.w	r2, r3, #32
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e000      	b.n	800c314 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c324:	f7fb f980 	bl	8007628 <HAL_GetTick>
 800c328:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0220 	bic.w	r2, r2, #32
 800c338:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	2164      	movs	r1, #100	@ 0x64
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7ff ffa6 	bl	800c290 <SPI_EndRxTxTransaction>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c34e:	f043 0220 	orr.w	r2, r3, #32
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d115      	bne.n	800c38a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b04      	cmp	r3, #4
 800c368:	d107      	bne.n	800c37a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff fd3a 	bl	800bdec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c378:	e00e      	b.n	800c398 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7f6 f97e 	bl	8002684 <HAL_SPI_TxRxCpltCallback>
}
 800c388:	e006      	b.n	800c398 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fd34 	bl	800be00 <HAL_SPI_ErrorCallback>
}
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e049      	b.n	800c446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7f6 fbf2 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4610      	mov	r0, r2
 800c3e0:	f000 fa8a 	bl	800c8f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b01      	cmp	r3, #1
 800c462:	d001      	beq.n	800c468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e040      	b.n	800c4ea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68da      	ldr	r2, [r3, #12]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f042 0201 	orr.w	r2, r2, #1
 800c47e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f8 <HAL_TIM_Base_Start_IT+0xa8>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00e      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x58>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c492:	d009      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x58>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a18      	ldr	r2, [pc, #96]	@ (800c4fc <HAL_TIM_Base_Start_IT+0xac>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d004      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x58>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a17      	ldr	r2, [pc, #92]	@ (800c500 <HAL_TIM_Base_Start_IT+0xb0>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d115      	bne.n	800c4d4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	4b15      	ldr	r3, [pc, #84]	@ (800c504 <HAL_TIM_Base_Start_IT+0xb4>)
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b06      	cmp	r3, #6
 800c4b8:	d015      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0x96>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4c0:	d011      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f042 0201 	orr.w	r2, r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d2:	e008      	b.n	800c4e6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f042 0201 	orr.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	e000      	b.n	800c4e8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	40012c00 	.word	0x40012c00
 800c4fc:	40000400 	.word	0x40000400
 800c500:	40014000 	.word	0x40014000
 800c504:	00010007 	.word	0x00010007

0800c508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d020      	beq.n	800c56c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d01b      	beq.n	800c56c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f06f 0202 	mvn.w	r2, #2
 800c53c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f9b2 	bl	800c8bc <HAL_TIM_IC_CaptureCallback>
 800c558:	e005      	b.n	800c566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f9a4 	bl	800c8a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f9b5 	bl	800c8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f003 0304 	and.w	r3, r3, #4
 800c572:	2b00      	cmp	r3, #0
 800c574:	d020      	beq.n	800c5b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f003 0304 	and.w	r3, r3, #4
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01b      	beq.n	800c5b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f06f 0204 	mvn.w	r2, #4
 800c588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2202      	movs	r2, #2
 800c58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f98c 	bl	800c8bc <HAL_TIM_IC_CaptureCallback>
 800c5a4:	e005      	b.n	800c5b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f97e 	bl	800c8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f98f 	bl	800c8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f003 0308 	and.w	r3, r3, #8
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d020      	beq.n	800c604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01b      	beq.n	800c604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f06f 0208 	mvn.w	r2, #8
 800c5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2204      	movs	r2, #4
 800c5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f966 	bl	800c8bc <HAL_TIM_IC_CaptureCallback>
 800c5f0:	e005      	b.n	800c5fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f958 	bl	800c8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f969 	bl	800c8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	f003 0310 	and.w	r3, r3, #16
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d020      	beq.n	800c650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01b      	beq.n	800c650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f06f 0210 	mvn.w	r2, #16
 800c620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2208      	movs	r2, #8
 800c626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f940 	bl	800c8bc <HAL_TIM_IC_CaptureCallback>
 800c63c:	e005      	b.n	800c64a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f932 	bl	800c8a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f943 	bl	800c8d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00c      	beq.n	800c674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d007      	beq.n	800c674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f06f 0201 	mvn.w	r2, #1
 800c66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f5 ffe2 	bl	8002638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d104      	bne.n	800c688 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00c      	beq.n	800c6a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d007      	beq.n	800c6a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fab7 	bl	800cc10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00c      	beq.n	800c6c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d007      	beq.n	800c6c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 faaf 	bl	800cc24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00c      	beq.n	800c6ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d007      	beq.n	800c6ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c6e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f8fd 	bl	800c8e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	f003 0320 	and.w	r3, r3, #32
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00c      	beq.n	800c70e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d007      	beq.n	800c70e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f06f 0220 	mvn.w	r2, #32
 800c706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fa77 	bl	800cbfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <HAL_TIM_ConfigClockSource+0x1c>
 800c72e:	2302      	movs	r3, #2
 800c730:	e0b6      	b.n	800c8a0 <HAL_TIM_ConfigClockSource+0x18a>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2202      	movs	r2, #2
 800c73e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c750:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c754:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c75c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c76e:	d03e      	beq.n	800c7ee <HAL_TIM_ConfigClockSource+0xd8>
 800c770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c774:	f200 8087 	bhi.w	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c77c:	f000 8086 	beq.w	800c88c <HAL_TIM_ConfigClockSource+0x176>
 800c780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c784:	d87f      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c786:	2b70      	cmp	r3, #112	@ 0x70
 800c788:	d01a      	beq.n	800c7c0 <HAL_TIM_ConfigClockSource+0xaa>
 800c78a:	2b70      	cmp	r3, #112	@ 0x70
 800c78c:	d87b      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c78e:	2b60      	cmp	r3, #96	@ 0x60
 800c790:	d050      	beq.n	800c834 <HAL_TIM_ConfigClockSource+0x11e>
 800c792:	2b60      	cmp	r3, #96	@ 0x60
 800c794:	d877      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c796:	2b50      	cmp	r3, #80	@ 0x50
 800c798:	d03c      	beq.n	800c814 <HAL_TIM_ConfigClockSource+0xfe>
 800c79a:	2b50      	cmp	r3, #80	@ 0x50
 800c79c:	d873      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c79e:	2b40      	cmp	r3, #64	@ 0x40
 800c7a0:	d058      	beq.n	800c854 <HAL_TIM_ConfigClockSource+0x13e>
 800c7a2:	2b40      	cmp	r3, #64	@ 0x40
 800c7a4:	d86f      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c7a6:	2b30      	cmp	r3, #48	@ 0x30
 800c7a8:	d064      	beq.n	800c874 <HAL_TIM_ConfigClockSource+0x15e>
 800c7aa:	2b30      	cmp	r3, #48	@ 0x30
 800c7ac:	d86b      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c7ae:	2b20      	cmp	r3, #32
 800c7b0:	d060      	beq.n	800c874 <HAL_TIM_ConfigClockSource+0x15e>
 800c7b2:	2b20      	cmp	r3, #32
 800c7b4:	d867      	bhi.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d05c      	beq.n	800c874 <HAL_TIM_ConfigClockSource+0x15e>
 800c7ba:	2b10      	cmp	r3, #16
 800c7bc:	d05a      	beq.n	800c874 <HAL_TIM_ConfigClockSource+0x15e>
 800c7be:	e062      	b.n	800c886 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7d0:	f000 f986 	bl	800cae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c7e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	609a      	str	r2, [r3, #8]
      break;
 800c7ec:	e04f      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7fe:	f000 f96f 	bl	800cae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	689a      	ldr	r2, [r3, #8]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c810:	609a      	str	r2, [r3, #8]
      break;
 800c812:	e03c      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c820:	461a      	mov	r2, r3
 800c822:	f000 f8e3 	bl	800c9ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2150      	movs	r1, #80	@ 0x50
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 f93c 	bl	800caaa <TIM_ITRx_SetConfig>
      break;
 800c832:	e02c      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c840:	461a      	mov	r2, r3
 800c842:	f000 f902 	bl	800ca4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2160      	movs	r1, #96	@ 0x60
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f92c 	bl	800caaa <TIM_ITRx_SetConfig>
      break;
 800c852:	e01c      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c860:	461a      	mov	r2, r3
 800c862:	f000 f8c3 	bl	800c9ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2140      	movs	r1, #64	@ 0x40
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 f91c 	bl	800caaa <TIM_ITRx_SetConfig>
      break;
 800c872:	e00c      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4619      	mov	r1, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	f000 f913 	bl	800caaa <TIM_ITRx_SetConfig>
      break;
 800c884:	e003      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	73fb      	strb	r3, [r7, #15]
      break;
 800c88a:	e000      	b.n	800c88e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c88c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a34      	ldr	r2, [pc, #208]	@ (800c9dc <TIM_Base_SetConfig+0xe4>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d007      	beq.n	800c920 <TIM_Base_SetConfig+0x28>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c916:	d003      	beq.n	800c920 <TIM_Base_SetConfig+0x28>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a31      	ldr	r2, [pc, #196]	@ (800c9e0 <TIM_Base_SetConfig+0xe8>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d108      	bne.n	800c932 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	4313      	orrs	r3, r2
 800c930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a29      	ldr	r2, [pc, #164]	@ (800c9dc <TIM_Base_SetConfig+0xe4>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d00f      	beq.n	800c95a <TIM_Base_SetConfig+0x62>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c940:	d00b      	beq.n	800c95a <TIM_Base_SetConfig+0x62>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a26      	ldr	r2, [pc, #152]	@ (800c9e0 <TIM_Base_SetConfig+0xe8>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d007      	beq.n	800c95a <TIM_Base_SetConfig+0x62>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a25      	ldr	r2, [pc, #148]	@ (800c9e4 <TIM_Base_SetConfig+0xec>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d003      	beq.n	800c95a <TIM_Base_SetConfig+0x62>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a24      	ldr	r2, [pc, #144]	@ (800c9e8 <TIM_Base_SetConfig+0xf0>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d108      	bne.n	800c96c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	4313      	orrs	r3, r2
 800c96a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	689a      	ldr	r2, [r3, #8]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a12      	ldr	r2, [pc, #72]	@ (800c9dc <TIM_Base_SetConfig+0xe4>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d007      	beq.n	800c9a8 <TIM_Base_SetConfig+0xb0>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a12      	ldr	r2, [pc, #72]	@ (800c9e4 <TIM_Base_SetConfig+0xec>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d003      	beq.n	800c9a8 <TIM_Base_SetConfig+0xb0>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a11      	ldr	r2, [pc, #68]	@ (800c9e8 <TIM_Base_SetConfig+0xf0>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d103      	bne.n	800c9b0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	691a      	ldr	r2, [r3, #16]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d105      	bne.n	800c9ce <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	f023 0201 	bic.w	r2, r3, #1
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	611a      	str	r2, [r3, #16]
  }
}
 800c9ce:	bf00      	nop
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	40012c00 	.word	0x40012c00
 800c9e0:	40000400 	.word	0x40000400
 800c9e4:	40014000 	.word	0x40014000
 800c9e8:	40014400 	.word	0x40014400

0800c9ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	f023 0201 	bic.w	r2, r3, #1
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	011b      	lsls	r3, r3, #4
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f023 030a 	bic.w	r3, r3, #10
 800ca28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	621a      	str	r2, [r3, #32]
}
 800ca3e:	bf00      	nop
 800ca40:	371c      	adds	r7, #28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b087      	sub	sp, #28
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	f023 0210 	bic.w	r2, r3, #16
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ca74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	031b      	lsls	r3, r3, #12
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ca86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	621a      	str	r2, [r3, #32]
}
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	f043 0307 	orr.w	r3, r3, #7
 800cacc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	609a      	str	r2, [r3, #8]
}
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cafa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	021a      	lsls	r2, r3, #8
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	431a      	orrs	r2, r3
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	609a      	str	r2, [r3, #8]
}
 800cb14:	bf00      	nop
 800cb16:	371c      	adds	r7, #28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d101      	bne.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb34:	2302      	movs	r3, #2
 800cb36:	e054      	b.n	800cbe2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a24      	ldr	r2, [pc, #144]	@ (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d108      	bne.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cb68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a17      	ldr	r2, [pc, #92]	@ (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00e      	beq.n	800cbb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cba0:	d009      	beq.n	800cbb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a13      	ldr	r2, [pc, #76]	@ (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d004      	beq.n	800cbb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a11      	ldr	r2, [pc, #68]	@ (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d10c      	bne.n	800cbd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3714      	adds	r7, #20
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	40012c00 	.word	0x40012c00
 800cbf4:	40000400 	.word	0x40000400
 800cbf8:	40014000 	.word	0x40014000

0800cbfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e040      	b.n	800cccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7f5 fe9e 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2224      	movs	r2, #36	@ 0x24
 800cc64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 0201 	bic.w	r2, r2, #1
 800cc74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fc00 	bl	800d484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f977 	bl	800cf78 <UART_SetConfig>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d101      	bne.n	800cc94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e01b      	b.n	800cccc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	689a      	ldr	r2, [r3, #8]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ccb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f042 0201 	orr.w	r2, r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc7f 	bl	800d5c8 <UART_CheckIdleState>
 800ccca:	4603      	mov	r3, r0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08a      	sub	sp, #40	@ 0x28
 800ccd8:	af02      	add	r7, sp, #8
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	603b      	str	r3, [r7, #0]
 800cce0:	4613      	mov	r3, r2
 800cce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cce8:	2b20      	cmp	r3, #32
 800ccea:	d177      	bne.n	800cddc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <HAL_UART_Transmit+0x24>
 800ccf2:	88fb      	ldrh	r3, [r7, #6]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e070      	b.n	800cdde <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2221      	movs	r2, #33	@ 0x21
 800cd08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd0a:	f7fa fc8d 	bl	8007628 <HAL_GetTick>
 800cd0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	88fa      	ldrh	r2, [r7, #6]
 800cd14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	88fa      	ldrh	r2, [r7, #6]
 800cd1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd28:	d108      	bne.n	800cd3c <HAL_UART_Transmit+0x68>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d104      	bne.n	800cd3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	e003      	b.n	800cd44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd40:	2300      	movs	r3, #0
 800cd42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd44:	e02f      	b.n	800cda6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2180      	movs	r1, #128	@ 0x80
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 fce1 	bl	800d718 <UART_WaitOnFlagUntilTimeout>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2220      	movs	r2, #32
 800cd60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e03b      	b.n	800cdde <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10b      	bne.n	800cd84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	881a      	ldrh	r2, [r3, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd78:	b292      	uxth	r2, r2
 800cd7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	3302      	adds	r3, #2
 800cd80:	61bb      	str	r3, [r7, #24]
 800cd82:	e007      	b.n	800cd94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	781a      	ldrb	r2, [r3, #0]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	3301      	adds	r3, #1
 800cd92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1c9      	bne.n	800cd46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2140      	movs	r1, #64	@ 0x40
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 fcab 	bl	800d718 <UART_WaitOnFlagUntilTimeout>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d004      	beq.n	800cdd2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2220      	movs	r2, #32
 800cdcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e005      	b.n	800cdde <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	e000      	b.n	800cdde <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800cddc:	2302      	movs	r3, #2
  }
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3720      	adds	r7, #32
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b08a      	sub	sp, #40	@ 0x28
 800cdea:	af02      	add	r7, sp, #8
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	603b      	str	r3, [r7, #0]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdfc:	2b20      	cmp	r3, #32
 800cdfe:	f040 80b6 	bne.w	800cf6e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <HAL_UART_Receive+0x28>
 800ce08:	88fb      	ldrh	r3, [r7, #6]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e0ae      	b.n	800cf70 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2222      	movs	r2, #34	@ 0x22
 800ce1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce28:	f7fa fbfe 	bl	8007628 <HAL_GetTick>
 800ce2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	88fa      	ldrh	r2, [r7, #6]
 800ce32:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	88fa      	ldrh	r2, [r7, #6]
 800ce3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce46:	d10e      	bne.n	800ce66 <HAL_UART_Receive+0x80>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <HAL_UART_Receive+0x76>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ce56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce5a:	e02d      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	22ff      	movs	r2, #255	@ 0xff
 800ce60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce64:	e028      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10d      	bne.n	800ce8a <HAL_UART_Receive+0xa4>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d104      	bne.n	800ce80 <HAL_UART_Receive+0x9a>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	22ff      	movs	r2, #255	@ 0xff
 800ce7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce7e:	e01b      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	227f      	movs	r2, #127	@ 0x7f
 800ce84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ce88:	e016      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce92:	d10d      	bne.n	800ceb0 <HAL_UART_Receive+0xca>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <HAL_UART_Receive+0xc0>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	227f      	movs	r2, #127	@ 0x7f
 800cea0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cea4:	e008      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	223f      	movs	r2, #63	@ 0x3f
 800ceaa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ceae:	e003      	b.n	800ceb8 <HAL_UART_Receive+0xd2>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cebe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cec8:	d108      	bne.n	800cedc <HAL_UART_Receive+0xf6>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d104      	bne.n	800cedc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	61bb      	str	r3, [r7, #24]
 800ceda:	e003      	b.n	800cee4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cee4:	e037      	b.n	800cf56 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	2200      	movs	r2, #0
 800ceee:	2120      	movs	r1, #32
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 fc11 	bl	800d718 <UART_WaitOnFlagUntilTimeout>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2220      	movs	r2, #32
 800cf00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e033      	b.n	800cf70 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10c      	bne.n	800cf28 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	8a7b      	ldrh	r3, [r7, #18]
 800cf18:	4013      	ands	r3, r2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	3302      	adds	r3, #2
 800cf24:	61bb      	str	r3, [r7, #24]
 800cf26:	e00d      	b.n	800cf44 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	8a7b      	ldrh	r3, [r7, #18]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	4013      	ands	r3, r2
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	3301      	adds	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1c1      	bne.n	800cee6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e000      	b.n	800cf70 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800cf6e:	2302      	movs	r3, #2
  }
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3720      	adds	r7, #32
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf7c:	b08a      	sub	sp, #40	@ 0x28
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	431a      	orrs	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	431a      	orrs	r2, r3
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	4ba5      	ldr	r3, [pc, #660]	@ (800d23c <UART_SetConfig+0x2c4>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	6812      	ldr	r2, [r2, #0]
 800cfae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfb0:	430b      	orrs	r3, r1
 800cfb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68da      	ldr	r2, [r3, #12]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a9a      	ldr	r2, [pc, #616]	@ (800d240 <UART_SetConfig+0x2c8>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d004      	beq.n	800cfe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff4:	430a      	orrs	r2, r1
 800cff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a91      	ldr	r2, [pc, #580]	@ (800d244 <UART_SetConfig+0x2cc>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d126      	bne.n	800d050 <UART_SetConfig+0xd8>
 800d002:	4b91      	ldr	r3, [pc, #580]	@ (800d248 <UART_SetConfig+0x2d0>)
 800d004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d008:	f003 0303 	and.w	r3, r3, #3
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d81b      	bhi.n	800d048 <UART_SetConfig+0xd0>
 800d010:	a201      	add	r2, pc, #4	@ (adr r2, 800d018 <UART_SetConfig+0xa0>)
 800d012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d016:	bf00      	nop
 800d018:	0800d029 	.word	0x0800d029
 800d01c:	0800d039 	.word	0x0800d039
 800d020:	0800d031 	.word	0x0800d031
 800d024:	0800d041 	.word	0x0800d041
 800d028:	2301      	movs	r3, #1
 800d02a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d02e:	e0d6      	b.n	800d1de <UART_SetConfig+0x266>
 800d030:	2302      	movs	r3, #2
 800d032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d036:	e0d2      	b.n	800d1de <UART_SetConfig+0x266>
 800d038:	2304      	movs	r3, #4
 800d03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d03e:	e0ce      	b.n	800d1de <UART_SetConfig+0x266>
 800d040:	2308      	movs	r3, #8
 800d042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d046:	e0ca      	b.n	800d1de <UART_SetConfig+0x266>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d04e:	e0c6      	b.n	800d1de <UART_SetConfig+0x266>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a7d      	ldr	r2, [pc, #500]	@ (800d24c <UART_SetConfig+0x2d4>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d138      	bne.n	800d0cc <UART_SetConfig+0x154>
 800d05a:	4b7b      	ldr	r3, [pc, #492]	@ (800d248 <UART_SetConfig+0x2d0>)
 800d05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d060:	f003 030c 	and.w	r3, r3, #12
 800d064:	2b0c      	cmp	r3, #12
 800d066:	d82d      	bhi.n	800d0c4 <UART_SetConfig+0x14c>
 800d068:	a201      	add	r2, pc, #4	@ (adr r2, 800d070 <UART_SetConfig+0xf8>)
 800d06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06e:	bf00      	nop
 800d070:	0800d0a5 	.word	0x0800d0a5
 800d074:	0800d0c5 	.word	0x0800d0c5
 800d078:	0800d0c5 	.word	0x0800d0c5
 800d07c:	0800d0c5 	.word	0x0800d0c5
 800d080:	0800d0b5 	.word	0x0800d0b5
 800d084:	0800d0c5 	.word	0x0800d0c5
 800d088:	0800d0c5 	.word	0x0800d0c5
 800d08c:	0800d0c5 	.word	0x0800d0c5
 800d090:	0800d0ad 	.word	0x0800d0ad
 800d094:	0800d0c5 	.word	0x0800d0c5
 800d098:	0800d0c5 	.word	0x0800d0c5
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0bd 	.word	0x0800d0bd
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0aa:	e098      	b.n	800d1de <UART_SetConfig+0x266>
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0b2:	e094      	b.n	800d1de <UART_SetConfig+0x266>
 800d0b4:	2304      	movs	r3, #4
 800d0b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0ba:	e090      	b.n	800d1de <UART_SetConfig+0x266>
 800d0bc:	2308      	movs	r3, #8
 800d0be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0c2:	e08c      	b.n	800d1de <UART_SetConfig+0x266>
 800d0c4:	2310      	movs	r3, #16
 800d0c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0ca:	e088      	b.n	800d1de <UART_SetConfig+0x266>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a5f      	ldr	r2, [pc, #380]	@ (800d250 <UART_SetConfig+0x2d8>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d125      	bne.n	800d122 <UART_SetConfig+0x1aa>
 800d0d6:	4b5c      	ldr	r3, [pc, #368]	@ (800d248 <UART_SetConfig+0x2d0>)
 800d0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d0e0:	2b30      	cmp	r3, #48	@ 0x30
 800d0e2:	d016      	beq.n	800d112 <UART_SetConfig+0x19a>
 800d0e4:	2b30      	cmp	r3, #48	@ 0x30
 800d0e6:	d818      	bhi.n	800d11a <UART_SetConfig+0x1a2>
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	d00a      	beq.n	800d102 <UART_SetConfig+0x18a>
 800d0ec:	2b20      	cmp	r3, #32
 800d0ee:	d814      	bhi.n	800d11a <UART_SetConfig+0x1a2>
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <UART_SetConfig+0x182>
 800d0f4:	2b10      	cmp	r3, #16
 800d0f6:	d008      	beq.n	800d10a <UART_SetConfig+0x192>
 800d0f8:	e00f      	b.n	800d11a <UART_SetConfig+0x1a2>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d100:	e06d      	b.n	800d1de <UART_SetConfig+0x266>
 800d102:	2302      	movs	r3, #2
 800d104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d108:	e069      	b.n	800d1de <UART_SetConfig+0x266>
 800d10a:	2304      	movs	r3, #4
 800d10c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d110:	e065      	b.n	800d1de <UART_SetConfig+0x266>
 800d112:	2308      	movs	r3, #8
 800d114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d118:	e061      	b.n	800d1de <UART_SetConfig+0x266>
 800d11a:	2310      	movs	r3, #16
 800d11c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d120:	e05d      	b.n	800d1de <UART_SetConfig+0x266>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a4b      	ldr	r2, [pc, #300]	@ (800d254 <UART_SetConfig+0x2dc>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d125      	bne.n	800d178 <UART_SetConfig+0x200>
 800d12c:	4b46      	ldr	r3, [pc, #280]	@ (800d248 <UART_SetConfig+0x2d0>)
 800d12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d132:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d136:	2bc0      	cmp	r3, #192	@ 0xc0
 800d138:	d016      	beq.n	800d168 <UART_SetConfig+0x1f0>
 800d13a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d13c:	d818      	bhi.n	800d170 <UART_SetConfig+0x1f8>
 800d13e:	2b80      	cmp	r3, #128	@ 0x80
 800d140:	d00a      	beq.n	800d158 <UART_SetConfig+0x1e0>
 800d142:	2b80      	cmp	r3, #128	@ 0x80
 800d144:	d814      	bhi.n	800d170 <UART_SetConfig+0x1f8>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <UART_SetConfig+0x1d8>
 800d14a:	2b40      	cmp	r3, #64	@ 0x40
 800d14c:	d008      	beq.n	800d160 <UART_SetConfig+0x1e8>
 800d14e:	e00f      	b.n	800d170 <UART_SetConfig+0x1f8>
 800d150:	2300      	movs	r3, #0
 800d152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d156:	e042      	b.n	800d1de <UART_SetConfig+0x266>
 800d158:	2302      	movs	r3, #2
 800d15a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d15e:	e03e      	b.n	800d1de <UART_SetConfig+0x266>
 800d160:	2304      	movs	r3, #4
 800d162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d166:	e03a      	b.n	800d1de <UART_SetConfig+0x266>
 800d168:	2308      	movs	r3, #8
 800d16a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d16e:	e036      	b.n	800d1de <UART_SetConfig+0x266>
 800d170:	2310      	movs	r3, #16
 800d172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d176:	e032      	b.n	800d1de <UART_SetConfig+0x266>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a30      	ldr	r2, [pc, #192]	@ (800d240 <UART_SetConfig+0x2c8>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d12a      	bne.n	800d1d8 <UART_SetConfig+0x260>
 800d182:	4b31      	ldr	r3, [pc, #196]	@ (800d248 <UART_SetConfig+0x2d0>)
 800d184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d18c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d190:	d01a      	beq.n	800d1c8 <UART_SetConfig+0x250>
 800d192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d196:	d81b      	bhi.n	800d1d0 <UART_SetConfig+0x258>
 800d198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d19c:	d00c      	beq.n	800d1b8 <UART_SetConfig+0x240>
 800d19e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1a2:	d815      	bhi.n	800d1d0 <UART_SetConfig+0x258>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <UART_SetConfig+0x238>
 800d1a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ac:	d008      	beq.n	800d1c0 <UART_SetConfig+0x248>
 800d1ae:	e00f      	b.n	800d1d0 <UART_SetConfig+0x258>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1b6:	e012      	b.n	800d1de <UART_SetConfig+0x266>
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1be:	e00e      	b.n	800d1de <UART_SetConfig+0x266>
 800d1c0:	2304      	movs	r3, #4
 800d1c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1c6:	e00a      	b.n	800d1de <UART_SetConfig+0x266>
 800d1c8:	2308      	movs	r3, #8
 800d1ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1ce:	e006      	b.n	800d1de <UART_SetConfig+0x266>
 800d1d0:	2310      	movs	r3, #16
 800d1d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1d6:	e002      	b.n	800d1de <UART_SetConfig+0x266>
 800d1d8:	2310      	movs	r3, #16
 800d1da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a17      	ldr	r2, [pc, #92]	@ (800d240 <UART_SetConfig+0x2c8>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	f040 808b 	bne.w	800d300 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d1ee:	2b08      	cmp	r3, #8
 800d1f0:	d834      	bhi.n	800d25c <UART_SetConfig+0x2e4>
 800d1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f8 <UART_SetConfig+0x280>)
 800d1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f8:	0800d21d 	.word	0x0800d21d
 800d1fc:	0800d25d 	.word	0x0800d25d
 800d200:	0800d225 	.word	0x0800d225
 800d204:	0800d25d 	.word	0x0800d25d
 800d208:	0800d22b 	.word	0x0800d22b
 800d20c:	0800d25d 	.word	0x0800d25d
 800d210:	0800d25d 	.word	0x0800d25d
 800d214:	0800d25d 	.word	0x0800d25d
 800d218:	0800d233 	.word	0x0800d233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d21c:	f7fd fb38 	bl	800a890 <HAL_RCC_GetPCLK1Freq>
 800d220:	61f8      	str	r0, [r7, #28]
        break;
 800d222:	e021      	b.n	800d268 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d224:	4b0c      	ldr	r3, [pc, #48]	@ (800d258 <UART_SetConfig+0x2e0>)
 800d226:	61fb      	str	r3, [r7, #28]
        break;
 800d228:	e01e      	b.n	800d268 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d22a:	f7fd fa99 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800d22e:	61f8      	str	r0, [r7, #28]
        break;
 800d230:	e01a      	b.n	800d268 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d236:	61fb      	str	r3, [r7, #28]
        break;
 800d238:	e016      	b.n	800d268 <UART_SetConfig+0x2f0>
 800d23a:	bf00      	nop
 800d23c:	efff69f3 	.word	0xefff69f3
 800d240:	40008000 	.word	0x40008000
 800d244:	40013800 	.word	0x40013800
 800d248:	40021000 	.word	0x40021000
 800d24c:	40004400 	.word	0x40004400
 800d250:	40004800 	.word	0x40004800
 800d254:	40004c00 	.word	0x40004c00
 800d258:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d25c:	2300      	movs	r3, #0
 800d25e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d266:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 80fa 	beq.w	800d464 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	4413      	add	r3, r2
 800d27a:	69fa      	ldr	r2, [r7, #28]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d305      	bcc.n	800d28c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d286:	69fa      	ldr	r2, [r7, #28]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d903      	bls.n	800d294 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d292:	e0e7      	b.n	800d464 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	2200      	movs	r2, #0
 800d298:	461c      	mov	r4, r3
 800d29a:	4615      	mov	r5, r2
 800d29c:	f04f 0200 	mov.w	r2, #0
 800d2a0:	f04f 0300 	mov.w	r3, #0
 800d2a4:	022b      	lsls	r3, r5, #8
 800d2a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d2aa:	0222      	lsls	r2, r4, #8
 800d2ac:	68f9      	ldr	r1, [r7, #12]
 800d2ae:	6849      	ldr	r1, [r1, #4]
 800d2b0:	0849      	lsrs	r1, r1, #1
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	4688      	mov	r8, r1
 800d2b6:	4681      	mov	r9, r0
 800d2b8:	eb12 0a08 	adds.w	sl, r2, r8
 800d2bc:	eb43 0b09 	adc.w	fp, r3, r9
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	603b      	str	r3, [r7, #0]
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	4659      	mov	r1, fp
 800d2d2:	f7f3 fcc1 	bl	8000c58 <__aeabi_uldivmod>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4613      	mov	r3, r2
 800d2dc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2e4:	d308      	bcc.n	800d2f8 <UART_SetConfig+0x380>
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2ec:	d204      	bcs.n	800d2f8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	60da      	str	r2, [r3, #12]
 800d2f6:	e0b5      	b.n	800d464 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d2fe:	e0b1      	b.n	800d464 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d308:	d15d      	bne.n	800d3c6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800d30a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d30e:	2b08      	cmp	r3, #8
 800d310:	d827      	bhi.n	800d362 <UART_SetConfig+0x3ea>
 800d312:	a201      	add	r2, pc, #4	@ (adr r2, 800d318 <UART_SetConfig+0x3a0>)
 800d314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d318:	0800d33d 	.word	0x0800d33d
 800d31c:	0800d345 	.word	0x0800d345
 800d320:	0800d34d 	.word	0x0800d34d
 800d324:	0800d363 	.word	0x0800d363
 800d328:	0800d353 	.word	0x0800d353
 800d32c:	0800d363 	.word	0x0800d363
 800d330:	0800d363 	.word	0x0800d363
 800d334:	0800d363 	.word	0x0800d363
 800d338:	0800d35b 	.word	0x0800d35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d33c:	f7fd faa8 	bl	800a890 <HAL_RCC_GetPCLK1Freq>
 800d340:	61f8      	str	r0, [r7, #28]
        break;
 800d342:	e014      	b.n	800d36e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d344:	f7fd faba 	bl	800a8bc <HAL_RCC_GetPCLK2Freq>
 800d348:	61f8      	str	r0, [r7, #28]
        break;
 800d34a:	e010      	b.n	800d36e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d34c:	4b4c      	ldr	r3, [pc, #304]	@ (800d480 <UART_SetConfig+0x508>)
 800d34e:	61fb      	str	r3, [r7, #28]
        break;
 800d350:	e00d      	b.n	800d36e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d352:	f7fd fa05 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800d356:	61f8      	str	r0, [r7, #28]
        break;
 800d358:	e009      	b.n	800d36e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d35e:	61fb      	str	r3, [r7, #28]
        break;
 800d360:	e005      	b.n	800d36e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d36c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d077      	beq.n	800d464 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	005a      	lsls	r2, r3, #1
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	085b      	lsrs	r3, r3, #1
 800d37e:	441a      	add	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	fbb2 f3f3 	udiv	r3, r2, r3
 800d388:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b0f      	cmp	r3, #15
 800d38e:	d916      	bls.n	800d3be <UART_SetConfig+0x446>
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d396:	d212      	bcs.n	800d3be <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f023 030f 	bic.w	r3, r3, #15
 800d3a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	085b      	lsrs	r3, r3, #1
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	f003 0307 	and.w	r3, r3, #7
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	8afb      	ldrh	r3, [r7, #22]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	8afa      	ldrh	r2, [r7, #22]
 800d3ba:	60da      	str	r2, [r3, #12]
 800d3bc:	e052      	b.n	800d464 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d3c4:	e04e      	b.n	800d464 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d3ca:	2b08      	cmp	r3, #8
 800d3cc:	d827      	bhi.n	800d41e <UART_SetConfig+0x4a6>
 800d3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d4 <UART_SetConfig+0x45c>)
 800d3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d4:	0800d3f9 	.word	0x0800d3f9
 800d3d8:	0800d401 	.word	0x0800d401
 800d3dc:	0800d409 	.word	0x0800d409
 800d3e0:	0800d41f 	.word	0x0800d41f
 800d3e4:	0800d40f 	.word	0x0800d40f
 800d3e8:	0800d41f 	.word	0x0800d41f
 800d3ec:	0800d41f 	.word	0x0800d41f
 800d3f0:	0800d41f 	.word	0x0800d41f
 800d3f4:	0800d417 	.word	0x0800d417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3f8:	f7fd fa4a 	bl	800a890 <HAL_RCC_GetPCLK1Freq>
 800d3fc:	61f8      	str	r0, [r7, #28]
        break;
 800d3fe:	e014      	b.n	800d42a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d400:	f7fd fa5c 	bl	800a8bc <HAL_RCC_GetPCLK2Freq>
 800d404:	61f8      	str	r0, [r7, #28]
        break;
 800d406:	e010      	b.n	800d42a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d408:	4b1d      	ldr	r3, [pc, #116]	@ (800d480 <UART_SetConfig+0x508>)
 800d40a:	61fb      	str	r3, [r7, #28]
        break;
 800d40c:	e00d      	b.n	800d42a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d40e:	f7fd f9a7 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800d412:	61f8      	str	r0, [r7, #28]
        break;
 800d414:	e009      	b.n	800d42a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d41a:	61fb      	str	r3, [r7, #28]
        break;
 800d41c:	e005      	b.n	800d42a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800d41e:	2300      	movs	r3, #0
 800d420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d428:	bf00      	nop
    }

    if (pclk != 0U)
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d019      	beq.n	800d464 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	085a      	lsrs	r2, r3, #1
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	441a      	add	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d442:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	2b0f      	cmp	r3, #15
 800d448:	d909      	bls.n	800d45e <UART_SetConfig+0x4e6>
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d450:	d205      	bcs.n	800d45e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	60da      	str	r2, [r3, #12]
 800d45c:	e002      	b.n	800d464 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d470:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d474:	4618      	mov	r0, r3
 800d476:	3728      	adds	r7, #40	@ 0x28
 800d478:	46bd      	mov	sp, r7
 800d47a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d47e:	bf00      	nop
 800d480:	00f42400 	.word	0x00f42400

0800d484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d490:	f003 0308 	and.w	r3, r3, #8
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00a      	beq.n	800d4ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d4:	f003 0302 	and.w	r3, r3, #2
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00a      	beq.n	800d4f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f6:	f003 0304 	and.w	r3, r3, #4
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00a      	beq.n	800d514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	430a      	orrs	r2, r1
 800d512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d518:	f003 0310 	and.w	r3, r3, #16
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00a      	beq.n	800d536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00a      	beq.n	800d558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	430a      	orrs	r2, r1
 800d556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d560:	2b00      	cmp	r3, #0
 800d562:	d01a      	beq.n	800d59a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	430a      	orrs	r2, r1
 800d578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d582:	d10a      	bne.n	800d59a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	430a      	orrs	r2, r1
 800d598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	605a      	str	r2, [r3, #4]
  }
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b098      	sub	sp, #96	@ 0x60
 800d5cc:	af02      	add	r7, sp, #8
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5d8:	f7fa f826 	bl	8007628 <HAL_GetTick>
 800d5dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d12e      	bne.n	800d64a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f88c 	bl	800d718 <UART_WaitOnFlagUntilTimeout>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d021      	beq.n	800d64a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	e853 3f00 	ldrex	r3, [r3]
 800d612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d61a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d624:	647b      	str	r3, [r7, #68]	@ 0x44
 800d626:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d62a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d62c:	e841 2300 	strex	r3, r2, [r1]
 800d630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d1e6      	bne.n	800d606 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2220      	movs	r2, #32
 800d63c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d646:	2303      	movs	r3, #3
 800d648:	e062      	b.n	800d710 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b04      	cmp	r3, #4
 800d656:	d149      	bne.n	800d6ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d660:	2200      	movs	r2, #0
 800d662:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f856 	bl	800d718 <UART_WaitOnFlagUntilTimeout>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d03c      	beq.n	800d6ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	623b      	str	r3, [r7, #32]
   return(result);
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d690:	633b      	str	r3, [r7, #48]	@ 0x30
 800d692:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e6      	bne.n	800d672 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f023 0301 	bic.w	r3, r3, #1
 800d6ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6c4:	61fa      	str	r2, [r7, #28]
 800d6c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	69b9      	ldr	r1, [r7, #24]
 800d6ca:	69fa      	ldr	r2, [r7, #28]
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	617b      	str	r3, [r7, #20]
   return(result);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e5      	bne.n	800d6a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	e011      	b.n	800d710 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2220      	movs	r2, #32
 800d6f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2220      	movs	r2, #32
 800d6f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3758      	adds	r7, #88	@ 0x58
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	4613      	mov	r3, r2
 800d726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d728:	e04f      	b.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d730:	d04b      	beq.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d732:	f7f9 ff79 	bl	8007628 <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	69ba      	ldr	r2, [r7, #24]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d302      	bcc.n	800d748 <UART_WaitOnFlagUntilTimeout+0x30>
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e04e      	b.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0304 	and.w	r3, r3, #4
 800d756:	2b00      	cmp	r3, #0
 800d758:	d037      	beq.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b80      	cmp	r3, #128	@ 0x80
 800d75e:	d034      	beq.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2b40      	cmp	r3, #64	@ 0x40
 800d764:	d031      	beq.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	f003 0308 	and.w	r3, r3, #8
 800d770:	2b08      	cmp	r3, #8
 800d772:	d110      	bne.n	800d796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2208      	movs	r2, #8
 800d77a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 f838 	bl	800d7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2208      	movs	r2, #8
 800d786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	e029      	b.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	69db      	ldr	r3, [r3, #28]
 800d79c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7a4:	d111      	bne.n	800d7ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f000 f81e 	bl	800d7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	e00f      	b.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	69da      	ldr	r2, [r3, #28]
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	bf0c      	ite	eq
 800d7da:	2301      	moveq	r3, #1
 800d7dc:	2300      	movne	r3, #0
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	79fb      	ldrb	r3, [r7, #7]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d0a0      	beq.n	800d72a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b095      	sub	sp, #84	@ 0x54
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d802:	e853 3f00 	ldrex	r3, [r3]
 800d806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	461a      	mov	r2, r3
 800d816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d818:	643b      	str	r3, [r7, #64]	@ 0x40
 800d81a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d81e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d820:	e841 2300 	strex	r3, r2, [r1]
 800d824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e6      	bne.n	800d7fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3308      	adds	r3, #8
 800d832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	e853 3f00 	ldrex	r3, [r3]
 800d83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	f023 0301 	bic.w	r3, r3, #1
 800d842:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3308      	adds	r3, #8
 800d84a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d84c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d84e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d854:	e841 2300 	strex	r3, r2, [r1]
 800d858:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e5      	bne.n	800d82c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d864:	2b01      	cmp	r3, #1
 800d866:	d118      	bne.n	800d89a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	e853 3f00 	ldrex	r3, [r3]
 800d874:	60bb      	str	r3, [r7, #8]
   return(result);
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f023 0310 	bic.w	r3, r3, #16
 800d87c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d886:	61bb      	str	r3, [r7, #24]
 800d888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88a:	6979      	ldr	r1, [r7, #20]
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	e841 2300 	strex	r3, r2, [r1]
 800d892:	613b      	str	r3, [r7, #16]
   return(result);
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1e6      	bne.n	800d868 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2220      	movs	r2, #32
 800d89e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d8ae:	bf00      	nop
 800d8b0:	3754      	adds	r7, #84	@ 0x54
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <__cvt>:
 800d8ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8be:	ec57 6b10 	vmov	r6, r7, d0
 800d8c2:	2f00      	cmp	r7, #0
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	463b      	mov	r3, r7
 800d8ca:	bfbb      	ittet	lt
 800d8cc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d8d0:	461f      	movlt	r7, r3
 800d8d2:	2300      	movge	r3, #0
 800d8d4:	232d      	movlt	r3, #45	@ 0x2d
 800d8d6:	700b      	strb	r3, [r1, #0]
 800d8d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8da:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d8de:	4691      	mov	r9, r2
 800d8e0:	f023 0820 	bic.w	r8, r3, #32
 800d8e4:	bfbc      	itt	lt
 800d8e6:	4632      	movlt	r2, r6
 800d8e8:	4616      	movlt	r6, r2
 800d8ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d8ee:	d005      	beq.n	800d8fc <__cvt+0x42>
 800d8f0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d8f4:	d100      	bne.n	800d8f8 <__cvt+0x3e>
 800d8f6:	3401      	adds	r4, #1
 800d8f8:	2102      	movs	r1, #2
 800d8fa:	e000      	b.n	800d8fe <__cvt+0x44>
 800d8fc:	2103      	movs	r1, #3
 800d8fe:	ab03      	add	r3, sp, #12
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	ab02      	add	r3, sp, #8
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	ec47 6b10 	vmov	d0, r6, r7
 800d90a:	4653      	mov	r3, sl
 800d90c:	4622      	mov	r2, r4
 800d90e:	f000 ffc3 	bl	800e898 <_dtoa_r>
 800d912:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d916:	4605      	mov	r5, r0
 800d918:	d119      	bne.n	800d94e <__cvt+0x94>
 800d91a:	f019 0f01 	tst.w	r9, #1
 800d91e:	d00e      	beq.n	800d93e <__cvt+0x84>
 800d920:	eb00 0904 	add.w	r9, r0, r4
 800d924:	2200      	movs	r2, #0
 800d926:	2300      	movs	r3, #0
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f3 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d930:	b108      	cbz	r0, 800d936 <__cvt+0x7c>
 800d932:	f8cd 900c 	str.w	r9, [sp, #12]
 800d936:	2230      	movs	r2, #48	@ 0x30
 800d938:	9b03      	ldr	r3, [sp, #12]
 800d93a:	454b      	cmp	r3, r9
 800d93c:	d31e      	bcc.n	800d97c <__cvt+0xc2>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d942:	1b5b      	subs	r3, r3, r5
 800d944:	4628      	mov	r0, r5
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	b004      	add	sp, #16
 800d94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d952:	eb00 0904 	add.w	r9, r0, r4
 800d956:	d1e5      	bne.n	800d924 <__cvt+0x6a>
 800d958:	7803      	ldrb	r3, [r0, #0]
 800d95a:	2b30      	cmp	r3, #48	@ 0x30
 800d95c:	d10a      	bne.n	800d974 <__cvt+0xba>
 800d95e:	2200      	movs	r2, #0
 800d960:	2300      	movs	r3, #0
 800d962:	4630      	mov	r0, r6
 800d964:	4639      	mov	r1, r7
 800d966:	f7f3 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800d96a:	b918      	cbnz	r0, 800d974 <__cvt+0xba>
 800d96c:	f1c4 0401 	rsb	r4, r4, #1
 800d970:	f8ca 4000 	str.w	r4, [sl]
 800d974:	f8da 3000 	ldr.w	r3, [sl]
 800d978:	4499      	add	r9, r3
 800d97a:	e7d3      	b.n	800d924 <__cvt+0x6a>
 800d97c:	1c59      	adds	r1, r3, #1
 800d97e:	9103      	str	r1, [sp, #12]
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	e7d9      	b.n	800d938 <__cvt+0x7e>

0800d984 <__exponent>:
 800d984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d986:	2900      	cmp	r1, #0
 800d988:	bfba      	itte	lt
 800d98a:	4249      	neglt	r1, r1
 800d98c:	232d      	movlt	r3, #45	@ 0x2d
 800d98e:	232b      	movge	r3, #43	@ 0x2b
 800d990:	2909      	cmp	r1, #9
 800d992:	7002      	strb	r2, [r0, #0]
 800d994:	7043      	strb	r3, [r0, #1]
 800d996:	dd29      	ble.n	800d9ec <__exponent+0x68>
 800d998:	f10d 0307 	add.w	r3, sp, #7
 800d99c:	461d      	mov	r5, r3
 800d99e:	270a      	movs	r7, #10
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	fbb1 f6f7 	udiv	r6, r1, r7
 800d9a6:	fb07 1416 	mls	r4, r7, r6, r1
 800d9aa:	3430      	adds	r4, #48	@ 0x30
 800d9ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	2c63      	cmp	r4, #99	@ 0x63
 800d9b4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d9b8:	4631      	mov	r1, r6
 800d9ba:	dcf1      	bgt.n	800d9a0 <__exponent+0x1c>
 800d9bc:	3130      	adds	r1, #48	@ 0x30
 800d9be:	1e94      	subs	r4, r2, #2
 800d9c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9c4:	1c41      	adds	r1, r0, #1
 800d9c6:	4623      	mov	r3, r4
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	d30a      	bcc.n	800d9e2 <__exponent+0x5e>
 800d9cc:	f10d 0309 	add.w	r3, sp, #9
 800d9d0:	1a9b      	subs	r3, r3, r2
 800d9d2:	42ac      	cmp	r4, r5
 800d9d4:	bf88      	it	hi
 800d9d6:	2300      	movhi	r3, #0
 800d9d8:	3302      	adds	r3, #2
 800d9da:	4403      	add	r3, r0
 800d9dc:	1a18      	subs	r0, r3, r0
 800d9de:	b003      	add	sp, #12
 800d9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d9e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d9ea:	e7ed      	b.n	800d9c8 <__exponent+0x44>
 800d9ec:	2330      	movs	r3, #48	@ 0x30
 800d9ee:	3130      	adds	r1, #48	@ 0x30
 800d9f0:	7083      	strb	r3, [r0, #2]
 800d9f2:	70c1      	strb	r1, [r0, #3]
 800d9f4:	1d03      	adds	r3, r0, #4
 800d9f6:	e7f1      	b.n	800d9dc <__exponent+0x58>

0800d9f8 <_printf_float>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	b08d      	sub	sp, #52	@ 0x34
 800d9fe:	460c      	mov	r4, r1
 800da00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da04:	4616      	mov	r6, r2
 800da06:	461f      	mov	r7, r3
 800da08:	4605      	mov	r5, r0
 800da0a:	f000 fe37 	bl	800e67c <_localeconv_r>
 800da0e:	6803      	ldr	r3, [r0, #0]
 800da10:	9304      	str	r3, [sp, #16]
 800da12:	4618      	mov	r0, r3
 800da14:	f7f2 fc34 	bl	8000280 <strlen>
 800da18:	2300      	movs	r3, #0
 800da1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800da1c:	f8d8 3000 	ldr.w	r3, [r8]
 800da20:	9005      	str	r0, [sp, #20]
 800da22:	3307      	adds	r3, #7
 800da24:	f023 0307 	bic.w	r3, r3, #7
 800da28:	f103 0208 	add.w	r2, r3, #8
 800da2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da30:	f8d4 b000 	ldr.w	fp, [r4]
 800da34:	f8c8 2000 	str.w	r2, [r8]
 800da38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da40:	9307      	str	r3, [sp, #28]
 800da42:	f8cd 8018 	str.w	r8, [sp, #24]
 800da46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da4e:	4b9c      	ldr	r3, [pc, #624]	@ (800dcc0 <_printf_float+0x2c8>)
 800da50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da54:	f7f3 f872 	bl	8000b3c <__aeabi_dcmpun>
 800da58:	bb70      	cbnz	r0, 800dab8 <_printf_float+0xc0>
 800da5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da5e:	4b98      	ldr	r3, [pc, #608]	@ (800dcc0 <_printf_float+0x2c8>)
 800da60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da64:	f7f3 f84c 	bl	8000b00 <__aeabi_dcmple>
 800da68:	bb30      	cbnz	r0, 800dab8 <_printf_float+0xc0>
 800da6a:	2200      	movs	r2, #0
 800da6c:	2300      	movs	r3, #0
 800da6e:	4640      	mov	r0, r8
 800da70:	4649      	mov	r1, r9
 800da72:	f7f3 f83b 	bl	8000aec <__aeabi_dcmplt>
 800da76:	b110      	cbz	r0, 800da7e <_printf_float+0x86>
 800da78:	232d      	movs	r3, #45	@ 0x2d
 800da7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da7e:	4a91      	ldr	r2, [pc, #580]	@ (800dcc4 <_printf_float+0x2cc>)
 800da80:	4b91      	ldr	r3, [pc, #580]	@ (800dcc8 <_printf_float+0x2d0>)
 800da82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da86:	bf94      	ite	ls
 800da88:	4690      	movls	r8, r2
 800da8a:	4698      	movhi	r8, r3
 800da8c:	2303      	movs	r3, #3
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	f02b 0304 	bic.w	r3, fp, #4
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	9700      	str	r7, [sp, #0]
 800da9c:	4633      	mov	r3, r6
 800da9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800daa0:	4621      	mov	r1, r4
 800daa2:	4628      	mov	r0, r5
 800daa4:	f000 f9d2 	bl	800de4c <_printf_common>
 800daa8:	3001      	adds	r0, #1
 800daaa:	f040 808d 	bne.w	800dbc8 <_printf_float+0x1d0>
 800daae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dab2:	b00d      	add	sp, #52	@ 0x34
 800dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab8:	4642      	mov	r2, r8
 800daba:	464b      	mov	r3, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	4649      	mov	r1, r9
 800dac0:	f7f3 f83c 	bl	8000b3c <__aeabi_dcmpun>
 800dac4:	b140      	cbz	r0, 800dad8 <_printf_float+0xe0>
 800dac6:	464b      	mov	r3, r9
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bfbc      	itt	lt
 800dacc:	232d      	movlt	r3, #45	@ 0x2d
 800dace:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dad2:	4a7e      	ldr	r2, [pc, #504]	@ (800dccc <_printf_float+0x2d4>)
 800dad4:	4b7e      	ldr	r3, [pc, #504]	@ (800dcd0 <_printf_float+0x2d8>)
 800dad6:	e7d4      	b.n	800da82 <_printf_float+0x8a>
 800dad8:	6863      	ldr	r3, [r4, #4]
 800dada:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dade:	9206      	str	r2, [sp, #24]
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	d13b      	bne.n	800db5c <_printf_float+0x164>
 800dae4:	2306      	movs	r3, #6
 800dae6:	6063      	str	r3, [r4, #4]
 800dae8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800daec:	2300      	movs	r3, #0
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	9303      	str	r3, [sp, #12]
 800daf2:	ab0a      	add	r3, sp, #40	@ 0x28
 800daf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800daf8:	ab09      	add	r3, sp, #36	@ 0x24
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	6861      	ldr	r1, [r4, #4]
 800dafe:	ec49 8b10 	vmov	d0, r8, r9
 800db02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db06:	4628      	mov	r0, r5
 800db08:	f7ff fed7 	bl	800d8ba <__cvt>
 800db0c:	9b06      	ldr	r3, [sp, #24]
 800db0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db10:	2b47      	cmp	r3, #71	@ 0x47
 800db12:	4680      	mov	r8, r0
 800db14:	d129      	bne.n	800db6a <_printf_float+0x172>
 800db16:	1cc8      	adds	r0, r1, #3
 800db18:	db02      	blt.n	800db20 <_printf_float+0x128>
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	4299      	cmp	r1, r3
 800db1e:	dd41      	ble.n	800dba4 <_printf_float+0x1ac>
 800db20:	f1aa 0a02 	sub.w	sl, sl, #2
 800db24:	fa5f fa8a 	uxtb.w	sl, sl
 800db28:	3901      	subs	r1, #1
 800db2a:	4652      	mov	r2, sl
 800db2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db30:	9109      	str	r1, [sp, #36]	@ 0x24
 800db32:	f7ff ff27 	bl	800d984 <__exponent>
 800db36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db38:	1813      	adds	r3, r2, r0
 800db3a:	2a01      	cmp	r2, #1
 800db3c:	4681      	mov	r9, r0
 800db3e:	6123      	str	r3, [r4, #16]
 800db40:	dc02      	bgt.n	800db48 <_printf_float+0x150>
 800db42:	6822      	ldr	r2, [r4, #0]
 800db44:	07d2      	lsls	r2, r2, #31
 800db46:	d501      	bpl.n	800db4c <_printf_float+0x154>
 800db48:	3301      	adds	r3, #1
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0a2      	beq.n	800da9a <_printf_float+0xa2>
 800db54:	232d      	movs	r3, #45	@ 0x2d
 800db56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db5a:	e79e      	b.n	800da9a <_printf_float+0xa2>
 800db5c:	9a06      	ldr	r2, [sp, #24]
 800db5e:	2a47      	cmp	r2, #71	@ 0x47
 800db60:	d1c2      	bne.n	800dae8 <_printf_float+0xf0>
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1c0      	bne.n	800dae8 <_printf_float+0xf0>
 800db66:	2301      	movs	r3, #1
 800db68:	e7bd      	b.n	800dae6 <_printf_float+0xee>
 800db6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db6e:	d9db      	bls.n	800db28 <_printf_float+0x130>
 800db70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800db74:	d118      	bne.n	800dba8 <_printf_float+0x1b0>
 800db76:	2900      	cmp	r1, #0
 800db78:	6863      	ldr	r3, [r4, #4]
 800db7a:	dd0b      	ble.n	800db94 <_printf_float+0x19c>
 800db7c:	6121      	str	r1, [r4, #16]
 800db7e:	b913      	cbnz	r3, 800db86 <_printf_float+0x18e>
 800db80:	6822      	ldr	r2, [r4, #0]
 800db82:	07d0      	lsls	r0, r2, #31
 800db84:	d502      	bpl.n	800db8c <_printf_float+0x194>
 800db86:	3301      	adds	r3, #1
 800db88:	440b      	add	r3, r1
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800db8e:	f04f 0900 	mov.w	r9, #0
 800db92:	e7db      	b.n	800db4c <_printf_float+0x154>
 800db94:	b913      	cbnz	r3, 800db9c <_printf_float+0x1a4>
 800db96:	6822      	ldr	r2, [r4, #0]
 800db98:	07d2      	lsls	r2, r2, #31
 800db9a:	d501      	bpl.n	800dba0 <_printf_float+0x1a8>
 800db9c:	3302      	adds	r3, #2
 800db9e:	e7f4      	b.n	800db8a <_printf_float+0x192>
 800dba0:	2301      	movs	r3, #1
 800dba2:	e7f2      	b.n	800db8a <_printf_float+0x192>
 800dba4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbaa:	4299      	cmp	r1, r3
 800dbac:	db05      	blt.n	800dbba <_printf_float+0x1c2>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	6121      	str	r1, [r4, #16]
 800dbb2:	07d8      	lsls	r0, r3, #31
 800dbb4:	d5ea      	bpl.n	800db8c <_printf_float+0x194>
 800dbb6:	1c4b      	adds	r3, r1, #1
 800dbb8:	e7e7      	b.n	800db8a <_printf_float+0x192>
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	bfd4      	ite	le
 800dbbe:	f1c1 0202 	rsble	r2, r1, #2
 800dbc2:	2201      	movgt	r2, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	e7e0      	b.n	800db8a <_printf_float+0x192>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	055a      	lsls	r2, r3, #21
 800dbcc:	d407      	bmi.n	800dbde <_printf_float+0x1e6>
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d12b      	bne.n	800dc34 <_printf_float+0x23c>
 800dbdc:	e767      	b.n	800daae <_printf_float+0xb6>
 800dbde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dbe2:	f240 80dd 	bls.w	800dda0 <_printf_float+0x3a8>
 800dbe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dbea:	2200      	movs	r2, #0
 800dbec:	2300      	movs	r3, #0
 800dbee:	f7f2 ff73 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d033      	beq.n	800dc5e <_printf_float+0x266>
 800dbf6:	4a37      	ldr	r2, [pc, #220]	@ (800dcd4 <_printf_float+0x2dc>)
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b8      	blx	r7
 800dc00:	3001      	adds	r0, #1
 800dc02:	f43f af54 	beq.w	800daae <_printf_float+0xb6>
 800dc06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc0a:	4543      	cmp	r3, r8
 800dc0c:	db02      	blt.n	800dc14 <_printf_float+0x21c>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	07d8      	lsls	r0, r3, #31
 800dc12:	d50f      	bpl.n	800dc34 <_printf_float+0x23c>
 800dc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc18:	4631      	mov	r1, r6
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	47b8      	blx	r7
 800dc1e:	3001      	adds	r0, #1
 800dc20:	f43f af45 	beq.w	800daae <_printf_float+0xb6>
 800dc24:	f04f 0900 	mov.w	r9, #0
 800dc28:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800dc2c:	f104 0a1a 	add.w	sl, r4, #26
 800dc30:	45c8      	cmp	r8, r9
 800dc32:	dc09      	bgt.n	800dc48 <_printf_float+0x250>
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	079b      	lsls	r3, r3, #30
 800dc38:	f100 8103 	bmi.w	800de42 <_printf_float+0x44a>
 800dc3c:	68e0      	ldr	r0, [r4, #12]
 800dc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc40:	4298      	cmp	r0, r3
 800dc42:	bfb8      	it	lt
 800dc44:	4618      	movlt	r0, r3
 800dc46:	e734      	b.n	800dab2 <_printf_float+0xba>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4628      	mov	r0, r5
 800dc50:	47b8      	blx	r7
 800dc52:	3001      	adds	r0, #1
 800dc54:	f43f af2b 	beq.w	800daae <_printf_float+0xb6>
 800dc58:	f109 0901 	add.w	r9, r9, #1
 800dc5c:	e7e8      	b.n	800dc30 <_printf_float+0x238>
 800dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dc39      	bgt.n	800dcd8 <_printf_float+0x2e0>
 800dc64:	4a1b      	ldr	r2, [pc, #108]	@ (800dcd4 <_printf_float+0x2dc>)
 800dc66:	2301      	movs	r3, #1
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	47b8      	blx	r7
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f43f af1d 	beq.w	800daae <_printf_float+0xb6>
 800dc74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dc78:	ea59 0303 	orrs.w	r3, r9, r3
 800dc7c:	d102      	bne.n	800dc84 <_printf_float+0x28c>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	07d9      	lsls	r1, r3, #31
 800dc82:	d5d7      	bpl.n	800dc34 <_printf_float+0x23c>
 800dc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc88:	4631      	mov	r1, r6
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	47b8      	blx	r7
 800dc8e:	3001      	adds	r0, #1
 800dc90:	f43f af0d 	beq.w	800daae <_printf_float+0xb6>
 800dc94:	f04f 0a00 	mov.w	sl, #0
 800dc98:	f104 0b1a 	add.w	fp, r4, #26
 800dc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc9e:	425b      	negs	r3, r3
 800dca0:	4553      	cmp	r3, sl
 800dca2:	dc01      	bgt.n	800dca8 <_printf_float+0x2b0>
 800dca4:	464b      	mov	r3, r9
 800dca6:	e793      	b.n	800dbd0 <_printf_float+0x1d8>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	465a      	mov	r2, fp
 800dcac:	4631      	mov	r1, r6
 800dcae:	4628      	mov	r0, r5
 800dcb0:	47b8      	blx	r7
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	f43f aefb 	beq.w	800daae <_printf_float+0xb6>
 800dcb8:	f10a 0a01 	add.w	sl, sl, #1
 800dcbc:	e7ee      	b.n	800dc9c <_printf_float+0x2a4>
 800dcbe:	bf00      	nop
 800dcc0:	7fefffff 	.word	0x7fefffff
 800dcc4:	08010fc8 	.word	0x08010fc8
 800dcc8:	08010fcc 	.word	0x08010fcc
 800dccc:	08010fd0 	.word	0x08010fd0
 800dcd0:	08010fd4 	.word	0x08010fd4
 800dcd4:	08010fd8 	.word	0x08010fd8
 800dcd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dcda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dcde:	4553      	cmp	r3, sl
 800dce0:	bfa8      	it	ge
 800dce2:	4653      	movge	r3, sl
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	4699      	mov	r9, r3
 800dce8:	dc36      	bgt.n	800dd58 <_printf_float+0x360>
 800dcea:	f04f 0b00 	mov.w	fp, #0
 800dcee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcf2:	f104 021a 	add.w	r2, r4, #26
 800dcf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dcf8:	9306      	str	r3, [sp, #24]
 800dcfa:	eba3 0309 	sub.w	r3, r3, r9
 800dcfe:	455b      	cmp	r3, fp
 800dd00:	dc31      	bgt.n	800dd66 <_printf_float+0x36e>
 800dd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd04:	459a      	cmp	sl, r3
 800dd06:	dc3a      	bgt.n	800dd7e <_printf_float+0x386>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	07da      	lsls	r2, r3, #31
 800dd0c:	d437      	bmi.n	800dd7e <_printf_float+0x386>
 800dd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd10:	ebaa 0903 	sub.w	r9, sl, r3
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	ebaa 0303 	sub.w	r3, sl, r3
 800dd1a:	4599      	cmp	r9, r3
 800dd1c:	bfa8      	it	ge
 800dd1e:	4699      	movge	r9, r3
 800dd20:	f1b9 0f00 	cmp.w	r9, #0
 800dd24:	dc33      	bgt.n	800dd8e <_printf_float+0x396>
 800dd26:	f04f 0800 	mov.w	r8, #0
 800dd2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd2e:	f104 0b1a 	add.w	fp, r4, #26
 800dd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd34:	ebaa 0303 	sub.w	r3, sl, r3
 800dd38:	eba3 0309 	sub.w	r3, r3, r9
 800dd3c:	4543      	cmp	r3, r8
 800dd3e:	f77f af79 	ble.w	800dc34 <_printf_float+0x23c>
 800dd42:	2301      	movs	r3, #1
 800dd44:	465a      	mov	r2, fp
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	f43f aeae 	beq.w	800daae <_printf_float+0xb6>
 800dd52:	f108 0801 	add.w	r8, r8, #1
 800dd56:	e7ec      	b.n	800dd32 <_printf_float+0x33a>
 800dd58:	4642      	mov	r2, r8
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	47b8      	blx	r7
 800dd60:	3001      	adds	r0, #1
 800dd62:	d1c2      	bne.n	800dcea <_printf_float+0x2f2>
 800dd64:	e6a3      	b.n	800daae <_printf_float+0xb6>
 800dd66:	2301      	movs	r3, #1
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	9206      	str	r2, [sp, #24]
 800dd6e:	47b8      	blx	r7
 800dd70:	3001      	adds	r0, #1
 800dd72:	f43f ae9c 	beq.w	800daae <_printf_float+0xb6>
 800dd76:	9a06      	ldr	r2, [sp, #24]
 800dd78:	f10b 0b01 	add.w	fp, fp, #1
 800dd7c:	e7bb      	b.n	800dcf6 <_printf_float+0x2fe>
 800dd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd82:	4631      	mov	r1, r6
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b8      	blx	r7
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d1c0      	bne.n	800dd0e <_printf_float+0x316>
 800dd8c:	e68f      	b.n	800daae <_printf_float+0xb6>
 800dd8e:	9a06      	ldr	r2, [sp, #24]
 800dd90:	464b      	mov	r3, r9
 800dd92:	4442      	add	r2, r8
 800dd94:	4631      	mov	r1, r6
 800dd96:	4628      	mov	r0, r5
 800dd98:	47b8      	blx	r7
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	d1c3      	bne.n	800dd26 <_printf_float+0x32e>
 800dd9e:	e686      	b.n	800daae <_printf_float+0xb6>
 800dda0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dda4:	f1ba 0f01 	cmp.w	sl, #1
 800dda8:	dc01      	bgt.n	800ddae <_printf_float+0x3b6>
 800ddaa:	07db      	lsls	r3, r3, #31
 800ddac:	d536      	bpl.n	800de1c <_printf_float+0x424>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4642      	mov	r2, r8
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	47b8      	blx	r7
 800ddb8:	3001      	adds	r0, #1
 800ddba:	f43f ae78 	beq.w	800daae <_printf_float+0xb6>
 800ddbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	47b8      	blx	r7
 800ddc8:	3001      	adds	r0, #1
 800ddca:	f43f ae70 	beq.w	800daae <_printf_float+0xb6>
 800ddce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ddda:	f7f2 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddde:	b9c0      	cbnz	r0, 800de12 <_printf_float+0x41a>
 800dde0:	4653      	mov	r3, sl
 800dde2:	f108 0201 	add.w	r2, r8, #1
 800dde6:	4631      	mov	r1, r6
 800dde8:	4628      	mov	r0, r5
 800ddea:	47b8      	blx	r7
 800ddec:	3001      	adds	r0, #1
 800ddee:	d10c      	bne.n	800de0a <_printf_float+0x412>
 800ddf0:	e65d      	b.n	800daae <_printf_float+0xb6>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	465a      	mov	r2, fp
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	47b8      	blx	r7
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	f43f ae56 	beq.w	800daae <_printf_float+0xb6>
 800de02:	f108 0801 	add.w	r8, r8, #1
 800de06:	45d0      	cmp	r8, sl
 800de08:	dbf3      	blt.n	800ddf2 <_printf_float+0x3fa>
 800de0a:	464b      	mov	r3, r9
 800de0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800de10:	e6df      	b.n	800dbd2 <_printf_float+0x1da>
 800de12:	f04f 0800 	mov.w	r8, #0
 800de16:	f104 0b1a 	add.w	fp, r4, #26
 800de1a:	e7f4      	b.n	800de06 <_printf_float+0x40e>
 800de1c:	2301      	movs	r3, #1
 800de1e:	4642      	mov	r2, r8
 800de20:	e7e1      	b.n	800dde6 <_printf_float+0x3ee>
 800de22:	2301      	movs	r3, #1
 800de24:	464a      	mov	r2, r9
 800de26:	4631      	mov	r1, r6
 800de28:	4628      	mov	r0, r5
 800de2a:	47b8      	blx	r7
 800de2c:	3001      	adds	r0, #1
 800de2e:	f43f ae3e 	beq.w	800daae <_printf_float+0xb6>
 800de32:	f108 0801 	add.w	r8, r8, #1
 800de36:	68e3      	ldr	r3, [r4, #12]
 800de38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de3a:	1a5b      	subs	r3, r3, r1
 800de3c:	4543      	cmp	r3, r8
 800de3e:	dcf0      	bgt.n	800de22 <_printf_float+0x42a>
 800de40:	e6fc      	b.n	800dc3c <_printf_float+0x244>
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	f104 0919 	add.w	r9, r4, #25
 800de4a:	e7f4      	b.n	800de36 <_printf_float+0x43e>

0800de4c <_printf_common>:
 800de4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de50:	4616      	mov	r6, r2
 800de52:	4698      	mov	r8, r3
 800de54:	688a      	ldr	r2, [r1, #8]
 800de56:	690b      	ldr	r3, [r1, #16]
 800de58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de5c:	4293      	cmp	r3, r2
 800de5e:	bfb8      	it	lt
 800de60:	4613      	movlt	r3, r2
 800de62:	6033      	str	r3, [r6, #0]
 800de64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de68:	4607      	mov	r7, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	b10a      	cbz	r2, 800de72 <_printf_common+0x26>
 800de6e:	3301      	adds	r3, #1
 800de70:	6033      	str	r3, [r6, #0]
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	0699      	lsls	r1, r3, #26
 800de76:	bf42      	ittt	mi
 800de78:	6833      	ldrmi	r3, [r6, #0]
 800de7a:	3302      	addmi	r3, #2
 800de7c:	6033      	strmi	r3, [r6, #0]
 800de7e:	6825      	ldr	r5, [r4, #0]
 800de80:	f015 0506 	ands.w	r5, r5, #6
 800de84:	d106      	bne.n	800de94 <_printf_common+0x48>
 800de86:	f104 0a19 	add.w	sl, r4, #25
 800de8a:	68e3      	ldr	r3, [r4, #12]
 800de8c:	6832      	ldr	r2, [r6, #0]
 800de8e:	1a9b      	subs	r3, r3, r2
 800de90:	42ab      	cmp	r3, r5
 800de92:	dc26      	bgt.n	800dee2 <_printf_common+0x96>
 800de94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de98:	6822      	ldr	r2, [r4, #0]
 800de9a:	3b00      	subs	r3, #0
 800de9c:	bf18      	it	ne
 800de9e:	2301      	movne	r3, #1
 800dea0:	0692      	lsls	r2, r2, #26
 800dea2:	d42b      	bmi.n	800defc <_printf_common+0xb0>
 800dea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dea8:	4641      	mov	r1, r8
 800deaa:	4638      	mov	r0, r7
 800deac:	47c8      	blx	r9
 800deae:	3001      	adds	r0, #1
 800deb0:	d01e      	beq.n	800def0 <_printf_common+0xa4>
 800deb2:	6823      	ldr	r3, [r4, #0]
 800deb4:	6922      	ldr	r2, [r4, #16]
 800deb6:	f003 0306 	and.w	r3, r3, #6
 800deba:	2b04      	cmp	r3, #4
 800debc:	bf02      	ittt	eq
 800debe:	68e5      	ldreq	r5, [r4, #12]
 800dec0:	6833      	ldreq	r3, [r6, #0]
 800dec2:	1aed      	subeq	r5, r5, r3
 800dec4:	68a3      	ldr	r3, [r4, #8]
 800dec6:	bf0c      	ite	eq
 800dec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800decc:	2500      	movne	r5, #0
 800dece:	4293      	cmp	r3, r2
 800ded0:	bfc4      	itt	gt
 800ded2:	1a9b      	subgt	r3, r3, r2
 800ded4:	18ed      	addgt	r5, r5, r3
 800ded6:	2600      	movs	r6, #0
 800ded8:	341a      	adds	r4, #26
 800deda:	42b5      	cmp	r5, r6
 800dedc:	d11a      	bne.n	800df14 <_printf_common+0xc8>
 800dede:	2000      	movs	r0, #0
 800dee0:	e008      	b.n	800def4 <_printf_common+0xa8>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4652      	mov	r2, sl
 800dee6:	4641      	mov	r1, r8
 800dee8:	4638      	mov	r0, r7
 800deea:	47c8      	blx	r9
 800deec:	3001      	adds	r0, #1
 800deee:	d103      	bne.n	800def8 <_printf_common+0xac>
 800def0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800def4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def8:	3501      	adds	r5, #1
 800defa:	e7c6      	b.n	800de8a <_printf_common+0x3e>
 800defc:	18e1      	adds	r1, r4, r3
 800defe:	1c5a      	adds	r2, r3, #1
 800df00:	2030      	movs	r0, #48	@ 0x30
 800df02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df06:	4422      	add	r2, r4
 800df08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df10:	3302      	adds	r3, #2
 800df12:	e7c7      	b.n	800dea4 <_printf_common+0x58>
 800df14:	2301      	movs	r3, #1
 800df16:	4622      	mov	r2, r4
 800df18:	4641      	mov	r1, r8
 800df1a:	4638      	mov	r0, r7
 800df1c:	47c8      	blx	r9
 800df1e:	3001      	adds	r0, #1
 800df20:	d0e6      	beq.n	800def0 <_printf_common+0xa4>
 800df22:	3601      	adds	r6, #1
 800df24:	e7d9      	b.n	800deda <_printf_common+0x8e>
	...

0800df28 <_printf_i>:
 800df28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	7e0f      	ldrb	r7, [r1, #24]
 800df2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df30:	2f78      	cmp	r7, #120	@ 0x78
 800df32:	4691      	mov	r9, r2
 800df34:	4680      	mov	r8, r0
 800df36:	460c      	mov	r4, r1
 800df38:	469a      	mov	sl, r3
 800df3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df3e:	d807      	bhi.n	800df50 <_printf_i+0x28>
 800df40:	2f62      	cmp	r7, #98	@ 0x62
 800df42:	d80a      	bhi.n	800df5a <_printf_i+0x32>
 800df44:	2f00      	cmp	r7, #0
 800df46:	f000 80d2 	beq.w	800e0ee <_printf_i+0x1c6>
 800df4a:	2f58      	cmp	r7, #88	@ 0x58
 800df4c:	f000 80b9 	beq.w	800e0c2 <_printf_i+0x19a>
 800df50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df58:	e03a      	b.n	800dfd0 <_printf_i+0xa8>
 800df5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df5e:	2b15      	cmp	r3, #21
 800df60:	d8f6      	bhi.n	800df50 <_printf_i+0x28>
 800df62:	a101      	add	r1, pc, #4	@ (adr r1, 800df68 <_printf_i+0x40>)
 800df64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df68:	0800dfc1 	.word	0x0800dfc1
 800df6c:	0800dfd5 	.word	0x0800dfd5
 800df70:	0800df51 	.word	0x0800df51
 800df74:	0800df51 	.word	0x0800df51
 800df78:	0800df51 	.word	0x0800df51
 800df7c:	0800df51 	.word	0x0800df51
 800df80:	0800dfd5 	.word	0x0800dfd5
 800df84:	0800df51 	.word	0x0800df51
 800df88:	0800df51 	.word	0x0800df51
 800df8c:	0800df51 	.word	0x0800df51
 800df90:	0800df51 	.word	0x0800df51
 800df94:	0800e0d5 	.word	0x0800e0d5
 800df98:	0800dfff 	.word	0x0800dfff
 800df9c:	0800e08f 	.word	0x0800e08f
 800dfa0:	0800df51 	.word	0x0800df51
 800dfa4:	0800df51 	.word	0x0800df51
 800dfa8:	0800e0f7 	.word	0x0800e0f7
 800dfac:	0800df51 	.word	0x0800df51
 800dfb0:	0800dfff 	.word	0x0800dfff
 800dfb4:	0800df51 	.word	0x0800df51
 800dfb8:	0800df51 	.word	0x0800df51
 800dfbc:	0800e097 	.word	0x0800e097
 800dfc0:	6833      	ldr	r3, [r6, #0]
 800dfc2:	1d1a      	adds	r2, r3, #4
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	6032      	str	r2, [r6, #0]
 800dfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e09d      	b.n	800e110 <_printf_i+0x1e8>
 800dfd4:	6833      	ldr	r3, [r6, #0]
 800dfd6:	6820      	ldr	r0, [r4, #0]
 800dfd8:	1d19      	adds	r1, r3, #4
 800dfda:	6031      	str	r1, [r6, #0]
 800dfdc:	0606      	lsls	r6, r0, #24
 800dfde:	d501      	bpl.n	800dfe4 <_printf_i+0xbc>
 800dfe0:	681d      	ldr	r5, [r3, #0]
 800dfe2:	e003      	b.n	800dfec <_printf_i+0xc4>
 800dfe4:	0645      	lsls	r5, r0, #25
 800dfe6:	d5fb      	bpl.n	800dfe0 <_printf_i+0xb8>
 800dfe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dfec:	2d00      	cmp	r5, #0
 800dfee:	da03      	bge.n	800dff8 <_printf_i+0xd0>
 800dff0:	232d      	movs	r3, #45	@ 0x2d
 800dff2:	426d      	negs	r5, r5
 800dff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dff8:	4859      	ldr	r0, [pc, #356]	@ (800e160 <_printf_i+0x238>)
 800dffa:	230a      	movs	r3, #10
 800dffc:	e011      	b.n	800e022 <_printf_i+0xfa>
 800dffe:	6821      	ldr	r1, [r4, #0]
 800e000:	6833      	ldr	r3, [r6, #0]
 800e002:	0608      	lsls	r0, r1, #24
 800e004:	f853 5b04 	ldr.w	r5, [r3], #4
 800e008:	d402      	bmi.n	800e010 <_printf_i+0xe8>
 800e00a:	0649      	lsls	r1, r1, #25
 800e00c:	bf48      	it	mi
 800e00e:	b2ad      	uxthmi	r5, r5
 800e010:	2f6f      	cmp	r7, #111	@ 0x6f
 800e012:	4853      	ldr	r0, [pc, #332]	@ (800e160 <_printf_i+0x238>)
 800e014:	6033      	str	r3, [r6, #0]
 800e016:	bf14      	ite	ne
 800e018:	230a      	movne	r3, #10
 800e01a:	2308      	moveq	r3, #8
 800e01c:	2100      	movs	r1, #0
 800e01e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e022:	6866      	ldr	r6, [r4, #4]
 800e024:	60a6      	str	r6, [r4, #8]
 800e026:	2e00      	cmp	r6, #0
 800e028:	bfa2      	ittt	ge
 800e02a:	6821      	ldrge	r1, [r4, #0]
 800e02c:	f021 0104 	bicge.w	r1, r1, #4
 800e030:	6021      	strge	r1, [r4, #0]
 800e032:	b90d      	cbnz	r5, 800e038 <_printf_i+0x110>
 800e034:	2e00      	cmp	r6, #0
 800e036:	d04b      	beq.n	800e0d0 <_printf_i+0x1a8>
 800e038:	4616      	mov	r6, r2
 800e03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e03e:	fb03 5711 	mls	r7, r3, r1, r5
 800e042:	5dc7      	ldrb	r7, [r0, r7]
 800e044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e048:	462f      	mov	r7, r5
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	460d      	mov	r5, r1
 800e04e:	d9f4      	bls.n	800e03a <_printf_i+0x112>
 800e050:	2b08      	cmp	r3, #8
 800e052:	d10b      	bne.n	800e06c <_printf_i+0x144>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	07df      	lsls	r7, r3, #31
 800e058:	d508      	bpl.n	800e06c <_printf_i+0x144>
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	6861      	ldr	r1, [r4, #4]
 800e05e:	4299      	cmp	r1, r3
 800e060:	bfde      	ittt	le
 800e062:	2330      	movle	r3, #48	@ 0x30
 800e064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e068:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e06c:	1b92      	subs	r2, r2, r6
 800e06e:	6122      	str	r2, [r4, #16]
 800e070:	f8cd a000 	str.w	sl, [sp]
 800e074:	464b      	mov	r3, r9
 800e076:	aa03      	add	r2, sp, #12
 800e078:	4621      	mov	r1, r4
 800e07a:	4640      	mov	r0, r8
 800e07c:	f7ff fee6 	bl	800de4c <_printf_common>
 800e080:	3001      	adds	r0, #1
 800e082:	d14a      	bne.n	800e11a <_printf_i+0x1f2>
 800e084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e088:	b004      	add	sp, #16
 800e08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	f043 0320 	orr.w	r3, r3, #32
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	4833      	ldr	r0, [pc, #204]	@ (800e164 <_printf_i+0x23c>)
 800e098:	2778      	movs	r7, #120	@ 0x78
 800e09a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	6831      	ldr	r1, [r6, #0]
 800e0a2:	061f      	lsls	r7, r3, #24
 800e0a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0a8:	d402      	bmi.n	800e0b0 <_printf_i+0x188>
 800e0aa:	065f      	lsls	r7, r3, #25
 800e0ac:	bf48      	it	mi
 800e0ae:	b2ad      	uxthmi	r5, r5
 800e0b0:	6031      	str	r1, [r6, #0]
 800e0b2:	07d9      	lsls	r1, r3, #31
 800e0b4:	bf44      	itt	mi
 800e0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e0ba:	6023      	strmi	r3, [r4, #0]
 800e0bc:	b11d      	cbz	r5, 800e0c6 <_printf_i+0x19e>
 800e0be:	2310      	movs	r3, #16
 800e0c0:	e7ac      	b.n	800e01c <_printf_i+0xf4>
 800e0c2:	4827      	ldr	r0, [pc, #156]	@ (800e160 <_printf_i+0x238>)
 800e0c4:	e7e9      	b.n	800e09a <_printf_i+0x172>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	f023 0320 	bic.w	r3, r3, #32
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	e7f6      	b.n	800e0be <_printf_i+0x196>
 800e0d0:	4616      	mov	r6, r2
 800e0d2:	e7bd      	b.n	800e050 <_printf_i+0x128>
 800e0d4:	6833      	ldr	r3, [r6, #0]
 800e0d6:	6825      	ldr	r5, [r4, #0]
 800e0d8:	6961      	ldr	r1, [r4, #20]
 800e0da:	1d18      	adds	r0, r3, #4
 800e0dc:	6030      	str	r0, [r6, #0]
 800e0de:	062e      	lsls	r6, r5, #24
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	d501      	bpl.n	800e0e8 <_printf_i+0x1c0>
 800e0e4:	6019      	str	r1, [r3, #0]
 800e0e6:	e002      	b.n	800e0ee <_printf_i+0x1c6>
 800e0e8:	0668      	lsls	r0, r5, #25
 800e0ea:	d5fb      	bpl.n	800e0e4 <_printf_i+0x1bc>
 800e0ec:	8019      	strh	r1, [r3, #0]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	4616      	mov	r6, r2
 800e0f4:	e7bc      	b.n	800e070 <_printf_i+0x148>
 800e0f6:	6833      	ldr	r3, [r6, #0]
 800e0f8:	1d1a      	adds	r2, r3, #4
 800e0fa:	6032      	str	r2, [r6, #0]
 800e0fc:	681e      	ldr	r6, [r3, #0]
 800e0fe:	6862      	ldr	r2, [r4, #4]
 800e100:	2100      	movs	r1, #0
 800e102:	4630      	mov	r0, r6
 800e104:	f7f2 f86c 	bl	80001e0 <memchr>
 800e108:	b108      	cbz	r0, 800e10e <_printf_i+0x1e6>
 800e10a:	1b80      	subs	r0, r0, r6
 800e10c:	6060      	str	r0, [r4, #4]
 800e10e:	6863      	ldr	r3, [r4, #4]
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	2300      	movs	r3, #0
 800e114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e118:	e7aa      	b.n	800e070 <_printf_i+0x148>
 800e11a:	6923      	ldr	r3, [r4, #16]
 800e11c:	4632      	mov	r2, r6
 800e11e:	4649      	mov	r1, r9
 800e120:	4640      	mov	r0, r8
 800e122:	47d0      	blx	sl
 800e124:	3001      	adds	r0, #1
 800e126:	d0ad      	beq.n	800e084 <_printf_i+0x15c>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	079b      	lsls	r3, r3, #30
 800e12c:	d413      	bmi.n	800e156 <_printf_i+0x22e>
 800e12e:	68e0      	ldr	r0, [r4, #12]
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	4298      	cmp	r0, r3
 800e134:	bfb8      	it	lt
 800e136:	4618      	movlt	r0, r3
 800e138:	e7a6      	b.n	800e088 <_printf_i+0x160>
 800e13a:	2301      	movs	r3, #1
 800e13c:	4632      	mov	r2, r6
 800e13e:	4649      	mov	r1, r9
 800e140:	4640      	mov	r0, r8
 800e142:	47d0      	blx	sl
 800e144:	3001      	adds	r0, #1
 800e146:	d09d      	beq.n	800e084 <_printf_i+0x15c>
 800e148:	3501      	adds	r5, #1
 800e14a:	68e3      	ldr	r3, [r4, #12]
 800e14c:	9903      	ldr	r1, [sp, #12]
 800e14e:	1a5b      	subs	r3, r3, r1
 800e150:	42ab      	cmp	r3, r5
 800e152:	dcf2      	bgt.n	800e13a <_printf_i+0x212>
 800e154:	e7eb      	b.n	800e12e <_printf_i+0x206>
 800e156:	2500      	movs	r5, #0
 800e158:	f104 0619 	add.w	r6, r4, #25
 800e15c:	e7f5      	b.n	800e14a <_printf_i+0x222>
 800e15e:	bf00      	nop
 800e160:	08010fda 	.word	0x08010fda
 800e164:	08010feb 	.word	0x08010feb

0800e168 <std>:
 800e168:	2300      	movs	r3, #0
 800e16a:	b510      	push	{r4, lr}
 800e16c:	4604      	mov	r4, r0
 800e16e:	e9c0 3300 	strd	r3, r3, [r0]
 800e172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e176:	6083      	str	r3, [r0, #8]
 800e178:	8181      	strh	r1, [r0, #12]
 800e17a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e17c:	81c2      	strh	r2, [r0, #14]
 800e17e:	6183      	str	r3, [r0, #24]
 800e180:	4619      	mov	r1, r3
 800e182:	2208      	movs	r2, #8
 800e184:	305c      	adds	r0, #92	@ 0x5c
 800e186:	f000 fa5d 	bl	800e644 <memset>
 800e18a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c0 <std+0x58>)
 800e18c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e18e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c4 <std+0x5c>)
 800e190:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e192:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <std+0x60>)
 800e194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e196:	4b0d      	ldr	r3, [pc, #52]	@ (800e1cc <std+0x64>)
 800e198:	6323      	str	r3, [r4, #48]	@ 0x30
 800e19a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d0 <std+0x68>)
 800e19c:	6224      	str	r4, [r4, #32]
 800e19e:	429c      	cmp	r4, r3
 800e1a0:	d006      	beq.n	800e1b0 <std+0x48>
 800e1a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1a6:	4294      	cmp	r4, r2
 800e1a8:	d002      	beq.n	800e1b0 <std+0x48>
 800e1aa:	33d0      	adds	r3, #208	@ 0xd0
 800e1ac:	429c      	cmp	r4, r3
 800e1ae:	d105      	bne.n	800e1bc <std+0x54>
 800e1b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1b8:	f000 bad4 	b.w	800e764 <__retarget_lock_init_recursive>
 800e1bc:	bd10      	pop	{r4, pc}
 800e1be:	bf00      	nop
 800e1c0:	0800e475 	.word	0x0800e475
 800e1c4:	0800e497 	.word	0x0800e497
 800e1c8:	0800e4cf 	.word	0x0800e4cf
 800e1cc:	0800e4f3 	.word	0x0800e4f3
 800e1d0:	20021848 	.word	0x20021848

0800e1d4 <stdio_exit_handler>:
 800e1d4:	4a02      	ldr	r2, [pc, #8]	@ (800e1e0 <stdio_exit_handler+0xc>)
 800e1d6:	4903      	ldr	r1, [pc, #12]	@ (800e1e4 <stdio_exit_handler+0x10>)
 800e1d8:	4803      	ldr	r0, [pc, #12]	@ (800e1e8 <stdio_exit_handler+0x14>)
 800e1da:	f000 b869 	b.w	800e2b0 <_fwalk_sglue>
 800e1de:	bf00      	nop
 800e1e0:	20000f3c 	.word	0x20000f3c
 800e1e4:	08010361 	.word	0x08010361
 800e1e8:	20000f4c 	.word	0x20000f4c

0800e1ec <cleanup_stdio>:
 800e1ec:	6841      	ldr	r1, [r0, #4]
 800e1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e220 <cleanup_stdio+0x34>)
 800e1f0:	4299      	cmp	r1, r3
 800e1f2:	b510      	push	{r4, lr}
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	d001      	beq.n	800e1fc <cleanup_stdio+0x10>
 800e1f8:	f002 f8b2 	bl	8010360 <_fflush_r>
 800e1fc:	68a1      	ldr	r1, [r4, #8]
 800e1fe:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <cleanup_stdio+0x38>)
 800e200:	4299      	cmp	r1, r3
 800e202:	d002      	beq.n	800e20a <cleanup_stdio+0x1e>
 800e204:	4620      	mov	r0, r4
 800e206:	f002 f8ab 	bl	8010360 <_fflush_r>
 800e20a:	68e1      	ldr	r1, [r4, #12]
 800e20c:	4b06      	ldr	r3, [pc, #24]	@ (800e228 <cleanup_stdio+0x3c>)
 800e20e:	4299      	cmp	r1, r3
 800e210:	d004      	beq.n	800e21c <cleanup_stdio+0x30>
 800e212:	4620      	mov	r0, r4
 800e214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e218:	f002 b8a2 	b.w	8010360 <_fflush_r>
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	bf00      	nop
 800e220:	20021848 	.word	0x20021848
 800e224:	200218b0 	.word	0x200218b0
 800e228:	20021918 	.word	0x20021918

0800e22c <global_stdio_init.part.0>:
 800e22c:	b510      	push	{r4, lr}
 800e22e:	4b0b      	ldr	r3, [pc, #44]	@ (800e25c <global_stdio_init.part.0+0x30>)
 800e230:	4c0b      	ldr	r4, [pc, #44]	@ (800e260 <global_stdio_init.part.0+0x34>)
 800e232:	4a0c      	ldr	r2, [pc, #48]	@ (800e264 <global_stdio_init.part.0+0x38>)
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	4620      	mov	r0, r4
 800e238:	2200      	movs	r2, #0
 800e23a:	2104      	movs	r1, #4
 800e23c:	f7ff ff94 	bl	800e168 <std>
 800e240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e244:	2201      	movs	r2, #1
 800e246:	2109      	movs	r1, #9
 800e248:	f7ff ff8e 	bl	800e168 <std>
 800e24c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e250:	2202      	movs	r2, #2
 800e252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e256:	2112      	movs	r1, #18
 800e258:	f7ff bf86 	b.w	800e168 <std>
 800e25c:	20021980 	.word	0x20021980
 800e260:	20021848 	.word	0x20021848
 800e264:	0800e1d5 	.word	0x0800e1d5

0800e268 <__sfp_lock_acquire>:
 800e268:	4801      	ldr	r0, [pc, #4]	@ (800e270 <__sfp_lock_acquire+0x8>)
 800e26a:	f000 ba7c 	b.w	800e766 <__retarget_lock_acquire_recursive>
 800e26e:	bf00      	nop
 800e270:	20021989 	.word	0x20021989

0800e274 <__sfp_lock_release>:
 800e274:	4801      	ldr	r0, [pc, #4]	@ (800e27c <__sfp_lock_release+0x8>)
 800e276:	f000 ba77 	b.w	800e768 <__retarget_lock_release_recursive>
 800e27a:	bf00      	nop
 800e27c:	20021989 	.word	0x20021989

0800e280 <__sinit>:
 800e280:	b510      	push	{r4, lr}
 800e282:	4604      	mov	r4, r0
 800e284:	f7ff fff0 	bl	800e268 <__sfp_lock_acquire>
 800e288:	6a23      	ldr	r3, [r4, #32]
 800e28a:	b11b      	cbz	r3, 800e294 <__sinit+0x14>
 800e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e290:	f7ff bff0 	b.w	800e274 <__sfp_lock_release>
 800e294:	4b04      	ldr	r3, [pc, #16]	@ (800e2a8 <__sinit+0x28>)
 800e296:	6223      	str	r3, [r4, #32]
 800e298:	4b04      	ldr	r3, [pc, #16]	@ (800e2ac <__sinit+0x2c>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1f5      	bne.n	800e28c <__sinit+0xc>
 800e2a0:	f7ff ffc4 	bl	800e22c <global_stdio_init.part.0>
 800e2a4:	e7f2      	b.n	800e28c <__sinit+0xc>
 800e2a6:	bf00      	nop
 800e2a8:	0800e1ed 	.word	0x0800e1ed
 800e2ac:	20021980 	.word	0x20021980

0800e2b0 <_fwalk_sglue>:
 800e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	4688      	mov	r8, r1
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	2600      	movs	r6, #0
 800e2bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e2c4:	d505      	bpl.n	800e2d2 <_fwalk_sglue+0x22>
 800e2c6:	6824      	ldr	r4, [r4, #0]
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	d1f7      	bne.n	800e2bc <_fwalk_sglue+0xc>
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d2:	89ab      	ldrh	r3, [r5, #12]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d907      	bls.n	800e2e8 <_fwalk_sglue+0x38>
 800e2d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	d003      	beq.n	800e2e8 <_fwalk_sglue+0x38>
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	47c0      	blx	r8
 800e2e6:	4306      	orrs	r6, r0
 800e2e8:	3568      	adds	r5, #104	@ 0x68
 800e2ea:	e7e9      	b.n	800e2c0 <_fwalk_sglue+0x10>

0800e2ec <iprintf>:
 800e2ec:	b40f      	push	{r0, r1, r2, r3}
 800e2ee:	b507      	push	{r0, r1, r2, lr}
 800e2f0:	4906      	ldr	r1, [pc, #24]	@ (800e30c <iprintf+0x20>)
 800e2f2:	ab04      	add	r3, sp, #16
 800e2f4:	6808      	ldr	r0, [r1, #0]
 800e2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2fa:	6881      	ldr	r1, [r0, #8]
 800e2fc:	9301      	str	r3, [sp, #4]
 800e2fe:	f001 fe93 	bl	8010028 <_vfiprintf_r>
 800e302:	b003      	add	sp, #12
 800e304:	f85d eb04 	ldr.w	lr, [sp], #4
 800e308:	b004      	add	sp, #16
 800e30a:	4770      	bx	lr
 800e30c:	20000f48 	.word	0x20000f48

0800e310 <_puts_r>:
 800e310:	6a03      	ldr	r3, [r0, #32]
 800e312:	b570      	push	{r4, r5, r6, lr}
 800e314:	6884      	ldr	r4, [r0, #8]
 800e316:	4605      	mov	r5, r0
 800e318:	460e      	mov	r6, r1
 800e31a:	b90b      	cbnz	r3, 800e320 <_puts_r+0x10>
 800e31c:	f7ff ffb0 	bl	800e280 <__sinit>
 800e320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e322:	07db      	lsls	r3, r3, #31
 800e324:	d405      	bmi.n	800e332 <_puts_r+0x22>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	0598      	lsls	r0, r3, #22
 800e32a:	d402      	bmi.n	800e332 <_puts_r+0x22>
 800e32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e32e:	f000 fa1a 	bl	800e766 <__retarget_lock_acquire_recursive>
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	0719      	lsls	r1, r3, #28
 800e336:	d502      	bpl.n	800e33e <_puts_r+0x2e>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d135      	bne.n	800e3aa <_puts_r+0x9a>
 800e33e:	4621      	mov	r1, r4
 800e340:	4628      	mov	r0, r5
 800e342:	f000 f919 	bl	800e578 <__swsetup_r>
 800e346:	b380      	cbz	r0, 800e3aa <_puts_r+0x9a>
 800e348:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e34c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e34e:	07da      	lsls	r2, r3, #31
 800e350:	d405      	bmi.n	800e35e <_puts_r+0x4e>
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	059b      	lsls	r3, r3, #22
 800e356:	d402      	bmi.n	800e35e <_puts_r+0x4e>
 800e358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e35a:	f000 fa05 	bl	800e768 <__retarget_lock_release_recursive>
 800e35e:	4628      	mov	r0, r5
 800e360:	bd70      	pop	{r4, r5, r6, pc}
 800e362:	2b00      	cmp	r3, #0
 800e364:	da04      	bge.n	800e370 <_puts_r+0x60>
 800e366:	69a2      	ldr	r2, [r4, #24]
 800e368:	429a      	cmp	r2, r3
 800e36a:	dc17      	bgt.n	800e39c <_puts_r+0x8c>
 800e36c:	290a      	cmp	r1, #10
 800e36e:	d015      	beq.n	800e39c <_puts_r+0x8c>
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	6022      	str	r2, [r4, #0]
 800e376:	7019      	strb	r1, [r3, #0]
 800e378:	68a3      	ldr	r3, [r4, #8]
 800e37a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e37e:	3b01      	subs	r3, #1
 800e380:	60a3      	str	r3, [r4, #8]
 800e382:	2900      	cmp	r1, #0
 800e384:	d1ed      	bne.n	800e362 <_puts_r+0x52>
 800e386:	2b00      	cmp	r3, #0
 800e388:	da11      	bge.n	800e3ae <_puts_r+0x9e>
 800e38a:	4622      	mov	r2, r4
 800e38c:	210a      	movs	r1, #10
 800e38e:	4628      	mov	r0, r5
 800e390:	f000 f8b3 	bl	800e4fa <__swbuf_r>
 800e394:	3001      	adds	r0, #1
 800e396:	d0d7      	beq.n	800e348 <_puts_r+0x38>
 800e398:	250a      	movs	r5, #10
 800e39a:	e7d7      	b.n	800e34c <_puts_r+0x3c>
 800e39c:	4622      	mov	r2, r4
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f000 f8ab 	bl	800e4fa <__swbuf_r>
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d1e7      	bne.n	800e378 <_puts_r+0x68>
 800e3a8:	e7ce      	b.n	800e348 <_puts_r+0x38>
 800e3aa:	3e01      	subs	r6, #1
 800e3ac:	e7e4      	b.n	800e378 <_puts_r+0x68>
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	6022      	str	r2, [r4, #0]
 800e3b4:	220a      	movs	r2, #10
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	e7ee      	b.n	800e398 <_puts_r+0x88>
	...

0800e3bc <puts>:
 800e3bc:	4b02      	ldr	r3, [pc, #8]	@ (800e3c8 <puts+0xc>)
 800e3be:	4601      	mov	r1, r0
 800e3c0:	6818      	ldr	r0, [r3, #0]
 800e3c2:	f7ff bfa5 	b.w	800e310 <_puts_r>
 800e3c6:	bf00      	nop
 800e3c8:	20000f48 	.word	0x20000f48

0800e3cc <sniprintf>:
 800e3cc:	b40c      	push	{r2, r3}
 800e3ce:	b530      	push	{r4, r5, lr}
 800e3d0:	4b17      	ldr	r3, [pc, #92]	@ (800e430 <sniprintf+0x64>)
 800e3d2:	1e0c      	subs	r4, r1, #0
 800e3d4:	681d      	ldr	r5, [r3, #0]
 800e3d6:	b09d      	sub	sp, #116	@ 0x74
 800e3d8:	da08      	bge.n	800e3ec <sniprintf+0x20>
 800e3da:	238b      	movs	r3, #139	@ 0x8b
 800e3dc:	602b      	str	r3, [r5, #0]
 800e3de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3e2:	b01d      	add	sp, #116	@ 0x74
 800e3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3e8:	b002      	add	sp, #8
 800e3ea:	4770      	bx	lr
 800e3ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e3f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3f4:	bf14      	ite	ne
 800e3f6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e3fa:	4623      	moveq	r3, r4
 800e3fc:	9304      	str	r3, [sp, #16]
 800e3fe:	9307      	str	r3, [sp, #28]
 800e400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e404:	9002      	str	r0, [sp, #8]
 800e406:	9006      	str	r0, [sp, #24]
 800e408:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e40c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e40e:	ab21      	add	r3, sp, #132	@ 0x84
 800e410:	a902      	add	r1, sp, #8
 800e412:	4628      	mov	r0, r5
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	f001 fce1 	bl	800fddc <_svfiprintf_r>
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	bfbc      	itt	lt
 800e41e:	238b      	movlt	r3, #139	@ 0x8b
 800e420:	602b      	strlt	r3, [r5, #0]
 800e422:	2c00      	cmp	r4, #0
 800e424:	d0dd      	beq.n	800e3e2 <sniprintf+0x16>
 800e426:	9b02      	ldr	r3, [sp, #8]
 800e428:	2200      	movs	r2, #0
 800e42a:	701a      	strb	r2, [r3, #0]
 800e42c:	e7d9      	b.n	800e3e2 <sniprintf+0x16>
 800e42e:	bf00      	nop
 800e430:	20000f48 	.word	0x20000f48

0800e434 <siprintf>:
 800e434:	b40e      	push	{r1, r2, r3}
 800e436:	b500      	push	{lr}
 800e438:	b09c      	sub	sp, #112	@ 0x70
 800e43a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e43c:	9002      	str	r0, [sp, #8]
 800e43e:	9006      	str	r0, [sp, #24]
 800e440:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e444:	4809      	ldr	r0, [pc, #36]	@ (800e46c <siprintf+0x38>)
 800e446:	9107      	str	r1, [sp, #28]
 800e448:	9104      	str	r1, [sp, #16]
 800e44a:	4909      	ldr	r1, [pc, #36]	@ (800e470 <siprintf+0x3c>)
 800e44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e450:	9105      	str	r1, [sp, #20]
 800e452:	6800      	ldr	r0, [r0, #0]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	a902      	add	r1, sp, #8
 800e458:	f001 fcc0 	bl	800fddc <_svfiprintf_r>
 800e45c:	9b02      	ldr	r3, [sp, #8]
 800e45e:	2200      	movs	r2, #0
 800e460:	701a      	strb	r2, [r3, #0]
 800e462:	b01c      	add	sp, #112	@ 0x70
 800e464:	f85d eb04 	ldr.w	lr, [sp], #4
 800e468:	b003      	add	sp, #12
 800e46a:	4770      	bx	lr
 800e46c:	20000f48 	.word	0x20000f48
 800e470:	ffff0208 	.word	0xffff0208

0800e474 <__sread>:
 800e474:	b510      	push	{r4, lr}
 800e476:	460c      	mov	r4, r1
 800e478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e47c:	f000 f924 	bl	800e6c8 <_read_r>
 800e480:	2800      	cmp	r0, #0
 800e482:	bfab      	itete	ge
 800e484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e486:	89a3      	ldrhlt	r3, [r4, #12]
 800e488:	181b      	addge	r3, r3, r0
 800e48a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e48e:	bfac      	ite	ge
 800e490:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e492:	81a3      	strhlt	r3, [r4, #12]
 800e494:	bd10      	pop	{r4, pc}

0800e496 <__swrite>:
 800e496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49a:	461f      	mov	r7, r3
 800e49c:	898b      	ldrh	r3, [r1, #12]
 800e49e:	05db      	lsls	r3, r3, #23
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	d505      	bpl.n	800e4b4 <__swrite+0x1e>
 800e4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f000 f8f8 	bl	800e6a4 <_lseek_r>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	463b      	mov	r3, r7
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ca:	f000 b90f 	b.w	800e6ec <_write_r>

0800e4ce <__sseek>:
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d6:	f000 f8e5 	bl	800e6a4 <_lseek_r>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	bf15      	itete	ne
 800e4e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e4e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e4e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e4ea:	81a3      	strheq	r3, [r4, #12]
 800e4ec:	bf18      	it	ne
 800e4ee:	81a3      	strhne	r3, [r4, #12]
 800e4f0:	bd10      	pop	{r4, pc}

0800e4f2 <__sclose>:
 800e4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f6:	f000 b8c5 	b.w	800e684 <_close_r>

0800e4fa <__swbuf_r>:
 800e4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fc:	460e      	mov	r6, r1
 800e4fe:	4614      	mov	r4, r2
 800e500:	4605      	mov	r5, r0
 800e502:	b118      	cbz	r0, 800e50c <__swbuf_r+0x12>
 800e504:	6a03      	ldr	r3, [r0, #32]
 800e506:	b90b      	cbnz	r3, 800e50c <__swbuf_r+0x12>
 800e508:	f7ff feba 	bl	800e280 <__sinit>
 800e50c:	69a3      	ldr	r3, [r4, #24]
 800e50e:	60a3      	str	r3, [r4, #8]
 800e510:	89a3      	ldrh	r3, [r4, #12]
 800e512:	071a      	lsls	r2, r3, #28
 800e514:	d501      	bpl.n	800e51a <__swbuf_r+0x20>
 800e516:	6923      	ldr	r3, [r4, #16]
 800e518:	b943      	cbnz	r3, 800e52c <__swbuf_r+0x32>
 800e51a:	4621      	mov	r1, r4
 800e51c:	4628      	mov	r0, r5
 800e51e:	f000 f82b 	bl	800e578 <__swsetup_r>
 800e522:	b118      	cbz	r0, 800e52c <__swbuf_r+0x32>
 800e524:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e528:	4638      	mov	r0, r7
 800e52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e52c:	6823      	ldr	r3, [r4, #0]
 800e52e:	6922      	ldr	r2, [r4, #16]
 800e530:	1a98      	subs	r0, r3, r2
 800e532:	6963      	ldr	r3, [r4, #20]
 800e534:	b2f6      	uxtb	r6, r6
 800e536:	4283      	cmp	r3, r0
 800e538:	4637      	mov	r7, r6
 800e53a:	dc05      	bgt.n	800e548 <__swbuf_r+0x4e>
 800e53c:	4621      	mov	r1, r4
 800e53e:	4628      	mov	r0, r5
 800e540:	f001 ff0e 	bl	8010360 <_fflush_r>
 800e544:	2800      	cmp	r0, #0
 800e546:	d1ed      	bne.n	800e524 <__swbuf_r+0x2a>
 800e548:	68a3      	ldr	r3, [r4, #8]
 800e54a:	3b01      	subs	r3, #1
 800e54c:	60a3      	str	r3, [r4, #8]
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	6022      	str	r2, [r4, #0]
 800e554:	701e      	strb	r6, [r3, #0]
 800e556:	6962      	ldr	r2, [r4, #20]
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d004      	beq.n	800e568 <__swbuf_r+0x6e>
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	07db      	lsls	r3, r3, #31
 800e562:	d5e1      	bpl.n	800e528 <__swbuf_r+0x2e>
 800e564:	2e0a      	cmp	r6, #10
 800e566:	d1df      	bne.n	800e528 <__swbuf_r+0x2e>
 800e568:	4621      	mov	r1, r4
 800e56a:	4628      	mov	r0, r5
 800e56c:	f001 fef8 	bl	8010360 <_fflush_r>
 800e570:	2800      	cmp	r0, #0
 800e572:	d0d9      	beq.n	800e528 <__swbuf_r+0x2e>
 800e574:	e7d6      	b.n	800e524 <__swbuf_r+0x2a>
	...

0800e578 <__swsetup_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4b29      	ldr	r3, [pc, #164]	@ (800e620 <__swsetup_r+0xa8>)
 800e57c:	4605      	mov	r5, r0
 800e57e:	6818      	ldr	r0, [r3, #0]
 800e580:	460c      	mov	r4, r1
 800e582:	b118      	cbz	r0, 800e58c <__swsetup_r+0x14>
 800e584:	6a03      	ldr	r3, [r0, #32]
 800e586:	b90b      	cbnz	r3, 800e58c <__swsetup_r+0x14>
 800e588:	f7ff fe7a 	bl	800e280 <__sinit>
 800e58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e590:	0719      	lsls	r1, r3, #28
 800e592:	d422      	bmi.n	800e5da <__swsetup_r+0x62>
 800e594:	06da      	lsls	r2, r3, #27
 800e596:	d407      	bmi.n	800e5a8 <__swsetup_r+0x30>
 800e598:	2209      	movs	r2, #9
 800e59a:	602a      	str	r2, [r5, #0]
 800e59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5a0:	81a3      	strh	r3, [r4, #12]
 800e5a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5a6:	e033      	b.n	800e610 <__swsetup_r+0x98>
 800e5a8:	0758      	lsls	r0, r3, #29
 800e5aa:	d512      	bpl.n	800e5d2 <__swsetup_r+0x5a>
 800e5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5ae:	b141      	cbz	r1, 800e5c2 <__swsetup_r+0x4a>
 800e5b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	d002      	beq.n	800e5be <__swsetup_r+0x46>
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f000 ff31 	bl	800f420 <_free_r>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e5c8:	81a3      	strh	r3, [r4, #12]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6063      	str	r3, [r4, #4]
 800e5ce:	6923      	ldr	r3, [r4, #16]
 800e5d0:	6023      	str	r3, [r4, #0]
 800e5d2:	89a3      	ldrh	r3, [r4, #12]
 800e5d4:	f043 0308 	orr.w	r3, r3, #8
 800e5d8:	81a3      	strh	r3, [r4, #12]
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	b94b      	cbnz	r3, 800e5f2 <__swsetup_r+0x7a>
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5e8:	d003      	beq.n	800e5f2 <__swsetup_r+0x7a>
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f001 ff05 	bl	80103fc <__smakebuf_r>
 800e5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f6:	f013 0201 	ands.w	r2, r3, #1
 800e5fa:	d00a      	beq.n	800e612 <__swsetup_r+0x9a>
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	60a2      	str	r2, [r4, #8]
 800e600:	6962      	ldr	r2, [r4, #20]
 800e602:	4252      	negs	r2, r2
 800e604:	61a2      	str	r2, [r4, #24]
 800e606:	6922      	ldr	r2, [r4, #16]
 800e608:	b942      	cbnz	r2, 800e61c <__swsetup_r+0xa4>
 800e60a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e60e:	d1c5      	bne.n	800e59c <__swsetup_r+0x24>
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	0799      	lsls	r1, r3, #30
 800e614:	bf58      	it	pl
 800e616:	6962      	ldrpl	r2, [r4, #20]
 800e618:	60a2      	str	r2, [r4, #8]
 800e61a:	e7f4      	b.n	800e606 <__swsetup_r+0x8e>
 800e61c:	2000      	movs	r0, #0
 800e61e:	e7f7      	b.n	800e610 <__swsetup_r+0x98>
 800e620:	20000f48 	.word	0x20000f48

0800e624 <memcmp>:
 800e624:	b510      	push	{r4, lr}
 800e626:	3901      	subs	r1, #1
 800e628:	4402      	add	r2, r0
 800e62a:	4290      	cmp	r0, r2
 800e62c:	d101      	bne.n	800e632 <memcmp+0xe>
 800e62e:	2000      	movs	r0, #0
 800e630:	e005      	b.n	800e63e <memcmp+0x1a>
 800e632:	7803      	ldrb	r3, [r0, #0]
 800e634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e638:	42a3      	cmp	r3, r4
 800e63a:	d001      	beq.n	800e640 <memcmp+0x1c>
 800e63c:	1b18      	subs	r0, r3, r4
 800e63e:	bd10      	pop	{r4, pc}
 800e640:	3001      	adds	r0, #1
 800e642:	e7f2      	b.n	800e62a <memcmp+0x6>

0800e644 <memset>:
 800e644:	4402      	add	r2, r0
 800e646:	4603      	mov	r3, r0
 800e648:	4293      	cmp	r3, r2
 800e64a:	d100      	bne.n	800e64e <memset+0xa>
 800e64c:	4770      	bx	lr
 800e64e:	f803 1b01 	strb.w	r1, [r3], #1
 800e652:	e7f9      	b.n	800e648 <memset+0x4>

0800e654 <strncat>:
 800e654:	b530      	push	{r4, r5, lr}
 800e656:	4604      	mov	r4, r0
 800e658:	7825      	ldrb	r5, [r4, #0]
 800e65a:	4623      	mov	r3, r4
 800e65c:	3401      	adds	r4, #1
 800e65e:	2d00      	cmp	r5, #0
 800e660:	d1fa      	bne.n	800e658 <strncat+0x4>
 800e662:	3a01      	subs	r2, #1
 800e664:	d304      	bcc.n	800e670 <strncat+0x1c>
 800e666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e66a:	f803 4b01 	strb.w	r4, [r3], #1
 800e66e:	b904      	cbnz	r4, 800e672 <strncat+0x1e>
 800e670:	bd30      	pop	{r4, r5, pc}
 800e672:	2a00      	cmp	r2, #0
 800e674:	d1f5      	bne.n	800e662 <strncat+0xe>
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	e7f3      	b.n	800e662 <strncat+0xe>
	...

0800e67c <_localeconv_r>:
 800e67c:	4800      	ldr	r0, [pc, #0]	@ (800e680 <_localeconv_r+0x4>)
 800e67e:	4770      	bx	lr
 800e680:	20001088 	.word	0x20001088

0800e684 <_close_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4d06      	ldr	r5, [pc, #24]	@ (800e6a0 <_close_r+0x1c>)
 800e688:	2300      	movs	r3, #0
 800e68a:	4604      	mov	r4, r0
 800e68c:	4608      	mov	r0, r1
 800e68e:	602b      	str	r3, [r5, #0]
 800e690:	f7f4 fb6e 	bl	8002d70 <_close>
 800e694:	1c43      	adds	r3, r0, #1
 800e696:	d102      	bne.n	800e69e <_close_r+0x1a>
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	b103      	cbz	r3, 800e69e <_close_r+0x1a>
 800e69c:	6023      	str	r3, [r4, #0]
 800e69e:	bd38      	pop	{r3, r4, r5, pc}
 800e6a0:	20021984 	.word	0x20021984

0800e6a4 <_lseek_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d07      	ldr	r5, [pc, #28]	@ (800e6c4 <_lseek_r+0x20>)
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	4611      	mov	r1, r2
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	602a      	str	r2, [r5, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	f7f4 fb83 	bl	8002dbe <_lseek>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	d102      	bne.n	800e6c2 <_lseek_r+0x1e>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	b103      	cbz	r3, 800e6c2 <_lseek_r+0x1e>
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	20021984 	.word	0x20021984

0800e6c8 <_read_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4d07      	ldr	r5, [pc, #28]	@ (800e6e8 <_read_r+0x20>)
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	602a      	str	r2, [r5, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f7f4 fb11 	bl	8002cfe <_read>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d102      	bne.n	800e6e6 <_read_r+0x1e>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	b103      	cbz	r3, 800e6e6 <_read_r+0x1e>
 800e6e4:	6023      	str	r3, [r4, #0]
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	20021984 	.word	0x20021984

0800e6ec <_write_r>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	4d07      	ldr	r5, [pc, #28]	@ (800e70c <_write_r+0x20>)
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4608      	mov	r0, r1
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	602a      	str	r2, [r5, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f7f4 fb1c 	bl	8002d38 <_write>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_write_r+0x1e>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_write_r+0x1e>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	20021984 	.word	0x20021984

0800e710 <__errno>:
 800e710:	4b01      	ldr	r3, [pc, #4]	@ (800e718 <__errno+0x8>)
 800e712:	6818      	ldr	r0, [r3, #0]
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	20000f48 	.word	0x20000f48

0800e71c <__libc_init_array>:
 800e71c:	b570      	push	{r4, r5, r6, lr}
 800e71e:	4d0d      	ldr	r5, [pc, #52]	@ (800e754 <__libc_init_array+0x38>)
 800e720:	4c0d      	ldr	r4, [pc, #52]	@ (800e758 <__libc_init_array+0x3c>)
 800e722:	1b64      	subs	r4, r4, r5
 800e724:	10a4      	asrs	r4, r4, #2
 800e726:	2600      	movs	r6, #0
 800e728:	42a6      	cmp	r6, r4
 800e72a:	d109      	bne.n	800e740 <__libc_init_array+0x24>
 800e72c:	4d0b      	ldr	r5, [pc, #44]	@ (800e75c <__libc_init_array+0x40>)
 800e72e:	4c0c      	ldr	r4, [pc, #48]	@ (800e760 <__libc_init_array+0x44>)
 800e730:	f002 f84e 	bl	80107d0 <_init>
 800e734:	1b64      	subs	r4, r4, r5
 800e736:	10a4      	asrs	r4, r4, #2
 800e738:	2600      	movs	r6, #0
 800e73a:	42a6      	cmp	r6, r4
 800e73c:	d105      	bne.n	800e74a <__libc_init_array+0x2e>
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	f855 3b04 	ldr.w	r3, [r5], #4
 800e744:	4798      	blx	r3
 800e746:	3601      	adds	r6, #1
 800e748:	e7ee      	b.n	800e728 <__libc_init_array+0xc>
 800e74a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e74e:	4798      	blx	r3
 800e750:	3601      	adds	r6, #1
 800e752:	e7f2      	b.n	800e73a <__libc_init_array+0x1e>
 800e754:	08011340 	.word	0x08011340
 800e758:	08011340 	.word	0x08011340
 800e75c:	08011340 	.word	0x08011340
 800e760:	08011344 	.word	0x08011344

0800e764 <__retarget_lock_init_recursive>:
 800e764:	4770      	bx	lr

0800e766 <__retarget_lock_acquire_recursive>:
 800e766:	4770      	bx	lr

0800e768 <__retarget_lock_release_recursive>:
 800e768:	4770      	bx	lr

0800e76a <memcpy>:
 800e76a:	440a      	add	r2, r1
 800e76c:	4291      	cmp	r1, r2
 800e76e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e772:	d100      	bne.n	800e776 <memcpy+0xc>
 800e774:	4770      	bx	lr
 800e776:	b510      	push	{r4, lr}
 800e778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e77c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e780:	4291      	cmp	r1, r2
 800e782:	d1f9      	bne.n	800e778 <memcpy+0xe>
 800e784:	bd10      	pop	{r4, pc}

0800e786 <quorem>:
 800e786:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	6903      	ldr	r3, [r0, #16]
 800e78c:	690c      	ldr	r4, [r1, #16]
 800e78e:	42a3      	cmp	r3, r4
 800e790:	4607      	mov	r7, r0
 800e792:	db7e      	blt.n	800e892 <quorem+0x10c>
 800e794:	3c01      	subs	r4, #1
 800e796:	f101 0814 	add.w	r8, r1, #20
 800e79a:	00a3      	lsls	r3, r4, #2
 800e79c:	f100 0514 	add.w	r5, r0, #20
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7bc:	d32e      	bcc.n	800e81c <quorem+0x96>
 800e7be:	f04f 0a00 	mov.w	sl, #0
 800e7c2:	46c4      	mov	ip, r8
 800e7c4:	46ae      	mov	lr, r5
 800e7c6:	46d3      	mov	fp, sl
 800e7c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e7cc:	b298      	uxth	r0, r3
 800e7ce:	fb06 a000 	mla	r0, r6, r0, sl
 800e7d2:	0c02      	lsrs	r2, r0, #16
 800e7d4:	0c1b      	lsrs	r3, r3, #16
 800e7d6:	fb06 2303 	mla	r3, r6, r3, r2
 800e7da:	f8de 2000 	ldr.w	r2, [lr]
 800e7de:	b280      	uxth	r0, r0
 800e7e0:	b292      	uxth	r2, r2
 800e7e2:	1a12      	subs	r2, r2, r0
 800e7e4:	445a      	add	r2, fp
 800e7e6:	f8de 0000 	ldr.w	r0, [lr]
 800e7ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e7f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e7f8:	b292      	uxth	r2, r2
 800e7fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e7fe:	45e1      	cmp	r9, ip
 800e800:	f84e 2b04 	str.w	r2, [lr], #4
 800e804:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e808:	d2de      	bcs.n	800e7c8 <quorem+0x42>
 800e80a:	9b00      	ldr	r3, [sp, #0]
 800e80c:	58eb      	ldr	r3, [r5, r3]
 800e80e:	b92b      	cbnz	r3, 800e81c <quorem+0x96>
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	3b04      	subs	r3, #4
 800e814:	429d      	cmp	r5, r3
 800e816:	461a      	mov	r2, r3
 800e818:	d32f      	bcc.n	800e87a <quorem+0xf4>
 800e81a:	613c      	str	r4, [r7, #16]
 800e81c:	4638      	mov	r0, r7
 800e81e:	f001 f979 	bl	800fb14 <__mcmp>
 800e822:	2800      	cmp	r0, #0
 800e824:	db25      	blt.n	800e872 <quorem+0xec>
 800e826:	4629      	mov	r1, r5
 800e828:	2000      	movs	r0, #0
 800e82a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e82e:	f8d1 c000 	ldr.w	ip, [r1]
 800e832:	fa1f fe82 	uxth.w	lr, r2
 800e836:	fa1f f38c 	uxth.w	r3, ip
 800e83a:	eba3 030e 	sub.w	r3, r3, lr
 800e83e:	4403      	add	r3, r0
 800e840:	0c12      	lsrs	r2, r2, #16
 800e842:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e846:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e850:	45c1      	cmp	r9, r8
 800e852:	f841 3b04 	str.w	r3, [r1], #4
 800e856:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e85a:	d2e6      	bcs.n	800e82a <quorem+0xa4>
 800e85c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e864:	b922      	cbnz	r2, 800e870 <quorem+0xea>
 800e866:	3b04      	subs	r3, #4
 800e868:	429d      	cmp	r5, r3
 800e86a:	461a      	mov	r2, r3
 800e86c:	d30b      	bcc.n	800e886 <quorem+0x100>
 800e86e:	613c      	str	r4, [r7, #16]
 800e870:	3601      	adds	r6, #1
 800e872:	4630      	mov	r0, r6
 800e874:	b003      	add	sp, #12
 800e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87a:	6812      	ldr	r2, [r2, #0]
 800e87c:	3b04      	subs	r3, #4
 800e87e:	2a00      	cmp	r2, #0
 800e880:	d1cb      	bne.n	800e81a <quorem+0x94>
 800e882:	3c01      	subs	r4, #1
 800e884:	e7c6      	b.n	800e814 <quorem+0x8e>
 800e886:	6812      	ldr	r2, [r2, #0]
 800e888:	3b04      	subs	r3, #4
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	d1ef      	bne.n	800e86e <quorem+0xe8>
 800e88e:	3c01      	subs	r4, #1
 800e890:	e7ea      	b.n	800e868 <quorem+0xe2>
 800e892:	2000      	movs	r0, #0
 800e894:	e7ee      	b.n	800e874 <quorem+0xee>
	...

0800e898 <_dtoa_r>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	69c7      	ldr	r7, [r0, #28]
 800e89e:	b099      	sub	sp, #100	@ 0x64
 800e8a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e8a4:	ec55 4b10 	vmov	r4, r5, d0
 800e8a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e8aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800e8ac:	4683      	mov	fp, r0
 800e8ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e8b2:	b97f      	cbnz	r7, 800e8d4 <_dtoa_r+0x3c>
 800e8b4:	2010      	movs	r0, #16
 800e8b6:	f000 fdfd 	bl	800f4b4 <malloc>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e8c0:	b920      	cbnz	r0, 800e8cc <_dtoa_r+0x34>
 800e8c2:	4ba7      	ldr	r3, [pc, #668]	@ (800eb60 <_dtoa_r+0x2c8>)
 800e8c4:	21ef      	movs	r1, #239	@ 0xef
 800e8c6:	48a7      	ldr	r0, [pc, #668]	@ (800eb64 <_dtoa_r+0x2cc>)
 800e8c8:	f001 fe20 	bl	801050c <__assert_func>
 800e8cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e8d0:	6007      	str	r7, [r0, #0]
 800e8d2:	60c7      	str	r7, [r0, #12]
 800e8d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	b159      	cbz	r1, 800e8f4 <_dtoa_r+0x5c>
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	604a      	str	r2, [r1, #4]
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	4093      	lsls	r3, r2
 800e8e4:	608b      	str	r3, [r1, #8]
 800e8e6:	4658      	mov	r0, fp
 800e8e8:	f000 feda 	bl	800f6a0 <_Bfree>
 800e8ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	1e2b      	subs	r3, r5, #0
 800e8f6:	bfb9      	ittee	lt
 800e8f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e8fc:	9303      	strlt	r3, [sp, #12]
 800e8fe:	2300      	movge	r3, #0
 800e900:	6033      	strge	r3, [r6, #0]
 800e902:	9f03      	ldr	r7, [sp, #12]
 800e904:	4b98      	ldr	r3, [pc, #608]	@ (800eb68 <_dtoa_r+0x2d0>)
 800e906:	bfbc      	itt	lt
 800e908:	2201      	movlt	r2, #1
 800e90a:	6032      	strlt	r2, [r6, #0]
 800e90c:	43bb      	bics	r3, r7
 800e90e:	d112      	bne.n	800e936 <_dtoa_r+0x9e>
 800e910:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e912:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e91c:	4323      	orrs	r3, r4
 800e91e:	f000 854d 	beq.w	800f3bc <_dtoa_r+0xb24>
 800e922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e924:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eb7c <_dtoa_r+0x2e4>
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 854f 	beq.w	800f3cc <_dtoa_r+0xb34>
 800e92e:	f10a 0303 	add.w	r3, sl, #3
 800e932:	f000 bd49 	b.w	800f3c8 <_dtoa_r+0xb30>
 800e936:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e93a:	2200      	movs	r2, #0
 800e93c:	ec51 0b17 	vmov	r0, r1, d7
 800e940:	2300      	movs	r3, #0
 800e942:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e946:	f7f2 f8c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e94a:	4680      	mov	r8, r0
 800e94c:	b158      	cbz	r0, 800e966 <_dtoa_r+0xce>
 800e94e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e950:	2301      	movs	r3, #1
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e956:	b113      	cbz	r3, 800e95e <_dtoa_r+0xc6>
 800e958:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e95a:	4b84      	ldr	r3, [pc, #528]	@ (800eb6c <_dtoa_r+0x2d4>)
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800eb80 <_dtoa_r+0x2e8>
 800e962:	f000 bd33 	b.w	800f3cc <_dtoa_r+0xb34>
 800e966:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e96a:	aa16      	add	r2, sp, #88	@ 0x58
 800e96c:	a917      	add	r1, sp, #92	@ 0x5c
 800e96e:	4658      	mov	r0, fp
 800e970:	f001 f980 	bl	800fc74 <__d2b>
 800e974:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e978:	4681      	mov	r9, r0
 800e97a:	2e00      	cmp	r6, #0
 800e97c:	d077      	beq.n	800ea6e <_dtoa_r+0x1d6>
 800e97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e980:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e98c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e990:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e994:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e998:	4619      	mov	r1, r3
 800e99a:	2200      	movs	r2, #0
 800e99c:	4b74      	ldr	r3, [pc, #464]	@ (800eb70 <_dtoa_r+0x2d8>)
 800e99e:	f7f1 fc7b 	bl	8000298 <__aeabi_dsub>
 800e9a2:	a369      	add	r3, pc, #420	@ (adr r3, 800eb48 <_dtoa_r+0x2b0>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fe2e 	bl	8000608 <__aeabi_dmul>
 800e9ac:	a368      	add	r3, pc, #416	@ (adr r3, 800eb50 <_dtoa_r+0x2b8>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fc73 	bl	800029c <__adddf3>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	f7f1 fdba 	bl	8000534 <__aeabi_i2d>
 800e9c0:	a365      	add	r3, pc, #404	@ (adr r3, 800eb58 <_dtoa_r+0x2c0>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fe1f 	bl	8000608 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	f7f1 fc63 	bl	800029c <__adddf3>
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	460d      	mov	r5, r1
 800e9da:	f7f2 f8c5 	bl	8000b68 <__aeabi_d2iz>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	f7f2 f880 	bl	8000aec <__aeabi_dcmplt>
 800e9ec:	b140      	cbz	r0, 800ea00 <_dtoa_r+0x168>
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	f7f1 fda0 	bl	8000534 <__aeabi_i2d>
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	462b      	mov	r3, r5
 800e9f8:	f7f2 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9fc:	b900      	cbnz	r0, 800ea00 <_dtoa_r+0x168>
 800e9fe:	3f01      	subs	r7, #1
 800ea00:	2f16      	cmp	r7, #22
 800ea02:	d851      	bhi.n	800eaa8 <_dtoa_r+0x210>
 800ea04:	4b5b      	ldr	r3, [pc, #364]	@ (800eb74 <_dtoa_r+0x2dc>)
 800ea06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea12:	f7f2 f86b 	bl	8000aec <__aeabi_dcmplt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d048      	beq.n	800eaac <_dtoa_r+0x214>
 800ea1a:	3f01      	subs	r7, #1
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea22:	1b9b      	subs	r3, r3, r6
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	bf44      	itt	mi
 800ea28:	f1c3 0801 	rsbmi	r8, r3, #1
 800ea2c:	2300      	movmi	r3, #0
 800ea2e:	9208      	str	r2, [sp, #32]
 800ea30:	bf54      	ite	pl
 800ea32:	f04f 0800 	movpl.w	r8, #0
 800ea36:	9308      	strmi	r3, [sp, #32]
 800ea38:	2f00      	cmp	r7, #0
 800ea3a:	db39      	blt.n	800eab0 <_dtoa_r+0x218>
 800ea3c:	9b08      	ldr	r3, [sp, #32]
 800ea3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ea40:	443b      	add	r3, r7
 800ea42:	9308      	str	r3, [sp, #32]
 800ea44:	2300      	movs	r3, #0
 800ea46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea4a:	2b09      	cmp	r3, #9
 800ea4c:	d864      	bhi.n	800eb18 <_dtoa_r+0x280>
 800ea4e:	2b05      	cmp	r3, #5
 800ea50:	bfc4      	itt	gt
 800ea52:	3b04      	subgt	r3, #4
 800ea54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ea56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea58:	f1a3 0302 	sub.w	r3, r3, #2
 800ea5c:	bfcc      	ite	gt
 800ea5e:	2400      	movgt	r4, #0
 800ea60:	2401      	movle	r4, #1
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d863      	bhi.n	800eb2e <_dtoa_r+0x296>
 800ea66:	e8df f003 	tbb	[pc, r3]
 800ea6a:	372a      	.short	0x372a
 800ea6c:	5535      	.short	0x5535
 800ea6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ea72:	441e      	add	r6, r3
 800ea74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ea78:	2b20      	cmp	r3, #32
 800ea7a:	bfc1      	itttt	gt
 800ea7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ea80:	409f      	lslgt	r7, r3
 800ea82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ea86:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ea8a:	bfd6      	itet	le
 800ea8c:	f1c3 0320 	rsble	r3, r3, #32
 800ea90:	ea47 0003 	orrgt.w	r0, r7, r3
 800ea94:	fa04 f003 	lslle.w	r0, r4, r3
 800ea98:	f7f1 fd3c 	bl	8000514 <__aeabi_ui2d>
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eaa2:	3e01      	subs	r6, #1
 800eaa4:	9214      	str	r2, [sp, #80]	@ 0x50
 800eaa6:	e777      	b.n	800e998 <_dtoa_r+0x100>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e7b8      	b.n	800ea1e <_dtoa_r+0x186>
 800eaac:	9012      	str	r0, [sp, #72]	@ 0x48
 800eaae:	e7b7      	b.n	800ea20 <_dtoa_r+0x188>
 800eab0:	427b      	negs	r3, r7
 800eab2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab4:	2300      	movs	r3, #0
 800eab6:	eba8 0807 	sub.w	r8, r8, r7
 800eaba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eabc:	e7c4      	b.n	800ea48 <_dtoa_r+0x1b0>
 800eabe:	2300      	movs	r3, #0
 800eac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dc35      	bgt.n	800eb34 <_dtoa_r+0x29c>
 800eac8:	2301      	movs	r3, #1
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	9307      	str	r3, [sp, #28]
 800eace:	461a      	mov	r2, r3
 800ead0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ead2:	e00b      	b.n	800eaec <_dtoa_r+0x254>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e7f3      	b.n	800eac0 <_dtoa_r+0x228>
 800ead8:	2300      	movs	r3, #0
 800eada:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eade:	18fb      	adds	r3, r7, r3
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	3301      	adds	r3, #1
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	9307      	str	r3, [sp, #28]
 800eae8:	bfb8      	it	lt
 800eaea:	2301      	movlt	r3, #1
 800eaec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	f102 0514 	add.w	r5, r2, #20
 800eaf8:	429d      	cmp	r5, r3
 800eafa:	d91f      	bls.n	800eb3c <_dtoa_r+0x2a4>
 800eafc:	6041      	str	r1, [r0, #4]
 800eafe:	4658      	mov	r0, fp
 800eb00:	f000 fd8e 	bl	800f620 <_Balloc>
 800eb04:	4682      	mov	sl, r0
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d13c      	bne.n	800eb84 <_dtoa_r+0x2ec>
 800eb0a:	4b1b      	ldr	r3, [pc, #108]	@ (800eb78 <_dtoa_r+0x2e0>)
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	f240 11af 	movw	r1, #431	@ 0x1af
 800eb12:	e6d8      	b.n	800e8c6 <_dtoa_r+0x2e>
 800eb14:	2301      	movs	r3, #1
 800eb16:	e7e0      	b.n	800eada <_dtoa_r+0x242>
 800eb18:	2401      	movs	r4, #1
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eb20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	9307      	str	r3, [sp, #28]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2312      	movs	r3, #18
 800eb2c:	e7d0      	b.n	800ead0 <_dtoa_r+0x238>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb32:	e7f5      	b.n	800eb20 <_dtoa_r+0x288>
 800eb34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb36:	9300      	str	r3, [sp, #0]
 800eb38:	9307      	str	r3, [sp, #28]
 800eb3a:	e7d7      	b.n	800eaec <_dtoa_r+0x254>
 800eb3c:	3101      	adds	r1, #1
 800eb3e:	0052      	lsls	r2, r2, #1
 800eb40:	e7d8      	b.n	800eaf4 <_dtoa_r+0x25c>
 800eb42:	bf00      	nop
 800eb44:	f3af 8000 	nop.w
 800eb48:	636f4361 	.word	0x636f4361
 800eb4c:	3fd287a7 	.word	0x3fd287a7
 800eb50:	8b60c8b3 	.word	0x8b60c8b3
 800eb54:	3fc68a28 	.word	0x3fc68a28
 800eb58:	509f79fb 	.word	0x509f79fb
 800eb5c:	3fd34413 	.word	0x3fd34413
 800eb60:	08011009 	.word	0x08011009
 800eb64:	08011020 	.word	0x08011020
 800eb68:	7ff00000 	.word	0x7ff00000
 800eb6c:	08010fd9 	.word	0x08010fd9
 800eb70:	3ff80000 	.word	0x3ff80000
 800eb74:	08011118 	.word	0x08011118
 800eb78:	08011078 	.word	0x08011078
 800eb7c:	08011005 	.word	0x08011005
 800eb80:	08010fd8 	.word	0x08010fd8
 800eb84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eb88:	6018      	str	r0, [r3, #0]
 800eb8a:	9b07      	ldr	r3, [sp, #28]
 800eb8c:	2b0e      	cmp	r3, #14
 800eb8e:	f200 80a4 	bhi.w	800ecda <_dtoa_r+0x442>
 800eb92:	2c00      	cmp	r4, #0
 800eb94:	f000 80a1 	beq.w	800ecda <_dtoa_r+0x442>
 800eb98:	2f00      	cmp	r7, #0
 800eb9a:	dd33      	ble.n	800ec04 <_dtoa_r+0x36c>
 800eb9c:	4bad      	ldr	r3, [pc, #692]	@ (800ee54 <_dtoa_r+0x5bc>)
 800eb9e:	f007 020f 	and.w	r2, r7, #15
 800eba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eba6:	ed93 7b00 	vldr	d7, [r3]
 800ebaa:	05f8      	lsls	r0, r7, #23
 800ebac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ebb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ebb4:	d516      	bpl.n	800ebe4 <_dtoa_r+0x34c>
 800ebb6:	4ba8      	ldr	r3, [pc, #672]	@ (800ee58 <_dtoa_r+0x5c0>)
 800ebb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebc0:	f7f1 fe4c 	bl	800085c <__aeabi_ddiv>
 800ebc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebc8:	f004 040f 	and.w	r4, r4, #15
 800ebcc:	2603      	movs	r6, #3
 800ebce:	4da2      	ldr	r5, [pc, #648]	@ (800ee58 <_dtoa_r+0x5c0>)
 800ebd0:	b954      	cbnz	r4, 800ebe8 <_dtoa_r+0x350>
 800ebd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebda:	f7f1 fe3f 	bl	800085c <__aeabi_ddiv>
 800ebde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebe2:	e028      	b.n	800ec36 <_dtoa_r+0x39e>
 800ebe4:	2602      	movs	r6, #2
 800ebe6:	e7f2      	b.n	800ebce <_dtoa_r+0x336>
 800ebe8:	07e1      	lsls	r1, r4, #31
 800ebea:	d508      	bpl.n	800ebfe <_dtoa_r+0x366>
 800ebec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ebf4:	f7f1 fd08 	bl	8000608 <__aeabi_dmul>
 800ebf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebfc:	3601      	adds	r6, #1
 800ebfe:	1064      	asrs	r4, r4, #1
 800ec00:	3508      	adds	r5, #8
 800ec02:	e7e5      	b.n	800ebd0 <_dtoa_r+0x338>
 800ec04:	f000 80d2 	beq.w	800edac <_dtoa_r+0x514>
 800ec08:	427c      	negs	r4, r7
 800ec0a:	4b92      	ldr	r3, [pc, #584]	@ (800ee54 <_dtoa_r+0x5bc>)
 800ec0c:	4d92      	ldr	r5, [pc, #584]	@ (800ee58 <_dtoa_r+0x5c0>)
 800ec0e:	f004 020f 	and.w	r2, r4, #15
 800ec12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec1e:	f7f1 fcf3 	bl	8000608 <__aeabi_dmul>
 800ec22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec26:	1124      	asrs	r4, r4, #4
 800ec28:	2300      	movs	r3, #0
 800ec2a:	2602      	movs	r6, #2
 800ec2c:	2c00      	cmp	r4, #0
 800ec2e:	f040 80b2 	bne.w	800ed96 <_dtoa_r+0x4fe>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1d3      	bne.n	800ebde <_dtoa_r+0x346>
 800ec36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 80b7 	beq.w	800edb0 <_dtoa_r+0x518>
 800ec42:	4b86      	ldr	r3, [pc, #536]	@ (800ee5c <_dtoa_r+0x5c4>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	4620      	mov	r0, r4
 800ec48:	4629      	mov	r1, r5
 800ec4a:	f7f1 ff4f 	bl	8000aec <__aeabi_dcmplt>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	f000 80ae 	beq.w	800edb0 <_dtoa_r+0x518>
 800ec54:	9b07      	ldr	r3, [sp, #28]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80aa 	beq.w	800edb0 <_dtoa_r+0x518>
 800ec5c:	9b00      	ldr	r3, [sp, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dd37      	ble.n	800ecd2 <_dtoa_r+0x43a>
 800ec62:	1e7b      	subs	r3, r7, #1
 800ec64:	9304      	str	r3, [sp, #16]
 800ec66:	4620      	mov	r0, r4
 800ec68:	4b7d      	ldr	r3, [pc, #500]	@ (800ee60 <_dtoa_r+0x5c8>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f7f1 fccb 	bl	8000608 <__aeabi_dmul>
 800ec72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec76:	9c00      	ldr	r4, [sp, #0]
 800ec78:	3601      	adds	r6, #1
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7f1 fc5a 	bl	8000534 <__aeabi_i2d>
 800ec80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec84:	f7f1 fcc0 	bl	8000608 <__aeabi_dmul>
 800ec88:	4b76      	ldr	r3, [pc, #472]	@ (800ee64 <_dtoa_r+0x5cc>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f7f1 fb06 	bl	800029c <__adddf3>
 800ec90:	4605      	mov	r5, r0
 800ec92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	f040 808d 	bne.w	800edb6 <_dtoa_r+0x51e>
 800ec9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eca0:	4b71      	ldr	r3, [pc, #452]	@ (800ee68 <_dtoa_r+0x5d0>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	f7f1 faf8 	bl	8000298 <__aeabi_dsub>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	460b      	mov	r3, r1
 800ecac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4633      	mov	r3, r6
 800ecb4:	f7f1 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	f040 828b 	bne.w	800f1d4 <_dtoa_r+0x93c>
 800ecbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecc2:	462a      	mov	r2, r5
 800ecc4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ecc8:	f7f1 ff10 	bl	8000aec <__aeabi_dcmplt>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f040 8128 	bne.w	800ef22 <_dtoa_r+0x68a>
 800ecd2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ecd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ecda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f2c0 815a 	blt.w	800ef96 <_dtoa_r+0x6fe>
 800ece2:	2f0e      	cmp	r7, #14
 800ece4:	f300 8157 	bgt.w	800ef96 <_dtoa_r+0x6fe>
 800ece8:	4b5a      	ldr	r3, [pc, #360]	@ (800ee54 <_dtoa_r+0x5bc>)
 800ecea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ecee:	ed93 7b00 	vldr	d7, [r3]
 800ecf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	ed8d 7b00 	vstr	d7, [sp]
 800ecfa:	da03      	bge.n	800ed04 <_dtoa_r+0x46c>
 800ecfc:	9b07      	ldr	r3, [sp, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f340 8101 	ble.w	800ef06 <_dtoa_r+0x66e>
 800ed04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ed08:	4656      	mov	r6, sl
 800ed0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	f7f1 fda3 	bl	800085c <__aeabi_ddiv>
 800ed16:	f7f1 ff27 	bl	8000b68 <__aeabi_d2iz>
 800ed1a:	4680      	mov	r8, r0
 800ed1c:	f7f1 fc0a 	bl	8000534 <__aeabi_i2d>
 800ed20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed24:	f7f1 fc70 	bl	8000608 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	4629      	mov	r1, r5
 800ed30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ed34:	f7f1 fab0 	bl	8000298 <__aeabi_dsub>
 800ed38:	f806 4b01 	strb.w	r4, [r6], #1
 800ed3c:	9d07      	ldr	r5, [sp, #28]
 800ed3e:	eba6 040a 	sub.w	r4, r6, sl
 800ed42:	42a5      	cmp	r5, r4
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	f040 8117 	bne.w	800ef7a <_dtoa_r+0x6e2>
 800ed4c:	f7f1 faa6 	bl	800029c <__adddf3>
 800ed50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed54:	4604      	mov	r4, r0
 800ed56:	460d      	mov	r5, r1
 800ed58:	f7f1 fee6 	bl	8000b28 <__aeabi_dcmpgt>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f040 80f9 	bne.w	800ef54 <_dtoa_r+0x6bc>
 800ed62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed66:	4620      	mov	r0, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	f7f1 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed6e:	b118      	cbz	r0, 800ed78 <_dtoa_r+0x4e0>
 800ed70:	f018 0f01 	tst.w	r8, #1
 800ed74:	f040 80ee 	bne.w	800ef54 <_dtoa_r+0x6bc>
 800ed78:	4649      	mov	r1, r9
 800ed7a:	4658      	mov	r0, fp
 800ed7c:	f000 fc90 	bl	800f6a0 <_Bfree>
 800ed80:	2300      	movs	r3, #0
 800ed82:	7033      	strb	r3, [r6, #0]
 800ed84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed86:	3701      	adds	r7, #1
 800ed88:	601f      	str	r7, [r3, #0]
 800ed8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f000 831d 	beq.w	800f3cc <_dtoa_r+0xb34>
 800ed92:	601e      	str	r6, [r3, #0]
 800ed94:	e31a      	b.n	800f3cc <_dtoa_r+0xb34>
 800ed96:	07e2      	lsls	r2, r4, #31
 800ed98:	d505      	bpl.n	800eda6 <_dtoa_r+0x50e>
 800ed9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed9e:	f7f1 fc33 	bl	8000608 <__aeabi_dmul>
 800eda2:	3601      	adds	r6, #1
 800eda4:	2301      	movs	r3, #1
 800eda6:	1064      	asrs	r4, r4, #1
 800eda8:	3508      	adds	r5, #8
 800edaa:	e73f      	b.n	800ec2c <_dtoa_r+0x394>
 800edac:	2602      	movs	r6, #2
 800edae:	e742      	b.n	800ec36 <_dtoa_r+0x39e>
 800edb0:	9c07      	ldr	r4, [sp, #28]
 800edb2:	9704      	str	r7, [sp, #16]
 800edb4:	e761      	b.n	800ec7a <_dtoa_r+0x3e2>
 800edb6:	4b27      	ldr	r3, [pc, #156]	@ (800ee54 <_dtoa_r+0x5bc>)
 800edb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800edba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800edc2:	4454      	add	r4, sl
 800edc4:	2900      	cmp	r1, #0
 800edc6:	d053      	beq.n	800ee70 <_dtoa_r+0x5d8>
 800edc8:	4928      	ldr	r1, [pc, #160]	@ (800ee6c <_dtoa_r+0x5d4>)
 800edca:	2000      	movs	r0, #0
 800edcc:	f7f1 fd46 	bl	800085c <__aeabi_ddiv>
 800edd0:	4633      	mov	r3, r6
 800edd2:	462a      	mov	r2, r5
 800edd4:	f7f1 fa60 	bl	8000298 <__aeabi_dsub>
 800edd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eddc:	4656      	mov	r6, sl
 800edde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ede2:	f7f1 fec1 	bl	8000b68 <__aeabi_d2iz>
 800ede6:	4605      	mov	r5, r0
 800ede8:	f7f1 fba4 	bl	8000534 <__aeabi_i2d>
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edf4:	f7f1 fa50 	bl	8000298 <__aeabi_dsub>
 800edf8:	3530      	adds	r5, #48	@ 0x30
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee02:	f806 5b01 	strb.w	r5, [r6], #1
 800ee06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee0a:	f7f1 fe6f 	bl	8000aec <__aeabi_dcmplt>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d171      	bne.n	800eef6 <_dtoa_r+0x65e>
 800ee12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee16:	4911      	ldr	r1, [pc, #68]	@ (800ee5c <_dtoa_r+0x5c4>)
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7f1 fa3d 	bl	8000298 <__aeabi_dsub>
 800ee1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee22:	f7f1 fe63 	bl	8000aec <__aeabi_dcmplt>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f040 8095 	bne.w	800ef56 <_dtoa_r+0x6be>
 800ee2c:	42a6      	cmp	r6, r4
 800ee2e:	f43f af50 	beq.w	800ecd2 <_dtoa_r+0x43a>
 800ee32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee36:	4b0a      	ldr	r3, [pc, #40]	@ (800ee60 <_dtoa_r+0x5c8>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f7f1 fbe5 	bl	8000608 <__aeabi_dmul>
 800ee3e:	4b08      	ldr	r3, [pc, #32]	@ (800ee60 <_dtoa_r+0x5c8>)
 800ee40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee44:	2200      	movs	r2, #0
 800ee46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee4a:	f7f1 fbdd 	bl	8000608 <__aeabi_dmul>
 800ee4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee52:	e7c4      	b.n	800edde <_dtoa_r+0x546>
 800ee54:	08011118 	.word	0x08011118
 800ee58:	080110f0 	.word	0x080110f0
 800ee5c:	3ff00000 	.word	0x3ff00000
 800ee60:	40240000 	.word	0x40240000
 800ee64:	401c0000 	.word	0x401c0000
 800ee68:	40140000 	.word	0x40140000
 800ee6c:	3fe00000 	.word	0x3fe00000
 800ee70:	4631      	mov	r1, r6
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7f1 fbc8 	bl	8000608 <__aeabi_dmul>
 800ee78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee7c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ee7e:	4656      	mov	r6, sl
 800ee80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee84:	f7f1 fe70 	bl	8000b68 <__aeabi_d2iz>
 800ee88:	4605      	mov	r5, r0
 800ee8a:	f7f1 fb53 	bl	8000534 <__aeabi_i2d>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee96:	f7f1 f9ff 	bl	8000298 <__aeabi_dsub>
 800ee9a:	3530      	adds	r5, #48	@ 0x30
 800ee9c:	f806 5b01 	strb.w	r5, [r6], #1
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eeaa:	f04f 0200 	mov.w	r2, #0
 800eeae:	d124      	bne.n	800eefa <_dtoa_r+0x662>
 800eeb0:	4bac      	ldr	r3, [pc, #688]	@ (800f164 <_dtoa_r+0x8cc>)
 800eeb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eeb6:	f7f1 f9f1 	bl	800029c <__adddf3>
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eec2:	f7f1 fe31 	bl	8000b28 <__aeabi_dcmpgt>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d145      	bne.n	800ef56 <_dtoa_r+0x6be>
 800eeca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eece:	49a5      	ldr	r1, [pc, #660]	@ (800f164 <_dtoa_r+0x8cc>)
 800eed0:	2000      	movs	r0, #0
 800eed2:	f7f1 f9e1 	bl	8000298 <__aeabi_dsub>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eede:	f7f1 fe05 	bl	8000aec <__aeabi_dcmplt>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	f43f aef5 	beq.w	800ecd2 <_dtoa_r+0x43a>
 800eee8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eeea:	1e73      	subs	r3, r6, #1
 800eeec:	9315      	str	r3, [sp, #84]	@ 0x54
 800eeee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eef2:	2b30      	cmp	r3, #48	@ 0x30
 800eef4:	d0f8      	beq.n	800eee8 <_dtoa_r+0x650>
 800eef6:	9f04      	ldr	r7, [sp, #16]
 800eef8:	e73e      	b.n	800ed78 <_dtoa_r+0x4e0>
 800eefa:	4b9b      	ldr	r3, [pc, #620]	@ (800f168 <_dtoa_r+0x8d0>)
 800eefc:	f7f1 fb84 	bl	8000608 <__aeabi_dmul>
 800ef00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef04:	e7bc      	b.n	800ee80 <_dtoa_r+0x5e8>
 800ef06:	d10c      	bne.n	800ef22 <_dtoa_r+0x68a>
 800ef08:	4b98      	ldr	r3, [pc, #608]	@ (800f16c <_dtoa_r+0x8d4>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef10:	f7f1 fb7a 	bl	8000608 <__aeabi_dmul>
 800ef14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef18:	f7f1 fdfc 	bl	8000b14 <__aeabi_dcmpge>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f000 8157 	beq.w	800f1d0 <_dtoa_r+0x938>
 800ef22:	2400      	movs	r4, #0
 800ef24:	4625      	mov	r5, r4
 800ef26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef28:	43db      	mvns	r3, r3
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	4656      	mov	r6, sl
 800ef2e:	2700      	movs	r7, #0
 800ef30:	4621      	mov	r1, r4
 800ef32:	4658      	mov	r0, fp
 800ef34:	f000 fbb4 	bl	800f6a0 <_Bfree>
 800ef38:	2d00      	cmp	r5, #0
 800ef3a:	d0dc      	beq.n	800eef6 <_dtoa_r+0x65e>
 800ef3c:	b12f      	cbz	r7, 800ef4a <_dtoa_r+0x6b2>
 800ef3e:	42af      	cmp	r7, r5
 800ef40:	d003      	beq.n	800ef4a <_dtoa_r+0x6b2>
 800ef42:	4639      	mov	r1, r7
 800ef44:	4658      	mov	r0, fp
 800ef46:	f000 fbab 	bl	800f6a0 <_Bfree>
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4658      	mov	r0, fp
 800ef4e:	f000 fba7 	bl	800f6a0 <_Bfree>
 800ef52:	e7d0      	b.n	800eef6 <_dtoa_r+0x65e>
 800ef54:	9704      	str	r7, [sp, #16]
 800ef56:	4633      	mov	r3, r6
 800ef58:	461e      	mov	r6, r3
 800ef5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef5e:	2a39      	cmp	r2, #57	@ 0x39
 800ef60:	d107      	bne.n	800ef72 <_dtoa_r+0x6da>
 800ef62:	459a      	cmp	sl, r3
 800ef64:	d1f8      	bne.n	800ef58 <_dtoa_r+0x6c0>
 800ef66:	9a04      	ldr	r2, [sp, #16]
 800ef68:	3201      	adds	r2, #1
 800ef6a:	9204      	str	r2, [sp, #16]
 800ef6c:	2230      	movs	r2, #48	@ 0x30
 800ef6e:	f88a 2000 	strb.w	r2, [sl]
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	3201      	adds	r2, #1
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	e7bd      	b.n	800eef6 <_dtoa_r+0x65e>
 800ef7a:	4b7b      	ldr	r3, [pc, #492]	@ (800f168 <_dtoa_r+0x8d0>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f7f1 fb43 	bl	8000608 <__aeabi_dmul>
 800ef82:	2200      	movs	r2, #0
 800ef84:	2300      	movs	r3, #0
 800ef86:	4604      	mov	r4, r0
 800ef88:	460d      	mov	r5, r1
 800ef8a:	f7f1 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f43f aebb 	beq.w	800ed0a <_dtoa_r+0x472>
 800ef94:	e6f0      	b.n	800ed78 <_dtoa_r+0x4e0>
 800ef96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef98:	2a00      	cmp	r2, #0
 800ef9a:	f000 80db 	beq.w	800f154 <_dtoa_r+0x8bc>
 800ef9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efa0:	2a01      	cmp	r2, #1
 800efa2:	f300 80bf 	bgt.w	800f124 <_dtoa_r+0x88c>
 800efa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	f000 80b7 	beq.w	800f11c <_dtoa_r+0x884>
 800efae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800efb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800efb4:	4646      	mov	r6, r8
 800efb6:	9a08      	ldr	r2, [sp, #32]
 800efb8:	2101      	movs	r1, #1
 800efba:	441a      	add	r2, r3
 800efbc:	4658      	mov	r0, fp
 800efbe:	4498      	add	r8, r3
 800efc0:	9208      	str	r2, [sp, #32]
 800efc2:	f000 fc21 	bl	800f808 <__i2b>
 800efc6:	4605      	mov	r5, r0
 800efc8:	b15e      	cbz	r6, 800efe2 <_dtoa_r+0x74a>
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dd08      	ble.n	800efe2 <_dtoa_r+0x74a>
 800efd0:	42b3      	cmp	r3, r6
 800efd2:	9a08      	ldr	r2, [sp, #32]
 800efd4:	bfa8      	it	ge
 800efd6:	4633      	movge	r3, r6
 800efd8:	eba8 0803 	sub.w	r8, r8, r3
 800efdc:	1af6      	subs	r6, r6, r3
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	9308      	str	r3, [sp, #32]
 800efe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efe4:	b1f3      	cbz	r3, 800f024 <_dtoa_r+0x78c>
 800efe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 80b7 	beq.w	800f15c <_dtoa_r+0x8c4>
 800efee:	b18c      	cbz	r4, 800f014 <_dtoa_r+0x77c>
 800eff0:	4629      	mov	r1, r5
 800eff2:	4622      	mov	r2, r4
 800eff4:	4658      	mov	r0, fp
 800eff6:	f000 fcc7 	bl	800f988 <__pow5mult>
 800effa:	464a      	mov	r2, r9
 800effc:	4601      	mov	r1, r0
 800effe:	4605      	mov	r5, r0
 800f000:	4658      	mov	r0, fp
 800f002:	f000 fc17 	bl	800f834 <__multiply>
 800f006:	4649      	mov	r1, r9
 800f008:	9004      	str	r0, [sp, #16]
 800f00a:	4658      	mov	r0, fp
 800f00c:	f000 fb48 	bl	800f6a0 <_Bfree>
 800f010:	9b04      	ldr	r3, [sp, #16]
 800f012:	4699      	mov	r9, r3
 800f014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f016:	1b1a      	subs	r2, r3, r4
 800f018:	d004      	beq.n	800f024 <_dtoa_r+0x78c>
 800f01a:	4649      	mov	r1, r9
 800f01c:	4658      	mov	r0, fp
 800f01e:	f000 fcb3 	bl	800f988 <__pow5mult>
 800f022:	4681      	mov	r9, r0
 800f024:	2101      	movs	r1, #1
 800f026:	4658      	mov	r0, fp
 800f028:	f000 fbee 	bl	800f808 <__i2b>
 800f02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f02e:	4604      	mov	r4, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	f000 81cf 	beq.w	800f3d4 <_dtoa_r+0xb3c>
 800f036:	461a      	mov	r2, r3
 800f038:	4601      	mov	r1, r0
 800f03a:	4658      	mov	r0, fp
 800f03c:	f000 fca4 	bl	800f988 <__pow5mult>
 800f040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f042:	2b01      	cmp	r3, #1
 800f044:	4604      	mov	r4, r0
 800f046:	f300 8095 	bgt.w	800f174 <_dtoa_r+0x8dc>
 800f04a:	9b02      	ldr	r3, [sp, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f040 8087 	bne.w	800f160 <_dtoa_r+0x8c8>
 800f052:	9b03      	ldr	r3, [sp, #12]
 800f054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f040 8089 	bne.w	800f170 <_dtoa_r+0x8d8>
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f064:	0d1b      	lsrs	r3, r3, #20
 800f066:	051b      	lsls	r3, r3, #20
 800f068:	b12b      	cbz	r3, 800f076 <_dtoa_r+0x7de>
 800f06a:	9b08      	ldr	r3, [sp, #32]
 800f06c:	3301      	adds	r3, #1
 800f06e:	9308      	str	r3, [sp, #32]
 800f070:	f108 0801 	add.w	r8, r8, #1
 800f074:	2301      	movs	r3, #1
 800f076:	930a      	str	r3, [sp, #40]	@ 0x28
 800f078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 81b0 	beq.w	800f3e0 <_dtoa_r+0xb48>
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f086:	6918      	ldr	r0, [r3, #16]
 800f088:	f000 fb72 	bl	800f770 <__hi0bits>
 800f08c:	f1c0 0020 	rsb	r0, r0, #32
 800f090:	9b08      	ldr	r3, [sp, #32]
 800f092:	4418      	add	r0, r3
 800f094:	f010 001f 	ands.w	r0, r0, #31
 800f098:	d077      	beq.n	800f18a <_dtoa_r+0x8f2>
 800f09a:	f1c0 0320 	rsb	r3, r0, #32
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	dd6b      	ble.n	800f17a <_dtoa_r+0x8e2>
 800f0a2:	9b08      	ldr	r3, [sp, #32]
 800f0a4:	f1c0 001c 	rsb	r0, r0, #28
 800f0a8:	4403      	add	r3, r0
 800f0aa:	4480      	add	r8, r0
 800f0ac:	4406      	add	r6, r0
 800f0ae:	9308      	str	r3, [sp, #32]
 800f0b0:	f1b8 0f00 	cmp.w	r8, #0
 800f0b4:	dd05      	ble.n	800f0c2 <_dtoa_r+0x82a>
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	4642      	mov	r2, r8
 800f0ba:	4658      	mov	r0, fp
 800f0bc:	f000 fcbe 	bl	800fa3c <__lshift>
 800f0c0:	4681      	mov	r9, r0
 800f0c2:	9b08      	ldr	r3, [sp, #32]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dd05      	ble.n	800f0d4 <_dtoa_r+0x83c>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4658      	mov	r0, fp
 800f0ce:	f000 fcb5 	bl	800fa3c <__lshift>
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d059      	beq.n	800f18e <_dtoa_r+0x8f6>
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4648      	mov	r0, r9
 800f0de:	f000 fd19 	bl	800fb14 <__mcmp>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	da53      	bge.n	800f18e <_dtoa_r+0x8f6>
 800f0e6:	1e7b      	subs	r3, r7, #1
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	220a      	movs	r2, #10
 800f0f0:	4658      	mov	r0, fp
 800f0f2:	f000 faf7 	bl	800f6e4 <__multadd>
 800f0f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0f8:	4681      	mov	r9, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 8172 	beq.w	800f3e4 <_dtoa_r+0xb4c>
 800f100:	2300      	movs	r3, #0
 800f102:	4629      	mov	r1, r5
 800f104:	220a      	movs	r2, #10
 800f106:	4658      	mov	r0, fp
 800f108:	f000 faec 	bl	800f6e4 <__multadd>
 800f10c:	9b00      	ldr	r3, [sp, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	4605      	mov	r5, r0
 800f112:	dc67      	bgt.n	800f1e4 <_dtoa_r+0x94c>
 800f114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f116:	2b02      	cmp	r3, #2
 800f118:	dc41      	bgt.n	800f19e <_dtoa_r+0x906>
 800f11a:	e063      	b.n	800f1e4 <_dtoa_r+0x94c>
 800f11c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f11e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f122:	e746      	b.n	800efb2 <_dtoa_r+0x71a>
 800f124:	9b07      	ldr	r3, [sp, #28]
 800f126:	1e5c      	subs	r4, r3, #1
 800f128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f12a:	42a3      	cmp	r3, r4
 800f12c:	bfbf      	itttt	lt
 800f12e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f130:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f132:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f134:	1ae3      	sublt	r3, r4, r3
 800f136:	bfb4      	ite	lt
 800f138:	18d2      	addlt	r2, r2, r3
 800f13a:	1b1c      	subge	r4, r3, r4
 800f13c:	9b07      	ldr	r3, [sp, #28]
 800f13e:	bfbc      	itt	lt
 800f140:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f142:	2400      	movlt	r4, #0
 800f144:	2b00      	cmp	r3, #0
 800f146:	bfb5      	itete	lt
 800f148:	eba8 0603 	sublt.w	r6, r8, r3
 800f14c:	9b07      	ldrge	r3, [sp, #28]
 800f14e:	2300      	movlt	r3, #0
 800f150:	4646      	movge	r6, r8
 800f152:	e730      	b.n	800efb6 <_dtoa_r+0x71e>
 800f154:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f156:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f158:	4646      	mov	r6, r8
 800f15a:	e735      	b.n	800efc8 <_dtoa_r+0x730>
 800f15c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f15e:	e75c      	b.n	800f01a <_dtoa_r+0x782>
 800f160:	2300      	movs	r3, #0
 800f162:	e788      	b.n	800f076 <_dtoa_r+0x7de>
 800f164:	3fe00000 	.word	0x3fe00000
 800f168:	40240000 	.word	0x40240000
 800f16c:	40140000 	.word	0x40140000
 800f170:	9b02      	ldr	r3, [sp, #8]
 800f172:	e780      	b.n	800f076 <_dtoa_r+0x7de>
 800f174:	2300      	movs	r3, #0
 800f176:	930a      	str	r3, [sp, #40]	@ 0x28
 800f178:	e782      	b.n	800f080 <_dtoa_r+0x7e8>
 800f17a:	d099      	beq.n	800f0b0 <_dtoa_r+0x818>
 800f17c:	9a08      	ldr	r2, [sp, #32]
 800f17e:	331c      	adds	r3, #28
 800f180:	441a      	add	r2, r3
 800f182:	4498      	add	r8, r3
 800f184:	441e      	add	r6, r3
 800f186:	9208      	str	r2, [sp, #32]
 800f188:	e792      	b.n	800f0b0 <_dtoa_r+0x818>
 800f18a:	4603      	mov	r3, r0
 800f18c:	e7f6      	b.n	800f17c <_dtoa_r+0x8e4>
 800f18e:	9b07      	ldr	r3, [sp, #28]
 800f190:	9704      	str	r7, [sp, #16]
 800f192:	2b00      	cmp	r3, #0
 800f194:	dc20      	bgt.n	800f1d8 <_dtoa_r+0x940>
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	dd1e      	ble.n	800f1dc <_dtoa_r+0x944>
 800f19e:	9b00      	ldr	r3, [sp, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f47f aec0 	bne.w	800ef26 <_dtoa_r+0x68e>
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	2205      	movs	r2, #5
 800f1aa:	4658      	mov	r0, fp
 800f1ac:	f000 fa9a 	bl	800f6e4 <__multadd>
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4648      	mov	r0, r9
 800f1b6:	f000 fcad 	bl	800fb14 <__mcmp>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	f77f aeb3 	ble.w	800ef26 <_dtoa_r+0x68e>
 800f1c0:	4656      	mov	r6, sl
 800f1c2:	2331      	movs	r3, #49	@ 0x31
 800f1c4:	f806 3b01 	strb.w	r3, [r6], #1
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	9304      	str	r3, [sp, #16]
 800f1ce:	e6ae      	b.n	800ef2e <_dtoa_r+0x696>
 800f1d0:	9c07      	ldr	r4, [sp, #28]
 800f1d2:	9704      	str	r7, [sp, #16]
 800f1d4:	4625      	mov	r5, r4
 800f1d6:	e7f3      	b.n	800f1c0 <_dtoa_r+0x928>
 800f1d8:	9b07      	ldr	r3, [sp, #28]
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f000 8104 	beq.w	800f3ec <_dtoa_r+0xb54>
 800f1e4:	2e00      	cmp	r6, #0
 800f1e6:	dd05      	ble.n	800f1f4 <_dtoa_r+0x95c>
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4632      	mov	r2, r6
 800f1ec:	4658      	mov	r0, fp
 800f1ee:	f000 fc25 	bl	800fa3c <__lshift>
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d05a      	beq.n	800f2b0 <_dtoa_r+0xa18>
 800f1fa:	6869      	ldr	r1, [r5, #4]
 800f1fc:	4658      	mov	r0, fp
 800f1fe:	f000 fa0f 	bl	800f620 <_Balloc>
 800f202:	4606      	mov	r6, r0
 800f204:	b928      	cbnz	r0, 800f212 <_dtoa_r+0x97a>
 800f206:	4b84      	ldr	r3, [pc, #528]	@ (800f418 <_dtoa_r+0xb80>)
 800f208:	4602      	mov	r2, r0
 800f20a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f20e:	f7ff bb5a 	b.w	800e8c6 <_dtoa_r+0x2e>
 800f212:	692a      	ldr	r2, [r5, #16]
 800f214:	3202      	adds	r2, #2
 800f216:	0092      	lsls	r2, r2, #2
 800f218:	f105 010c 	add.w	r1, r5, #12
 800f21c:	300c      	adds	r0, #12
 800f21e:	f7ff faa4 	bl	800e76a <memcpy>
 800f222:	2201      	movs	r2, #1
 800f224:	4631      	mov	r1, r6
 800f226:	4658      	mov	r0, fp
 800f228:	f000 fc08 	bl	800fa3c <__lshift>
 800f22c:	f10a 0301 	add.w	r3, sl, #1
 800f230:	9307      	str	r3, [sp, #28]
 800f232:	9b00      	ldr	r3, [sp, #0]
 800f234:	4453      	add	r3, sl
 800f236:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f238:	9b02      	ldr	r3, [sp, #8]
 800f23a:	f003 0301 	and.w	r3, r3, #1
 800f23e:	462f      	mov	r7, r5
 800f240:	930a      	str	r3, [sp, #40]	@ 0x28
 800f242:	4605      	mov	r5, r0
 800f244:	9b07      	ldr	r3, [sp, #28]
 800f246:	4621      	mov	r1, r4
 800f248:	3b01      	subs	r3, #1
 800f24a:	4648      	mov	r0, r9
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	f7ff fa9a 	bl	800e786 <quorem>
 800f252:	4639      	mov	r1, r7
 800f254:	9002      	str	r0, [sp, #8]
 800f256:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f25a:	4648      	mov	r0, r9
 800f25c:	f000 fc5a 	bl	800fb14 <__mcmp>
 800f260:	462a      	mov	r2, r5
 800f262:	9008      	str	r0, [sp, #32]
 800f264:	4621      	mov	r1, r4
 800f266:	4658      	mov	r0, fp
 800f268:	f000 fc70 	bl	800fb4c <__mdiff>
 800f26c:	68c2      	ldr	r2, [r0, #12]
 800f26e:	4606      	mov	r6, r0
 800f270:	bb02      	cbnz	r2, 800f2b4 <_dtoa_r+0xa1c>
 800f272:	4601      	mov	r1, r0
 800f274:	4648      	mov	r0, r9
 800f276:	f000 fc4d 	bl	800fb14 <__mcmp>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4631      	mov	r1, r6
 800f27e:	4658      	mov	r0, fp
 800f280:	920e      	str	r2, [sp, #56]	@ 0x38
 800f282:	f000 fa0d 	bl	800f6a0 <_Bfree>
 800f286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f288:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f28a:	9e07      	ldr	r6, [sp, #28]
 800f28c:	ea43 0102 	orr.w	r1, r3, r2
 800f290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f292:	4319      	orrs	r1, r3
 800f294:	d110      	bne.n	800f2b8 <_dtoa_r+0xa20>
 800f296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f29a:	d029      	beq.n	800f2f0 <_dtoa_r+0xa58>
 800f29c:	9b08      	ldr	r3, [sp, #32]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	dd02      	ble.n	800f2a8 <_dtoa_r+0xa10>
 800f2a2:	9b02      	ldr	r3, [sp, #8]
 800f2a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f2a8:	9b00      	ldr	r3, [sp, #0]
 800f2aa:	f883 8000 	strb.w	r8, [r3]
 800f2ae:	e63f      	b.n	800ef30 <_dtoa_r+0x698>
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	e7bb      	b.n	800f22c <_dtoa_r+0x994>
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	e7e1      	b.n	800f27c <_dtoa_r+0x9e4>
 800f2b8:	9b08      	ldr	r3, [sp, #32]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	db04      	blt.n	800f2c8 <_dtoa_r+0xa30>
 800f2be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f2c0:	430b      	orrs	r3, r1
 800f2c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f2c4:	430b      	orrs	r3, r1
 800f2c6:	d120      	bne.n	800f30a <_dtoa_r+0xa72>
 800f2c8:	2a00      	cmp	r2, #0
 800f2ca:	dded      	ble.n	800f2a8 <_dtoa_r+0xa10>
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	4658      	mov	r0, fp
 800f2d2:	f000 fbb3 	bl	800fa3c <__lshift>
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	4681      	mov	r9, r0
 800f2da:	f000 fc1b 	bl	800fb14 <__mcmp>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	dc03      	bgt.n	800f2ea <_dtoa_r+0xa52>
 800f2e2:	d1e1      	bne.n	800f2a8 <_dtoa_r+0xa10>
 800f2e4:	f018 0f01 	tst.w	r8, #1
 800f2e8:	d0de      	beq.n	800f2a8 <_dtoa_r+0xa10>
 800f2ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f2ee:	d1d8      	bne.n	800f2a2 <_dtoa_r+0xa0a>
 800f2f0:	9a00      	ldr	r2, [sp, #0]
 800f2f2:	2339      	movs	r3, #57	@ 0x39
 800f2f4:	7013      	strb	r3, [r2, #0]
 800f2f6:	4633      	mov	r3, r6
 800f2f8:	461e      	mov	r6, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f300:	2a39      	cmp	r2, #57	@ 0x39
 800f302:	d052      	beq.n	800f3aa <_dtoa_r+0xb12>
 800f304:	3201      	adds	r2, #1
 800f306:	701a      	strb	r2, [r3, #0]
 800f308:	e612      	b.n	800ef30 <_dtoa_r+0x698>
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	dd07      	ble.n	800f31e <_dtoa_r+0xa86>
 800f30e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f312:	d0ed      	beq.n	800f2f0 <_dtoa_r+0xa58>
 800f314:	9a00      	ldr	r2, [sp, #0]
 800f316:	f108 0301 	add.w	r3, r8, #1
 800f31a:	7013      	strb	r3, [r2, #0]
 800f31c:	e608      	b.n	800ef30 <_dtoa_r+0x698>
 800f31e:	9b07      	ldr	r3, [sp, #28]
 800f320:	9a07      	ldr	r2, [sp, #28]
 800f322:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f328:	4293      	cmp	r3, r2
 800f32a:	d028      	beq.n	800f37e <_dtoa_r+0xae6>
 800f32c:	4649      	mov	r1, r9
 800f32e:	2300      	movs	r3, #0
 800f330:	220a      	movs	r2, #10
 800f332:	4658      	mov	r0, fp
 800f334:	f000 f9d6 	bl	800f6e4 <__multadd>
 800f338:	42af      	cmp	r7, r5
 800f33a:	4681      	mov	r9, r0
 800f33c:	f04f 0300 	mov.w	r3, #0
 800f340:	f04f 020a 	mov.w	r2, #10
 800f344:	4639      	mov	r1, r7
 800f346:	4658      	mov	r0, fp
 800f348:	d107      	bne.n	800f35a <_dtoa_r+0xac2>
 800f34a:	f000 f9cb 	bl	800f6e4 <__multadd>
 800f34e:	4607      	mov	r7, r0
 800f350:	4605      	mov	r5, r0
 800f352:	9b07      	ldr	r3, [sp, #28]
 800f354:	3301      	adds	r3, #1
 800f356:	9307      	str	r3, [sp, #28]
 800f358:	e774      	b.n	800f244 <_dtoa_r+0x9ac>
 800f35a:	f000 f9c3 	bl	800f6e4 <__multadd>
 800f35e:	4629      	mov	r1, r5
 800f360:	4607      	mov	r7, r0
 800f362:	2300      	movs	r3, #0
 800f364:	220a      	movs	r2, #10
 800f366:	4658      	mov	r0, fp
 800f368:	f000 f9bc 	bl	800f6e4 <__multadd>
 800f36c:	4605      	mov	r5, r0
 800f36e:	e7f0      	b.n	800f352 <_dtoa_r+0xaba>
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	bfcc      	ite	gt
 800f376:	461e      	movgt	r6, r3
 800f378:	2601      	movle	r6, #1
 800f37a:	4456      	add	r6, sl
 800f37c:	2700      	movs	r7, #0
 800f37e:	4649      	mov	r1, r9
 800f380:	2201      	movs	r2, #1
 800f382:	4658      	mov	r0, fp
 800f384:	f000 fb5a 	bl	800fa3c <__lshift>
 800f388:	4621      	mov	r1, r4
 800f38a:	4681      	mov	r9, r0
 800f38c:	f000 fbc2 	bl	800fb14 <__mcmp>
 800f390:	2800      	cmp	r0, #0
 800f392:	dcb0      	bgt.n	800f2f6 <_dtoa_r+0xa5e>
 800f394:	d102      	bne.n	800f39c <_dtoa_r+0xb04>
 800f396:	f018 0f01 	tst.w	r8, #1
 800f39a:	d1ac      	bne.n	800f2f6 <_dtoa_r+0xa5e>
 800f39c:	4633      	mov	r3, r6
 800f39e:	461e      	mov	r6, r3
 800f3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3a4:	2a30      	cmp	r2, #48	@ 0x30
 800f3a6:	d0fa      	beq.n	800f39e <_dtoa_r+0xb06>
 800f3a8:	e5c2      	b.n	800ef30 <_dtoa_r+0x698>
 800f3aa:	459a      	cmp	sl, r3
 800f3ac:	d1a4      	bne.n	800f2f8 <_dtoa_r+0xa60>
 800f3ae:	9b04      	ldr	r3, [sp, #16]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	9304      	str	r3, [sp, #16]
 800f3b4:	2331      	movs	r3, #49	@ 0x31
 800f3b6:	f88a 3000 	strb.w	r3, [sl]
 800f3ba:	e5b9      	b.n	800ef30 <_dtoa_r+0x698>
 800f3bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f3be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f41c <_dtoa_r+0xb84>
 800f3c2:	b11b      	cbz	r3, 800f3cc <_dtoa_r+0xb34>
 800f3c4:	f10a 0308 	add.w	r3, sl, #8
 800f3c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	4650      	mov	r0, sl
 800f3ce:	b019      	add	sp, #100	@ 0x64
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	f77f ae37 	ble.w	800f04a <_dtoa_r+0x7b2>
 800f3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	e655      	b.n	800f090 <_dtoa_r+0x7f8>
 800f3e4:	9b00      	ldr	r3, [sp, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f77f aed6 	ble.w	800f198 <_dtoa_r+0x900>
 800f3ec:	4656      	mov	r6, sl
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	4648      	mov	r0, r9
 800f3f2:	f7ff f9c8 	bl	800e786 <quorem>
 800f3f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3fa:	f806 8b01 	strb.w	r8, [r6], #1
 800f3fe:	9b00      	ldr	r3, [sp, #0]
 800f400:	eba6 020a 	sub.w	r2, r6, sl
 800f404:	4293      	cmp	r3, r2
 800f406:	ddb3      	ble.n	800f370 <_dtoa_r+0xad8>
 800f408:	4649      	mov	r1, r9
 800f40a:	2300      	movs	r3, #0
 800f40c:	220a      	movs	r2, #10
 800f40e:	4658      	mov	r0, fp
 800f410:	f000 f968 	bl	800f6e4 <__multadd>
 800f414:	4681      	mov	r9, r0
 800f416:	e7ea      	b.n	800f3ee <_dtoa_r+0xb56>
 800f418:	08011078 	.word	0x08011078
 800f41c:	08010ffc 	.word	0x08010ffc

0800f420 <_free_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4605      	mov	r5, r0
 800f424:	2900      	cmp	r1, #0
 800f426:	d041      	beq.n	800f4ac <_free_r+0x8c>
 800f428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f42c:	1f0c      	subs	r4, r1, #4
 800f42e:	2b00      	cmp	r3, #0
 800f430:	bfb8      	it	lt
 800f432:	18e4      	addlt	r4, r4, r3
 800f434:	f000 f8e8 	bl	800f608 <__malloc_lock>
 800f438:	4a1d      	ldr	r2, [pc, #116]	@ (800f4b0 <_free_r+0x90>)
 800f43a:	6813      	ldr	r3, [r2, #0]
 800f43c:	b933      	cbnz	r3, 800f44c <_free_r+0x2c>
 800f43e:	6063      	str	r3, [r4, #4]
 800f440:	6014      	str	r4, [r2, #0]
 800f442:	4628      	mov	r0, r5
 800f444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f448:	f000 b8e4 	b.w	800f614 <__malloc_unlock>
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	d908      	bls.n	800f462 <_free_r+0x42>
 800f450:	6820      	ldr	r0, [r4, #0]
 800f452:	1821      	adds	r1, r4, r0
 800f454:	428b      	cmp	r3, r1
 800f456:	bf01      	itttt	eq
 800f458:	6819      	ldreq	r1, [r3, #0]
 800f45a:	685b      	ldreq	r3, [r3, #4]
 800f45c:	1809      	addeq	r1, r1, r0
 800f45e:	6021      	streq	r1, [r4, #0]
 800f460:	e7ed      	b.n	800f43e <_free_r+0x1e>
 800f462:	461a      	mov	r2, r3
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	b10b      	cbz	r3, 800f46c <_free_r+0x4c>
 800f468:	42a3      	cmp	r3, r4
 800f46a:	d9fa      	bls.n	800f462 <_free_r+0x42>
 800f46c:	6811      	ldr	r1, [r2, #0]
 800f46e:	1850      	adds	r0, r2, r1
 800f470:	42a0      	cmp	r0, r4
 800f472:	d10b      	bne.n	800f48c <_free_r+0x6c>
 800f474:	6820      	ldr	r0, [r4, #0]
 800f476:	4401      	add	r1, r0
 800f478:	1850      	adds	r0, r2, r1
 800f47a:	4283      	cmp	r3, r0
 800f47c:	6011      	str	r1, [r2, #0]
 800f47e:	d1e0      	bne.n	800f442 <_free_r+0x22>
 800f480:	6818      	ldr	r0, [r3, #0]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	6053      	str	r3, [r2, #4]
 800f486:	4408      	add	r0, r1
 800f488:	6010      	str	r0, [r2, #0]
 800f48a:	e7da      	b.n	800f442 <_free_r+0x22>
 800f48c:	d902      	bls.n	800f494 <_free_r+0x74>
 800f48e:	230c      	movs	r3, #12
 800f490:	602b      	str	r3, [r5, #0]
 800f492:	e7d6      	b.n	800f442 <_free_r+0x22>
 800f494:	6820      	ldr	r0, [r4, #0]
 800f496:	1821      	adds	r1, r4, r0
 800f498:	428b      	cmp	r3, r1
 800f49a:	bf04      	itt	eq
 800f49c:	6819      	ldreq	r1, [r3, #0]
 800f49e:	685b      	ldreq	r3, [r3, #4]
 800f4a0:	6063      	str	r3, [r4, #4]
 800f4a2:	bf04      	itt	eq
 800f4a4:	1809      	addeq	r1, r1, r0
 800f4a6:	6021      	streq	r1, [r4, #0]
 800f4a8:	6054      	str	r4, [r2, #4]
 800f4aa:	e7ca      	b.n	800f442 <_free_r+0x22>
 800f4ac:	bd38      	pop	{r3, r4, r5, pc}
 800f4ae:	bf00      	nop
 800f4b0:	20021990 	.word	0x20021990

0800f4b4 <malloc>:
 800f4b4:	4b02      	ldr	r3, [pc, #8]	@ (800f4c0 <malloc+0xc>)
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	f000 b825 	b.w	800f508 <_malloc_r>
 800f4be:	bf00      	nop
 800f4c0:	20000f48 	.word	0x20000f48

0800f4c4 <sbrk_aligned>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f504 <sbrk_aligned+0x40>)
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	6831      	ldr	r1, [r6, #0]
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	b911      	cbnz	r1, 800f4d6 <sbrk_aligned+0x12>
 800f4d0:	f001 f80c 	bl	80104ec <_sbrk_r>
 800f4d4:	6030      	str	r0, [r6, #0]
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f001 f807 	bl	80104ec <_sbrk_r>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	d103      	bne.n	800f4ea <sbrk_aligned+0x26>
 800f4e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ea:	1cc4      	adds	r4, r0, #3
 800f4ec:	f024 0403 	bic.w	r4, r4, #3
 800f4f0:	42a0      	cmp	r0, r4
 800f4f2:	d0f8      	beq.n	800f4e6 <sbrk_aligned+0x22>
 800f4f4:	1a21      	subs	r1, r4, r0
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 fff8 	bl	80104ec <_sbrk_r>
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d1f2      	bne.n	800f4e6 <sbrk_aligned+0x22>
 800f500:	e7ef      	b.n	800f4e2 <sbrk_aligned+0x1e>
 800f502:	bf00      	nop
 800f504:	2002198c 	.word	0x2002198c

0800f508 <_malloc_r>:
 800f508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f50c:	1ccd      	adds	r5, r1, #3
 800f50e:	f025 0503 	bic.w	r5, r5, #3
 800f512:	3508      	adds	r5, #8
 800f514:	2d0c      	cmp	r5, #12
 800f516:	bf38      	it	cc
 800f518:	250c      	movcc	r5, #12
 800f51a:	2d00      	cmp	r5, #0
 800f51c:	4606      	mov	r6, r0
 800f51e:	db01      	blt.n	800f524 <_malloc_r+0x1c>
 800f520:	42a9      	cmp	r1, r5
 800f522:	d904      	bls.n	800f52e <_malloc_r+0x26>
 800f524:	230c      	movs	r3, #12
 800f526:	6033      	str	r3, [r6, #0]
 800f528:	2000      	movs	r0, #0
 800f52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f604 <_malloc_r+0xfc>
 800f532:	f000 f869 	bl	800f608 <__malloc_lock>
 800f536:	f8d8 3000 	ldr.w	r3, [r8]
 800f53a:	461c      	mov	r4, r3
 800f53c:	bb44      	cbnz	r4, 800f590 <_malloc_r+0x88>
 800f53e:	4629      	mov	r1, r5
 800f540:	4630      	mov	r0, r6
 800f542:	f7ff ffbf 	bl	800f4c4 <sbrk_aligned>
 800f546:	1c43      	adds	r3, r0, #1
 800f548:	4604      	mov	r4, r0
 800f54a:	d158      	bne.n	800f5fe <_malloc_r+0xf6>
 800f54c:	f8d8 4000 	ldr.w	r4, [r8]
 800f550:	4627      	mov	r7, r4
 800f552:	2f00      	cmp	r7, #0
 800f554:	d143      	bne.n	800f5de <_malloc_r+0xd6>
 800f556:	2c00      	cmp	r4, #0
 800f558:	d04b      	beq.n	800f5f2 <_malloc_r+0xea>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	4639      	mov	r1, r7
 800f55e:	4630      	mov	r0, r6
 800f560:	eb04 0903 	add.w	r9, r4, r3
 800f564:	f000 ffc2 	bl	80104ec <_sbrk_r>
 800f568:	4581      	cmp	r9, r0
 800f56a:	d142      	bne.n	800f5f2 <_malloc_r+0xea>
 800f56c:	6821      	ldr	r1, [r4, #0]
 800f56e:	1a6d      	subs	r5, r5, r1
 800f570:	4629      	mov	r1, r5
 800f572:	4630      	mov	r0, r6
 800f574:	f7ff ffa6 	bl	800f4c4 <sbrk_aligned>
 800f578:	3001      	adds	r0, #1
 800f57a:	d03a      	beq.n	800f5f2 <_malloc_r+0xea>
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	442b      	add	r3, r5
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	f8d8 3000 	ldr.w	r3, [r8]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	bb62      	cbnz	r2, 800f5e4 <_malloc_r+0xdc>
 800f58a:	f8c8 7000 	str.w	r7, [r8]
 800f58e:	e00f      	b.n	800f5b0 <_malloc_r+0xa8>
 800f590:	6822      	ldr	r2, [r4, #0]
 800f592:	1b52      	subs	r2, r2, r5
 800f594:	d420      	bmi.n	800f5d8 <_malloc_r+0xd0>
 800f596:	2a0b      	cmp	r2, #11
 800f598:	d917      	bls.n	800f5ca <_malloc_r+0xc2>
 800f59a:	1961      	adds	r1, r4, r5
 800f59c:	42a3      	cmp	r3, r4
 800f59e:	6025      	str	r5, [r4, #0]
 800f5a0:	bf18      	it	ne
 800f5a2:	6059      	strne	r1, [r3, #4]
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	bf08      	it	eq
 800f5a8:	f8c8 1000 	streq.w	r1, [r8]
 800f5ac:	5162      	str	r2, [r4, r5]
 800f5ae:	604b      	str	r3, [r1, #4]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f000 f82f 	bl	800f614 <__malloc_unlock>
 800f5b6:	f104 000b 	add.w	r0, r4, #11
 800f5ba:	1d23      	adds	r3, r4, #4
 800f5bc:	f020 0007 	bic.w	r0, r0, #7
 800f5c0:	1ac2      	subs	r2, r0, r3
 800f5c2:	bf1c      	itt	ne
 800f5c4:	1a1b      	subne	r3, r3, r0
 800f5c6:	50a3      	strne	r3, [r4, r2]
 800f5c8:	e7af      	b.n	800f52a <_malloc_r+0x22>
 800f5ca:	6862      	ldr	r2, [r4, #4]
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	bf0c      	ite	eq
 800f5d0:	f8c8 2000 	streq.w	r2, [r8]
 800f5d4:	605a      	strne	r2, [r3, #4]
 800f5d6:	e7eb      	b.n	800f5b0 <_malloc_r+0xa8>
 800f5d8:	4623      	mov	r3, r4
 800f5da:	6864      	ldr	r4, [r4, #4]
 800f5dc:	e7ae      	b.n	800f53c <_malloc_r+0x34>
 800f5de:	463c      	mov	r4, r7
 800f5e0:	687f      	ldr	r7, [r7, #4]
 800f5e2:	e7b6      	b.n	800f552 <_malloc_r+0x4a>
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	d1fb      	bne.n	800f5e4 <_malloc_r+0xdc>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	6053      	str	r3, [r2, #4]
 800f5f0:	e7de      	b.n	800f5b0 <_malloc_r+0xa8>
 800f5f2:	230c      	movs	r3, #12
 800f5f4:	6033      	str	r3, [r6, #0]
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f000 f80c 	bl	800f614 <__malloc_unlock>
 800f5fc:	e794      	b.n	800f528 <_malloc_r+0x20>
 800f5fe:	6005      	str	r5, [r0, #0]
 800f600:	e7d6      	b.n	800f5b0 <_malloc_r+0xa8>
 800f602:	bf00      	nop
 800f604:	20021990 	.word	0x20021990

0800f608 <__malloc_lock>:
 800f608:	4801      	ldr	r0, [pc, #4]	@ (800f610 <__malloc_lock+0x8>)
 800f60a:	f7ff b8ac 	b.w	800e766 <__retarget_lock_acquire_recursive>
 800f60e:	bf00      	nop
 800f610:	20021988 	.word	0x20021988

0800f614 <__malloc_unlock>:
 800f614:	4801      	ldr	r0, [pc, #4]	@ (800f61c <__malloc_unlock+0x8>)
 800f616:	f7ff b8a7 	b.w	800e768 <__retarget_lock_release_recursive>
 800f61a:	bf00      	nop
 800f61c:	20021988 	.word	0x20021988

0800f620 <_Balloc>:
 800f620:	b570      	push	{r4, r5, r6, lr}
 800f622:	69c6      	ldr	r6, [r0, #28]
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	b976      	cbnz	r6, 800f648 <_Balloc+0x28>
 800f62a:	2010      	movs	r0, #16
 800f62c:	f7ff ff42 	bl	800f4b4 <malloc>
 800f630:	4602      	mov	r2, r0
 800f632:	61e0      	str	r0, [r4, #28]
 800f634:	b920      	cbnz	r0, 800f640 <_Balloc+0x20>
 800f636:	4b18      	ldr	r3, [pc, #96]	@ (800f698 <_Balloc+0x78>)
 800f638:	4818      	ldr	r0, [pc, #96]	@ (800f69c <_Balloc+0x7c>)
 800f63a:	216b      	movs	r1, #107	@ 0x6b
 800f63c:	f000 ff66 	bl	801050c <__assert_func>
 800f640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f644:	6006      	str	r6, [r0, #0]
 800f646:	60c6      	str	r6, [r0, #12]
 800f648:	69e6      	ldr	r6, [r4, #28]
 800f64a:	68f3      	ldr	r3, [r6, #12]
 800f64c:	b183      	cbz	r3, 800f670 <_Balloc+0x50>
 800f64e:	69e3      	ldr	r3, [r4, #28]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f656:	b9b8      	cbnz	r0, 800f688 <_Balloc+0x68>
 800f658:	2101      	movs	r1, #1
 800f65a:	fa01 f605 	lsl.w	r6, r1, r5
 800f65e:	1d72      	adds	r2, r6, #5
 800f660:	0092      	lsls	r2, r2, #2
 800f662:	4620      	mov	r0, r4
 800f664:	f000 ff70 	bl	8010548 <_calloc_r>
 800f668:	b160      	cbz	r0, 800f684 <_Balloc+0x64>
 800f66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f66e:	e00e      	b.n	800f68e <_Balloc+0x6e>
 800f670:	2221      	movs	r2, #33	@ 0x21
 800f672:	2104      	movs	r1, #4
 800f674:	4620      	mov	r0, r4
 800f676:	f000 ff67 	bl	8010548 <_calloc_r>
 800f67a:	69e3      	ldr	r3, [r4, #28]
 800f67c:	60f0      	str	r0, [r6, #12]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1e4      	bne.n	800f64e <_Balloc+0x2e>
 800f684:	2000      	movs	r0, #0
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	6802      	ldr	r2, [r0, #0]
 800f68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f68e:	2300      	movs	r3, #0
 800f690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f694:	e7f7      	b.n	800f686 <_Balloc+0x66>
 800f696:	bf00      	nop
 800f698:	08011009 	.word	0x08011009
 800f69c:	08011089 	.word	0x08011089

0800f6a0 <_Bfree>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	69c6      	ldr	r6, [r0, #28]
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	b976      	cbnz	r6, 800f6c8 <_Bfree+0x28>
 800f6aa:	2010      	movs	r0, #16
 800f6ac:	f7ff ff02 	bl	800f4b4 <malloc>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	61e8      	str	r0, [r5, #28]
 800f6b4:	b920      	cbnz	r0, 800f6c0 <_Bfree+0x20>
 800f6b6:	4b09      	ldr	r3, [pc, #36]	@ (800f6dc <_Bfree+0x3c>)
 800f6b8:	4809      	ldr	r0, [pc, #36]	@ (800f6e0 <_Bfree+0x40>)
 800f6ba:	218f      	movs	r1, #143	@ 0x8f
 800f6bc:	f000 ff26 	bl	801050c <__assert_func>
 800f6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6c4:	6006      	str	r6, [r0, #0]
 800f6c6:	60c6      	str	r6, [r0, #12]
 800f6c8:	b13c      	cbz	r4, 800f6da <_Bfree+0x3a>
 800f6ca:	69eb      	ldr	r3, [r5, #28]
 800f6cc:	6862      	ldr	r2, [r4, #4]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6d4:	6021      	str	r1, [r4, #0]
 800f6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	08011009 	.word	0x08011009
 800f6e0:	08011089 	.word	0x08011089

0800f6e4 <__multadd>:
 800f6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e8:	690d      	ldr	r5, [r1, #16]
 800f6ea:	4607      	mov	r7, r0
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	461e      	mov	r6, r3
 800f6f0:	f101 0c14 	add.w	ip, r1, #20
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f6fa:	b299      	uxth	r1, r3
 800f6fc:	fb02 6101 	mla	r1, r2, r1, r6
 800f700:	0c1e      	lsrs	r6, r3, #16
 800f702:	0c0b      	lsrs	r3, r1, #16
 800f704:	fb02 3306 	mla	r3, r2, r6, r3
 800f708:	b289      	uxth	r1, r1
 800f70a:	3001      	adds	r0, #1
 800f70c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f710:	4285      	cmp	r5, r0
 800f712:	f84c 1b04 	str.w	r1, [ip], #4
 800f716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f71a:	dcec      	bgt.n	800f6f6 <__multadd+0x12>
 800f71c:	b30e      	cbz	r6, 800f762 <__multadd+0x7e>
 800f71e:	68a3      	ldr	r3, [r4, #8]
 800f720:	42ab      	cmp	r3, r5
 800f722:	dc19      	bgt.n	800f758 <__multadd+0x74>
 800f724:	6861      	ldr	r1, [r4, #4]
 800f726:	4638      	mov	r0, r7
 800f728:	3101      	adds	r1, #1
 800f72a:	f7ff ff79 	bl	800f620 <_Balloc>
 800f72e:	4680      	mov	r8, r0
 800f730:	b928      	cbnz	r0, 800f73e <__multadd+0x5a>
 800f732:	4602      	mov	r2, r0
 800f734:	4b0c      	ldr	r3, [pc, #48]	@ (800f768 <__multadd+0x84>)
 800f736:	480d      	ldr	r0, [pc, #52]	@ (800f76c <__multadd+0x88>)
 800f738:	21ba      	movs	r1, #186	@ 0xba
 800f73a:	f000 fee7 	bl	801050c <__assert_func>
 800f73e:	6922      	ldr	r2, [r4, #16]
 800f740:	3202      	adds	r2, #2
 800f742:	f104 010c 	add.w	r1, r4, #12
 800f746:	0092      	lsls	r2, r2, #2
 800f748:	300c      	adds	r0, #12
 800f74a:	f7ff f80e 	bl	800e76a <memcpy>
 800f74e:	4621      	mov	r1, r4
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff ffa5 	bl	800f6a0 <_Bfree>
 800f756:	4644      	mov	r4, r8
 800f758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f75c:	3501      	adds	r5, #1
 800f75e:	615e      	str	r6, [r3, #20]
 800f760:	6125      	str	r5, [r4, #16]
 800f762:	4620      	mov	r0, r4
 800f764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f768:	08011078 	.word	0x08011078
 800f76c:	08011089 	.word	0x08011089

0800f770 <__hi0bits>:
 800f770:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f774:	4603      	mov	r3, r0
 800f776:	bf36      	itet	cc
 800f778:	0403      	lslcc	r3, r0, #16
 800f77a:	2000      	movcs	r0, #0
 800f77c:	2010      	movcc	r0, #16
 800f77e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f782:	bf3c      	itt	cc
 800f784:	021b      	lslcc	r3, r3, #8
 800f786:	3008      	addcc	r0, #8
 800f788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f78c:	bf3c      	itt	cc
 800f78e:	011b      	lslcc	r3, r3, #4
 800f790:	3004      	addcc	r0, #4
 800f792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f796:	bf3c      	itt	cc
 800f798:	009b      	lslcc	r3, r3, #2
 800f79a:	3002      	addcc	r0, #2
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	db05      	blt.n	800f7ac <__hi0bits+0x3c>
 800f7a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f7a4:	f100 0001 	add.w	r0, r0, #1
 800f7a8:	bf08      	it	eq
 800f7aa:	2020      	moveq	r0, #32
 800f7ac:	4770      	bx	lr

0800f7ae <__lo0bits>:
 800f7ae:	6803      	ldr	r3, [r0, #0]
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	f013 0007 	ands.w	r0, r3, #7
 800f7b6:	d00b      	beq.n	800f7d0 <__lo0bits+0x22>
 800f7b8:	07d9      	lsls	r1, r3, #31
 800f7ba:	d421      	bmi.n	800f800 <__lo0bits+0x52>
 800f7bc:	0798      	lsls	r0, r3, #30
 800f7be:	bf49      	itett	mi
 800f7c0:	085b      	lsrmi	r3, r3, #1
 800f7c2:	089b      	lsrpl	r3, r3, #2
 800f7c4:	2001      	movmi	r0, #1
 800f7c6:	6013      	strmi	r3, [r2, #0]
 800f7c8:	bf5c      	itt	pl
 800f7ca:	6013      	strpl	r3, [r2, #0]
 800f7cc:	2002      	movpl	r0, #2
 800f7ce:	4770      	bx	lr
 800f7d0:	b299      	uxth	r1, r3
 800f7d2:	b909      	cbnz	r1, 800f7d8 <__lo0bits+0x2a>
 800f7d4:	0c1b      	lsrs	r3, r3, #16
 800f7d6:	2010      	movs	r0, #16
 800f7d8:	b2d9      	uxtb	r1, r3
 800f7da:	b909      	cbnz	r1, 800f7e0 <__lo0bits+0x32>
 800f7dc:	3008      	adds	r0, #8
 800f7de:	0a1b      	lsrs	r3, r3, #8
 800f7e0:	0719      	lsls	r1, r3, #28
 800f7e2:	bf04      	itt	eq
 800f7e4:	091b      	lsreq	r3, r3, #4
 800f7e6:	3004      	addeq	r0, #4
 800f7e8:	0799      	lsls	r1, r3, #30
 800f7ea:	bf04      	itt	eq
 800f7ec:	089b      	lsreq	r3, r3, #2
 800f7ee:	3002      	addeq	r0, #2
 800f7f0:	07d9      	lsls	r1, r3, #31
 800f7f2:	d403      	bmi.n	800f7fc <__lo0bits+0x4e>
 800f7f4:	085b      	lsrs	r3, r3, #1
 800f7f6:	f100 0001 	add.w	r0, r0, #1
 800f7fa:	d003      	beq.n	800f804 <__lo0bits+0x56>
 800f7fc:	6013      	str	r3, [r2, #0]
 800f7fe:	4770      	bx	lr
 800f800:	2000      	movs	r0, #0
 800f802:	4770      	bx	lr
 800f804:	2020      	movs	r0, #32
 800f806:	4770      	bx	lr

0800f808 <__i2b>:
 800f808:	b510      	push	{r4, lr}
 800f80a:	460c      	mov	r4, r1
 800f80c:	2101      	movs	r1, #1
 800f80e:	f7ff ff07 	bl	800f620 <_Balloc>
 800f812:	4602      	mov	r2, r0
 800f814:	b928      	cbnz	r0, 800f822 <__i2b+0x1a>
 800f816:	4b05      	ldr	r3, [pc, #20]	@ (800f82c <__i2b+0x24>)
 800f818:	4805      	ldr	r0, [pc, #20]	@ (800f830 <__i2b+0x28>)
 800f81a:	f240 1145 	movw	r1, #325	@ 0x145
 800f81e:	f000 fe75 	bl	801050c <__assert_func>
 800f822:	2301      	movs	r3, #1
 800f824:	6144      	str	r4, [r0, #20]
 800f826:	6103      	str	r3, [r0, #16]
 800f828:	bd10      	pop	{r4, pc}
 800f82a:	bf00      	nop
 800f82c:	08011078 	.word	0x08011078
 800f830:	08011089 	.word	0x08011089

0800f834 <__multiply>:
 800f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	4614      	mov	r4, r2
 800f83a:	690a      	ldr	r2, [r1, #16]
 800f83c:	6923      	ldr	r3, [r4, #16]
 800f83e:	429a      	cmp	r2, r3
 800f840:	bfa8      	it	ge
 800f842:	4623      	movge	r3, r4
 800f844:	460f      	mov	r7, r1
 800f846:	bfa4      	itt	ge
 800f848:	460c      	movge	r4, r1
 800f84a:	461f      	movge	r7, r3
 800f84c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f850:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	6861      	ldr	r1, [r4, #4]
 800f858:	eb0a 0609 	add.w	r6, sl, r9
 800f85c:	42b3      	cmp	r3, r6
 800f85e:	b085      	sub	sp, #20
 800f860:	bfb8      	it	lt
 800f862:	3101      	addlt	r1, #1
 800f864:	f7ff fedc 	bl	800f620 <_Balloc>
 800f868:	b930      	cbnz	r0, 800f878 <__multiply+0x44>
 800f86a:	4602      	mov	r2, r0
 800f86c:	4b44      	ldr	r3, [pc, #272]	@ (800f980 <__multiply+0x14c>)
 800f86e:	4845      	ldr	r0, [pc, #276]	@ (800f984 <__multiply+0x150>)
 800f870:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f874:	f000 fe4a 	bl	801050c <__assert_func>
 800f878:	f100 0514 	add.w	r5, r0, #20
 800f87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f880:	462b      	mov	r3, r5
 800f882:	2200      	movs	r2, #0
 800f884:	4543      	cmp	r3, r8
 800f886:	d321      	bcc.n	800f8cc <__multiply+0x98>
 800f888:	f107 0114 	add.w	r1, r7, #20
 800f88c:	f104 0214 	add.w	r2, r4, #20
 800f890:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f894:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f898:	9302      	str	r3, [sp, #8]
 800f89a:	1b13      	subs	r3, r2, r4
 800f89c:	3b15      	subs	r3, #21
 800f89e:	f023 0303 	bic.w	r3, r3, #3
 800f8a2:	3304      	adds	r3, #4
 800f8a4:	f104 0715 	add.w	r7, r4, #21
 800f8a8:	42ba      	cmp	r2, r7
 800f8aa:	bf38      	it	cc
 800f8ac:	2304      	movcc	r3, #4
 800f8ae:	9301      	str	r3, [sp, #4]
 800f8b0:	9b02      	ldr	r3, [sp, #8]
 800f8b2:	9103      	str	r1, [sp, #12]
 800f8b4:	428b      	cmp	r3, r1
 800f8b6:	d80c      	bhi.n	800f8d2 <__multiply+0x9e>
 800f8b8:	2e00      	cmp	r6, #0
 800f8ba:	dd03      	ble.n	800f8c4 <__multiply+0x90>
 800f8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d05b      	beq.n	800f97c <__multiply+0x148>
 800f8c4:	6106      	str	r6, [r0, #16]
 800f8c6:	b005      	add	sp, #20
 800f8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8cc:	f843 2b04 	str.w	r2, [r3], #4
 800f8d0:	e7d8      	b.n	800f884 <__multiply+0x50>
 800f8d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800f8d6:	f1ba 0f00 	cmp.w	sl, #0
 800f8da:	d024      	beq.n	800f926 <__multiply+0xf2>
 800f8dc:	f104 0e14 	add.w	lr, r4, #20
 800f8e0:	46a9      	mov	r9, r5
 800f8e2:	f04f 0c00 	mov.w	ip, #0
 800f8e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f8ea:	f8d9 3000 	ldr.w	r3, [r9]
 800f8ee:	fa1f fb87 	uxth.w	fp, r7
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f8f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f8fc:	f8d9 7000 	ldr.w	r7, [r9]
 800f900:	4463      	add	r3, ip
 800f902:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f906:	fb0a c70b 	mla	r7, sl, fp, ip
 800f90a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f90e:	b29b      	uxth	r3, r3
 800f910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f914:	4572      	cmp	r2, lr
 800f916:	f849 3b04 	str.w	r3, [r9], #4
 800f91a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f91e:	d8e2      	bhi.n	800f8e6 <__multiply+0xb2>
 800f920:	9b01      	ldr	r3, [sp, #4]
 800f922:	f845 c003 	str.w	ip, [r5, r3]
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f92c:	3104      	adds	r1, #4
 800f92e:	f1b9 0f00 	cmp.w	r9, #0
 800f932:	d021      	beq.n	800f978 <__multiply+0x144>
 800f934:	682b      	ldr	r3, [r5, #0]
 800f936:	f104 0c14 	add.w	ip, r4, #20
 800f93a:	46ae      	mov	lr, r5
 800f93c:	f04f 0a00 	mov.w	sl, #0
 800f940:	f8bc b000 	ldrh.w	fp, [ip]
 800f944:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f948:	fb09 770b 	mla	r7, r9, fp, r7
 800f94c:	4457      	add	r7, sl
 800f94e:	b29b      	uxth	r3, r3
 800f950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f954:	f84e 3b04 	str.w	r3, [lr], #4
 800f958:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f960:	f8be 3000 	ldrh.w	r3, [lr]
 800f964:	fb09 330a 	mla	r3, r9, sl, r3
 800f968:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f96c:	4562      	cmp	r2, ip
 800f96e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f972:	d8e5      	bhi.n	800f940 <__multiply+0x10c>
 800f974:	9f01      	ldr	r7, [sp, #4]
 800f976:	51eb      	str	r3, [r5, r7]
 800f978:	3504      	adds	r5, #4
 800f97a:	e799      	b.n	800f8b0 <__multiply+0x7c>
 800f97c:	3e01      	subs	r6, #1
 800f97e:	e79b      	b.n	800f8b8 <__multiply+0x84>
 800f980:	08011078 	.word	0x08011078
 800f984:	08011089 	.word	0x08011089

0800f988 <__pow5mult>:
 800f988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f98c:	4615      	mov	r5, r2
 800f98e:	f012 0203 	ands.w	r2, r2, #3
 800f992:	4607      	mov	r7, r0
 800f994:	460e      	mov	r6, r1
 800f996:	d007      	beq.n	800f9a8 <__pow5mult+0x20>
 800f998:	4c25      	ldr	r4, [pc, #148]	@ (800fa30 <__pow5mult+0xa8>)
 800f99a:	3a01      	subs	r2, #1
 800f99c:	2300      	movs	r3, #0
 800f99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9a2:	f7ff fe9f 	bl	800f6e4 <__multadd>
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	10ad      	asrs	r5, r5, #2
 800f9aa:	d03d      	beq.n	800fa28 <__pow5mult+0xa0>
 800f9ac:	69fc      	ldr	r4, [r7, #28]
 800f9ae:	b97c      	cbnz	r4, 800f9d0 <__pow5mult+0x48>
 800f9b0:	2010      	movs	r0, #16
 800f9b2:	f7ff fd7f 	bl	800f4b4 <malloc>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	61f8      	str	r0, [r7, #28]
 800f9ba:	b928      	cbnz	r0, 800f9c8 <__pow5mult+0x40>
 800f9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800fa34 <__pow5mult+0xac>)
 800f9be:	481e      	ldr	r0, [pc, #120]	@ (800fa38 <__pow5mult+0xb0>)
 800f9c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f9c4:	f000 fda2 	bl	801050c <__assert_func>
 800f9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9cc:	6004      	str	r4, [r0, #0]
 800f9ce:	60c4      	str	r4, [r0, #12]
 800f9d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9d8:	b94c      	cbnz	r4, 800f9ee <__pow5mult+0x66>
 800f9da:	f240 2171 	movw	r1, #625	@ 0x271
 800f9de:	4638      	mov	r0, r7
 800f9e0:	f7ff ff12 	bl	800f808 <__i2b>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	6003      	str	r3, [r0, #0]
 800f9ee:	f04f 0900 	mov.w	r9, #0
 800f9f2:	07eb      	lsls	r3, r5, #31
 800f9f4:	d50a      	bpl.n	800fa0c <__pow5mult+0x84>
 800f9f6:	4631      	mov	r1, r6
 800f9f8:	4622      	mov	r2, r4
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f7ff ff1a 	bl	800f834 <__multiply>
 800fa00:	4631      	mov	r1, r6
 800fa02:	4680      	mov	r8, r0
 800fa04:	4638      	mov	r0, r7
 800fa06:	f7ff fe4b 	bl	800f6a0 <_Bfree>
 800fa0a:	4646      	mov	r6, r8
 800fa0c:	106d      	asrs	r5, r5, #1
 800fa0e:	d00b      	beq.n	800fa28 <__pow5mult+0xa0>
 800fa10:	6820      	ldr	r0, [r4, #0]
 800fa12:	b938      	cbnz	r0, 800fa24 <__pow5mult+0x9c>
 800fa14:	4622      	mov	r2, r4
 800fa16:	4621      	mov	r1, r4
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f7ff ff0b 	bl	800f834 <__multiply>
 800fa1e:	6020      	str	r0, [r4, #0]
 800fa20:	f8c0 9000 	str.w	r9, [r0]
 800fa24:	4604      	mov	r4, r0
 800fa26:	e7e4      	b.n	800f9f2 <__pow5mult+0x6a>
 800fa28:	4630      	mov	r0, r6
 800fa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa2e:	bf00      	nop
 800fa30:	080110e4 	.word	0x080110e4
 800fa34:	08011009 	.word	0x08011009
 800fa38:	08011089 	.word	0x08011089

0800fa3c <__lshift>:
 800fa3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa40:	460c      	mov	r4, r1
 800fa42:	6849      	ldr	r1, [r1, #4]
 800fa44:	6923      	ldr	r3, [r4, #16]
 800fa46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa4a:	68a3      	ldr	r3, [r4, #8]
 800fa4c:	4607      	mov	r7, r0
 800fa4e:	4691      	mov	r9, r2
 800fa50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa54:	f108 0601 	add.w	r6, r8, #1
 800fa58:	42b3      	cmp	r3, r6
 800fa5a:	db0b      	blt.n	800fa74 <__lshift+0x38>
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	f7ff fddf 	bl	800f620 <_Balloc>
 800fa62:	4605      	mov	r5, r0
 800fa64:	b948      	cbnz	r0, 800fa7a <__lshift+0x3e>
 800fa66:	4602      	mov	r2, r0
 800fa68:	4b28      	ldr	r3, [pc, #160]	@ (800fb0c <__lshift+0xd0>)
 800fa6a:	4829      	ldr	r0, [pc, #164]	@ (800fb10 <__lshift+0xd4>)
 800fa6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fa70:	f000 fd4c 	bl	801050c <__assert_func>
 800fa74:	3101      	adds	r1, #1
 800fa76:	005b      	lsls	r3, r3, #1
 800fa78:	e7ee      	b.n	800fa58 <__lshift+0x1c>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f100 0114 	add.w	r1, r0, #20
 800fa80:	f100 0210 	add.w	r2, r0, #16
 800fa84:	4618      	mov	r0, r3
 800fa86:	4553      	cmp	r3, sl
 800fa88:	db33      	blt.n	800faf2 <__lshift+0xb6>
 800fa8a:	6920      	ldr	r0, [r4, #16]
 800fa8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa90:	f104 0314 	add.w	r3, r4, #20
 800fa94:	f019 091f 	ands.w	r9, r9, #31
 800fa98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800faa0:	d02b      	beq.n	800fafa <__lshift+0xbe>
 800faa2:	f1c9 0e20 	rsb	lr, r9, #32
 800faa6:	468a      	mov	sl, r1
 800faa8:	2200      	movs	r2, #0
 800faaa:	6818      	ldr	r0, [r3, #0]
 800faac:	fa00 f009 	lsl.w	r0, r0, r9
 800fab0:	4310      	orrs	r0, r2
 800fab2:	f84a 0b04 	str.w	r0, [sl], #4
 800fab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faba:	459c      	cmp	ip, r3
 800fabc:	fa22 f20e 	lsr.w	r2, r2, lr
 800fac0:	d8f3      	bhi.n	800faaa <__lshift+0x6e>
 800fac2:	ebac 0304 	sub.w	r3, ip, r4
 800fac6:	3b15      	subs	r3, #21
 800fac8:	f023 0303 	bic.w	r3, r3, #3
 800facc:	3304      	adds	r3, #4
 800face:	f104 0015 	add.w	r0, r4, #21
 800fad2:	4584      	cmp	ip, r0
 800fad4:	bf38      	it	cc
 800fad6:	2304      	movcc	r3, #4
 800fad8:	50ca      	str	r2, [r1, r3]
 800fada:	b10a      	cbz	r2, 800fae0 <__lshift+0xa4>
 800fadc:	f108 0602 	add.w	r6, r8, #2
 800fae0:	3e01      	subs	r6, #1
 800fae2:	4638      	mov	r0, r7
 800fae4:	612e      	str	r6, [r5, #16]
 800fae6:	4621      	mov	r1, r4
 800fae8:	f7ff fdda 	bl	800f6a0 <_Bfree>
 800faec:	4628      	mov	r0, r5
 800faee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800faf6:	3301      	adds	r3, #1
 800faf8:	e7c5      	b.n	800fa86 <__lshift+0x4a>
 800fafa:	3904      	subs	r1, #4
 800fafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb00:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb04:	459c      	cmp	ip, r3
 800fb06:	d8f9      	bhi.n	800fafc <__lshift+0xc0>
 800fb08:	e7ea      	b.n	800fae0 <__lshift+0xa4>
 800fb0a:	bf00      	nop
 800fb0c:	08011078 	.word	0x08011078
 800fb10:	08011089 	.word	0x08011089

0800fb14 <__mcmp>:
 800fb14:	690a      	ldr	r2, [r1, #16]
 800fb16:	4603      	mov	r3, r0
 800fb18:	6900      	ldr	r0, [r0, #16]
 800fb1a:	1a80      	subs	r0, r0, r2
 800fb1c:	b530      	push	{r4, r5, lr}
 800fb1e:	d10e      	bne.n	800fb3e <__mcmp+0x2a>
 800fb20:	3314      	adds	r3, #20
 800fb22:	3114      	adds	r1, #20
 800fb24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb34:	4295      	cmp	r5, r2
 800fb36:	d003      	beq.n	800fb40 <__mcmp+0x2c>
 800fb38:	d205      	bcs.n	800fb46 <__mcmp+0x32>
 800fb3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb3e:	bd30      	pop	{r4, r5, pc}
 800fb40:	42a3      	cmp	r3, r4
 800fb42:	d3f3      	bcc.n	800fb2c <__mcmp+0x18>
 800fb44:	e7fb      	b.n	800fb3e <__mcmp+0x2a>
 800fb46:	2001      	movs	r0, #1
 800fb48:	e7f9      	b.n	800fb3e <__mcmp+0x2a>
	...

0800fb4c <__mdiff>:
 800fb4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb50:	4689      	mov	r9, r1
 800fb52:	4606      	mov	r6, r0
 800fb54:	4611      	mov	r1, r2
 800fb56:	4648      	mov	r0, r9
 800fb58:	4614      	mov	r4, r2
 800fb5a:	f7ff ffdb 	bl	800fb14 <__mcmp>
 800fb5e:	1e05      	subs	r5, r0, #0
 800fb60:	d112      	bne.n	800fb88 <__mdiff+0x3c>
 800fb62:	4629      	mov	r1, r5
 800fb64:	4630      	mov	r0, r6
 800fb66:	f7ff fd5b 	bl	800f620 <_Balloc>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	b928      	cbnz	r0, 800fb7a <__mdiff+0x2e>
 800fb6e:	4b3f      	ldr	r3, [pc, #252]	@ (800fc6c <__mdiff+0x120>)
 800fb70:	f240 2137 	movw	r1, #567	@ 0x237
 800fb74:	483e      	ldr	r0, [pc, #248]	@ (800fc70 <__mdiff+0x124>)
 800fb76:	f000 fcc9 	bl	801050c <__assert_func>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb80:	4610      	mov	r0, r2
 800fb82:	b003      	add	sp, #12
 800fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb88:	bfbc      	itt	lt
 800fb8a:	464b      	movlt	r3, r9
 800fb8c:	46a1      	movlt	r9, r4
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fb94:	bfba      	itte	lt
 800fb96:	461c      	movlt	r4, r3
 800fb98:	2501      	movlt	r5, #1
 800fb9a:	2500      	movge	r5, #0
 800fb9c:	f7ff fd40 	bl	800f620 <_Balloc>
 800fba0:	4602      	mov	r2, r0
 800fba2:	b918      	cbnz	r0, 800fbac <__mdiff+0x60>
 800fba4:	4b31      	ldr	r3, [pc, #196]	@ (800fc6c <__mdiff+0x120>)
 800fba6:	f240 2145 	movw	r1, #581	@ 0x245
 800fbaa:	e7e3      	b.n	800fb74 <__mdiff+0x28>
 800fbac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fbb0:	6926      	ldr	r6, [r4, #16]
 800fbb2:	60c5      	str	r5, [r0, #12]
 800fbb4:	f109 0310 	add.w	r3, r9, #16
 800fbb8:	f109 0514 	add.w	r5, r9, #20
 800fbbc:	f104 0e14 	add.w	lr, r4, #20
 800fbc0:	f100 0b14 	add.w	fp, r0, #20
 800fbc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fbc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	46d9      	mov	r9, fp
 800fbd0:	f04f 0c00 	mov.w	ip, #0
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fbda:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	fa1f f38a 	uxth.w	r3, sl
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	b283      	uxth	r3, r0
 800fbe8:	1acb      	subs	r3, r1, r3
 800fbea:	0c00      	lsrs	r0, r0, #16
 800fbec:	4463      	add	r3, ip
 800fbee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fbf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fbfc:	4576      	cmp	r6, lr
 800fbfe:	f849 3b04 	str.w	r3, [r9], #4
 800fc02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc06:	d8e5      	bhi.n	800fbd4 <__mdiff+0x88>
 800fc08:	1b33      	subs	r3, r6, r4
 800fc0a:	3b15      	subs	r3, #21
 800fc0c:	f023 0303 	bic.w	r3, r3, #3
 800fc10:	3415      	adds	r4, #21
 800fc12:	3304      	adds	r3, #4
 800fc14:	42a6      	cmp	r6, r4
 800fc16:	bf38      	it	cc
 800fc18:	2304      	movcc	r3, #4
 800fc1a:	441d      	add	r5, r3
 800fc1c:	445b      	add	r3, fp
 800fc1e:	461e      	mov	r6, r3
 800fc20:	462c      	mov	r4, r5
 800fc22:	4544      	cmp	r4, r8
 800fc24:	d30e      	bcc.n	800fc44 <__mdiff+0xf8>
 800fc26:	f108 0103 	add.w	r1, r8, #3
 800fc2a:	1b49      	subs	r1, r1, r5
 800fc2c:	f021 0103 	bic.w	r1, r1, #3
 800fc30:	3d03      	subs	r5, #3
 800fc32:	45a8      	cmp	r8, r5
 800fc34:	bf38      	it	cc
 800fc36:	2100      	movcc	r1, #0
 800fc38:	440b      	add	r3, r1
 800fc3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc3e:	b191      	cbz	r1, 800fc66 <__mdiff+0x11a>
 800fc40:	6117      	str	r7, [r2, #16]
 800fc42:	e79d      	b.n	800fb80 <__mdiff+0x34>
 800fc44:	f854 1b04 	ldr.w	r1, [r4], #4
 800fc48:	46e6      	mov	lr, ip
 800fc4a:	0c08      	lsrs	r0, r1, #16
 800fc4c:	fa1c fc81 	uxtah	ip, ip, r1
 800fc50:	4471      	add	r1, lr
 800fc52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fc56:	b289      	uxth	r1, r1
 800fc58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fc5c:	f846 1b04 	str.w	r1, [r6], #4
 800fc60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc64:	e7dd      	b.n	800fc22 <__mdiff+0xd6>
 800fc66:	3f01      	subs	r7, #1
 800fc68:	e7e7      	b.n	800fc3a <__mdiff+0xee>
 800fc6a:	bf00      	nop
 800fc6c:	08011078 	.word	0x08011078
 800fc70:	08011089 	.word	0x08011089

0800fc74 <__d2b>:
 800fc74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc78:	460f      	mov	r7, r1
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	ec59 8b10 	vmov	r8, r9, d0
 800fc80:	4616      	mov	r6, r2
 800fc82:	f7ff fccd 	bl	800f620 <_Balloc>
 800fc86:	4604      	mov	r4, r0
 800fc88:	b930      	cbnz	r0, 800fc98 <__d2b+0x24>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	4b23      	ldr	r3, [pc, #140]	@ (800fd1c <__d2b+0xa8>)
 800fc8e:	4824      	ldr	r0, [pc, #144]	@ (800fd20 <__d2b+0xac>)
 800fc90:	f240 310f 	movw	r1, #783	@ 0x30f
 800fc94:	f000 fc3a 	bl	801050c <__assert_func>
 800fc98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fca0:	b10d      	cbz	r5, 800fca6 <__d2b+0x32>
 800fca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	f1b8 0300 	subs.w	r3, r8, #0
 800fcac:	d023      	beq.n	800fcf6 <__d2b+0x82>
 800fcae:	4668      	mov	r0, sp
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	f7ff fd7c 	bl	800f7ae <__lo0bits>
 800fcb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fcba:	b1d0      	cbz	r0, 800fcf2 <__d2b+0x7e>
 800fcbc:	f1c0 0320 	rsb	r3, r0, #32
 800fcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc4:	430b      	orrs	r3, r1
 800fcc6:	40c2      	lsrs	r2, r0
 800fcc8:	6163      	str	r3, [r4, #20]
 800fcca:	9201      	str	r2, [sp, #4]
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	61a3      	str	r3, [r4, #24]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	bf0c      	ite	eq
 800fcd4:	2201      	moveq	r2, #1
 800fcd6:	2202      	movne	r2, #2
 800fcd8:	6122      	str	r2, [r4, #16]
 800fcda:	b1a5      	cbz	r5, 800fd06 <__d2b+0x92>
 800fcdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fce0:	4405      	add	r5, r0
 800fce2:	603d      	str	r5, [r7, #0]
 800fce4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fce8:	6030      	str	r0, [r6, #0]
 800fcea:	4620      	mov	r0, r4
 800fcec:	b003      	add	sp, #12
 800fcee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf2:	6161      	str	r1, [r4, #20]
 800fcf4:	e7ea      	b.n	800fccc <__d2b+0x58>
 800fcf6:	a801      	add	r0, sp, #4
 800fcf8:	f7ff fd59 	bl	800f7ae <__lo0bits>
 800fcfc:	9b01      	ldr	r3, [sp, #4]
 800fcfe:	6163      	str	r3, [r4, #20]
 800fd00:	3020      	adds	r0, #32
 800fd02:	2201      	movs	r2, #1
 800fd04:	e7e8      	b.n	800fcd8 <__d2b+0x64>
 800fd06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fd0e:	6038      	str	r0, [r7, #0]
 800fd10:	6918      	ldr	r0, [r3, #16]
 800fd12:	f7ff fd2d 	bl	800f770 <__hi0bits>
 800fd16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd1a:	e7e5      	b.n	800fce8 <__d2b+0x74>
 800fd1c:	08011078 	.word	0x08011078
 800fd20:	08011089 	.word	0x08011089

0800fd24 <__ssputs_r>:
 800fd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd28:	688e      	ldr	r6, [r1, #8]
 800fd2a:	461f      	mov	r7, r3
 800fd2c:	42be      	cmp	r6, r7
 800fd2e:	680b      	ldr	r3, [r1, #0]
 800fd30:	4682      	mov	sl, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	4690      	mov	r8, r2
 800fd36:	d82d      	bhi.n	800fd94 <__ssputs_r+0x70>
 800fd38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fd40:	d026      	beq.n	800fd90 <__ssputs_r+0x6c>
 800fd42:	6965      	ldr	r5, [r4, #20]
 800fd44:	6909      	ldr	r1, [r1, #16]
 800fd46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd4a:	eba3 0901 	sub.w	r9, r3, r1
 800fd4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd52:	1c7b      	adds	r3, r7, #1
 800fd54:	444b      	add	r3, r9
 800fd56:	106d      	asrs	r5, r5, #1
 800fd58:	429d      	cmp	r5, r3
 800fd5a:	bf38      	it	cc
 800fd5c:	461d      	movcc	r5, r3
 800fd5e:	0553      	lsls	r3, r2, #21
 800fd60:	d527      	bpl.n	800fdb2 <__ssputs_r+0x8e>
 800fd62:	4629      	mov	r1, r5
 800fd64:	f7ff fbd0 	bl	800f508 <_malloc_r>
 800fd68:	4606      	mov	r6, r0
 800fd6a:	b360      	cbz	r0, 800fdc6 <__ssputs_r+0xa2>
 800fd6c:	6921      	ldr	r1, [r4, #16]
 800fd6e:	464a      	mov	r2, r9
 800fd70:	f7fe fcfb 	bl	800e76a <memcpy>
 800fd74:	89a3      	ldrh	r3, [r4, #12]
 800fd76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fd7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd7e:	81a3      	strh	r3, [r4, #12]
 800fd80:	6126      	str	r6, [r4, #16]
 800fd82:	6165      	str	r5, [r4, #20]
 800fd84:	444e      	add	r6, r9
 800fd86:	eba5 0509 	sub.w	r5, r5, r9
 800fd8a:	6026      	str	r6, [r4, #0]
 800fd8c:	60a5      	str	r5, [r4, #8]
 800fd8e:	463e      	mov	r6, r7
 800fd90:	42be      	cmp	r6, r7
 800fd92:	d900      	bls.n	800fd96 <__ssputs_r+0x72>
 800fd94:	463e      	mov	r6, r7
 800fd96:	6820      	ldr	r0, [r4, #0]
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4641      	mov	r1, r8
 800fd9c:	f000 fb6a 	bl	8010474 <memmove>
 800fda0:	68a3      	ldr	r3, [r4, #8]
 800fda2:	1b9b      	subs	r3, r3, r6
 800fda4:	60a3      	str	r3, [r4, #8]
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	4433      	add	r3, r6
 800fdaa:	6023      	str	r3, [r4, #0]
 800fdac:	2000      	movs	r0, #0
 800fdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdb2:	462a      	mov	r2, r5
 800fdb4:	f000 fbee 	bl	8010594 <_realloc_r>
 800fdb8:	4606      	mov	r6, r0
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d1e0      	bne.n	800fd80 <__ssputs_r+0x5c>
 800fdbe:	6921      	ldr	r1, [r4, #16]
 800fdc0:	4650      	mov	r0, sl
 800fdc2:	f7ff fb2d 	bl	800f420 <_free_r>
 800fdc6:	230c      	movs	r3, #12
 800fdc8:	f8ca 3000 	str.w	r3, [sl]
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdd2:	81a3      	strh	r3, [r4, #12]
 800fdd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fdd8:	e7e9      	b.n	800fdae <__ssputs_r+0x8a>
	...

0800fddc <_svfiprintf_r>:
 800fddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde0:	4698      	mov	r8, r3
 800fde2:	898b      	ldrh	r3, [r1, #12]
 800fde4:	061b      	lsls	r3, r3, #24
 800fde6:	b09d      	sub	sp, #116	@ 0x74
 800fde8:	4607      	mov	r7, r0
 800fdea:	460d      	mov	r5, r1
 800fdec:	4614      	mov	r4, r2
 800fdee:	d510      	bpl.n	800fe12 <_svfiprintf_r+0x36>
 800fdf0:	690b      	ldr	r3, [r1, #16]
 800fdf2:	b973      	cbnz	r3, 800fe12 <_svfiprintf_r+0x36>
 800fdf4:	2140      	movs	r1, #64	@ 0x40
 800fdf6:	f7ff fb87 	bl	800f508 <_malloc_r>
 800fdfa:	6028      	str	r0, [r5, #0]
 800fdfc:	6128      	str	r0, [r5, #16]
 800fdfe:	b930      	cbnz	r0, 800fe0e <_svfiprintf_r+0x32>
 800fe00:	230c      	movs	r3, #12
 800fe02:	603b      	str	r3, [r7, #0]
 800fe04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe08:	b01d      	add	sp, #116	@ 0x74
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0e:	2340      	movs	r3, #64	@ 0x40
 800fe10:	616b      	str	r3, [r5, #20]
 800fe12:	2300      	movs	r3, #0
 800fe14:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe16:	2320      	movs	r3, #32
 800fe18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe20:	2330      	movs	r3, #48	@ 0x30
 800fe22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ffc0 <_svfiprintf_r+0x1e4>
 800fe26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe2a:	f04f 0901 	mov.w	r9, #1
 800fe2e:	4623      	mov	r3, r4
 800fe30:	469a      	mov	sl, r3
 800fe32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe36:	b10a      	cbz	r2, 800fe3c <_svfiprintf_r+0x60>
 800fe38:	2a25      	cmp	r2, #37	@ 0x25
 800fe3a:	d1f9      	bne.n	800fe30 <_svfiprintf_r+0x54>
 800fe3c:	ebba 0b04 	subs.w	fp, sl, r4
 800fe40:	d00b      	beq.n	800fe5a <_svfiprintf_r+0x7e>
 800fe42:	465b      	mov	r3, fp
 800fe44:	4622      	mov	r2, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f7ff ff6b 	bl	800fd24 <__ssputs_r>
 800fe4e:	3001      	adds	r0, #1
 800fe50:	f000 80a7 	beq.w	800ffa2 <_svfiprintf_r+0x1c6>
 800fe54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe56:	445a      	add	r2, fp
 800fe58:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f000 809f 	beq.w	800ffa2 <_svfiprintf_r+0x1c6>
 800fe64:	2300      	movs	r3, #0
 800fe66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe6e:	f10a 0a01 	add.w	sl, sl, #1
 800fe72:	9304      	str	r3, [sp, #16]
 800fe74:	9307      	str	r3, [sp, #28]
 800fe76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe7c:	4654      	mov	r4, sl
 800fe7e:	2205      	movs	r2, #5
 800fe80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe84:	484e      	ldr	r0, [pc, #312]	@ (800ffc0 <_svfiprintf_r+0x1e4>)
 800fe86:	f7f0 f9ab 	bl	80001e0 <memchr>
 800fe8a:	9a04      	ldr	r2, [sp, #16]
 800fe8c:	b9d8      	cbnz	r0, 800fec6 <_svfiprintf_r+0xea>
 800fe8e:	06d0      	lsls	r0, r2, #27
 800fe90:	bf44      	itt	mi
 800fe92:	2320      	movmi	r3, #32
 800fe94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe98:	0711      	lsls	r1, r2, #28
 800fe9a:	bf44      	itt	mi
 800fe9c:	232b      	movmi	r3, #43	@ 0x2b
 800fe9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fea2:	f89a 3000 	ldrb.w	r3, [sl]
 800fea6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fea8:	d015      	beq.n	800fed6 <_svfiprintf_r+0xfa>
 800feaa:	9a07      	ldr	r2, [sp, #28]
 800feac:	4654      	mov	r4, sl
 800feae:	2000      	movs	r0, #0
 800feb0:	f04f 0c0a 	mov.w	ip, #10
 800feb4:	4621      	mov	r1, r4
 800feb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feba:	3b30      	subs	r3, #48	@ 0x30
 800febc:	2b09      	cmp	r3, #9
 800febe:	d94b      	bls.n	800ff58 <_svfiprintf_r+0x17c>
 800fec0:	b1b0      	cbz	r0, 800fef0 <_svfiprintf_r+0x114>
 800fec2:	9207      	str	r2, [sp, #28]
 800fec4:	e014      	b.n	800fef0 <_svfiprintf_r+0x114>
 800fec6:	eba0 0308 	sub.w	r3, r0, r8
 800feca:	fa09 f303 	lsl.w	r3, r9, r3
 800fece:	4313      	orrs	r3, r2
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	46a2      	mov	sl, r4
 800fed4:	e7d2      	b.n	800fe7c <_svfiprintf_r+0xa0>
 800fed6:	9b03      	ldr	r3, [sp, #12]
 800fed8:	1d19      	adds	r1, r3, #4
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	9103      	str	r1, [sp, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	bfbb      	ittet	lt
 800fee2:	425b      	neglt	r3, r3
 800fee4:	f042 0202 	orrlt.w	r2, r2, #2
 800fee8:	9307      	strge	r3, [sp, #28]
 800feea:	9307      	strlt	r3, [sp, #28]
 800feec:	bfb8      	it	lt
 800feee:	9204      	strlt	r2, [sp, #16]
 800fef0:	7823      	ldrb	r3, [r4, #0]
 800fef2:	2b2e      	cmp	r3, #46	@ 0x2e
 800fef4:	d10a      	bne.n	800ff0c <_svfiprintf_r+0x130>
 800fef6:	7863      	ldrb	r3, [r4, #1]
 800fef8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fefa:	d132      	bne.n	800ff62 <_svfiprintf_r+0x186>
 800fefc:	9b03      	ldr	r3, [sp, #12]
 800fefe:	1d1a      	adds	r2, r3, #4
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	9203      	str	r2, [sp, #12]
 800ff04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff08:	3402      	adds	r4, #2
 800ff0a:	9305      	str	r3, [sp, #20]
 800ff0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ffd0 <_svfiprintf_r+0x1f4>
 800ff10:	7821      	ldrb	r1, [r4, #0]
 800ff12:	2203      	movs	r2, #3
 800ff14:	4650      	mov	r0, sl
 800ff16:	f7f0 f963 	bl	80001e0 <memchr>
 800ff1a:	b138      	cbz	r0, 800ff2c <_svfiprintf_r+0x150>
 800ff1c:	9b04      	ldr	r3, [sp, #16]
 800ff1e:	eba0 000a 	sub.w	r0, r0, sl
 800ff22:	2240      	movs	r2, #64	@ 0x40
 800ff24:	4082      	lsls	r2, r0
 800ff26:	4313      	orrs	r3, r2
 800ff28:	3401      	adds	r4, #1
 800ff2a:	9304      	str	r3, [sp, #16]
 800ff2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff30:	4824      	ldr	r0, [pc, #144]	@ (800ffc4 <_svfiprintf_r+0x1e8>)
 800ff32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff36:	2206      	movs	r2, #6
 800ff38:	f7f0 f952 	bl	80001e0 <memchr>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d036      	beq.n	800ffae <_svfiprintf_r+0x1d2>
 800ff40:	4b21      	ldr	r3, [pc, #132]	@ (800ffc8 <_svfiprintf_r+0x1ec>)
 800ff42:	bb1b      	cbnz	r3, 800ff8c <_svfiprintf_r+0x1b0>
 800ff44:	9b03      	ldr	r3, [sp, #12]
 800ff46:	3307      	adds	r3, #7
 800ff48:	f023 0307 	bic.w	r3, r3, #7
 800ff4c:	3308      	adds	r3, #8
 800ff4e:	9303      	str	r3, [sp, #12]
 800ff50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff52:	4433      	add	r3, r6
 800ff54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff56:	e76a      	b.n	800fe2e <_svfiprintf_r+0x52>
 800ff58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	2001      	movs	r0, #1
 800ff60:	e7a8      	b.n	800feb4 <_svfiprintf_r+0xd8>
 800ff62:	2300      	movs	r3, #0
 800ff64:	3401      	adds	r4, #1
 800ff66:	9305      	str	r3, [sp, #20]
 800ff68:	4619      	mov	r1, r3
 800ff6a:	f04f 0c0a 	mov.w	ip, #10
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff74:	3a30      	subs	r2, #48	@ 0x30
 800ff76:	2a09      	cmp	r2, #9
 800ff78:	d903      	bls.n	800ff82 <_svfiprintf_r+0x1a6>
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d0c6      	beq.n	800ff0c <_svfiprintf_r+0x130>
 800ff7e:	9105      	str	r1, [sp, #20]
 800ff80:	e7c4      	b.n	800ff0c <_svfiprintf_r+0x130>
 800ff82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff86:	4604      	mov	r4, r0
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e7f0      	b.n	800ff6e <_svfiprintf_r+0x192>
 800ff8c:	ab03      	add	r3, sp, #12
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	462a      	mov	r2, r5
 800ff92:	4b0e      	ldr	r3, [pc, #56]	@ (800ffcc <_svfiprintf_r+0x1f0>)
 800ff94:	a904      	add	r1, sp, #16
 800ff96:	4638      	mov	r0, r7
 800ff98:	f7fd fd2e 	bl	800d9f8 <_printf_float>
 800ff9c:	1c42      	adds	r2, r0, #1
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	d1d6      	bne.n	800ff50 <_svfiprintf_r+0x174>
 800ffa2:	89ab      	ldrh	r3, [r5, #12]
 800ffa4:	065b      	lsls	r3, r3, #25
 800ffa6:	f53f af2d 	bmi.w	800fe04 <_svfiprintf_r+0x28>
 800ffaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ffac:	e72c      	b.n	800fe08 <_svfiprintf_r+0x2c>
 800ffae:	ab03      	add	r3, sp, #12
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	462a      	mov	r2, r5
 800ffb4:	4b05      	ldr	r3, [pc, #20]	@ (800ffcc <_svfiprintf_r+0x1f0>)
 800ffb6:	a904      	add	r1, sp, #16
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f7fd ffb5 	bl	800df28 <_printf_i>
 800ffbe:	e7ed      	b.n	800ff9c <_svfiprintf_r+0x1c0>
 800ffc0:	080111e0 	.word	0x080111e0
 800ffc4:	080111ea 	.word	0x080111ea
 800ffc8:	0800d9f9 	.word	0x0800d9f9
 800ffcc:	0800fd25 	.word	0x0800fd25
 800ffd0:	080111e6 	.word	0x080111e6

0800ffd4 <__sfputc_r>:
 800ffd4:	6893      	ldr	r3, [r2, #8]
 800ffd6:	3b01      	subs	r3, #1
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	b410      	push	{r4}
 800ffdc:	6093      	str	r3, [r2, #8]
 800ffde:	da08      	bge.n	800fff2 <__sfputc_r+0x1e>
 800ffe0:	6994      	ldr	r4, [r2, #24]
 800ffe2:	42a3      	cmp	r3, r4
 800ffe4:	db01      	blt.n	800ffea <__sfputc_r+0x16>
 800ffe6:	290a      	cmp	r1, #10
 800ffe8:	d103      	bne.n	800fff2 <__sfputc_r+0x1e>
 800ffea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffee:	f7fe ba84 	b.w	800e4fa <__swbuf_r>
 800fff2:	6813      	ldr	r3, [r2, #0]
 800fff4:	1c58      	adds	r0, r3, #1
 800fff6:	6010      	str	r0, [r2, #0]
 800fff8:	7019      	strb	r1, [r3, #0]
 800fffa:	4608      	mov	r0, r1
 800fffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010000:	4770      	bx	lr

08010002 <__sfputs_r>:
 8010002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010004:	4606      	mov	r6, r0
 8010006:	460f      	mov	r7, r1
 8010008:	4614      	mov	r4, r2
 801000a:	18d5      	adds	r5, r2, r3
 801000c:	42ac      	cmp	r4, r5
 801000e:	d101      	bne.n	8010014 <__sfputs_r+0x12>
 8010010:	2000      	movs	r0, #0
 8010012:	e007      	b.n	8010024 <__sfputs_r+0x22>
 8010014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010018:	463a      	mov	r2, r7
 801001a:	4630      	mov	r0, r6
 801001c:	f7ff ffda 	bl	800ffd4 <__sfputc_r>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d1f3      	bne.n	801000c <__sfputs_r+0xa>
 8010024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010028 <_vfiprintf_r>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	460d      	mov	r5, r1
 801002e:	b09d      	sub	sp, #116	@ 0x74
 8010030:	4614      	mov	r4, r2
 8010032:	4698      	mov	r8, r3
 8010034:	4606      	mov	r6, r0
 8010036:	b118      	cbz	r0, 8010040 <_vfiprintf_r+0x18>
 8010038:	6a03      	ldr	r3, [r0, #32]
 801003a:	b90b      	cbnz	r3, 8010040 <_vfiprintf_r+0x18>
 801003c:	f7fe f920 	bl	800e280 <__sinit>
 8010040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010042:	07d9      	lsls	r1, r3, #31
 8010044:	d405      	bmi.n	8010052 <_vfiprintf_r+0x2a>
 8010046:	89ab      	ldrh	r3, [r5, #12]
 8010048:	059a      	lsls	r2, r3, #22
 801004a:	d402      	bmi.n	8010052 <_vfiprintf_r+0x2a>
 801004c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801004e:	f7fe fb8a 	bl	800e766 <__retarget_lock_acquire_recursive>
 8010052:	89ab      	ldrh	r3, [r5, #12]
 8010054:	071b      	lsls	r3, r3, #28
 8010056:	d501      	bpl.n	801005c <_vfiprintf_r+0x34>
 8010058:	692b      	ldr	r3, [r5, #16]
 801005a:	b99b      	cbnz	r3, 8010084 <_vfiprintf_r+0x5c>
 801005c:	4629      	mov	r1, r5
 801005e:	4630      	mov	r0, r6
 8010060:	f7fe fa8a 	bl	800e578 <__swsetup_r>
 8010064:	b170      	cbz	r0, 8010084 <_vfiprintf_r+0x5c>
 8010066:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010068:	07dc      	lsls	r4, r3, #31
 801006a:	d504      	bpl.n	8010076 <_vfiprintf_r+0x4e>
 801006c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010070:	b01d      	add	sp, #116	@ 0x74
 8010072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010076:	89ab      	ldrh	r3, [r5, #12]
 8010078:	0598      	lsls	r0, r3, #22
 801007a:	d4f7      	bmi.n	801006c <_vfiprintf_r+0x44>
 801007c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801007e:	f7fe fb73 	bl	800e768 <__retarget_lock_release_recursive>
 8010082:	e7f3      	b.n	801006c <_vfiprintf_r+0x44>
 8010084:	2300      	movs	r3, #0
 8010086:	9309      	str	r3, [sp, #36]	@ 0x24
 8010088:	2320      	movs	r3, #32
 801008a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801008e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010092:	2330      	movs	r3, #48	@ 0x30
 8010094:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010244 <_vfiprintf_r+0x21c>
 8010098:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801009c:	f04f 0901 	mov.w	r9, #1
 80100a0:	4623      	mov	r3, r4
 80100a2:	469a      	mov	sl, r3
 80100a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100a8:	b10a      	cbz	r2, 80100ae <_vfiprintf_r+0x86>
 80100aa:	2a25      	cmp	r2, #37	@ 0x25
 80100ac:	d1f9      	bne.n	80100a2 <_vfiprintf_r+0x7a>
 80100ae:	ebba 0b04 	subs.w	fp, sl, r4
 80100b2:	d00b      	beq.n	80100cc <_vfiprintf_r+0xa4>
 80100b4:	465b      	mov	r3, fp
 80100b6:	4622      	mov	r2, r4
 80100b8:	4629      	mov	r1, r5
 80100ba:	4630      	mov	r0, r6
 80100bc:	f7ff ffa1 	bl	8010002 <__sfputs_r>
 80100c0:	3001      	adds	r0, #1
 80100c2:	f000 80a7 	beq.w	8010214 <_vfiprintf_r+0x1ec>
 80100c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100c8:	445a      	add	r2, fp
 80100ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80100cc:	f89a 3000 	ldrb.w	r3, [sl]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f000 809f 	beq.w	8010214 <_vfiprintf_r+0x1ec>
 80100d6:	2300      	movs	r3, #0
 80100d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100e0:	f10a 0a01 	add.w	sl, sl, #1
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	9307      	str	r3, [sp, #28]
 80100e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80100ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80100ee:	4654      	mov	r4, sl
 80100f0:	2205      	movs	r2, #5
 80100f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100f6:	4853      	ldr	r0, [pc, #332]	@ (8010244 <_vfiprintf_r+0x21c>)
 80100f8:	f7f0 f872 	bl	80001e0 <memchr>
 80100fc:	9a04      	ldr	r2, [sp, #16]
 80100fe:	b9d8      	cbnz	r0, 8010138 <_vfiprintf_r+0x110>
 8010100:	06d1      	lsls	r1, r2, #27
 8010102:	bf44      	itt	mi
 8010104:	2320      	movmi	r3, #32
 8010106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801010a:	0713      	lsls	r3, r2, #28
 801010c:	bf44      	itt	mi
 801010e:	232b      	movmi	r3, #43	@ 0x2b
 8010110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010114:	f89a 3000 	ldrb.w	r3, [sl]
 8010118:	2b2a      	cmp	r3, #42	@ 0x2a
 801011a:	d015      	beq.n	8010148 <_vfiprintf_r+0x120>
 801011c:	9a07      	ldr	r2, [sp, #28]
 801011e:	4654      	mov	r4, sl
 8010120:	2000      	movs	r0, #0
 8010122:	f04f 0c0a 	mov.w	ip, #10
 8010126:	4621      	mov	r1, r4
 8010128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801012c:	3b30      	subs	r3, #48	@ 0x30
 801012e:	2b09      	cmp	r3, #9
 8010130:	d94b      	bls.n	80101ca <_vfiprintf_r+0x1a2>
 8010132:	b1b0      	cbz	r0, 8010162 <_vfiprintf_r+0x13a>
 8010134:	9207      	str	r2, [sp, #28]
 8010136:	e014      	b.n	8010162 <_vfiprintf_r+0x13a>
 8010138:	eba0 0308 	sub.w	r3, r0, r8
 801013c:	fa09 f303 	lsl.w	r3, r9, r3
 8010140:	4313      	orrs	r3, r2
 8010142:	9304      	str	r3, [sp, #16]
 8010144:	46a2      	mov	sl, r4
 8010146:	e7d2      	b.n	80100ee <_vfiprintf_r+0xc6>
 8010148:	9b03      	ldr	r3, [sp, #12]
 801014a:	1d19      	adds	r1, r3, #4
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	9103      	str	r1, [sp, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	bfbb      	ittet	lt
 8010154:	425b      	neglt	r3, r3
 8010156:	f042 0202 	orrlt.w	r2, r2, #2
 801015a:	9307      	strge	r3, [sp, #28]
 801015c:	9307      	strlt	r3, [sp, #28]
 801015e:	bfb8      	it	lt
 8010160:	9204      	strlt	r2, [sp, #16]
 8010162:	7823      	ldrb	r3, [r4, #0]
 8010164:	2b2e      	cmp	r3, #46	@ 0x2e
 8010166:	d10a      	bne.n	801017e <_vfiprintf_r+0x156>
 8010168:	7863      	ldrb	r3, [r4, #1]
 801016a:	2b2a      	cmp	r3, #42	@ 0x2a
 801016c:	d132      	bne.n	80101d4 <_vfiprintf_r+0x1ac>
 801016e:	9b03      	ldr	r3, [sp, #12]
 8010170:	1d1a      	adds	r2, r3, #4
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	9203      	str	r2, [sp, #12]
 8010176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801017a:	3402      	adds	r4, #2
 801017c:	9305      	str	r3, [sp, #20]
 801017e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010254 <_vfiprintf_r+0x22c>
 8010182:	7821      	ldrb	r1, [r4, #0]
 8010184:	2203      	movs	r2, #3
 8010186:	4650      	mov	r0, sl
 8010188:	f7f0 f82a 	bl	80001e0 <memchr>
 801018c:	b138      	cbz	r0, 801019e <_vfiprintf_r+0x176>
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	eba0 000a 	sub.w	r0, r0, sl
 8010194:	2240      	movs	r2, #64	@ 0x40
 8010196:	4082      	lsls	r2, r0
 8010198:	4313      	orrs	r3, r2
 801019a:	3401      	adds	r4, #1
 801019c:	9304      	str	r3, [sp, #16]
 801019e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101a2:	4829      	ldr	r0, [pc, #164]	@ (8010248 <_vfiprintf_r+0x220>)
 80101a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101a8:	2206      	movs	r2, #6
 80101aa:	f7f0 f819 	bl	80001e0 <memchr>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d03f      	beq.n	8010232 <_vfiprintf_r+0x20a>
 80101b2:	4b26      	ldr	r3, [pc, #152]	@ (801024c <_vfiprintf_r+0x224>)
 80101b4:	bb1b      	cbnz	r3, 80101fe <_vfiprintf_r+0x1d6>
 80101b6:	9b03      	ldr	r3, [sp, #12]
 80101b8:	3307      	adds	r3, #7
 80101ba:	f023 0307 	bic.w	r3, r3, #7
 80101be:	3308      	adds	r3, #8
 80101c0:	9303      	str	r3, [sp, #12]
 80101c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101c4:	443b      	add	r3, r7
 80101c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80101c8:	e76a      	b.n	80100a0 <_vfiprintf_r+0x78>
 80101ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80101ce:	460c      	mov	r4, r1
 80101d0:	2001      	movs	r0, #1
 80101d2:	e7a8      	b.n	8010126 <_vfiprintf_r+0xfe>
 80101d4:	2300      	movs	r3, #0
 80101d6:	3401      	adds	r4, #1
 80101d8:	9305      	str	r3, [sp, #20]
 80101da:	4619      	mov	r1, r3
 80101dc:	f04f 0c0a 	mov.w	ip, #10
 80101e0:	4620      	mov	r0, r4
 80101e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e6:	3a30      	subs	r2, #48	@ 0x30
 80101e8:	2a09      	cmp	r2, #9
 80101ea:	d903      	bls.n	80101f4 <_vfiprintf_r+0x1cc>
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0c6      	beq.n	801017e <_vfiprintf_r+0x156>
 80101f0:	9105      	str	r1, [sp, #20]
 80101f2:	e7c4      	b.n	801017e <_vfiprintf_r+0x156>
 80101f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80101f8:	4604      	mov	r4, r0
 80101fa:	2301      	movs	r3, #1
 80101fc:	e7f0      	b.n	80101e0 <_vfiprintf_r+0x1b8>
 80101fe:	ab03      	add	r3, sp, #12
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	462a      	mov	r2, r5
 8010204:	4b12      	ldr	r3, [pc, #72]	@ (8010250 <_vfiprintf_r+0x228>)
 8010206:	a904      	add	r1, sp, #16
 8010208:	4630      	mov	r0, r6
 801020a:	f7fd fbf5 	bl	800d9f8 <_printf_float>
 801020e:	4607      	mov	r7, r0
 8010210:	1c78      	adds	r0, r7, #1
 8010212:	d1d6      	bne.n	80101c2 <_vfiprintf_r+0x19a>
 8010214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010216:	07d9      	lsls	r1, r3, #31
 8010218:	d405      	bmi.n	8010226 <_vfiprintf_r+0x1fe>
 801021a:	89ab      	ldrh	r3, [r5, #12]
 801021c:	059a      	lsls	r2, r3, #22
 801021e:	d402      	bmi.n	8010226 <_vfiprintf_r+0x1fe>
 8010220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010222:	f7fe faa1 	bl	800e768 <__retarget_lock_release_recursive>
 8010226:	89ab      	ldrh	r3, [r5, #12]
 8010228:	065b      	lsls	r3, r3, #25
 801022a:	f53f af1f 	bmi.w	801006c <_vfiprintf_r+0x44>
 801022e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010230:	e71e      	b.n	8010070 <_vfiprintf_r+0x48>
 8010232:	ab03      	add	r3, sp, #12
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	462a      	mov	r2, r5
 8010238:	4b05      	ldr	r3, [pc, #20]	@ (8010250 <_vfiprintf_r+0x228>)
 801023a:	a904      	add	r1, sp, #16
 801023c:	4630      	mov	r0, r6
 801023e:	f7fd fe73 	bl	800df28 <_printf_i>
 8010242:	e7e4      	b.n	801020e <_vfiprintf_r+0x1e6>
 8010244:	080111e0 	.word	0x080111e0
 8010248:	080111ea 	.word	0x080111ea
 801024c:	0800d9f9 	.word	0x0800d9f9
 8010250:	08010003 	.word	0x08010003
 8010254:	080111e6 	.word	0x080111e6

08010258 <__sflush_r>:
 8010258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010260:	0716      	lsls	r6, r2, #28
 8010262:	4605      	mov	r5, r0
 8010264:	460c      	mov	r4, r1
 8010266:	d454      	bmi.n	8010312 <__sflush_r+0xba>
 8010268:	684b      	ldr	r3, [r1, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	dc02      	bgt.n	8010274 <__sflush_r+0x1c>
 801026e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010270:	2b00      	cmp	r3, #0
 8010272:	dd48      	ble.n	8010306 <__sflush_r+0xae>
 8010274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010276:	2e00      	cmp	r6, #0
 8010278:	d045      	beq.n	8010306 <__sflush_r+0xae>
 801027a:	2300      	movs	r3, #0
 801027c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010280:	682f      	ldr	r7, [r5, #0]
 8010282:	6a21      	ldr	r1, [r4, #32]
 8010284:	602b      	str	r3, [r5, #0]
 8010286:	d030      	beq.n	80102ea <__sflush_r+0x92>
 8010288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	0759      	lsls	r1, r3, #29
 801028e:	d505      	bpl.n	801029c <__sflush_r+0x44>
 8010290:	6863      	ldr	r3, [r4, #4]
 8010292:	1ad2      	subs	r2, r2, r3
 8010294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010296:	b10b      	cbz	r3, 801029c <__sflush_r+0x44>
 8010298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801029a:	1ad2      	subs	r2, r2, r3
 801029c:	2300      	movs	r3, #0
 801029e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102a0:	6a21      	ldr	r1, [r4, #32]
 80102a2:	4628      	mov	r0, r5
 80102a4:	47b0      	blx	r6
 80102a6:	1c43      	adds	r3, r0, #1
 80102a8:	89a3      	ldrh	r3, [r4, #12]
 80102aa:	d106      	bne.n	80102ba <__sflush_r+0x62>
 80102ac:	6829      	ldr	r1, [r5, #0]
 80102ae:	291d      	cmp	r1, #29
 80102b0:	d82b      	bhi.n	801030a <__sflush_r+0xb2>
 80102b2:	4a2a      	ldr	r2, [pc, #168]	@ (801035c <__sflush_r+0x104>)
 80102b4:	410a      	asrs	r2, r1
 80102b6:	07d6      	lsls	r6, r2, #31
 80102b8:	d427      	bmi.n	801030a <__sflush_r+0xb2>
 80102ba:	2200      	movs	r2, #0
 80102bc:	6062      	str	r2, [r4, #4]
 80102be:	04d9      	lsls	r1, r3, #19
 80102c0:	6922      	ldr	r2, [r4, #16]
 80102c2:	6022      	str	r2, [r4, #0]
 80102c4:	d504      	bpl.n	80102d0 <__sflush_r+0x78>
 80102c6:	1c42      	adds	r2, r0, #1
 80102c8:	d101      	bne.n	80102ce <__sflush_r+0x76>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	b903      	cbnz	r3, 80102d0 <__sflush_r+0x78>
 80102ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80102d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102d2:	602f      	str	r7, [r5, #0]
 80102d4:	b1b9      	cbz	r1, 8010306 <__sflush_r+0xae>
 80102d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80102da:	4299      	cmp	r1, r3
 80102dc:	d002      	beq.n	80102e4 <__sflush_r+0x8c>
 80102de:	4628      	mov	r0, r5
 80102e0:	f7ff f89e 	bl	800f420 <_free_r>
 80102e4:	2300      	movs	r3, #0
 80102e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80102e8:	e00d      	b.n	8010306 <__sflush_r+0xae>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4628      	mov	r0, r5
 80102ee:	47b0      	blx	r6
 80102f0:	4602      	mov	r2, r0
 80102f2:	1c50      	adds	r0, r2, #1
 80102f4:	d1c9      	bne.n	801028a <__sflush_r+0x32>
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d0c6      	beq.n	801028a <__sflush_r+0x32>
 80102fc:	2b1d      	cmp	r3, #29
 80102fe:	d001      	beq.n	8010304 <__sflush_r+0xac>
 8010300:	2b16      	cmp	r3, #22
 8010302:	d11e      	bne.n	8010342 <__sflush_r+0xea>
 8010304:	602f      	str	r7, [r5, #0]
 8010306:	2000      	movs	r0, #0
 8010308:	e022      	b.n	8010350 <__sflush_r+0xf8>
 801030a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801030e:	b21b      	sxth	r3, r3
 8010310:	e01b      	b.n	801034a <__sflush_r+0xf2>
 8010312:	690f      	ldr	r7, [r1, #16]
 8010314:	2f00      	cmp	r7, #0
 8010316:	d0f6      	beq.n	8010306 <__sflush_r+0xae>
 8010318:	0793      	lsls	r3, r2, #30
 801031a:	680e      	ldr	r6, [r1, #0]
 801031c:	bf08      	it	eq
 801031e:	694b      	ldreq	r3, [r1, #20]
 8010320:	600f      	str	r7, [r1, #0]
 8010322:	bf18      	it	ne
 8010324:	2300      	movne	r3, #0
 8010326:	eba6 0807 	sub.w	r8, r6, r7
 801032a:	608b      	str	r3, [r1, #8]
 801032c:	f1b8 0f00 	cmp.w	r8, #0
 8010330:	dde9      	ble.n	8010306 <__sflush_r+0xae>
 8010332:	6a21      	ldr	r1, [r4, #32]
 8010334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010336:	4643      	mov	r3, r8
 8010338:	463a      	mov	r2, r7
 801033a:	4628      	mov	r0, r5
 801033c:	47b0      	blx	r6
 801033e:	2800      	cmp	r0, #0
 8010340:	dc08      	bgt.n	8010354 <__sflush_r+0xfc>
 8010342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010354:	4407      	add	r7, r0
 8010356:	eba8 0800 	sub.w	r8, r8, r0
 801035a:	e7e7      	b.n	801032c <__sflush_r+0xd4>
 801035c:	dfbffffe 	.word	0xdfbffffe

08010360 <_fflush_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	690b      	ldr	r3, [r1, #16]
 8010364:	4605      	mov	r5, r0
 8010366:	460c      	mov	r4, r1
 8010368:	b913      	cbnz	r3, 8010370 <_fflush_r+0x10>
 801036a:	2500      	movs	r5, #0
 801036c:	4628      	mov	r0, r5
 801036e:	bd38      	pop	{r3, r4, r5, pc}
 8010370:	b118      	cbz	r0, 801037a <_fflush_r+0x1a>
 8010372:	6a03      	ldr	r3, [r0, #32]
 8010374:	b90b      	cbnz	r3, 801037a <_fflush_r+0x1a>
 8010376:	f7fd ff83 	bl	800e280 <__sinit>
 801037a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d0f3      	beq.n	801036a <_fflush_r+0xa>
 8010382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010384:	07d0      	lsls	r0, r2, #31
 8010386:	d404      	bmi.n	8010392 <_fflush_r+0x32>
 8010388:	0599      	lsls	r1, r3, #22
 801038a:	d402      	bmi.n	8010392 <_fflush_r+0x32>
 801038c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801038e:	f7fe f9ea 	bl	800e766 <__retarget_lock_acquire_recursive>
 8010392:	4628      	mov	r0, r5
 8010394:	4621      	mov	r1, r4
 8010396:	f7ff ff5f 	bl	8010258 <__sflush_r>
 801039a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801039c:	07da      	lsls	r2, r3, #31
 801039e:	4605      	mov	r5, r0
 80103a0:	d4e4      	bmi.n	801036c <_fflush_r+0xc>
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	059b      	lsls	r3, r3, #22
 80103a6:	d4e1      	bmi.n	801036c <_fflush_r+0xc>
 80103a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103aa:	f7fe f9dd 	bl	800e768 <__retarget_lock_release_recursive>
 80103ae:	e7dd      	b.n	801036c <_fflush_r+0xc>

080103b0 <__swhatbuf_r>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	460c      	mov	r4, r1
 80103b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b8:	2900      	cmp	r1, #0
 80103ba:	b096      	sub	sp, #88	@ 0x58
 80103bc:	4615      	mov	r5, r2
 80103be:	461e      	mov	r6, r3
 80103c0:	da0d      	bge.n	80103de <__swhatbuf_r+0x2e>
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80103c8:	f04f 0100 	mov.w	r1, #0
 80103cc:	bf14      	ite	ne
 80103ce:	2340      	movne	r3, #64	@ 0x40
 80103d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80103d4:	2000      	movs	r0, #0
 80103d6:	6031      	str	r1, [r6, #0]
 80103d8:	602b      	str	r3, [r5, #0]
 80103da:	b016      	add	sp, #88	@ 0x58
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
 80103de:	466a      	mov	r2, sp
 80103e0:	f000 f862 	bl	80104a8 <_fstat_r>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	dbec      	blt.n	80103c2 <__swhatbuf_r+0x12>
 80103e8:	9901      	ldr	r1, [sp, #4]
 80103ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80103ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80103f2:	4259      	negs	r1, r3
 80103f4:	4159      	adcs	r1, r3
 80103f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103fa:	e7eb      	b.n	80103d4 <__swhatbuf_r+0x24>

080103fc <__smakebuf_r>:
 80103fc:	898b      	ldrh	r3, [r1, #12]
 80103fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010400:	079d      	lsls	r5, r3, #30
 8010402:	4606      	mov	r6, r0
 8010404:	460c      	mov	r4, r1
 8010406:	d507      	bpl.n	8010418 <__smakebuf_r+0x1c>
 8010408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801040c:	6023      	str	r3, [r4, #0]
 801040e:	6123      	str	r3, [r4, #16]
 8010410:	2301      	movs	r3, #1
 8010412:	6163      	str	r3, [r4, #20]
 8010414:	b003      	add	sp, #12
 8010416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010418:	ab01      	add	r3, sp, #4
 801041a:	466a      	mov	r2, sp
 801041c:	f7ff ffc8 	bl	80103b0 <__swhatbuf_r>
 8010420:	9f00      	ldr	r7, [sp, #0]
 8010422:	4605      	mov	r5, r0
 8010424:	4639      	mov	r1, r7
 8010426:	4630      	mov	r0, r6
 8010428:	f7ff f86e 	bl	800f508 <_malloc_r>
 801042c:	b948      	cbnz	r0, 8010442 <__smakebuf_r+0x46>
 801042e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010432:	059a      	lsls	r2, r3, #22
 8010434:	d4ee      	bmi.n	8010414 <__smakebuf_r+0x18>
 8010436:	f023 0303 	bic.w	r3, r3, #3
 801043a:	f043 0302 	orr.w	r3, r3, #2
 801043e:	81a3      	strh	r3, [r4, #12]
 8010440:	e7e2      	b.n	8010408 <__smakebuf_r+0xc>
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	6020      	str	r0, [r4, #0]
 8010446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801044a:	81a3      	strh	r3, [r4, #12]
 801044c:	9b01      	ldr	r3, [sp, #4]
 801044e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010452:	b15b      	cbz	r3, 801046c <__smakebuf_r+0x70>
 8010454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010458:	4630      	mov	r0, r6
 801045a:	f000 f837 	bl	80104cc <_isatty_r>
 801045e:	b128      	cbz	r0, 801046c <__smakebuf_r+0x70>
 8010460:	89a3      	ldrh	r3, [r4, #12]
 8010462:	f023 0303 	bic.w	r3, r3, #3
 8010466:	f043 0301 	orr.w	r3, r3, #1
 801046a:	81a3      	strh	r3, [r4, #12]
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	431d      	orrs	r5, r3
 8010470:	81a5      	strh	r5, [r4, #12]
 8010472:	e7cf      	b.n	8010414 <__smakebuf_r+0x18>

08010474 <memmove>:
 8010474:	4288      	cmp	r0, r1
 8010476:	b510      	push	{r4, lr}
 8010478:	eb01 0402 	add.w	r4, r1, r2
 801047c:	d902      	bls.n	8010484 <memmove+0x10>
 801047e:	4284      	cmp	r4, r0
 8010480:	4623      	mov	r3, r4
 8010482:	d807      	bhi.n	8010494 <memmove+0x20>
 8010484:	1e43      	subs	r3, r0, #1
 8010486:	42a1      	cmp	r1, r4
 8010488:	d008      	beq.n	801049c <memmove+0x28>
 801048a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801048e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010492:	e7f8      	b.n	8010486 <memmove+0x12>
 8010494:	4402      	add	r2, r0
 8010496:	4601      	mov	r1, r0
 8010498:	428a      	cmp	r2, r1
 801049a:	d100      	bne.n	801049e <memmove+0x2a>
 801049c:	bd10      	pop	{r4, pc}
 801049e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104a6:	e7f7      	b.n	8010498 <memmove+0x24>

080104a8 <_fstat_r>:
 80104a8:	b538      	push	{r3, r4, r5, lr}
 80104aa:	4d07      	ldr	r5, [pc, #28]	@ (80104c8 <_fstat_r+0x20>)
 80104ac:	2300      	movs	r3, #0
 80104ae:	4604      	mov	r4, r0
 80104b0:	4608      	mov	r0, r1
 80104b2:	4611      	mov	r1, r2
 80104b4:	602b      	str	r3, [r5, #0]
 80104b6:	f7f2 fc67 	bl	8002d88 <_fstat>
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	d102      	bne.n	80104c4 <_fstat_r+0x1c>
 80104be:	682b      	ldr	r3, [r5, #0]
 80104c0:	b103      	cbz	r3, 80104c4 <_fstat_r+0x1c>
 80104c2:	6023      	str	r3, [r4, #0]
 80104c4:	bd38      	pop	{r3, r4, r5, pc}
 80104c6:	bf00      	nop
 80104c8:	20021984 	.word	0x20021984

080104cc <_isatty_r>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4d06      	ldr	r5, [pc, #24]	@ (80104e8 <_isatty_r+0x1c>)
 80104d0:	2300      	movs	r3, #0
 80104d2:	4604      	mov	r4, r0
 80104d4:	4608      	mov	r0, r1
 80104d6:	602b      	str	r3, [r5, #0]
 80104d8:	f7f2 fc66 	bl	8002da8 <_isatty>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d102      	bne.n	80104e6 <_isatty_r+0x1a>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	b103      	cbz	r3, 80104e6 <_isatty_r+0x1a>
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	20021984 	.word	0x20021984

080104ec <_sbrk_r>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	4d06      	ldr	r5, [pc, #24]	@ (8010508 <_sbrk_r+0x1c>)
 80104f0:	2300      	movs	r3, #0
 80104f2:	4604      	mov	r4, r0
 80104f4:	4608      	mov	r0, r1
 80104f6:	602b      	str	r3, [r5, #0]
 80104f8:	f7f2 fc6e 	bl	8002dd8 <_sbrk>
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	d102      	bne.n	8010506 <_sbrk_r+0x1a>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	b103      	cbz	r3, 8010506 <_sbrk_r+0x1a>
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	bd38      	pop	{r3, r4, r5, pc}
 8010508:	20021984 	.word	0x20021984

0801050c <__assert_func>:
 801050c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801050e:	4614      	mov	r4, r2
 8010510:	461a      	mov	r2, r3
 8010512:	4b09      	ldr	r3, [pc, #36]	@ (8010538 <__assert_func+0x2c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4605      	mov	r5, r0
 8010518:	68d8      	ldr	r0, [r3, #12]
 801051a:	b954      	cbnz	r4, 8010532 <__assert_func+0x26>
 801051c:	4b07      	ldr	r3, [pc, #28]	@ (801053c <__assert_func+0x30>)
 801051e:	461c      	mov	r4, r3
 8010520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010524:	9100      	str	r1, [sp, #0]
 8010526:	462b      	mov	r3, r5
 8010528:	4905      	ldr	r1, [pc, #20]	@ (8010540 <__assert_func+0x34>)
 801052a:	f000 f86f 	bl	801060c <fiprintf>
 801052e:	f000 f87f 	bl	8010630 <abort>
 8010532:	4b04      	ldr	r3, [pc, #16]	@ (8010544 <__assert_func+0x38>)
 8010534:	e7f4      	b.n	8010520 <__assert_func+0x14>
 8010536:	bf00      	nop
 8010538:	20000f48 	.word	0x20000f48
 801053c:	08011236 	.word	0x08011236
 8010540:	08011208 	.word	0x08011208
 8010544:	080111fb 	.word	0x080111fb

08010548 <_calloc_r>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	fba1 5402 	umull	r5, r4, r1, r2
 801054e:	b93c      	cbnz	r4, 8010560 <_calloc_r+0x18>
 8010550:	4629      	mov	r1, r5
 8010552:	f7fe ffd9 	bl	800f508 <_malloc_r>
 8010556:	4606      	mov	r6, r0
 8010558:	b928      	cbnz	r0, 8010566 <_calloc_r+0x1e>
 801055a:	2600      	movs	r6, #0
 801055c:	4630      	mov	r0, r6
 801055e:	bd70      	pop	{r4, r5, r6, pc}
 8010560:	220c      	movs	r2, #12
 8010562:	6002      	str	r2, [r0, #0]
 8010564:	e7f9      	b.n	801055a <_calloc_r+0x12>
 8010566:	462a      	mov	r2, r5
 8010568:	4621      	mov	r1, r4
 801056a:	f7fe f86b 	bl	800e644 <memset>
 801056e:	e7f5      	b.n	801055c <_calloc_r+0x14>

08010570 <__ascii_mbtowc>:
 8010570:	b082      	sub	sp, #8
 8010572:	b901      	cbnz	r1, 8010576 <__ascii_mbtowc+0x6>
 8010574:	a901      	add	r1, sp, #4
 8010576:	b142      	cbz	r2, 801058a <__ascii_mbtowc+0x1a>
 8010578:	b14b      	cbz	r3, 801058e <__ascii_mbtowc+0x1e>
 801057a:	7813      	ldrb	r3, [r2, #0]
 801057c:	600b      	str	r3, [r1, #0]
 801057e:	7812      	ldrb	r2, [r2, #0]
 8010580:	1e10      	subs	r0, r2, #0
 8010582:	bf18      	it	ne
 8010584:	2001      	movne	r0, #1
 8010586:	b002      	add	sp, #8
 8010588:	4770      	bx	lr
 801058a:	4610      	mov	r0, r2
 801058c:	e7fb      	b.n	8010586 <__ascii_mbtowc+0x16>
 801058e:	f06f 0001 	mvn.w	r0, #1
 8010592:	e7f8      	b.n	8010586 <__ascii_mbtowc+0x16>

08010594 <_realloc_r>:
 8010594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010598:	4680      	mov	r8, r0
 801059a:	4615      	mov	r5, r2
 801059c:	460c      	mov	r4, r1
 801059e:	b921      	cbnz	r1, 80105aa <_realloc_r+0x16>
 80105a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105a4:	4611      	mov	r1, r2
 80105a6:	f7fe bfaf 	b.w	800f508 <_malloc_r>
 80105aa:	b92a      	cbnz	r2, 80105b8 <_realloc_r+0x24>
 80105ac:	f7fe ff38 	bl	800f420 <_free_r>
 80105b0:	2400      	movs	r4, #0
 80105b2:	4620      	mov	r0, r4
 80105b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b8:	f000 f841 	bl	801063e <_malloc_usable_size_r>
 80105bc:	4285      	cmp	r5, r0
 80105be:	4606      	mov	r6, r0
 80105c0:	d802      	bhi.n	80105c8 <_realloc_r+0x34>
 80105c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105c6:	d8f4      	bhi.n	80105b2 <_realloc_r+0x1e>
 80105c8:	4629      	mov	r1, r5
 80105ca:	4640      	mov	r0, r8
 80105cc:	f7fe ff9c 	bl	800f508 <_malloc_r>
 80105d0:	4607      	mov	r7, r0
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d0ec      	beq.n	80105b0 <_realloc_r+0x1c>
 80105d6:	42b5      	cmp	r5, r6
 80105d8:	462a      	mov	r2, r5
 80105da:	4621      	mov	r1, r4
 80105dc:	bf28      	it	cs
 80105de:	4632      	movcs	r2, r6
 80105e0:	f7fe f8c3 	bl	800e76a <memcpy>
 80105e4:	4621      	mov	r1, r4
 80105e6:	4640      	mov	r0, r8
 80105e8:	f7fe ff1a 	bl	800f420 <_free_r>
 80105ec:	463c      	mov	r4, r7
 80105ee:	e7e0      	b.n	80105b2 <_realloc_r+0x1e>

080105f0 <__ascii_wctomb>:
 80105f0:	4603      	mov	r3, r0
 80105f2:	4608      	mov	r0, r1
 80105f4:	b141      	cbz	r1, 8010608 <__ascii_wctomb+0x18>
 80105f6:	2aff      	cmp	r2, #255	@ 0xff
 80105f8:	d904      	bls.n	8010604 <__ascii_wctomb+0x14>
 80105fa:	228a      	movs	r2, #138	@ 0x8a
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010602:	4770      	bx	lr
 8010604:	700a      	strb	r2, [r1, #0]
 8010606:	2001      	movs	r0, #1
 8010608:	4770      	bx	lr
	...

0801060c <fiprintf>:
 801060c:	b40e      	push	{r1, r2, r3}
 801060e:	b503      	push	{r0, r1, lr}
 8010610:	4601      	mov	r1, r0
 8010612:	ab03      	add	r3, sp, #12
 8010614:	4805      	ldr	r0, [pc, #20]	@ (801062c <fiprintf+0x20>)
 8010616:	f853 2b04 	ldr.w	r2, [r3], #4
 801061a:	6800      	ldr	r0, [r0, #0]
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	f7ff fd03 	bl	8010028 <_vfiprintf_r>
 8010622:	b002      	add	sp, #8
 8010624:	f85d eb04 	ldr.w	lr, [sp], #4
 8010628:	b003      	add	sp, #12
 801062a:	4770      	bx	lr
 801062c:	20000f48 	.word	0x20000f48

08010630 <abort>:
 8010630:	b508      	push	{r3, lr}
 8010632:	2006      	movs	r0, #6
 8010634:	f000 f834 	bl	80106a0 <raise>
 8010638:	2001      	movs	r0, #1
 801063a:	f7f2 fb55 	bl	8002ce8 <_exit>

0801063e <_malloc_usable_size_r>:
 801063e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010642:	1f18      	subs	r0, r3, #4
 8010644:	2b00      	cmp	r3, #0
 8010646:	bfbc      	itt	lt
 8010648:	580b      	ldrlt	r3, [r1, r0]
 801064a:	18c0      	addlt	r0, r0, r3
 801064c:	4770      	bx	lr

0801064e <_raise_r>:
 801064e:	291f      	cmp	r1, #31
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4605      	mov	r5, r0
 8010654:	460c      	mov	r4, r1
 8010656:	d904      	bls.n	8010662 <_raise_r+0x14>
 8010658:	2316      	movs	r3, #22
 801065a:	6003      	str	r3, [r0, #0]
 801065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010660:	bd38      	pop	{r3, r4, r5, pc}
 8010662:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010664:	b112      	cbz	r2, 801066c <_raise_r+0x1e>
 8010666:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801066a:	b94b      	cbnz	r3, 8010680 <_raise_r+0x32>
 801066c:	4628      	mov	r0, r5
 801066e:	f000 f831 	bl	80106d4 <_getpid_r>
 8010672:	4622      	mov	r2, r4
 8010674:	4601      	mov	r1, r0
 8010676:	4628      	mov	r0, r5
 8010678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801067c:	f000 b818 	b.w	80106b0 <_kill_r>
 8010680:	2b01      	cmp	r3, #1
 8010682:	d00a      	beq.n	801069a <_raise_r+0x4c>
 8010684:	1c59      	adds	r1, r3, #1
 8010686:	d103      	bne.n	8010690 <_raise_r+0x42>
 8010688:	2316      	movs	r3, #22
 801068a:	6003      	str	r3, [r0, #0]
 801068c:	2001      	movs	r0, #1
 801068e:	e7e7      	b.n	8010660 <_raise_r+0x12>
 8010690:	2100      	movs	r1, #0
 8010692:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010696:	4620      	mov	r0, r4
 8010698:	4798      	blx	r3
 801069a:	2000      	movs	r0, #0
 801069c:	e7e0      	b.n	8010660 <_raise_r+0x12>
	...

080106a0 <raise>:
 80106a0:	4b02      	ldr	r3, [pc, #8]	@ (80106ac <raise+0xc>)
 80106a2:	4601      	mov	r1, r0
 80106a4:	6818      	ldr	r0, [r3, #0]
 80106a6:	f7ff bfd2 	b.w	801064e <_raise_r>
 80106aa:	bf00      	nop
 80106ac:	20000f48 	.word	0x20000f48

080106b0 <_kill_r>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	4d07      	ldr	r5, [pc, #28]	@ (80106d0 <_kill_r+0x20>)
 80106b4:	2300      	movs	r3, #0
 80106b6:	4604      	mov	r4, r0
 80106b8:	4608      	mov	r0, r1
 80106ba:	4611      	mov	r1, r2
 80106bc:	602b      	str	r3, [r5, #0]
 80106be:	f7f2 fb03 	bl	8002cc8 <_kill>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	d102      	bne.n	80106cc <_kill_r+0x1c>
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	b103      	cbz	r3, 80106cc <_kill_r+0x1c>
 80106ca:	6023      	str	r3, [r4, #0]
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
 80106ce:	bf00      	nop
 80106d0:	20021984 	.word	0x20021984

080106d4 <_getpid_r>:
 80106d4:	f7f2 baf0 	b.w	8002cb8 <_getpid>

080106d8 <ceil>:
 80106d8:	ec51 0b10 	vmov	r0, r1, d0
 80106dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80106e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80106e8:	2e13      	cmp	r6, #19
 80106ea:	460c      	mov	r4, r1
 80106ec:	4605      	mov	r5, r0
 80106ee:	4680      	mov	r8, r0
 80106f0:	dc2e      	bgt.n	8010750 <ceil+0x78>
 80106f2:	2e00      	cmp	r6, #0
 80106f4:	da11      	bge.n	801071a <ceil+0x42>
 80106f6:	a332      	add	r3, pc, #200	@ (adr r3, 80107c0 <ceil+0xe8>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	f7ef fdce 	bl	800029c <__adddf3>
 8010700:	2200      	movs	r2, #0
 8010702:	2300      	movs	r3, #0
 8010704:	f7f0 fa10 	bl	8000b28 <__aeabi_dcmpgt>
 8010708:	b120      	cbz	r0, 8010714 <ceil+0x3c>
 801070a:	2c00      	cmp	r4, #0
 801070c:	db4f      	blt.n	80107ae <ceil+0xd6>
 801070e:	4325      	orrs	r5, r4
 8010710:	d151      	bne.n	80107b6 <ceil+0xde>
 8010712:	462c      	mov	r4, r5
 8010714:	4621      	mov	r1, r4
 8010716:	4628      	mov	r0, r5
 8010718:	e023      	b.n	8010762 <ceil+0x8a>
 801071a:	4f2b      	ldr	r7, [pc, #172]	@ (80107c8 <ceil+0xf0>)
 801071c:	4137      	asrs	r7, r6
 801071e:	ea01 0307 	and.w	r3, r1, r7
 8010722:	4303      	orrs	r3, r0
 8010724:	d01d      	beq.n	8010762 <ceil+0x8a>
 8010726:	a326      	add	r3, pc, #152	@ (adr r3, 80107c0 <ceil+0xe8>)
 8010728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072c:	f7ef fdb6 	bl	800029c <__adddf3>
 8010730:	2200      	movs	r2, #0
 8010732:	2300      	movs	r3, #0
 8010734:	f7f0 f9f8 	bl	8000b28 <__aeabi_dcmpgt>
 8010738:	2800      	cmp	r0, #0
 801073a:	d0eb      	beq.n	8010714 <ceil+0x3c>
 801073c:	2c00      	cmp	r4, #0
 801073e:	bfc2      	ittt	gt
 8010740:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8010744:	4133      	asrgt	r3, r6
 8010746:	18e4      	addgt	r4, r4, r3
 8010748:	ea24 0407 	bic.w	r4, r4, r7
 801074c:	2500      	movs	r5, #0
 801074e:	e7e1      	b.n	8010714 <ceil+0x3c>
 8010750:	2e33      	cmp	r6, #51	@ 0x33
 8010752:	dd0a      	ble.n	801076a <ceil+0x92>
 8010754:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010758:	d103      	bne.n	8010762 <ceil+0x8a>
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	f7ef fd9d 	bl	800029c <__adddf3>
 8010762:	ec41 0b10 	vmov	d0, r0, r1
 8010766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801076e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010772:	40df      	lsrs	r7, r3
 8010774:	4238      	tst	r0, r7
 8010776:	d0f4      	beq.n	8010762 <ceil+0x8a>
 8010778:	a311      	add	r3, pc, #68	@ (adr r3, 80107c0 <ceil+0xe8>)
 801077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077e:	f7ef fd8d 	bl	800029c <__adddf3>
 8010782:	2200      	movs	r2, #0
 8010784:	2300      	movs	r3, #0
 8010786:	f7f0 f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 801078a:	2800      	cmp	r0, #0
 801078c:	d0c2      	beq.n	8010714 <ceil+0x3c>
 801078e:	2c00      	cmp	r4, #0
 8010790:	dd0a      	ble.n	80107a8 <ceil+0xd0>
 8010792:	2e14      	cmp	r6, #20
 8010794:	d101      	bne.n	801079a <ceil+0xc2>
 8010796:	3401      	adds	r4, #1
 8010798:	e006      	b.n	80107a8 <ceil+0xd0>
 801079a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801079e:	2301      	movs	r3, #1
 80107a0:	40b3      	lsls	r3, r6
 80107a2:	441d      	add	r5, r3
 80107a4:	45a8      	cmp	r8, r5
 80107a6:	d8f6      	bhi.n	8010796 <ceil+0xbe>
 80107a8:	ea25 0507 	bic.w	r5, r5, r7
 80107ac:	e7b2      	b.n	8010714 <ceil+0x3c>
 80107ae:	2500      	movs	r5, #0
 80107b0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80107b4:	e7ae      	b.n	8010714 <ceil+0x3c>
 80107b6:	4c05      	ldr	r4, [pc, #20]	@ (80107cc <ceil+0xf4>)
 80107b8:	2500      	movs	r5, #0
 80107ba:	e7ab      	b.n	8010714 <ceil+0x3c>
 80107bc:	f3af 8000 	nop.w
 80107c0:	8800759c 	.word	0x8800759c
 80107c4:	7e37e43c 	.word	0x7e37e43c
 80107c8:	000fffff 	.word	0x000fffff
 80107cc:	3ff00000 	.word	0x3ff00000

080107d0 <_init>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	bf00      	nop
 80107d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107d6:	bc08      	pop	{r3}
 80107d8:	469e      	mov	lr, r3
 80107da:	4770      	bx	lr

080107dc <_fini>:
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	bf00      	nop
 80107e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e2:	bc08      	pop	{r3}
 80107e4:	469e      	mov	lr, r3
 80107e6:	4770      	bx	lr
