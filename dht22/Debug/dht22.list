
dht22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08005ad8  08005ad8  00006ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea8  08005ea8  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eac  08005eac  00006eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005eb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08006084  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08006084  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007435  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b0  00000000  00000000  0000e632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054b  00000000  00000000  000102e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160a9  00000000  00000000  0001082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000808d  00000000  00000000  000268d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086353  00000000  00000000  0002e961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000b4cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b7a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005abc 	.word	0x08005abc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08005abc 	.word	0x08005abc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 b968 	b.w	8000e40 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	fa1f f68c 	uxth.w	r6, ip
 8000bc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bde:	f080 8110 	bcs.w	8000e02 <__udivmoddi4+0x27a>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810d 	bls.w	8000e02 <__udivmoddi4+0x27a>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c0e:	f080 80fa 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f7 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	1b9b      	subs	r3, r3, r6
 8000c20:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80ee 	bcc.w	8000e30 <__udivmoddi4+0x2a8>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 808f 	bne.w	8000d8a <__udivmoddi4+0x202>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80ae 	bhi.w	8000e2a <__udivmoddi4+0x2a2>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa24 f607 	lsr.w	r6, r4, r7
 8000cea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cee:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 6618 	mls	r6, r9, r8, r6
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	408c      	lsls	r4, r1
 8000d00:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d04:	fb08 f00e 	mul.w	r0, r8, lr
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d10:	4298      	cmp	r0, r3
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1c:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000d20:	f080 8081 	bcs.w	8000e26 <__udivmoddi4+0x29e>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	d97e      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000d28:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2c:	4463      	add	r3, ip
 8000d2e:	1a1e      	subs	r6, r3, r0
 8000d30:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d34:	fb09 6613 	mls	r6, r9, r3, r6
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x1d0>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d4e:	d266      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d964      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000d54:	3b02      	subs	r3, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d5c:	fba0 8302 	umull	r8, r3, r0, r2
 8000d60:	eba4 040e 	sub.w	r4, r4, lr
 8000d64:	429c      	cmp	r4, r3
 8000d66:	46c6      	mov	lr, r8
 8000d68:	461e      	mov	r6, r3
 8000d6a:	d350      	bcc.n	8000e0e <__udivmoddi4+0x286>
 8000d6c:	d04d      	beq.n	8000e0a <__udivmoddi4+0x282>
 8000d6e:	b155      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d70:	ebba 030e 	subs.w	r3, sl, lr
 8000d74:	eb64 0406 	sbc.w	r4, r4, r6
 8000d78:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7c:	40cb      	lsrs	r3, r1
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 7400 	strd	r7, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e751      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000da4:	fb08 1110 	mls	r1, r8, r0, r1
 8000da8:	4094      	lsls	r4, r2
 8000daa:	431c      	orrs	r4, r3
 8000dac:	fa1f f78c 	uxth.w	r7, ip
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x248>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd6:	fb08 3311 	mls	r3, r8, r1, r3
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x272>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x292>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x292>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e73b      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f2      	b.n	8000bec <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e708      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0a:	45c2      	cmp	sl, r8
 8000e0c:	d2af      	bcs.n	8000d6e <__udivmoddi4+0x1e6>
 8000e0e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e12:	eb63 060c 	sbc.w	r6, r3, ip
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a9      	b.n	8000d6e <__udivmoddi4+0x1e6>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x272>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e79a      	b.n	8000d58 <__udivmoddi4+0x1d0>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x248>
 8000e26:	46b0      	mov	r8, r6
 8000e28:	e781      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74f      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e711      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <DHT22_Start>:
void Read_DHT22_UART(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DHT22_Start(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

    // Configurer la broche en sortie pour l'impulsion de départ
    GPIO_InitStruct.Pin = DHT22_PIN;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4819      	ldr	r0, [pc, #100]	@ (8000ed4 <DHT22_Start+0x90>)
 8000e6e:	f000 fde1 	bl	8001a34 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2102      	movs	r1, #2
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <DHT22_Start+0x90>)
 8000e78:	f000 ff83 	bl	8001d82 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // >1ms pour signal de départ
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f000 fcd3 	bl	8001828 <HAL_Delay>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2102      	movs	r1, #2
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <DHT22_Start+0x90>)
 8000e88:	f000 ff7b 	bl	8001d82 <HAL_GPIO_WritePin>
    DELAY_US(30);  // Attente avant de lire la réponse
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <DHT22_Start+0x94>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <DHT22_Start+0x98>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <DHT22_Start+0x9c>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9a      	lsrs	r2, r3, #18
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <DHT22_Start+0x98>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <DHT22_Start+0x9c>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	085b      	lsrs	r3, r3, #1
 8000eb6:	1acb      	subs	r3, r1, r3
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <DHT22_Start+0x94>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f8      	bhi.n	8000eba <DHT22_Start+0x76>
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	e000e010 	.word	0xe000e010
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83

08000ee4 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

    // Passer la broche en mode entrée
    GPIO_InitStruct.Pin = DHT22_PIN;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4839      	ldr	r0, [pc, #228]	@ (8000ff0 <DHT22_Check_Response+0x10c>)
 8000f0a:	f000 fd93 	bl	8001a34 <HAL_GPIO_Init>

    DELAY_US(40);
 8000f0e:	4b39      	ldr	r3, [pc, #228]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f14:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a38      	ldr	r2, [pc, #224]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9a      	lsrs	r2, r3, #18
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a33      	ldr	r2, [pc, #204]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9b      	lsrs	r3, r3, #18
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8f8      	bhi.n	8000f3c <DHT22_Check_Response+0x58>
    if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) return 0; // Pas de réponse
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4828      	ldr	r0, [pc, #160]	@ (8000ff0 <DHT22_Check_Response+0x10c>)
 8000f4e:	f000 ff01 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <DHT22_Check_Response+0x78>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e045      	b.n	8000fe8 <DHT22_Check_Response+0x104>

    DELAY_US(80);
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a25      	ldr	r2, [pc, #148]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	0c9a      	lsrs	r2, r3, #18
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	1acb      	subs	r3, r1, r3
 8000f88:	623b      	str	r3, [r7, #32]
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	6a3a      	ldr	r2, [r7, #32]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f8      	bhi.n	8000f8a <DHT22_Check_Response+0xa6>
    if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) return 0; // Mauvaise réponse
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4815      	ldr	r0, [pc, #84]	@ (8000ff0 <DHT22_Check_Response+0x10c>)
 8000f9c:	f000 feda 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <DHT22_Check_Response+0xc6>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e01e      	b.n	8000fe8 <DHT22_Check_Response+0x104>

    DELAY_US(80);  // Préparation à la transmission
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9a      	lsrs	r2, r3, #18
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <DHT22_Check_Response+0x114>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <DHT22_Check_Response+0x118>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0c9b      	lsrs	r3, r3, #18
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	1acb      	subs	r3, r1, r3
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <DHT22_Check_Response+0x110>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d8f8      	bhi.n	8000fd8 <DHT22_Check_Response+0xf4>
    return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3730      	adds	r7, #48	@ 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	e000e010 	.word	0xe000e010
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	431bde83 	.word	0x431bde83

08001000 <DHT22_Read_Byte>:

uint8_t DHT22_Read_Byte(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < 8; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e043      	b.n	8001098 <DHT22_Read_Byte+0x98>
        while (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));  // Attente du début du bit
 8001010:	bf00      	nop
 8001012:	2102      	movs	r1, #2
 8001014:	4824      	ldr	r0, [pc, #144]	@ (80010a8 <DHT22_Read_Byte+0xa8>)
 8001016:	f000 fe9d 	bl	8001d54 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f8      	beq.n	8001012 <DHT22_Read_Byte+0x12>
        DELAY_US(40);
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <DHT22_Read_Byte+0xac>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <DHT22_Read_Byte+0xb0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <DHT22_Read_Byte+0xb4>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	0c9a      	lsrs	r2, r3, #18
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4619      	mov	r1, r3
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <DHT22_Read_Byte+0xb0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <DHT22_Read_Byte+0xb4>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9b      	lsrs	r3, r3, #18
 8001048:	085b      	lsrs	r3, r3, #1
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <DHT22_Read_Byte+0xac>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f8      	bhi.n	800104e <DHT22_Read_Byte+0x4e>

        if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 800105c:	2102      	movs	r1, #2
 800105e:	4812      	ldr	r0, [pc, #72]	@ (80010a8 <DHT22_Read_Byte+0xa8>)
 8001060:	f000 fe78 	bl	8001d54 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <DHT22_Read_Byte+0x82>
            data |= (1 << (7 - i));
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f1c3 0307 	rsb	r3, r3, #7
 8001070:	2201      	movs	r2, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	b25a      	sxtb	r2, r3
 8001078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	73bb      	strb	r3, [r7, #14]

        while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));  // Fin du bit
 8001082:	bf00      	nop
 8001084:	2102      	movs	r1, #2
 8001086:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <DHT22_Read_Byte+0xa8>)
 8001088:	f000 fe64 	bl	8001d54 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f8      	bne.n	8001084 <DHT22_Read_Byte+0x84>
    for (i = 0; i < 8; i++) {
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d9b8      	bls.n	8001010 <DHT22_Read_Byte+0x10>
    }
    return data;
 800109e:	7bbb      	ldrb	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020000 	.word	0x40020000
 80010ac:	e000e010 	.word	0xe000e010
 80010b0:	20000000 	.word	0x20000000
 80010b4:	431bde83 	.word	0x431bde83

080010b8 <DHT22_Read>:

uint8_t DHT22_Read(uint8_t *data) {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    uint8_t checksum;

    DHT22_Start();
 80010c0:	f7ff fec0 	bl	8000e44 <DHT22_Start>
    if (!DHT22_Check_Response()) return 0;
 80010c4:	f7ff ff0e 	bl	8000ee4 <DHT22_Check_Response>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <DHT22_Read+0x1a>
 80010ce:	2300      	movs	r3, #0
 80010d0:	e030      	b.n	8001134 <DHT22_Read+0x7c>

    data[0] = DHT22_Read_Byte();  // Humidité MSB
 80010d2:	f7ff ff95 	bl	8001000 <DHT22_Read_Byte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	701a      	strb	r2, [r3, #0]
    data[1] = DHT22_Read_Byte();  // Humidité LSB
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	1c5c      	adds	r4, r3, #1
 80010e2:	f7ff ff8d 	bl	8001000 <DHT22_Read_Byte>
 80010e6:	4603      	mov	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
    data[2] = DHT22_Read_Byte();  // Température MSB
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c9c      	adds	r4, r3, #2
 80010ee:	f7ff ff87 	bl	8001000 <DHT22_Read_Byte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
    data[3] = DHT22_Read_Byte();  // Température LSB
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	1cdc      	adds	r4, r3, #3
 80010fa:	f7ff ff81 	bl	8001000 <DHT22_Read_Byte>
 80010fe:	4603      	mov	r3, r0
 8001100:	7023      	strb	r3, [r4, #0]
    checksum = DHT22_Read_Byte(); // Checksum
 8001102:	f7ff ff7d 	bl	8001000 <DHT22_Read_Byte>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]

    if (checksum != (data[0] + data[1] + data[2] + data[3])) return 0;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3301      	adds	r3, #1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	440b      	add	r3, r1
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	3102      	adds	r1, #2
 800111e:	7809      	ldrb	r1, [r1, #0]
 8001120:	440b      	add	r3, r1
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	3103      	adds	r1, #3
 8001126:	7809      	ldrb	r1, [r1, #0]
 8001128:	440b      	add	r3, r1
 800112a:	429a      	cmp	r2, r3
 800112c:	d001      	beq.n	8001132 <DHT22_Read+0x7a>
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <DHT22_Read+0x7c>
    return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	0000      	movs	r0, r0
	...

08001140 <Read_DHT22_UART>:

void Read_DHT22_UART(void) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b096      	sub	sp, #88	@ 0x58
 8001144:	af04      	add	r7, sp, #16
    uint8_t data[5];
    char buffer[50];

    if (DHT22_Read(data)) {
 8001146:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffb4 	bl	80010b8 <DHT22_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d04a      	beq.n	80011ec <Read_DHT22_UART+0xac>
        float humidity = ((data[0] << 8) | data[1]) * 0.1;
 8001156:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001160:	4313      	orrs	r3, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f966 	bl	8000434 <__aeabi_i2d>
 8001168:	a32b      	add	r3, pc, #172	@ (adr r3, 8001218 <Read_DHT22_UART+0xd8>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f9cb 	bl	8000508 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc9d 	bl	8000ab8 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	643b      	str	r3, [r7, #64]	@ 0x40
        float temperature = ((data[2] & 0x7F) << 8 | data[3]) * 0.1;
 8001182:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800118c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001190:	4313      	orrs	r3, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f94e 	bl	8000434 <__aeabi_i2d>
 8001198:	a31f      	add	r3, pc, #124	@ (adr r3, 8001218 <Read_DHT22_UART+0xd8>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f9b3 	bl	8000508 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc85 	bl	8000ab8 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	647b      	str	r3, [r7, #68]	@ 0x44
        if (data[2] & 0x80) temperature = -temperature;
 80011b2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da03      	bge.n	80011c4 <Read_DHT22_UART+0x84>
 80011bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80011c2:	647b      	str	r3, [r7, #68]	@ 0x44

        snprintf(buffer, sizeof(buffer), "Temp: %.1f°C  Hum: %.1f%%\r\n", temperature, humidity);
 80011c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011c6:	f7ff f947 	bl	8000458 <__aeabi_f2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
 80011ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80011d0:	f7ff f942 	bl	8000458 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	1d38      	adds	r0, r7, #4
 80011da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011de:	e9cd 4500 	strd	r4, r5, [sp]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <Read_DHT22_UART+0xe0>)
 80011e4:	2132      	movs	r1, #50	@ 0x32
 80011e6:	f002 fb1f 	bl	8003828 <sniprintf>
 80011ea:	e005      	b.n	80011f8 <Read_DHT22_UART+0xb8>
    } else {
        snprintf(buffer, sizeof(buffer), "DHT22 Read Error!\r\n");
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <Read_DHT22_UART+0xe4>)
 80011f0:	2132      	movs	r1, #50	@ 0x32
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fb18 	bl	8003828 <sniprintf>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7fe ffc0 	bl	8000180 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <Read_DHT22_UART+0xe8>)
 800120c:	f001 fc18 	bl	8002a40 <HAL_UART_Transmit>
}
 8001210:	bf00      	nop
 8001212:	3748      	adds	r7, #72	@ 0x48
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	9999999a 	.word	0x9999999a
 800121c:	3fb99999 	.word	0x3fb99999
 8001220:	08005ad8 	.word	0x08005ad8
 8001224:	08005af8 	.word	0x08005af8
 8001228:	200001f0 	.word	0x200001f0

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f000 fa8b 	bl	800174a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f80c 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 f882 	bl	8001340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123c:	f000 f856 	bl	80012ec <MX_USART2_UART_Init>
	  // test du DELAY_US
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  DELAY_MS(500); // Delay 500ms
	  */

	  Read_DHT22_UART();
 8001240:	f7ff ff7e 	bl	8001140 <Read_DHT22_UART>
	  HAL_Delay(2000);  // Rafraîchir les valeurs toutes les 2 secondes
 8001244:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001248:	f000 faee 	bl	8001828 <HAL_Delay>
	  Read_DHT22_UART();
 800124c:	bf00      	nop
 800124e:	e7f7      	b.n	8001240 <main+0x14>

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b092      	sub	sp, #72	@ 0x48
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2234      	movs	r2, #52	@ 0x34
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fb59 	bl	8003916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <SystemClock_Config+0x98>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <SystemClock_Config+0x98>)
 800127c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001280:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001296:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800129a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800129c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd84 	bl	8001db4 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012b2:	f000 f8b7 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2303      	movs	r3, #3
 80012bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f8a0 	bl	8002414 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012da:	f000 f8a3 	bl	8001424 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3748      	adds	r7, #72	@ 0x48
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f001 fb3c 	bl	80029a0 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 f879 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001f0 	.word	0x200001f0
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <MX_GPIO_Init+0xd8>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a29      	ldr	r2, [pc, #164]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <MX_GPIO_Init+0xd8>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <MX_GPIO_Init+0xd8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <MX_GPIO_Init+0xd8>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <MX_GPIO_Init+0xd8>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <MX_GPIO_Init+0xd8>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <MX_GPIO_Init+0xd8>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2120      	movs	r1, #32
 80013ba:	4818      	ldr	r0, [pc, #96]	@ (800141c <MX_GPIO_Init+0xdc>)
 80013bc:	f000 fce1 	bl	8001d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4812      	ldr	r0, [pc, #72]	@ (8001420 <MX_GPIO_Init+0xe0>)
 80013d8:	f000 fb2c 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013dc:	2301      	movs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <MX_GPIO_Init+0xdc>)
 80013f0:	f000 fb20 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f4:	2320      	movs	r3, #32
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_GPIO_Init+0xdc>)
 800140c:	f000 fb12 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020800 	.word	0x40020800

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_MspInit+0x5c>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_MspInit+0x5c>)
 800143c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001440:	6253      	str	r3, [r2, #36]	@ 0x24
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_MspInit+0x5c>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_MspInit+0x5c>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_MspInit+0x5c>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_MspInit+0x5c>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6253      	str	r3, [r2, #36]	@ 0x24
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x5c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147e:	2007      	movs	r0, #7
 8001480:	f000 faa4 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	@ (800150c <HAL_UART_MspInit+0x7c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d127      	bne.n	8001502 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	6253      	str	r3, [r2, #36]	@ 0x24
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_UART_MspInit+0x80>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f2:	2307      	movs	r3, #7
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_UART_MspInit+0x84>)
 80014fe:	f000 fa99 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	@ 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40004400 	.word	0x40004400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <NMI_Handler+0x4>

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <MemManage_Handler+0x4>

08001530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <UsageFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f942 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <_kill>:

int _kill(int pid, int sig)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001588:	f002 fa18 	bl	80039bc <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	2216      	movs	r2, #22
 8001590:	601a      	str	r2, [r3, #0]
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_exit>:

void _exit (int status)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffe7 	bl	800157e <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <_exit+0x12>

080015b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
  }

  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e009      	b.n	8001614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf1      	blt.n	8001600 <_write+0x12>
  }
  return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_close>:

int _close(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164c:	605a      	str	r2, [r3, #4]
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <_isatty>:

int _isatty(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
	...

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f002 f980 	bl	80039bc <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20014000 	.word	0x20014000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000238 	.word	0x20000238
 80016f0:	20000390 	.word	0x20000390

080016f4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff fff8 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001706:	490c      	ldr	r1, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001708:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <LoopFillZerobss+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800171c:	4c09      	ldr	r4, [pc, #36]	@ (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f002 f94d 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7ff fd7d 	bl	800122c <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800173c:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 8001740:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001744:	2000038c 	.word	0x2000038c

08001748 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_IRQHandler>

0800174a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f939 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f80e 	bl	800177c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176c:	f7ff fe60 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_InitTick+0x68>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d022      	beq.n	80017d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_InitTick+0x6c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_InitTick+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800179c:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f938 	bl	8001a1a <HAL_SYSTICK_Config>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d809      	bhi.n	80017ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b6:	2200      	movs	r2, #0
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017be:	f000 f910 	bl	80019e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_InitTick+0x70>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e007      	b.n	80017da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e004      	b.n	80017da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e001      	b.n	80017da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_IncTick+0x1c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x20>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a03      	ldr	r2, [pc, #12]	@ (800180c <HAL_IncTick+0x1c>)
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000023c 	.word	0x2000023c
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	2000023c 	.word	0x2000023c

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001840:	d004      	beq.n	800184c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_Delay+0x40>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184c:	bf00      	nop
 800184e:	f7ff ffe1 	bl	8001814 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	429a      	cmp	r2, r3
 800185c:	d8f7      	bhi.n	800184e <HAL_Delay+0x26>
  {
  }
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ac:	f7ff ff90 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff49 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff5e 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff90 	bl	8001924 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5f 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb0 	bl	8001988 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a4a:	e160      	b.n	8001d0e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8152 	beq.w	8001d08 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d005      	beq.n	8001a7c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d130      	bne.n	8001ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f003 0201 	and.w	r2, r3, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d017      	beq.n	8001b1a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d123      	bne.n	8001b6e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	6939      	ldr	r1, [r7, #16]
 8001b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0203 	and.w	r2, r3, #3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80ac 	beq.w	8001d08 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bc8:	4a59      	ldr	r2, [pc, #356]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a51      	ldr	r2, [pc, #324]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d025      	beq.n	8001c40 <HAL_GPIO_Init+0x20c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a50      	ldr	r2, [pc, #320]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01f      	beq.n	8001c3c <HAL_GPIO_Init+0x208>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8001d3c <HAL_GPIO_Init+0x308>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d019      	beq.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4e      	ldr	r2, [pc, #312]	@ (8001d40 <HAL_GPIO_Init+0x30c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x200>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d44 <HAL_GPIO_Init+0x310>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1fc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <HAL_GPIO_Init+0x314>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1f8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d4c <HAL_GPIO_Init+0x318>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1f4>
 8001c24:	2306      	movs	r3, #6
 8001c26:	e00c      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c28:	2307      	movs	r3, #7
 8001c2a:	e00a      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	e008      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c40:	2300      	movs	r3, #0
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c52:	4937      	ldr	r1, [pc, #220]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c60:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c84:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cae:	4a28      	ldr	r2, [pc, #160]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb4:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d02:	4a13      	ldr	r2, [pc, #76]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f ae97 	bne.w	8001a4c <HAL_GPIO_Init+0x18>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d92:	787b      	ldrb	r3, [r7, #1]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d9e:	e003      	b.n	8001da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e31d      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b94      	ldr	r3, [pc, #592]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b91      	ldr	r3, [pc, #580]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07b      	beq.n	8001ede <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d006      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b87      	ldr	r3, [pc, #540]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06a      	beq.n	8001edc <HAL_RCC_OscConfig+0x128>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d166      	bne.n	8001edc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e2f7      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d106      	bne.n	8001e28 <HAL_RCC_OscConfig+0x74>
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e02d      	b.n	8001e84 <HAL_RCC_OscConfig+0xd0>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x96>
 8001e30:	4b79      	ldr	r3, [pc, #484]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a78      	ldr	r2, [pc, #480]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b76      	ldr	r3, [pc, #472]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a75      	ldr	r2, [pc, #468]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e01c      	b.n	8001e84 <HAL_RCC_OscConfig+0xd0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xb8>
 8001e52:	4b71      	ldr	r3, [pc, #452]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a70      	ldr	r2, [pc, #448]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6d      	ldr	r2, [pc, #436]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xd0>
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a69      	ldr	r2, [pc, #420]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b67      	ldr	r3, [pc, #412]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a66      	ldr	r2, [pc, #408]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fcc2 	bl	8001814 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fcbe 	bl	8001814 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e2ad      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xe0>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fcae 	bl	8001814 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fcaa 	bl	8001814 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e299      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ece:	4b52      	ldr	r3, [pc, #328]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x108>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d05a      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_OscConfig+0x176>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d116      	bne.n	8001f2a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efc:	4b46      	ldr	r3, [pc, #280]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x160>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e276      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b40      	ldr	r3, [pc, #256]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	493d      	ldr	r1, [pc, #244]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f28:	e03a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f32:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc6c 	bl	8001814 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc68 	bl	8001814 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e257      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f52:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	492a      	ldr	r1, [pc, #168]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
 8001f72:	e015      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fc4b 	bl	8001814 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fc47 	bl	8001814 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e236      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f94:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80b8 	beq.w	800211e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d170      	bne.n	8002096 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x218>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e21a      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d921      	bls.n	8002020 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fc7d 	bl	80028e0 <RCC_SetFlashLatencyFromMSIRange>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e208      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	4901      	ldr	r1, [pc, #4]	@ (8002018 <HAL_RCC_OscConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
 8002016:	e020      	b.n	800205a <HAL_RCC_OscConfig+0x2a6>
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002020:	4b99      	ldr	r3, [pc, #612]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4996      	ldr	r1, [pc, #600]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002032:	4b95      	ldr	r3, [pc, #596]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	061b      	lsls	r3, r3, #24
 8002040:	4991      	ldr	r1, [pc, #580]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fc48 	bl	80028e0 <RCC_SetFlashLatencyFromMSIRange>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1d3      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	3301      	adds	r3, #1
 8002062:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800206a:	4a87      	ldr	r2, [pc, #540]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	0912      	lsrs	r2, r2, #4
 8002070:	f002 020f 	and.w	r2, r2, #15
 8002074:	4985      	ldr	r1, [pc, #532]	@ (800228c <HAL_RCC_OscConfig+0x4d8>)
 8002076:	5c8a      	ldrb	r2, [r1, r2]
 8002078:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800207a:	4a85      	ldr	r2, [pc, #532]	@ (8002290 <HAL_RCC_OscConfig+0x4dc>)
 800207c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <HAL_RCC_OscConfig+0x4e0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fb7a 	bl	800177c <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d045      	beq.n	800211e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	e1b5      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d029      	beq.n	80020f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800209e:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x4e4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fbb6 	bl	8001814 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ac:	f7ff fbb2 	bl	8001814 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1a1      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020be:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	496c      	ldr	r1, [pc, #432]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	4967      	ldr	r1, [pc, #412]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f2:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x4e4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fb8c 	bl	8001814 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002100:	f7ff fb88 	bl	8001814 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e177      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002112:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d030      	beq.n	800218c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002132:	4b5a      	ldr	r3, [pc, #360]	@ (800229c <HAL_RCC_OscConfig+0x4e8>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7ff fb6c 	bl	8001814 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002140:	f7ff fb68 	bl	8001814 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e157      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002152:	4b4d      	ldr	r3, [pc, #308]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x38c>
 800215e:	e015      	b.n	800218c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002160:	4b4e      	ldr	r3, [pc, #312]	@ (800229c <HAL_RCC_OscConfig+0x4e8>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff fb55 	bl	8001814 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff fb51 	bl	8001814 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e140      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80b5 	beq.w	8002304 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b3a      	ldr	r3, [pc, #232]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <HAL_RCC_OscConfig+0x4ec>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d2:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <HAL_RCC_OscConfig+0x4ec>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <HAL_RCC_OscConfig+0x4ec>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7ff fb19 	bl	8001814 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7ff fb15 	bl	8001814 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	@ 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e104      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <HAL_RCC_OscConfig+0x4ec>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x466>
 800220c:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	4a1d      	ldr	r2, [pc, #116]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002216:	6353      	str	r3, [r2, #52]	@ 0x34
 8002218:	e02d      	b.n	8002276 <HAL_RCC_OscConfig+0x4c2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x488>
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002226:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800222c:	6353      	str	r3, [r2, #52]	@ 0x34
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002234:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002238:	6353      	str	r3, [r2, #52]	@ 0x34
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x4c2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x4aa>
 8002244:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002248:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002254:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225a:	6353      	str	r3, [r2, #52]	@ 0x34
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x4c2>
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002268:	6353      	str	r3, [r2, #52]	@ 0x34
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002274:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d024      	beq.n	80022c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff fac9 	bl	8001814 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002284:	e019      	b.n	80022ba <HAL_RCC_OscConfig+0x506>
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	08005b18 	.word	0x08005b18
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004
 8002298:	42470020 	.word	0x42470020
 800229c:	42470680 	.word	0x42470680
 80022a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff fab6 	bl	8001814 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0a3      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ba:	4b54      	ldr	r3, [pc, #336]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4f0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff faa4 	bl	8001814 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff faa0 	bl	8001814 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e08d      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e6:	4b49      	ldr	r3, [pc, #292]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	4a43      	ldr	r2, [pc, #268]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002302:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d079      	beq.n	8002400 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d056      	beq.n	80023c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2b02      	cmp	r3, #2
 8002318:	d13b      	bne.n	8002392 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_OscConfig+0x65c>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fa78 	bl	8001814 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff fa74 	bl	8001814 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e063      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b34      	ldr	r3, [pc, #208]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b31      	ldr	r3, [pc, #196]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	4319      	orrs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	430b      	orrs	r3, r1
 800235e:	492b      	ldr	r1, [pc, #172]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x65c>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff fa53 	bl	8001814 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fa4f 	bl	8001814 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e03e      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x5be>
 8002390:	e036      	b.n	8002400 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b1f      	ldr	r3, [pc, #124]	@ (8002410 <HAL_RCC_OscConfig+0x65c>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fa3c 	bl	8001814 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff fa38 	bl	8001814 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e027      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5ec>
 80023be:	e01f      	b.n	8002400 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e01a      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_RCC_OscConfig+0x658>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10d      	bne.n	80023fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	42470060 	.word	0x42470060

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e11a      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d919      	bls.n	800246a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_ClockConfig+0x34>
 800243c:	4b8a      	ldr	r3, [pc, #552]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a89      	ldr	r2, [pc, #548]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b87      	ldr	r3, [pc, #540]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 0201 	bic.w	r2, r3, #1
 8002450:	4985      	ldr	r1, [pc, #532]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	4b83      	ldr	r3, [pc, #524]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0f9      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002476:	4b7d      	ldr	r3, [pc, #500]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	497a      	ldr	r1, [pc, #488]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 808e 	beq.w	80025b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249e:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d121      	bne.n	80024ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0d7      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b6:	4b6d      	ldr	r3, [pc, #436]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0cb      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ce:	4b67      	ldr	r3, [pc, #412]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0bf      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0b7      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b5f      	ldr	r3, [pc, #380]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	495c      	ldr	r1, [pc, #368]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7ff f988 	bl	8001814 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d112      	bne.n	8002534 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff f980 	bl	8001814 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e09b      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002526:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d1ee      	bne.n	8002510 <HAL_RCC_ClockConfig+0xfc>
 8002532:	e03e      	b.n	80025b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d112      	bne.n	8002562 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7ff f969 	bl	8001814 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e084      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002554:	4b45      	ldr	r3, [pc, #276]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_ClockConfig+0x12a>
 8002560:	e027      	b.n	80025b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11d      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff f952 	bl	8001814 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e06d      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002582:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_ClockConfig+0x158>
 800258e:	e010      	b.n	80025b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7ff f940 	bl	8001814 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e05b      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ee      	bne.n	8002590 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d219      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1be>
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0201 	bic.w	r2, r3, #1
 80025da:	4923      	ldr	r1, [pc, #140]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCC_ClockConfig+0x254>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e034      	b.n	800265e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4917      	ldr	r1, [pc, #92]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490f      	ldr	r1, [pc, #60]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f823 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_RCC_ClockConfig+0x258>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490b      	ldr	r1, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x260>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <HAL_RCC_ClockConfig+0x264>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f892 	bl	800177c <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	72fb      	strb	r3, [r7, #11]

  return status;
 800265c:	7afb      	ldrb	r3, [r7, #11]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00
 800266c:	40023800 	.word	0x40023800
 8002670:	08005b18 	.word	0x08005b18
 8002674:	20000000 	.word	0x20000000
 8002678:	20000004 	.word	0x20000004

0800267c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002680:	b092      	sub	sp, #72	@ 0x48
 8002682:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002684:	4b79      	ldr	r3, [pc, #484]	@ (800286c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800268a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d00d      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x34>
 8002694:	2b0c      	cmp	r3, #12
 8002696:	f200 80d5 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x1c8>
 800269a:	2b04      	cmp	r3, #4
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x28>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x2e>
 80026a2:	e0cf      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b72      	ldr	r3, [pc, #456]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80026a8:	e0da      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80026ac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80026ae:	e0d7      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c0:	0d9b      	lsrs	r3, r3, #22
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	4b68      	ldr	r3, [pc, #416]	@ (800286c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d05d      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d8:	2200      	movs	r2, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	4611      	mov	r1, r2
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	f04f 0000 	mov.w	r0, #0
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	0159      	lsls	r1, r3, #5
 80026f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f4:	0150      	lsls	r0, r2, #5
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4621      	mov	r1, r4
 80026fc:	1a51      	subs	r1, r2, r1
 80026fe:	6139      	str	r1, [r7, #16]
 8002700:	4629      	mov	r1, r5
 8002702:	eb63 0301 	sbc.w	r3, r3, r1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002714:	4659      	mov	r1, fp
 8002716:	018b      	lsls	r3, r1, #6
 8002718:	4651      	mov	r1, sl
 800271a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800271e:	4651      	mov	r1, sl
 8002720:	018a      	lsls	r2, r1, #6
 8002722:	46d4      	mov	ip, sl
 8002724:	ebb2 080c 	subs.w	r8, r2, ip
 8002728:	4659      	mov	r1, fp
 800272a:	eb63 0901 	sbc.w	r9, r3, r1
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800273a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002742:	4690      	mov	r8, r2
 8002744:	4699      	mov	r9, r3
 8002746:	4623      	mov	r3, r4
 8002748:	eb18 0303 	adds.w	r3, r8, r3
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	462b      	mov	r3, r5
 8002750:	eb49 0303 	adc.w	r3, r9, r3
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002762:	4629      	mov	r1, r5
 8002764:	024b      	lsls	r3, r1, #9
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	4604      	mov	r4, r0
 800276c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002770:	4601      	mov	r1, r0
 8002772:	024a      	lsls	r2, r1, #9
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277a:	2200      	movs	r2, #0
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800277e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002784:	f7fe f9e8 	bl	8000b58 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002790:	e055      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	2200      	movs	r2, #0
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	627a      	str	r2, [r7, #36]	@ 0x24
 800279a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800279e:	4642      	mov	r2, r8
 80027a0:	464b      	mov	r3, r9
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	46c4      	mov	ip, r8
 80027b8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80027bc:	4640      	mov	r0, r8
 80027be:	4649      	mov	r1, r9
 80027c0:	468c      	mov	ip, r1
 80027c2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027da:	ebb2 040a 	subs.w	r4, r2, sl
 80027de:	eb63 050b 	sbc.w	r5, r3, fp
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	00eb      	lsls	r3, r5, #3
 80027ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f0:	00e2      	lsls	r2, r4, #3
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	18e3      	adds	r3, r4, r3
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	460b      	mov	r3, r1
 80027fe:	eb45 0303 	adc.w	r3, r5, r3
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002810:	4629      	mov	r1, r5
 8002812:	028b      	lsls	r3, r1, #10
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	4604      	mov	r4, r0
 800281a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800281e:	4601      	mov	r1, r0
 8002820:	028a      	lsls	r2, r1, #10
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	61fa      	str	r2, [r7, #28]
 800282e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002832:	f7fe f991 	bl	8000b58 <__aeabi_uldivmod>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4613      	mov	r3, r2
 800283c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800283e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002840:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002842:	e00d      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0b5b      	lsrs	r3, r3, #13
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002852:	3301      	adds	r3, #1
 8002854:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800285e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002862:	4618      	mov	r0, r3
 8002864:	3748      	adds	r7, #72	@ 0x48
 8002866:	46bd      	mov	sp, r7
 8002868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	00f42400 	.word	0x00f42400
 8002874:	007a1200 	.word	0x007a1200
 8002878:	08005b0c 	.word	0x08005b0c

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b02      	ldr	r3, [pc, #8]	@ (800288c <HAL_RCC_GetHCLKFreq+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff2 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	@ (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08005b28 	.word	0x08005b28

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028bc:	f7ff ffde 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0adb      	lsrs	r3, r3, #11
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	@ (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08005b28 	.word	0x08005b28

080028e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d12c      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f8:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002904:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e016      	b.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6253      	str	r3, [r2, #36]	@ 0x24
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002930:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002944:	d105      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800294c:	d101      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800294e:	2301      	movs	r3, #1
 8002950:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002958:	4b10      	ldr	r3, [pc, #64]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 0201 	bic.w	r2, r3, #1
 800296c:	490b      	ldr	r1, [pc, #44]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e042      	b.n	8002a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fd62 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	@ 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f91d 	bl	8002c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d16d      	bne.n	8002b3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Transmit+0x2c>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e066      	b.n	8002b3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2221      	movs	r2, #33	@ 0x21
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fec9 	bl	8001814 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab4:	e02a      	b.n	8002b0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	@ 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f840 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e036      	b.n	8002b3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	3302      	adds	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	e007      	b.n	8002afe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1cf      	bne.n	8002ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2140      	movs	r1, #64	@ 0x40
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f810 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e006      	b.n	8002b3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b090      	sub	sp, #64	@ 0x40
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b56:	e050      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b5e:	d04c      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b66:	f7fe fe55 	bl	8001814 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d241      	bcs.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b96:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b9e:	e841 2300 	strex	r3, r2, [r1]
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1e5      	bne.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bca:	623a      	str	r2, [r7, #32]
 8002bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	69f9      	ldr	r1, [r7, #28]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e00f      	b.n	8002c1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d09f      	beq.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3740      	adds	r7, #64	@ 0x40
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002c64:	f023 030c 	bic.w	r3, r3, #12
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a55      	ldr	r2, [pc, #340]	@ (8002de4 <UART_SetConfig+0x1c0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d103      	bne.n	8002c9a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c92:	f7ff fe11 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7ff fdf9 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca8:	d14c      	bne.n	8002d44 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	0119      	lsls	r1, r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	@ 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	3332      	adds	r3, #50	@ 0x32
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d02:	4419      	add	r1, r3
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1a:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2064      	movs	r0, #100	@ 0x64
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	@ 0x32
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	440a      	add	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d42:	e04a      	b.n	8002dda <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009a      	lsls	r2, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	0119      	lsls	r1, r3, #4
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d7c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	2064      	movs	r0, #100	@ 0x64
 8002d84:	fb00 f303 	mul.w	r3, r0, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	3332      	adds	r3, #50	@ 0x32
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9a:	4419      	add	r1, r3
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002db4:	fba3 0302 	umull	r0, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	2064      	movs	r0, #100	@ 0x64
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	3332      	adds	r3, #50	@ 0x32
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013800 	.word	0x40013800
 8002de8:	51eb851f 	.word	0x51eb851f

08002dec <__cvt>:
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df2:	461d      	mov	r5, r3
 8002df4:	bfbb      	ittet	lt
 8002df6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002dfa:	461d      	movlt	r5, r3
 8002dfc:	2300      	movge	r3, #0
 8002dfe:	232d      	movlt	r3, #45	@ 0x2d
 8002e00:	b088      	sub	sp, #32
 8002e02:	4614      	mov	r4, r2
 8002e04:	bfb8      	it	lt
 8002e06:	4614      	movlt	r4, r2
 8002e08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002e0a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002e0c:	7013      	strb	r3, [r2, #0]
 8002e0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002e10:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002e14:	f023 0820 	bic.w	r8, r3, #32
 8002e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e1c:	d005      	beq.n	8002e2a <__cvt+0x3e>
 8002e1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e22:	d100      	bne.n	8002e26 <__cvt+0x3a>
 8002e24:	3601      	adds	r6, #1
 8002e26:	2302      	movs	r3, #2
 8002e28:	e000      	b.n	8002e2c <__cvt+0x40>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	aa07      	add	r2, sp, #28
 8002e2e:	9204      	str	r2, [sp, #16]
 8002e30:	aa06      	add	r2, sp, #24
 8002e32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e36:	e9cd 3600 	strd	r3, r6, [sp]
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	f000 fe83 	bl	8003b48 <_dtoa_r>
 8002e42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e46:	4607      	mov	r7, r0
 8002e48:	d119      	bne.n	8002e7e <__cvt+0x92>
 8002e4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002e4c:	07db      	lsls	r3, r3, #31
 8002e4e:	d50e      	bpl.n	8002e6e <__cvt+0x82>
 8002e50:	eb00 0906 	add.w	r9, r0, r6
 8002e54:	2200      	movs	r2, #0
 8002e56:	2300      	movs	r3, #0
 8002e58:	4620      	mov	r0, r4
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7fd fdbc 	bl	80009d8 <__aeabi_dcmpeq>
 8002e60:	b108      	cbz	r0, 8002e66 <__cvt+0x7a>
 8002e62:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e66:	2230      	movs	r2, #48	@ 0x30
 8002e68:	9b07      	ldr	r3, [sp, #28]
 8002e6a:	454b      	cmp	r3, r9
 8002e6c:	d31e      	bcc.n	8002eac <__cvt+0xc0>
 8002e6e:	4638      	mov	r0, r7
 8002e70:	9b07      	ldr	r3, [sp, #28]
 8002e72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002e74:	1bdb      	subs	r3, r3, r7
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	b008      	add	sp, #32
 8002e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e82:	eb00 0906 	add.w	r9, r0, r6
 8002e86:	d1e5      	bne.n	8002e54 <__cvt+0x68>
 8002e88:	7803      	ldrb	r3, [r0, #0]
 8002e8a:	2b30      	cmp	r3, #48	@ 0x30
 8002e8c:	d10a      	bne.n	8002ea4 <__cvt+0xb8>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2300      	movs	r3, #0
 8002e92:	4620      	mov	r0, r4
 8002e94:	4629      	mov	r1, r5
 8002e96:	f7fd fd9f 	bl	80009d8 <__aeabi_dcmpeq>
 8002e9a:	b918      	cbnz	r0, 8002ea4 <__cvt+0xb8>
 8002e9c:	f1c6 0601 	rsb	r6, r6, #1
 8002ea0:	f8ca 6000 	str.w	r6, [sl]
 8002ea4:	f8da 3000 	ldr.w	r3, [sl]
 8002ea8:	4499      	add	r9, r3
 8002eaa:	e7d3      	b.n	8002e54 <__cvt+0x68>
 8002eac:	1c59      	adds	r1, r3, #1
 8002eae:	9107      	str	r1, [sp, #28]
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e7d9      	b.n	8002e68 <__cvt+0x7c>

08002eb4 <__exponent>:
 8002eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	bfb6      	itet	lt
 8002eba:	232d      	movlt	r3, #45	@ 0x2d
 8002ebc:	232b      	movge	r3, #43	@ 0x2b
 8002ebe:	4249      	neglt	r1, r1
 8002ec0:	2909      	cmp	r1, #9
 8002ec2:	7002      	strb	r2, [r0, #0]
 8002ec4:	7043      	strb	r3, [r0, #1]
 8002ec6:	dd29      	ble.n	8002f1c <__exponent+0x68>
 8002ec8:	f10d 0307 	add.w	r3, sp, #7
 8002ecc:	461d      	mov	r5, r3
 8002ece:	270a      	movs	r7, #10
 8002ed0:	fbb1 f6f7 	udiv	r6, r1, r7
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	fb07 1416 	mls	r4, r7, r6, r1
 8002eda:	3430      	adds	r4, #48	@ 0x30
 8002edc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	2c63      	cmp	r4, #99	@ 0x63
 8002ee4:	4631      	mov	r1, r6
 8002ee6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002eea:	dcf1      	bgt.n	8002ed0 <__exponent+0x1c>
 8002eec:	3130      	adds	r1, #48	@ 0x30
 8002eee:	1e94      	subs	r4, r2, #2
 8002ef0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	1c41      	adds	r1, r0, #1
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	d30a      	bcc.n	8002f12 <__exponent+0x5e>
 8002efc:	f10d 0309 	add.w	r3, sp, #9
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	42ac      	cmp	r4, r5
 8002f04:	bf88      	it	hi
 8002f06:	2300      	movhi	r3, #0
 8002f08:	3302      	adds	r3, #2
 8002f0a:	4403      	add	r3, r0
 8002f0c:	1a18      	subs	r0, r3, r0
 8002f0e:	b003      	add	sp, #12
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f1a:	e7ed      	b.n	8002ef8 <__exponent+0x44>
 8002f1c:	2330      	movs	r3, #48	@ 0x30
 8002f1e:	3130      	adds	r1, #48	@ 0x30
 8002f20:	7083      	strb	r3, [r0, #2]
 8002f22:	70c1      	strb	r1, [r0, #3]
 8002f24:	1d03      	adds	r3, r0, #4
 8002f26:	e7f1      	b.n	8002f0c <__exponent+0x58>

08002f28 <_printf_float>:
 8002f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2c:	b091      	sub	sp, #68	@ 0x44
 8002f2e:	460c      	mov	r4, r1
 8002f30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002f34:	4616      	mov	r6, r2
 8002f36:	461f      	mov	r7, r3
 8002f38:	4605      	mov	r5, r0
 8002f3a:	f000 fcf5 	bl	8003928 <_localeconv_r>
 8002f3e:	6803      	ldr	r3, [r0, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	9308      	str	r3, [sp, #32]
 8002f44:	f7fd f91c 	bl	8000180 <strlen>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8002f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f50:	9009      	str	r0, [sp, #36]	@ 0x24
 8002f52:	3307      	adds	r3, #7
 8002f54:	f023 0307 	bic.w	r3, r3, #7
 8002f58:	f103 0208 	add.w	r2, r3, #8
 8002f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002f60:	f8d4 b000 	ldr.w	fp, [r4]
 8002f64:	f8c8 2000 	str.w	r2, [r8]
 8002f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002f82:	4b9c      	ldr	r3, [pc, #624]	@ (80031f4 <_printf_float+0x2cc>)
 8002f84:	f7fd fd5a 	bl	8000a3c <__aeabi_dcmpun>
 8002f88:	bb70      	cbnz	r0, 8002fe8 <_printf_float+0xc0>
 8002f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f92:	4b98      	ldr	r3, [pc, #608]	@ (80031f4 <_printf_float+0x2cc>)
 8002f94:	f7fd fd34 	bl	8000a00 <__aeabi_dcmple>
 8002f98:	bb30      	cbnz	r0, 8002fe8 <_printf_float+0xc0>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	f7fd fd23 	bl	80009ec <__aeabi_dcmplt>
 8002fa6:	b110      	cbz	r0, 8002fae <_printf_float+0x86>
 8002fa8:	232d      	movs	r3, #45	@ 0x2d
 8002faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fae:	4a92      	ldr	r2, [pc, #584]	@ (80031f8 <_printf_float+0x2d0>)
 8002fb0:	4b92      	ldr	r3, [pc, #584]	@ (80031fc <_printf_float+0x2d4>)
 8002fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002fb6:	bf94      	ite	ls
 8002fb8:	4690      	movls	r8, r2
 8002fba:	4698      	movhi	r8, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	f04f 0900 	mov.w	r9, #0
 8002fc2:	6123      	str	r3, [r4, #16]
 8002fc4:	f02b 0304 	bic.w	r3, fp, #4
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	4633      	mov	r3, r6
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	9700      	str	r7, [sp, #0]
 8002fd2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002fd4:	f000 f9d4 	bl	8003380 <_printf_common>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f040 8090 	bne.w	80030fe <_printf_float+0x1d6>
 8002fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fe2:	b011      	add	sp, #68	@ 0x44
 8002fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	4640      	mov	r0, r8
 8002fee:	4649      	mov	r1, r9
 8002ff0:	f7fd fd24 	bl	8000a3c <__aeabi_dcmpun>
 8002ff4:	b148      	cbz	r0, 800300a <_printf_float+0xe2>
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bfb8      	it	lt
 8002ffc:	232d      	movlt	r3, #45	@ 0x2d
 8002ffe:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <_printf_float+0x2d8>)
 8003000:	bfb8      	it	lt
 8003002:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <_printf_float+0x2dc>)
 8003008:	e7d3      	b.n	8002fb2 <_printf_float+0x8a>
 800300a:	6863      	ldr	r3, [r4, #4]
 800300c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	d13f      	bne.n	8003094 <_printf_float+0x16c>
 8003014:	2306      	movs	r3, #6
 8003016:	6063      	str	r3, [r4, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	9206      	str	r2, [sp, #24]
 8003022:	aa0e      	add	r2, sp, #56	@ 0x38
 8003024:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003028:	aa0d      	add	r2, sp, #52	@ 0x34
 800302a:	9203      	str	r2, [sp, #12]
 800302c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003030:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	4642      	mov	r2, r8
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4628      	mov	r0, r5
 800303c:	464b      	mov	r3, r9
 800303e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003040:	f7ff fed4 	bl	8002dec <__cvt>
 8003044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003046:	4680      	mov	r8, r0
 8003048:	2947      	cmp	r1, #71	@ 0x47
 800304a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800304c:	d128      	bne.n	80030a0 <_printf_float+0x178>
 800304e:	1cc8      	adds	r0, r1, #3
 8003050:	db02      	blt.n	8003058 <_printf_float+0x130>
 8003052:	6863      	ldr	r3, [r4, #4]
 8003054:	4299      	cmp	r1, r3
 8003056:	dd40      	ble.n	80030da <_printf_float+0x1b2>
 8003058:	f1aa 0a02 	sub.w	sl, sl, #2
 800305c:	fa5f fa8a 	uxtb.w	sl, sl
 8003060:	4652      	mov	r2, sl
 8003062:	3901      	subs	r1, #1
 8003064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003068:	910d      	str	r1, [sp, #52]	@ 0x34
 800306a:	f7ff ff23 	bl	8002eb4 <__exponent>
 800306e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003070:	4681      	mov	r9, r0
 8003072:	1813      	adds	r3, r2, r0
 8003074:	2a01      	cmp	r2, #1
 8003076:	6123      	str	r3, [r4, #16]
 8003078:	dc02      	bgt.n	8003080 <_printf_float+0x158>
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	07d2      	lsls	r2, r2, #31
 800307e:	d501      	bpl.n	8003084 <_printf_float+0x15c>
 8003080:	3301      	adds	r3, #1
 8003082:	6123      	str	r3, [r4, #16]
 8003084:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003088:	2b00      	cmp	r3, #0
 800308a:	d09e      	beq.n	8002fca <_printf_float+0xa2>
 800308c:	232d      	movs	r3, #45	@ 0x2d
 800308e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003092:	e79a      	b.n	8002fca <_printf_float+0xa2>
 8003094:	2947      	cmp	r1, #71	@ 0x47
 8003096:	d1bf      	bne.n	8003018 <_printf_float+0xf0>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1bd      	bne.n	8003018 <_printf_float+0xf0>
 800309c:	2301      	movs	r3, #1
 800309e:	e7ba      	b.n	8003016 <_printf_float+0xee>
 80030a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030a4:	d9dc      	bls.n	8003060 <_printf_float+0x138>
 80030a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80030aa:	d118      	bne.n	80030de <_printf_float+0x1b6>
 80030ac:	2900      	cmp	r1, #0
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	dd0b      	ble.n	80030ca <_printf_float+0x1a2>
 80030b2:	6121      	str	r1, [r4, #16]
 80030b4:	b913      	cbnz	r3, 80030bc <_printf_float+0x194>
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	07d0      	lsls	r0, r2, #31
 80030ba:	d502      	bpl.n	80030c2 <_printf_float+0x19a>
 80030bc:	3301      	adds	r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	6123      	str	r3, [r4, #16]
 80030c2:	f04f 0900 	mov.w	r9, #0
 80030c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80030c8:	e7dc      	b.n	8003084 <_printf_float+0x15c>
 80030ca:	b913      	cbnz	r3, 80030d2 <_printf_float+0x1aa>
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	07d2      	lsls	r2, r2, #31
 80030d0:	d501      	bpl.n	80030d6 <_printf_float+0x1ae>
 80030d2:	3302      	adds	r3, #2
 80030d4:	e7f4      	b.n	80030c0 <_printf_float+0x198>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e7f2      	b.n	80030c0 <_printf_float+0x198>
 80030da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80030de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80030e0:	4299      	cmp	r1, r3
 80030e2:	db05      	blt.n	80030f0 <_printf_float+0x1c8>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	6121      	str	r1, [r4, #16]
 80030e8:	07d8      	lsls	r0, r3, #31
 80030ea:	d5ea      	bpl.n	80030c2 <_printf_float+0x19a>
 80030ec:	1c4b      	adds	r3, r1, #1
 80030ee:	e7e7      	b.n	80030c0 <_printf_float+0x198>
 80030f0:	2900      	cmp	r1, #0
 80030f2:	bfcc      	ite	gt
 80030f4:	2201      	movgt	r2, #1
 80030f6:	f1c1 0202 	rsble	r2, r1, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	e7e0      	b.n	80030c0 <_printf_float+0x198>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	055a      	lsls	r2, r3, #21
 8003102:	d407      	bmi.n	8003114 <_printf_float+0x1ec>
 8003104:	6923      	ldr	r3, [r4, #16]
 8003106:	4642      	mov	r2, r8
 8003108:	4631      	mov	r1, r6
 800310a:	4628      	mov	r0, r5
 800310c:	47b8      	blx	r7
 800310e:	3001      	adds	r0, #1
 8003110:	d12b      	bne.n	800316a <_printf_float+0x242>
 8003112:	e764      	b.n	8002fde <_printf_float+0xb6>
 8003114:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003118:	f240 80dc 	bls.w	80032d4 <_printf_float+0x3ac>
 800311c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	f7fd fc58 	bl	80009d8 <__aeabi_dcmpeq>
 8003128:	2800      	cmp	r0, #0
 800312a:	d033      	beq.n	8003194 <_printf_float+0x26c>
 800312c:	2301      	movs	r3, #1
 800312e:	4631      	mov	r1, r6
 8003130:	4628      	mov	r0, r5
 8003132:	4a35      	ldr	r2, [pc, #212]	@ (8003208 <_printf_float+0x2e0>)
 8003134:	47b8      	blx	r7
 8003136:	3001      	adds	r0, #1
 8003138:	f43f af51 	beq.w	8002fde <_printf_float+0xb6>
 800313c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003140:	4543      	cmp	r3, r8
 8003142:	db02      	blt.n	800314a <_printf_float+0x222>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	07d8      	lsls	r0, r3, #31
 8003148:	d50f      	bpl.n	800316a <_printf_float+0x242>
 800314a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800314e:	4631      	mov	r1, r6
 8003150:	4628      	mov	r0, r5
 8003152:	47b8      	blx	r7
 8003154:	3001      	adds	r0, #1
 8003156:	f43f af42 	beq.w	8002fde <_printf_float+0xb6>
 800315a:	f04f 0900 	mov.w	r9, #0
 800315e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003162:	f104 0a1a 	add.w	sl, r4, #26
 8003166:	45c8      	cmp	r8, r9
 8003168:	dc09      	bgt.n	800317e <_printf_float+0x256>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	079b      	lsls	r3, r3, #30
 800316e:	f100 8102 	bmi.w	8003376 <_printf_float+0x44e>
 8003172:	68e0      	ldr	r0, [r4, #12]
 8003174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003176:	4298      	cmp	r0, r3
 8003178:	bfb8      	it	lt
 800317a:	4618      	movlt	r0, r3
 800317c:	e731      	b.n	8002fe2 <_printf_float+0xba>
 800317e:	2301      	movs	r3, #1
 8003180:	4652      	mov	r2, sl
 8003182:	4631      	mov	r1, r6
 8003184:	4628      	mov	r0, r5
 8003186:	47b8      	blx	r7
 8003188:	3001      	adds	r0, #1
 800318a:	f43f af28 	beq.w	8002fde <_printf_float+0xb6>
 800318e:	f109 0901 	add.w	r9, r9, #1
 8003192:	e7e8      	b.n	8003166 <_printf_float+0x23e>
 8003194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003196:	2b00      	cmp	r3, #0
 8003198:	dc38      	bgt.n	800320c <_printf_float+0x2e4>
 800319a:	2301      	movs	r3, #1
 800319c:	4631      	mov	r1, r6
 800319e:	4628      	mov	r0, r5
 80031a0:	4a19      	ldr	r2, [pc, #100]	@ (8003208 <_printf_float+0x2e0>)
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	f43f af1a 	beq.w	8002fde <_printf_float+0xb6>
 80031aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80031ae:	ea59 0303 	orrs.w	r3, r9, r3
 80031b2:	d102      	bne.n	80031ba <_printf_float+0x292>
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	07d9      	lsls	r1, r3, #31
 80031b8:	d5d7      	bpl.n	800316a <_printf_float+0x242>
 80031ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031be:	4631      	mov	r1, r6
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b8      	blx	r7
 80031c4:	3001      	adds	r0, #1
 80031c6:	f43f af0a 	beq.w	8002fde <_printf_float+0xb6>
 80031ca:	f04f 0a00 	mov.w	sl, #0
 80031ce:	f104 0b1a 	add.w	fp, r4, #26
 80031d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031d4:	425b      	negs	r3, r3
 80031d6:	4553      	cmp	r3, sl
 80031d8:	dc01      	bgt.n	80031de <_printf_float+0x2b6>
 80031da:	464b      	mov	r3, r9
 80031dc:	e793      	b.n	8003106 <_printf_float+0x1de>
 80031de:	2301      	movs	r3, #1
 80031e0:	465a      	mov	r2, fp
 80031e2:	4631      	mov	r1, r6
 80031e4:	4628      	mov	r0, r5
 80031e6:	47b8      	blx	r7
 80031e8:	3001      	adds	r0, #1
 80031ea:	f43f aef8 	beq.w	8002fde <_printf_float+0xb6>
 80031ee:	f10a 0a01 	add.w	sl, sl, #1
 80031f2:	e7ee      	b.n	80031d2 <_printf_float+0x2aa>
 80031f4:	7fefffff 	.word	0x7fefffff
 80031f8:	08005b30 	.word	0x08005b30
 80031fc:	08005b34 	.word	0x08005b34
 8003200:	08005b38 	.word	0x08005b38
 8003204:	08005b3c 	.word	0x08005b3c
 8003208:	08005b40 	.word	0x08005b40
 800320c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800320e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003212:	4553      	cmp	r3, sl
 8003214:	bfa8      	it	ge
 8003216:	4653      	movge	r3, sl
 8003218:	2b00      	cmp	r3, #0
 800321a:	4699      	mov	r9, r3
 800321c:	dc36      	bgt.n	800328c <_printf_float+0x364>
 800321e:	f04f 0b00 	mov.w	fp, #0
 8003222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003226:	f104 021a 	add.w	r2, r4, #26
 800322a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800322c:	930a      	str	r3, [sp, #40]	@ 0x28
 800322e:	eba3 0309 	sub.w	r3, r3, r9
 8003232:	455b      	cmp	r3, fp
 8003234:	dc31      	bgt.n	800329a <_printf_float+0x372>
 8003236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003238:	459a      	cmp	sl, r3
 800323a:	dc3a      	bgt.n	80032b2 <_printf_float+0x38a>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	07da      	lsls	r2, r3, #31
 8003240:	d437      	bmi.n	80032b2 <_printf_float+0x38a>
 8003242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003244:	ebaa 0903 	sub.w	r9, sl, r3
 8003248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800324a:	ebaa 0303 	sub.w	r3, sl, r3
 800324e:	4599      	cmp	r9, r3
 8003250:	bfa8      	it	ge
 8003252:	4699      	movge	r9, r3
 8003254:	f1b9 0f00 	cmp.w	r9, #0
 8003258:	dc33      	bgt.n	80032c2 <_printf_float+0x39a>
 800325a:	f04f 0800 	mov.w	r8, #0
 800325e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003262:	f104 0b1a 	add.w	fp, r4, #26
 8003266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003268:	ebaa 0303 	sub.w	r3, sl, r3
 800326c:	eba3 0309 	sub.w	r3, r3, r9
 8003270:	4543      	cmp	r3, r8
 8003272:	f77f af7a 	ble.w	800316a <_printf_float+0x242>
 8003276:	2301      	movs	r3, #1
 8003278:	465a      	mov	r2, fp
 800327a:	4631      	mov	r1, r6
 800327c:	4628      	mov	r0, r5
 800327e:	47b8      	blx	r7
 8003280:	3001      	adds	r0, #1
 8003282:	f43f aeac 	beq.w	8002fde <_printf_float+0xb6>
 8003286:	f108 0801 	add.w	r8, r8, #1
 800328a:	e7ec      	b.n	8003266 <_printf_float+0x33e>
 800328c:	4642      	mov	r2, r8
 800328e:	4631      	mov	r1, r6
 8003290:	4628      	mov	r0, r5
 8003292:	47b8      	blx	r7
 8003294:	3001      	adds	r0, #1
 8003296:	d1c2      	bne.n	800321e <_printf_float+0x2f6>
 8003298:	e6a1      	b.n	8002fde <_printf_float+0xb6>
 800329a:	2301      	movs	r3, #1
 800329c:	4631      	mov	r1, r6
 800329e:	4628      	mov	r0, r5
 80032a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80032a2:	47b8      	blx	r7
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae9a 	beq.w	8002fde <_printf_float+0xb6>
 80032aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80032ac:	f10b 0b01 	add.w	fp, fp, #1
 80032b0:	e7bb      	b.n	800322a <_printf_float+0x302>
 80032b2:	4631      	mov	r1, r6
 80032b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	d1c0      	bne.n	8003242 <_printf_float+0x31a>
 80032c0:	e68d      	b.n	8002fde <_printf_float+0xb6>
 80032c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80032c4:	464b      	mov	r3, r9
 80032c6:	4631      	mov	r1, r6
 80032c8:	4628      	mov	r0, r5
 80032ca:	4442      	add	r2, r8
 80032cc:	47b8      	blx	r7
 80032ce:	3001      	adds	r0, #1
 80032d0:	d1c3      	bne.n	800325a <_printf_float+0x332>
 80032d2:	e684      	b.n	8002fde <_printf_float+0xb6>
 80032d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80032d8:	f1ba 0f01 	cmp.w	sl, #1
 80032dc:	dc01      	bgt.n	80032e2 <_printf_float+0x3ba>
 80032de:	07db      	lsls	r3, r3, #31
 80032e0:	d536      	bpl.n	8003350 <_printf_float+0x428>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4642      	mov	r2, r8
 80032e6:	4631      	mov	r1, r6
 80032e8:	4628      	mov	r0, r5
 80032ea:	47b8      	blx	r7
 80032ec:	3001      	adds	r0, #1
 80032ee:	f43f ae76 	beq.w	8002fde <_printf_float+0xb6>
 80032f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f ae6e 	beq.w	8002fde <_printf_float+0xb6>
 8003302:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003306:	2200      	movs	r2, #0
 8003308:	2300      	movs	r3, #0
 800330a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800330e:	f7fd fb63 	bl	80009d8 <__aeabi_dcmpeq>
 8003312:	b9c0      	cbnz	r0, 8003346 <_printf_float+0x41e>
 8003314:	4653      	mov	r3, sl
 8003316:	f108 0201 	add.w	r2, r8, #1
 800331a:	4631      	mov	r1, r6
 800331c:	4628      	mov	r0, r5
 800331e:	47b8      	blx	r7
 8003320:	3001      	adds	r0, #1
 8003322:	d10c      	bne.n	800333e <_printf_float+0x416>
 8003324:	e65b      	b.n	8002fde <_printf_float+0xb6>
 8003326:	2301      	movs	r3, #1
 8003328:	465a      	mov	r2, fp
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	f43f ae54 	beq.w	8002fde <_printf_float+0xb6>
 8003336:	f108 0801 	add.w	r8, r8, #1
 800333a:	45d0      	cmp	r8, sl
 800333c:	dbf3      	blt.n	8003326 <_printf_float+0x3fe>
 800333e:	464b      	mov	r3, r9
 8003340:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003344:	e6e0      	b.n	8003108 <_printf_float+0x1e0>
 8003346:	f04f 0800 	mov.w	r8, #0
 800334a:	f104 0b1a 	add.w	fp, r4, #26
 800334e:	e7f4      	b.n	800333a <_printf_float+0x412>
 8003350:	2301      	movs	r3, #1
 8003352:	4642      	mov	r2, r8
 8003354:	e7e1      	b.n	800331a <_printf_float+0x3f2>
 8003356:	2301      	movs	r3, #1
 8003358:	464a      	mov	r2, r9
 800335a:	4631      	mov	r1, r6
 800335c:	4628      	mov	r0, r5
 800335e:	47b8      	blx	r7
 8003360:	3001      	adds	r0, #1
 8003362:	f43f ae3c 	beq.w	8002fde <_printf_float+0xb6>
 8003366:	f108 0801 	add.w	r8, r8, #1
 800336a:	68e3      	ldr	r3, [r4, #12]
 800336c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800336e:	1a5b      	subs	r3, r3, r1
 8003370:	4543      	cmp	r3, r8
 8003372:	dcf0      	bgt.n	8003356 <_printf_float+0x42e>
 8003374:	e6fd      	b.n	8003172 <_printf_float+0x24a>
 8003376:	f04f 0800 	mov.w	r8, #0
 800337a:	f104 0919 	add.w	r9, r4, #25
 800337e:	e7f4      	b.n	800336a <_printf_float+0x442>

08003380 <_printf_common>:
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	4616      	mov	r6, r2
 8003386:	4698      	mov	r8, r3
 8003388:	688a      	ldr	r2, [r1, #8]
 800338a:	690b      	ldr	r3, [r1, #16]
 800338c:	4607      	mov	r7, r0
 800338e:	4293      	cmp	r3, r2
 8003390:	bfb8      	it	lt
 8003392:	4613      	movlt	r3, r2
 8003394:	6033      	str	r3, [r6, #0]
 8003396:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800339a:	460c      	mov	r4, r1
 800339c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033a0:	b10a      	cbz	r2, 80033a6 <_printf_common+0x26>
 80033a2:	3301      	adds	r3, #1
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	0699      	lsls	r1, r3, #26
 80033aa:	bf42      	ittt	mi
 80033ac:	6833      	ldrmi	r3, [r6, #0]
 80033ae:	3302      	addmi	r3, #2
 80033b0:	6033      	strmi	r3, [r6, #0]
 80033b2:	6825      	ldr	r5, [r4, #0]
 80033b4:	f015 0506 	ands.w	r5, r5, #6
 80033b8:	d106      	bne.n	80033c8 <_printf_common+0x48>
 80033ba:	f104 0a19 	add.w	sl, r4, #25
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	6832      	ldr	r2, [r6, #0]
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	dc2b      	bgt.n	8003420 <_printf_common+0xa0>
 80033c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	3b00      	subs	r3, #0
 80033d0:	bf18      	it	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	0692      	lsls	r2, r2, #26
 80033d6:	d430      	bmi.n	800343a <_printf_common+0xba>
 80033d8:	4641      	mov	r1, r8
 80033da:	4638      	mov	r0, r7
 80033dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033e0:	47c8      	blx	r9
 80033e2:	3001      	adds	r0, #1
 80033e4:	d023      	beq.n	800342e <_printf_common+0xae>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	6922      	ldr	r2, [r4, #16]
 80033ea:	f003 0306 	and.w	r3, r3, #6
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf14      	ite	ne
 80033f2:	2500      	movne	r5, #0
 80033f4:	6833      	ldreq	r3, [r6, #0]
 80033f6:	f04f 0600 	mov.w	r6, #0
 80033fa:	bf08      	it	eq
 80033fc:	68e5      	ldreq	r5, [r4, #12]
 80033fe:	f104 041a 	add.w	r4, r4, #26
 8003402:	bf08      	it	eq
 8003404:	1aed      	subeq	r5, r5, r3
 8003406:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800340a:	bf08      	it	eq
 800340c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003410:	4293      	cmp	r3, r2
 8003412:	bfc4      	itt	gt
 8003414:	1a9b      	subgt	r3, r3, r2
 8003416:	18ed      	addgt	r5, r5, r3
 8003418:	42b5      	cmp	r5, r6
 800341a:	d11a      	bne.n	8003452 <_printf_common+0xd2>
 800341c:	2000      	movs	r0, #0
 800341e:	e008      	b.n	8003432 <_printf_common+0xb2>
 8003420:	2301      	movs	r3, #1
 8003422:	4652      	mov	r2, sl
 8003424:	4641      	mov	r1, r8
 8003426:	4638      	mov	r0, r7
 8003428:	47c8      	blx	r9
 800342a:	3001      	adds	r0, #1
 800342c:	d103      	bne.n	8003436 <_printf_common+0xb6>
 800342e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003436:	3501      	adds	r5, #1
 8003438:	e7c1      	b.n	80033be <_printf_common+0x3e>
 800343a:	2030      	movs	r0, #48	@ 0x30
 800343c:	18e1      	adds	r1, r4, r3
 800343e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003448:	4422      	add	r2, r4
 800344a:	3302      	adds	r3, #2
 800344c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003450:	e7c2      	b.n	80033d8 <_printf_common+0x58>
 8003452:	2301      	movs	r3, #1
 8003454:	4622      	mov	r2, r4
 8003456:	4641      	mov	r1, r8
 8003458:	4638      	mov	r0, r7
 800345a:	47c8      	blx	r9
 800345c:	3001      	adds	r0, #1
 800345e:	d0e6      	beq.n	800342e <_printf_common+0xae>
 8003460:	3601      	adds	r6, #1
 8003462:	e7d9      	b.n	8003418 <_printf_common+0x98>

08003464 <_printf_i>:
 8003464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	7e0f      	ldrb	r7, [r1, #24]
 800346a:	4691      	mov	r9, r2
 800346c:	2f78      	cmp	r7, #120	@ 0x78
 800346e:	4680      	mov	r8, r0
 8003470:	460c      	mov	r4, r1
 8003472:	469a      	mov	sl, r3
 8003474:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800347a:	d807      	bhi.n	800348c <_printf_i+0x28>
 800347c:	2f62      	cmp	r7, #98	@ 0x62
 800347e:	d80a      	bhi.n	8003496 <_printf_i+0x32>
 8003480:	2f00      	cmp	r7, #0
 8003482:	f000 80d3 	beq.w	800362c <_printf_i+0x1c8>
 8003486:	2f58      	cmp	r7, #88	@ 0x58
 8003488:	f000 80ba 	beq.w	8003600 <_printf_i+0x19c>
 800348c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003494:	e03a      	b.n	800350c <_printf_i+0xa8>
 8003496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800349a:	2b15      	cmp	r3, #21
 800349c:	d8f6      	bhi.n	800348c <_printf_i+0x28>
 800349e:	a101      	add	r1, pc, #4	@ (adr r1, 80034a4 <_printf_i+0x40>)
 80034a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	08003511 	.word	0x08003511
 80034ac:	0800348d 	.word	0x0800348d
 80034b0:	0800348d 	.word	0x0800348d
 80034b4:	0800348d 	.word	0x0800348d
 80034b8:	0800348d 	.word	0x0800348d
 80034bc:	08003511 	.word	0x08003511
 80034c0:	0800348d 	.word	0x0800348d
 80034c4:	0800348d 	.word	0x0800348d
 80034c8:	0800348d 	.word	0x0800348d
 80034cc:	0800348d 	.word	0x0800348d
 80034d0:	08003613 	.word	0x08003613
 80034d4:	0800353b 	.word	0x0800353b
 80034d8:	080035cd 	.word	0x080035cd
 80034dc:	0800348d 	.word	0x0800348d
 80034e0:	0800348d 	.word	0x0800348d
 80034e4:	08003635 	.word	0x08003635
 80034e8:	0800348d 	.word	0x0800348d
 80034ec:	0800353b 	.word	0x0800353b
 80034f0:	0800348d 	.word	0x0800348d
 80034f4:	0800348d 	.word	0x0800348d
 80034f8:	080035d5 	.word	0x080035d5
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6032      	str	r2, [r6, #0]
 8003504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	e09e      	b.n	800364e <_printf_i+0x1ea>
 8003510:	6833      	ldr	r3, [r6, #0]
 8003512:	6820      	ldr	r0, [r4, #0]
 8003514:	1d19      	adds	r1, r3, #4
 8003516:	6031      	str	r1, [r6, #0]
 8003518:	0606      	lsls	r6, r0, #24
 800351a:	d501      	bpl.n	8003520 <_printf_i+0xbc>
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	e003      	b.n	8003528 <_printf_i+0xc4>
 8003520:	0645      	lsls	r5, r0, #25
 8003522:	d5fb      	bpl.n	800351c <_printf_i+0xb8>
 8003524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003528:	2d00      	cmp	r5, #0
 800352a:	da03      	bge.n	8003534 <_printf_i+0xd0>
 800352c:	232d      	movs	r3, #45	@ 0x2d
 800352e:	426d      	negs	r5, r5
 8003530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003534:	230a      	movs	r3, #10
 8003536:	4859      	ldr	r0, [pc, #356]	@ (800369c <_printf_i+0x238>)
 8003538:	e011      	b.n	800355e <_printf_i+0xfa>
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	0608      	lsls	r0, r1, #24
 8003540:	f853 5b04 	ldr.w	r5, [r3], #4
 8003544:	d402      	bmi.n	800354c <_printf_i+0xe8>
 8003546:	0649      	lsls	r1, r1, #25
 8003548:	bf48      	it	mi
 800354a:	b2ad      	uxthmi	r5, r5
 800354c:	2f6f      	cmp	r7, #111	@ 0x6f
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	bf14      	ite	ne
 8003552:	230a      	movne	r3, #10
 8003554:	2308      	moveq	r3, #8
 8003556:	4851      	ldr	r0, [pc, #324]	@ (800369c <_printf_i+0x238>)
 8003558:	2100      	movs	r1, #0
 800355a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800355e:	6866      	ldr	r6, [r4, #4]
 8003560:	2e00      	cmp	r6, #0
 8003562:	bfa8      	it	ge
 8003564:	6821      	ldrge	r1, [r4, #0]
 8003566:	60a6      	str	r6, [r4, #8]
 8003568:	bfa4      	itt	ge
 800356a:	f021 0104 	bicge.w	r1, r1, #4
 800356e:	6021      	strge	r1, [r4, #0]
 8003570:	b90d      	cbnz	r5, 8003576 <_printf_i+0x112>
 8003572:	2e00      	cmp	r6, #0
 8003574:	d04b      	beq.n	800360e <_printf_i+0x1aa>
 8003576:	4616      	mov	r6, r2
 8003578:	fbb5 f1f3 	udiv	r1, r5, r3
 800357c:	fb03 5711 	mls	r7, r3, r1, r5
 8003580:	5dc7      	ldrb	r7, [r0, r7]
 8003582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003586:	462f      	mov	r7, r5
 8003588:	42bb      	cmp	r3, r7
 800358a:	460d      	mov	r5, r1
 800358c:	d9f4      	bls.n	8003578 <_printf_i+0x114>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d10b      	bne.n	80035aa <_printf_i+0x146>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	07df      	lsls	r7, r3, #31
 8003596:	d508      	bpl.n	80035aa <_printf_i+0x146>
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	6861      	ldr	r1, [r4, #4]
 800359c:	4299      	cmp	r1, r3
 800359e:	bfde      	ittt	le
 80035a0:	2330      	movle	r3, #48	@ 0x30
 80035a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80035aa:	1b92      	subs	r2, r2, r6
 80035ac:	6122      	str	r2, [r4, #16]
 80035ae:	464b      	mov	r3, r9
 80035b0:	4621      	mov	r1, r4
 80035b2:	4640      	mov	r0, r8
 80035b4:	f8cd a000 	str.w	sl, [sp]
 80035b8:	aa03      	add	r2, sp, #12
 80035ba:	f7ff fee1 	bl	8003380 <_printf_common>
 80035be:	3001      	adds	r0, #1
 80035c0:	d14a      	bne.n	8003658 <_printf_i+0x1f4>
 80035c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035c6:	b004      	add	sp, #16
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	2778      	movs	r7, #120	@ 0x78
 80035d6:	4832      	ldr	r0, [pc, #200]	@ (80036a0 <_printf_i+0x23c>)
 80035d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	6831      	ldr	r1, [r6, #0]
 80035e0:	061f      	lsls	r7, r3, #24
 80035e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80035e6:	d402      	bmi.n	80035ee <_printf_i+0x18a>
 80035e8:	065f      	lsls	r7, r3, #25
 80035ea:	bf48      	it	mi
 80035ec:	b2ad      	uxthmi	r5, r5
 80035ee:	6031      	str	r1, [r6, #0]
 80035f0:	07d9      	lsls	r1, r3, #31
 80035f2:	bf44      	itt	mi
 80035f4:	f043 0320 	orrmi.w	r3, r3, #32
 80035f8:	6023      	strmi	r3, [r4, #0]
 80035fa:	b11d      	cbz	r5, 8003604 <_printf_i+0x1a0>
 80035fc:	2310      	movs	r3, #16
 80035fe:	e7ab      	b.n	8003558 <_printf_i+0xf4>
 8003600:	4826      	ldr	r0, [pc, #152]	@ (800369c <_printf_i+0x238>)
 8003602:	e7e9      	b.n	80035d8 <_printf_i+0x174>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	e7f6      	b.n	80035fc <_printf_i+0x198>
 800360e:	4616      	mov	r6, r2
 8003610:	e7bd      	b.n	800358e <_printf_i+0x12a>
 8003612:	6833      	ldr	r3, [r6, #0]
 8003614:	6825      	ldr	r5, [r4, #0]
 8003616:	1d18      	adds	r0, r3, #4
 8003618:	6961      	ldr	r1, [r4, #20]
 800361a:	6030      	str	r0, [r6, #0]
 800361c:	062e      	lsls	r6, r5, #24
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	d501      	bpl.n	8003626 <_printf_i+0x1c2>
 8003622:	6019      	str	r1, [r3, #0]
 8003624:	e002      	b.n	800362c <_printf_i+0x1c8>
 8003626:	0668      	lsls	r0, r5, #25
 8003628:	d5fb      	bpl.n	8003622 <_printf_i+0x1be>
 800362a:	8019      	strh	r1, [r3, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	4616      	mov	r6, r2
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	e7bc      	b.n	80035ae <_printf_i+0x14a>
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	2100      	movs	r1, #0
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	6032      	str	r2, [r6, #0]
 800363c:	681e      	ldr	r6, [r3, #0]
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	4630      	mov	r0, r6
 8003642:	f000 f9e8 	bl	8003a16 <memchr>
 8003646:	b108      	cbz	r0, 800364c <_printf_i+0x1e8>
 8003648:	1b80      	subs	r0, r0, r6
 800364a:	6060      	str	r0, [r4, #4]
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	6123      	str	r3, [r4, #16]
 8003650:	2300      	movs	r3, #0
 8003652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003656:	e7aa      	b.n	80035ae <_printf_i+0x14a>
 8003658:	4632      	mov	r2, r6
 800365a:	4649      	mov	r1, r9
 800365c:	4640      	mov	r0, r8
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	47d0      	blx	sl
 8003662:	3001      	adds	r0, #1
 8003664:	d0ad      	beq.n	80035c2 <_printf_i+0x15e>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	079b      	lsls	r3, r3, #30
 800366a:	d413      	bmi.n	8003694 <_printf_i+0x230>
 800366c:	68e0      	ldr	r0, [r4, #12]
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	4298      	cmp	r0, r3
 8003672:	bfb8      	it	lt
 8003674:	4618      	movlt	r0, r3
 8003676:	e7a6      	b.n	80035c6 <_printf_i+0x162>
 8003678:	2301      	movs	r3, #1
 800367a:	4632      	mov	r2, r6
 800367c:	4649      	mov	r1, r9
 800367e:	4640      	mov	r0, r8
 8003680:	47d0      	blx	sl
 8003682:	3001      	adds	r0, #1
 8003684:	d09d      	beq.n	80035c2 <_printf_i+0x15e>
 8003686:	3501      	adds	r5, #1
 8003688:	68e3      	ldr	r3, [r4, #12]
 800368a:	9903      	ldr	r1, [sp, #12]
 800368c:	1a5b      	subs	r3, r3, r1
 800368e:	42ab      	cmp	r3, r5
 8003690:	dcf2      	bgt.n	8003678 <_printf_i+0x214>
 8003692:	e7eb      	b.n	800366c <_printf_i+0x208>
 8003694:	2500      	movs	r5, #0
 8003696:	f104 0619 	add.w	r6, r4, #25
 800369a:	e7f5      	b.n	8003688 <_printf_i+0x224>
 800369c:	08005b42 	.word	0x08005b42
 80036a0:	08005b53 	.word	0x08005b53

080036a4 <std>:
 80036a4:	2300      	movs	r3, #0
 80036a6:	b510      	push	{r4, lr}
 80036a8:	4604      	mov	r4, r0
 80036aa:	e9c0 3300 	strd	r3, r3, [r0]
 80036ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036b2:	6083      	str	r3, [r0, #8]
 80036b4:	8181      	strh	r1, [r0, #12]
 80036b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80036b8:	81c2      	strh	r2, [r0, #14]
 80036ba:	6183      	str	r3, [r0, #24]
 80036bc:	4619      	mov	r1, r3
 80036be:	2208      	movs	r2, #8
 80036c0:	305c      	adds	r0, #92	@ 0x5c
 80036c2:	f000 f928 	bl	8003916 <memset>
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <std+0x58>)
 80036c8:	6224      	str	r4, [r4, #32]
 80036ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80036cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <std+0x5c>)
 80036ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <std+0x60>)
 80036d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <std+0x64>)
 80036d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80036d8:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <std+0x68>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	d006      	beq.n	80036ec <std+0x48>
 80036de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036e2:	4294      	cmp	r4, r2
 80036e4:	d002      	beq.n	80036ec <std+0x48>
 80036e6:	33d0      	adds	r3, #208	@ 0xd0
 80036e8:	429c      	cmp	r4, r3
 80036ea:	d105      	bne.n	80036f8 <std+0x54>
 80036ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f4:	f000 b98c 	b.w	8003a10 <__retarget_lock_init_recursive>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	bf00      	nop
 80036fc:	08003891 	.word	0x08003891
 8003700:	080038b3 	.word	0x080038b3
 8003704:	080038eb 	.word	0x080038eb
 8003708:	0800390f 	.word	0x0800390f
 800370c:	20000240 	.word	0x20000240

08003710 <stdio_exit_handler>:
 8003710:	4a02      	ldr	r2, [pc, #8]	@ (800371c <stdio_exit_handler+0xc>)
 8003712:	4903      	ldr	r1, [pc, #12]	@ (8003720 <stdio_exit_handler+0x10>)
 8003714:	4803      	ldr	r0, [pc, #12]	@ (8003724 <stdio_exit_handler+0x14>)
 8003716:	f000 b869 	b.w	80037ec <_fwalk_sglue>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c
 8003720:	08005385 	.word	0x08005385
 8003724:	2000001c 	.word	0x2000001c

08003728 <cleanup_stdio>:
 8003728:	6841      	ldr	r1, [r0, #4]
 800372a:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <cleanup_stdio+0x34>)
 800372c:	b510      	push	{r4, lr}
 800372e:	4299      	cmp	r1, r3
 8003730:	4604      	mov	r4, r0
 8003732:	d001      	beq.n	8003738 <cleanup_stdio+0x10>
 8003734:	f001 fe26 	bl	8005384 <_fflush_r>
 8003738:	68a1      	ldr	r1, [r4, #8]
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <cleanup_stdio+0x38>)
 800373c:	4299      	cmp	r1, r3
 800373e:	d002      	beq.n	8003746 <cleanup_stdio+0x1e>
 8003740:	4620      	mov	r0, r4
 8003742:	f001 fe1f 	bl	8005384 <_fflush_r>
 8003746:	68e1      	ldr	r1, [r4, #12]
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <cleanup_stdio+0x3c>)
 800374a:	4299      	cmp	r1, r3
 800374c:	d004      	beq.n	8003758 <cleanup_stdio+0x30>
 800374e:	4620      	mov	r0, r4
 8003750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003754:	f001 be16 	b.w	8005384 <_fflush_r>
 8003758:	bd10      	pop	{r4, pc}
 800375a:	bf00      	nop
 800375c:	20000240 	.word	0x20000240
 8003760:	200002a8 	.word	0x200002a8
 8003764:	20000310 	.word	0x20000310

08003768 <global_stdio_init.part.0>:
 8003768:	b510      	push	{r4, lr}
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <global_stdio_init.part.0+0x30>)
 800376c:	4c0b      	ldr	r4, [pc, #44]	@ (800379c <global_stdio_init.part.0+0x34>)
 800376e:	4a0c      	ldr	r2, [pc, #48]	@ (80037a0 <global_stdio_init.part.0+0x38>)
 8003770:	4620      	mov	r0, r4
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	2104      	movs	r1, #4
 8003776:	2200      	movs	r2, #0
 8003778:	f7ff ff94 	bl	80036a4 <std>
 800377c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003780:	2201      	movs	r2, #1
 8003782:	2109      	movs	r1, #9
 8003784:	f7ff ff8e 	bl	80036a4 <std>
 8003788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800378c:	2202      	movs	r2, #2
 800378e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003792:	2112      	movs	r1, #18
 8003794:	f7ff bf86 	b.w	80036a4 <std>
 8003798:	20000378 	.word	0x20000378
 800379c:	20000240 	.word	0x20000240
 80037a0:	08003711 	.word	0x08003711

080037a4 <__sfp_lock_acquire>:
 80037a4:	4801      	ldr	r0, [pc, #4]	@ (80037ac <__sfp_lock_acquire+0x8>)
 80037a6:	f000 b934 	b.w	8003a12 <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	20000381 	.word	0x20000381

080037b0 <__sfp_lock_release>:
 80037b0:	4801      	ldr	r0, [pc, #4]	@ (80037b8 <__sfp_lock_release+0x8>)
 80037b2:	f000 b92f 	b.w	8003a14 <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	20000381 	.word	0x20000381

080037bc <__sinit>:
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	f7ff fff0 	bl	80037a4 <__sfp_lock_acquire>
 80037c4:	6a23      	ldr	r3, [r4, #32]
 80037c6:	b11b      	cbz	r3, 80037d0 <__sinit+0x14>
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037cc:	f7ff bff0 	b.w	80037b0 <__sfp_lock_release>
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <__sinit+0x28>)
 80037d2:	6223      	str	r3, [r4, #32]
 80037d4:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <__sinit+0x2c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f5      	bne.n	80037c8 <__sinit+0xc>
 80037dc:	f7ff ffc4 	bl	8003768 <global_stdio_init.part.0>
 80037e0:	e7f2      	b.n	80037c8 <__sinit+0xc>
 80037e2:	bf00      	nop
 80037e4:	08003729 	.word	0x08003729
 80037e8:	20000378 	.word	0x20000378

080037ec <_fwalk_sglue>:
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f0:	4607      	mov	r7, r0
 80037f2:	4688      	mov	r8, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	2600      	movs	r6, #0
 80037f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003800:	d505      	bpl.n	800380e <_fwalk_sglue+0x22>
 8003802:	6824      	ldr	r4, [r4, #0]
 8003804:	2c00      	cmp	r4, #0
 8003806:	d1f7      	bne.n	80037f8 <_fwalk_sglue+0xc>
 8003808:	4630      	mov	r0, r6
 800380a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800380e:	89ab      	ldrh	r3, [r5, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d907      	bls.n	8003824 <_fwalk_sglue+0x38>
 8003814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003818:	3301      	adds	r3, #1
 800381a:	d003      	beq.n	8003824 <_fwalk_sglue+0x38>
 800381c:	4629      	mov	r1, r5
 800381e:	4638      	mov	r0, r7
 8003820:	47c0      	blx	r8
 8003822:	4306      	orrs	r6, r0
 8003824:	3568      	adds	r5, #104	@ 0x68
 8003826:	e7e9      	b.n	80037fc <_fwalk_sglue+0x10>

08003828 <sniprintf>:
 8003828:	b40c      	push	{r2, r3}
 800382a:	b530      	push	{r4, r5, lr}
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <sniprintf+0x64>)
 800382e:	1e0c      	subs	r4, r1, #0
 8003830:	681d      	ldr	r5, [r3, #0]
 8003832:	b09d      	sub	sp, #116	@ 0x74
 8003834:	da08      	bge.n	8003848 <sniprintf+0x20>
 8003836:	238b      	movs	r3, #139	@ 0x8b
 8003838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	b01d      	add	sp, #116	@ 0x74
 8003840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003844:	b002      	add	sp, #8
 8003846:	4770      	bx	lr
 8003848:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800384c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003850:	bf0c      	ite	eq
 8003852:	4623      	moveq	r3, r4
 8003854:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003858:	9304      	str	r3, [sp, #16]
 800385a:	9307      	str	r3, [sp, #28]
 800385c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003860:	9002      	str	r0, [sp, #8]
 8003862:	9006      	str	r0, [sp, #24]
 8003864:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003868:	4628      	mov	r0, r5
 800386a:	ab21      	add	r3, sp, #132	@ 0x84
 800386c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800386e:	a902      	add	r1, sp, #8
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	f001 fc0b 	bl	800508c <_svfiprintf_r>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	bfbc      	itt	lt
 800387a:	238b      	movlt	r3, #139	@ 0x8b
 800387c:	602b      	strlt	r3, [r5, #0]
 800387e:	2c00      	cmp	r4, #0
 8003880:	d0dd      	beq.n	800383e <sniprintf+0x16>
 8003882:	2200      	movs	r2, #0
 8003884:	9b02      	ldr	r3, [sp, #8]
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e7d9      	b.n	800383e <sniprintf+0x16>
 800388a:	bf00      	nop
 800388c:	20000018 	.word	0x20000018

08003890 <__sread>:
 8003890:	b510      	push	{r4, lr}
 8003892:	460c      	mov	r4, r1
 8003894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003898:	f000 f86c 	bl	8003974 <_read_r>
 800389c:	2800      	cmp	r0, #0
 800389e:	bfab      	itete	ge
 80038a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038a2:	89a3      	ldrhlt	r3, [r4, #12]
 80038a4:	181b      	addge	r3, r3, r0
 80038a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038aa:	bfac      	ite	ge
 80038ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038ae:	81a3      	strhlt	r3, [r4, #12]
 80038b0:	bd10      	pop	{r4, pc}

080038b2 <__swrite>:
 80038b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b6:	461f      	mov	r7, r3
 80038b8:	898b      	ldrh	r3, [r1, #12]
 80038ba:	4605      	mov	r5, r0
 80038bc:	05db      	lsls	r3, r3, #23
 80038be:	460c      	mov	r4, r1
 80038c0:	4616      	mov	r6, r2
 80038c2:	d505      	bpl.n	80038d0 <__swrite+0x1e>
 80038c4:	2302      	movs	r3, #2
 80038c6:	2200      	movs	r2, #0
 80038c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038cc:	f000 f840 	bl	8003950 <_lseek_r>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	4632      	mov	r2, r6
 80038d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	4628      	mov	r0, r5
 80038dc:	463b      	mov	r3, r7
 80038de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	f000 b857 	b.w	8003998 <_write_r>

080038ea <__sseek>:
 80038ea:	b510      	push	{r4, lr}
 80038ec:	460c      	mov	r4, r1
 80038ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f2:	f000 f82d 	bl	8003950 <_lseek_r>
 80038f6:	1c43      	adds	r3, r0, #1
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	bf15      	itete	ne
 80038fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003906:	81a3      	strheq	r3, [r4, #12]
 8003908:	bf18      	it	ne
 800390a:	81a3      	strhne	r3, [r4, #12]
 800390c:	bd10      	pop	{r4, pc}

0800390e <__sclose>:
 800390e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003912:	f000 b80d 	b.w	8003930 <_close_r>

08003916 <memset>:
 8003916:	4603      	mov	r3, r0
 8003918:	4402      	add	r2, r0
 800391a:	4293      	cmp	r3, r2
 800391c:	d100      	bne.n	8003920 <memset+0xa>
 800391e:	4770      	bx	lr
 8003920:	f803 1b01 	strb.w	r1, [r3], #1
 8003924:	e7f9      	b.n	800391a <memset+0x4>
	...

08003928 <_localeconv_r>:
 8003928:	4800      	ldr	r0, [pc, #0]	@ (800392c <_localeconv_r+0x4>)
 800392a:	4770      	bx	lr
 800392c:	20000158 	.word	0x20000158

08003930 <_close_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	2300      	movs	r3, #0
 8003934:	4d05      	ldr	r5, [pc, #20]	@ (800394c <_close_r+0x1c>)
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	f7fd fe73 	bl	8001626 <_close>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_close_r+0x1a>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_close_r+0x1a>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	2000037c 	.word	0x2000037c

08003950 <_lseek_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	2200      	movs	r2, #0
 800395a:	4d05      	ldr	r5, [pc, #20]	@ (8003970 <_lseek_r+0x20>)
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fd fe85 	bl	800166e <_lseek>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_lseek_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_lseek_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	2000037c 	.word	0x2000037c

08003974 <_read_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	2200      	movs	r2, #0
 800397e:	4d05      	ldr	r5, [pc, #20]	@ (8003994 <_read_r+0x20>)
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fd fe16 	bl	80015b4 <_read>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_read_r+0x1e>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_read_r+0x1e>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	2000037c 	.word	0x2000037c

08003998 <_write_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	2200      	movs	r2, #0
 80039a2:	4d05      	ldr	r5, [pc, #20]	@ (80039b8 <_write_r+0x20>)
 80039a4:	602a      	str	r2, [r5, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f7fd fe21 	bl	80015ee <_write>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_write_r+0x1e>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_write_r+0x1e>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	2000037c 	.word	0x2000037c

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	@ (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000018 	.word	0x20000018

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	2600      	movs	r6, #0
 80039cc:	4d0c      	ldr	r5, [pc, #48]	@ (8003a00 <__libc_init_array+0x38>)
 80039ce:	4c0d      	ldr	r4, [pc, #52]	@ (8003a04 <__libc_init_array+0x3c>)
 80039d0:	1b64      	subs	r4, r4, r5
 80039d2:	10a4      	asrs	r4, r4, #2
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	f002 f870 	bl	8005abc <_init>
 80039dc:	2600      	movs	r6, #0
 80039de:	4d0a      	ldr	r5, [pc, #40]	@ (8003a08 <__libc_init_array+0x40>)
 80039e0:	4c0a      	ldr	r4, [pc, #40]	@ (8003a0c <__libc_init_array+0x44>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08005ea8 	.word	0x08005ea8
 8003a04:	08005ea8 	.word	0x08005ea8
 8003a08:	08005ea8 	.word	0x08005ea8
 8003a0c:	08005eac 	.word	0x08005eac

08003a10 <__retarget_lock_init_recursive>:
 8003a10:	4770      	bx	lr

08003a12 <__retarget_lock_acquire_recursive>:
 8003a12:	4770      	bx	lr

08003a14 <__retarget_lock_release_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <memchr>:
 8003a16:	4603      	mov	r3, r0
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	b2c9      	uxtb	r1, r1
 8003a1c:	4402      	add	r2, r0
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	d101      	bne.n	8003a28 <memchr+0x12>
 8003a24:	2000      	movs	r0, #0
 8003a26:	e003      	b.n	8003a30 <memchr+0x1a>
 8003a28:	7804      	ldrb	r4, [r0, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	428c      	cmp	r4, r1
 8003a2e:	d1f6      	bne.n	8003a1e <memchr+0x8>
 8003a30:	bd10      	pop	{r4, pc}

08003a32 <quorem>:
 8003a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a36:	6903      	ldr	r3, [r0, #16]
 8003a38:	690c      	ldr	r4, [r1, #16]
 8003a3a:	4607      	mov	r7, r0
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	db7e      	blt.n	8003b3e <quorem+0x10c>
 8003a40:	3c01      	subs	r4, #1
 8003a42:	00a3      	lsls	r3, r4, #2
 8003a44:	f100 0514 	add.w	r5, r0, #20
 8003a48:	f101 0814 	add.w	r8, r1, #20
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a68:	d32e      	bcc.n	8003ac8 <quorem+0x96>
 8003a6a:	f04f 0a00 	mov.w	sl, #0
 8003a6e:	46c4      	mov	ip, r8
 8003a70:	46ae      	mov	lr, r5
 8003a72:	46d3      	mov	fp, sl
 8003a74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	fb06 a000 	mla	r0, r6, r0, sl
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	0c02      	lsrs	r2, r0, #16
 8003a82:	fb06 2303 	mla	r3, r6, r3, r2
 8003a86:	f8de 2000 	ldr.w	r2, [lr]
 8003a8a:	b280      	uxth	r0, r0
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	1a12      	subs	r2, r2, r0
 8003a90:	445a      	add	r2, fp
 8003a92:	f8de 0000 	ldr.w	r0, [lr]
 8003a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003aa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003aaa:	45e1      	cmp	r9, ip
 8003aac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003ab0:	f84e 2b04 	str.w	r2, [lr], #4
 8003ab4:	d2de      	bcs.n	8003a74 <quorem+0x42>
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	58eb      	ldr	r3, [r5, r3]
 8003aba:	b92b      	cbnz	r3, 8003ac8 <quorem+0x96>
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	429d      	cmp	r5, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	d32f      	bcc.n	8003b26 <quorem+0xf4>
 8003ac6:	613c      	str	r4, [r7, #16]
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f001 f97b 	bl	8004dc4 <__mcmp>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	db25      	blt.n	8003b1e <quorem+0xec>
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ada:	f8d1 c000 	ldr.w	ip, [r1]
 8003ade:	fa1f fe82 	uxth.w	lr, r2
 8003ae2:	fa1f f38c 	uxth.w	r3, ip
 8003ae6:	eba3 030e 	sub.w	r3, r3, lr
 8003aea:	4403      	add	r3, r0
 8003aec:	0c12      	lsrs	r2, r2, #16
 8003aee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003af2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003afc:	45c1      	cmp	r9, r8
 8003afe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b02:	f841 3b04 	str.w	r3, [r1], #4
 8003b06:	d2e6      	bcs.n	8003ad6 <quorem+0xa4>
 8003b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b10:	b922      	cbnz	r2, 8003b1c <quorem+0xea>
 8003b12:	3b04      	subs	r3, #4
 8003b14:	429d      	cmp	r5, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	d30b      	bcc.n	8003b32 <quorem+0x100>
 8003b1a:	613c      	str	r4, [r7, #16]
 8003b1c:	3601      	adds	r6, #1
 8003b1e:	4630      	mov	r0, r6
 8003b20:	b003      	add	sp, #12
 8003b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	3b04      	subs	r3, #4
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	d1cb      	bne.n	8003ac6 <quorem+0x94>
 8003b2e:	3c01      	subs	r4, #1
 8003b30:	e7c6      	b.n	8003ac0 <quorem+0x8e>
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	3b04      	subs	r3, #4
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d1ef      	bne.n	8003b1a <quorem+0xe8>
 8003b3a:	3c01      	subs	r4, #1
 8003b3c:	e7ea      	b.n	8003b14 <quorem+0xe2>
 8003b3e:	2000      	movs	r0, #0
 8003b40:	e7ee      	b.n	8003b20 <quorem+0xee>
 8003b42:	0000      	movs	r0, r0
 8003b44:	0000      	movs	r0, r0
	...

08003b48 <_dtoa_r>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	69c7      	ldr	r7, [r0, #28]
 8003b52:	b097      	sub	sp, #92	@ 0x5c
 8003b54:	4683      	mov	fp, r0
 8003b56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003b5c:	b97f      	cbnz	r7, 8003b7e <_dtoa_r+0x36>
 8003b5e:	2010      	movs	r0, #16
 8003b60:	f000 fe02 	bl	8004768 <malloc>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8cb 001c 	str.w	r0, [fp, #28]
 8003b6a:	b920      	cbnz	r0, 8003b76 <_dtoa_r+0x2e>
 8003b6c:	21ef      	movs	r1, #239	@ 0xef
 8003b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003e10 <_dtoa_r+0x2c8>)
 8003b70:	48a8      	ldr	r0, [pc, #672]	@ (8003e14 <_dtoa_r+0x2cc>)
 8003b72:	f001 fc67 	bl	8005444 <__assert_func>
 8003b76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003b7a:	6007      	str	r7, [r0, #0]
 8003b7c:	60c7      	str	r7, [r0, #12]
 8003b7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	b159      	cbz	r1, 8003b9e <_dtoa_r+0x56>
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4093      	lsls	r3, r2
 8003b8c:	604a      	str	r2, [r1, #4]
 8003b8e:	608b      	str	r3, [r1, #8]
 8003b90:	4658      	mov	r0, fp
 8003b92:	f000 fedf 	bl	8004954 <_Bfree>
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	1e2b      	subs	r3, r5, #0
 8003ba0:	bfaf      	iteee	ge
 8003ba2:	2300      	movge	r3, #0
 8003ba4:	2201      	movlt	r2, #1
 8003ba6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003baa:	9303      	strlt	r3, [sp, #12]
 8003bac:	bfa8      	it	ge
 8003bae:	6033      	strge	r3, [r6, #0]
 8003bb0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003bb4:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <_dtoa_r+0x2d0>)
 8003bb6:	bfb8      	it	lt
 8003bb8:	6032      	strlt	r2, [r6, #0]
 8003bba:	ea33 0308 	bics.w	r3, r3, r8
 8003bbe:	d112      	bne.n	8003be6 <_dtoa_r+0x9e>
 8003bc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003bc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003bcc:	4323      	orrs	r3, r4
 8003bce:	f000 8550 	beq.w	8004672 <_dtoa_r+0xb2a>
 8003bd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bd4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003e1c <_dtoa_r+0x2d4>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8552 	beq.w	8004682 <_dtoa_r+0xb3a>
 8003bde:	f10a 0303 	add.w	r3, sl, #3
 8003be2:	f000 bd4c 	b.w	800467e <_dtoa_r+0xb36>
 8003be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f7fc feef 	bl	80009d8 <__aeabi_dcmpeq>
 8003bfa:	4607      	mov	r7, r0
 8003bfc:	b158      	cbz	r0, 8003c16 <_dtoa_r+0xce>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c06:	b113      	cbz	r3, 8003c0e <_dtoa_r+0xc6>
 8003c08:	4b85      	ldr	r3, [pc, #532]	@ (8003e20 <_dtoa_r+0x2d8>)
 8003c0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003e24 <_dtoa_r+0x2dc>
 8003c12:	f000 bd36 	b.w	8004682 <_dtoa_r+0xb3a>
 8003c16:	ab14      	add	r3, sp, #80	@ 0x50
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	ab15      	add	r3, sp, #84	@ 0x54
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4658      	mov	r0, fp
 8003c20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c24:	f001 f97e 	bl	8004f24 <__d2b>
 8003c28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c2c:	4681      	mov	r9, r0
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d077      	beq.n	8003d22 <_dtoa_r+0x1da>
 8003c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c48:	9712      	str	r7, [sp, #72]	@ 0x48
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4b76      	ldr	r3, [pc, #472]	@ (8003e28 <_dtoa_r+0x2e0>)
 8003c50:	f7fc faa2 	bl	8000198 <__aeabi_dsub>
 8003c54:	a368      	add	r3, pc, #416	@ (adr r3, 8003df8 <_dtoa_r+0x2b0>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fc55 	bl	8000508 <__aeabi_dmul>
 8003c5e:	a368      	add	r3, pc, #416	@ (adr r3, 8003e00 <_dtoa_r+0x2b8>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fa9a 	bl	800019c <__adddf3>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	f7fc fbe1 	bl	8000434 <__aeabi_i2d>
 8003c72:	a365      	add	r3, pc, #404	@ (adr r3, 8003e08 <_dtoa_r+0x2c0>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fc46 	bl	8000508 <__aeabi_dmul>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7fc fa8a 	bl	800019c <__adddf3>
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	f7fc feec 	bl	8000a68 <__aeabi_d2iz>
 8003c90:	2200      	movs	r2, #0
 8003c92:	4607      	mov	r7, r0
 8003c94:	2300      	movs	r3, #0
 8003c96:	4620      	mov	r0, r4
 8003c98:	4629      	mov	r1, r5
 8003c9a:	f7fc fea7 	bl	80009ec <__aeabi_dcmplt>
 8003c9e:	b140      	cbz	r0, 8003cb2 <_dtoa_r+0x16a>
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7fc fbc7 	bl	8000434 <__aeabi_i2d>
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	f7fc fe95 	bl	80009d8 <__aeabi_dcmpeq>
 8003cae:	b900      	cbnz	r0, 8003cb2 <_dtoa_r+0x16a>
 8003cb0:	3f01      	subs	r7, #1
 8003cb2:	2f16      	cmp	r7, #22
 8003cb4:	d853      	bhi.n	8003d5e <_dtoa_r+0x216>
 8003cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cba:	4b5c      	ldr	r3, [pc, #368]	@ (8003e2c <_dtoa_r+0x2e4>)
 8003cbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fe92 	bl	80009ec <__aeabi_dcmplt>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d04a      	beq.n	8003d62 <_dtoa_r+0x21a>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	3f01      	subs	r7, #1
 8003cd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003cd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003cd4:	1b9b      	subs	r3, r3, r6
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	bf46      	itte	mi
 8003cda:	f1c3 0801 	rsbmi	r8, r3, #1
 8003cde:	2300      	movmi	r3, #0
 8003ce0:	f04f 0800 	movpl.w	r8, #0
 8003ce4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ce6:	bf48      	it	mi
 8003ce8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003cea:	2f00      	cmp	r7, #0
 8003cec:	db3b      	blt.n	8003d66 <_dtoa_r+0x21e>
 8003cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cf0:	970e      	str	r7, [sp, #56]	@ 0x38
 8003cf2:	443b      	add	r3, r7
 8003cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d866      	bhi.n	8003dce <_dtoa_r+0x286>
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	bfc4      	itt	gt
 8003d04:	3b04      	subgt	r3, #4
 8003d06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d0a:	bfc8      	it	gt
 8003d0c:	2400      	movgt	r4, #0
 8003d0e:	f1a3 0302 	sub.w	r3, r3, #2
 8003d12:	bfd8      	it	le
 8003d14:	2401      	movle	r4, #1
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d864      	bhi.n	8003de4 <_dtoa_r+0x29c>
 8003d1a:	e8df f003 	tbb	[pc, r3]
 8003d1e:	382b      	.short	0x382b
 8003d20:	5636      	.short	0x5636
 8003d22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d26:	441e      	add	r6, r3
 8003d28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	bfc1      	itttt	gt
 8003d30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d34:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d40:	bfd6      	itet	le
 8003d42:	f1c3 0320 	rsble	r3, r3, #32
 8003d46:	ea48 0003 	orrgt.w	r0, r8, r3
 8003d4a:	fa04 f003 	lslle.w	r0, r4, r3
 8003d4e:	f7fc fb61 	bl	8000414 <__aeabi_ui2d>
 8003d52:	2201      	movs	r2, #1
 8003d54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003d58:	3e01      	subs	r6, #1
 8003d5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8003d5c:	e775      	b.n	8003c4a <_dtoa_r+0x102>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e7b6      	b.n	8003cd0 <_dtoa_r+0x188>
 8003d62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003d64:	e7b5      	b.n	8003cd2 <_dtoa_r+0x18a>
 8003d66:	427b      	negs	r3, r7
 8003d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	eba8 0807 	sub.w	r8, r8, r7
 8003d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d72:	e7c2      	b.n	8003cfa <_dtoa_r+0x1b2>
 8003d74:	2300      	movs	r3, #0
 8003d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dc35      	bgt.n	8003dea <_dtoa_r+0x2a2>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	461a      	mov	r2, r3
 8003d82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003d86:	9221      	str	r2, [sp, #132]	@ 0x84
 8003d88:	e00b      	b.n	8003da2 <_dtoa_r+0x25a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e7f3      	b.n	8003d76 <_dtoa_r+0x22e>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	9308      	str	r3, [sp, #32]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	9307      	str	r3, [sp, #28]
 8003d9e:	bfb8      	it	lt
 8003da0:	2301      	movlt	r3, #1
 8003da2:	2100      	movs	r1, #0
 8003da4:	2204      	movs	r2, #4
 8003da6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003daa:	f102 0514 	add.w	r5, r2, #20
 8003dae:	429d      	cmp	r5, r3
 8003db0:	d91f      	bls.n	8003df2 <_dtoa_r+0x2aa>
 8003db2:	6041      	str	r1, [r0, #4]
 8003db4:	4658      	mov	r0, fp
 8003db6:	f000 fd8d 	bl	80048d4 <_Balloc>
 8003dba:	4682      	mov	sl, r0
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d139      	bne.n	8003e34 <_dtoa_r+0x2ec>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <_dtoa_r+0x2e8>)
 8003dc8:	e6d2      	b.n	8003b70 <_dtoa_r+0x28>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e7e0      	b.n	8003d90 <_dtoa_r+0x248>
 8003dce:	2401      	movs	r4, #1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003dd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dda:	2200      	movs	r2, #0
 8003ddc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003de0:	2312      	movs	r3, #18
 8003de2:	e7d0      	b.n	8003d86 <_dtoa_r+0x23e>
 8003de4:	2301      	movs	r3, #1
 8003de6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003de8:	e7f5      	b.n	8003dd6 <_dtoa_r+0x28e>
 8003dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003df0:	e7d7      	b.n	8003da2 <_dtoa_r+0x25a>
 8003df2:	3101      	adds	r1, #1
 8003df4:	0052      	lsls	r2, r2, #1
 8003df6:	e7d8      	b.n	8003daa <_dtoa_r+0x262>
 8003df8:	636f4361 	.word	0x636f4361
 8003dfc:	3fd287a7 	.word	0x3fd287a7
 8003e00:	8b60c8b3 	.word	0x8b60c8b3
 8003e04:	3fc68a28 	.word	0x3fc68a28
 8003e08:	509f79fb 	.word	0x509f79fb
 8003e0c:	3fd34413 	.word	0x3fd34413
 8003e10:	08005b71 	.word	0x08005b71
 8003e14:	08005b88 	.word	0x08005b88
 8003e18:	7ff00000 	.word	0x7ff00000
 8003e1c:	08005b6d 	.word	0x08005b6d
 8003e20:	08005b41 	.word	0x08005b41
 8003e24:	08005b40 	.word	0x08005b40
 8003e28:	3ff80000 	.word	0x3ff80000
 8003e2c:	08005c80 	.word	0x08005c80
 8003e30:	08005be0 	.word	0x08005be0
 8003e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003e38:	6018      	str	r0, [r3, #0]
 8003e3a:	9b07      	ldr	r3, [sp, #28]
 8003e3c:	2b0e      	cmp	r3, #14
 8003e3e:	f200 80a4 	bhi.w	8003f8a <_dtoa_r+0x442>
 8003e42:	2c00      	cmp	r4, #0
 8003e44:	f000 80a1 	beq.w	8003f8a <_dtoa_r+0x442>
 8003e48:	2f00      	cmp	r7, #0
 8003e4a:	dd33      	ble.n	8003eb4 <_dtoa_r+0x36c>
 8003e4c:	4b86      	ldr	r3, [pc, #536]	@ (8004068 <_dtoa_r+0x520>)
 8003e4e:	f007 020f 	and.w	r2, r7, #15
 8003e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e56:	05f8      	lsls	r0, r7, #23
 8003e58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003e64:	d516      	bpl.n	8003e94 <_dtoa_r+0x34c>
 8003e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e6a:	4b80      	ldr	r3, [pc, #512]	@ (800406c <_dtoa_r+0x524>)
 8003e6c:	2603      	movs	r6, #3
 8003e6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e72:	f7fc fc73 	bl	800075c <__aeabi_ddiv>
 8003e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e7a:	f004 040f 	and.w	r4, r4, #15
 8003e7e:	4d7b      	ldr	r5, [pc, #492]	@ (800406c <_dtoa_r+0x524>)
 8003e80:	b954      	cbnz	r4, 8003e98 <_dtoa_r+0x350>
 8003e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e8a:	f7fc fc67 	bl	800075c <__aeabi_ddiv>
 8003e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e92:	e028      	b.n	8003ee6 <_dtoa_r+0x39e>
 8003e94:	2602      	movs	r6, #2
 8003e96:	e7f2      	b.n	8003e7e <_dtoa_r+0x336>
 8003e98:	07e1      	lsls	r1, r4, #31
 8003e9a:	d508      	bpl.n	8003eae <_dtoa_r+0x366>
 8003e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ea4:	f7fc fb30 	bl	8000508 <__aeabi_dmul>
 8003ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eac:	3601      	adds	r6, #1
 8003eae:	1064      	asrs	r4, r4, #1
 8003eb0:	3508      	adds	r5, #8
 8003eb2:	e7e5      	b.n	8003e80 <_dtoa_r+0x338>
 8003eb4:	f000 80d2 	beq.w	800405c <_dtoa_r+0x514>
 8003eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ebc:	427c      	negs	r4, r7
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <_dtoa_r+0x520>)
 8003ec0:	f004 020f 	and.w	r2, r4, #15
 8003ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc fb1c 	bl	8000508 <__aeabi_dmul>
 8003ed0:	2602      	movs	r6, #2
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ed8:	4d64      	ldr	r5, [pc, #400]	@ (800406c <_dtoa_r+0x524>)
 8003eda:	1124      	asrs	r4, r4, #4
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	f040 80b2 	bne.w	8004046 <_dtoa_r+0x4fe>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1d3      	bne.n	8003e8e <_dtoa_r+0x346>
 8003ee6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80b7 	beq.w	8004060 <_dtoa_r+0x518>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4b5d      	ldr	r3, [pc, #372]	@ (8004070 <_dtoa_r+0x528>)
 8003efa:	f7fc fd77 	bl	80009ec <__aeabi_dcmplt>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f000 80ae 	beq.w	8004060 <_dtoa_r+0x518>
 8003f04:	9b07      	ldr	r3, [sp, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80aa 	beq.w	8004060 <_dtoa_r+0x518>
 8003f0c:	9b08      	ldr	r3, [sp, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dd37      	ble.n	8003f82 <_dtoa_r+0x43a>
 8003f12:	1e7b      	subs	r3, r7, #1
 8003f14:	4620      	mov	r0, r4
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4b55      	ldr	r3, [pc, #340]	@ (8004074 <_dtoa_r+0x52c>)
 8003f1e:	f7fc faf3 	bl	8000508 <__aeabi_dmul>
 8003f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f26:	9c08      	ldr	r4, [sp, #32]
 8003f28:	3601      	adds	r6, #1
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f7fc fa82 	bl	8000434 <__aeabi_i2d>
 8003f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f34:	f7fc fae8 	bl	8000508 <__aeabi_dmul>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <_dtoa_r+0x530>)
 8003f3c:	f7fc f92e 	bl	800019c <__adddf3>
 8003f40:	4605      	mov	r5, r0
 8003f42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	f040 809a 	bne.w	8004080 <_dtoa_r+0x538>
 8003f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	4b4a      	ldr	r3, [pc, #296]	@ (800407c <_dtoa_r+0x534>)
 8003f54:	f7fc f920 	bl	8000198 <__aeabi_dsub>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f60:	462a      	mov	r2, r5
 8003f62:	4633      	mov	r3, r6
 8003f64:	f7fc fd60 	bl	8000a28 <__aeabi_dcmpgt>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f040 828e 	bne.w	800448a <_dtoa_r+0x942>
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	462a      	mov	r2, r5
 8003f74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003f78:	f7fc fd38 	bl	80009ec <__aeabi_dcmplt>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	f040 8127 	bne.w	80041d0 <_dtoa_r+0x688>
 8003f82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003f86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f2c0 8163 	blt.w	8004258 <_dtoa_r+0x710>
 8003f92:	2f0e      	cmp	r7, #14
 8003f94:	f300 8160 	bgt.w	8004258 <_dtoa_r+0x710>
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <_dtoa_r+0x520>)
 8003f9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fa2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da03      	bge.n	8003fb4 <_dtoa_r+0x46c>
 8003fac:	9b07      	ldr	r3, [sp, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f340 8100 	ble.w	80041b4 <_dtoa_r+0x66c>
 8003fb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003fb8:	4656      	mov	r6, sl
 8003fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7fc fbcb 	bl	800075c <__aeabi_ddiv>
 8003fc6:	f7fc fd4f 	bl	8000a68 <__aeabi_d2iz>
 8003fca:	4680      	mov	r8, r0
 8003fcc:	f7fc fa32 	bl	8000434 <__aeabi_i2d>
 8003fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd4:	f7fc fa98 	bl	8000508 <__aeabi_dmul>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc f8da 	bl	8000198 <__aeabi_dsub>
 8003fe4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003fe8:	9d07      	ldr	r5, [sp, #28]
 8003fea:	f806 4b01 	strb.w	r4, [r6], #1
 8003fee:	eba6 040a 	sub.w	r4, r6, sl
 8003ff2:	42a5      	cmp	r5, r4
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	f040 8116 	bne.w	8004228 <_dtoa_r+0x6e0>
 8003ffc:	f7fc f8ce 	bl	800019c <__adddf3>
 8004000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	f7fc fd0e 	bl	8000a28 <__aeabi_dcmpgt>
 800400c:	2800      	cmp	r0, #0
 800400e:	f040 80f8 	bne.w	8004202 <_dtoa_r+0x6ba>
 8004012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc fcdd 	bl	80009d8 <__aeabi_dcmpeq>
 800401e:	b118      	cbz	r0, 8004028 <_dtoa_r+0x4e0>
 8004020:	f018 0f01 	tst.w	r8, #1
 8004024:	f040 80ed 	bne.w	8004202 <_dtoa_r+0x6ba>
 8004028:	4649      	mov	r1, r9
 800402a:	4658      	mov	r0, fp
 800402c:	f000 fc92 	bl	8004954 <_Bfree>
 8004030:	2300      	movs	r3, #0
 8004032:	7033      	strb	r3, [r6, #0]
 8004034:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004036:	3701      	adds	r7, #1
 8004038:	601f      	str	r7, [r3, #0]
 800403a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8320 	beq.w	8004682 <_dtoa_r+0xb3a>
 8004042:	601e      	str	r6, [r3, #0]
 8004044:	e31d      	b.n	8004682 <_dtoa_r+0xb3a>
 8004046:	07e2      	lsls	r2, r4, #31
 8004048:	d505      	bpl.n	8004056 <_dtoa_r+0x50e>
 800404a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800404e:	f7fc fa5b 	bl	8000508 <__aeabi_dmul>
 8004052:	2301      	movs	r3, #1
 8004054:	3601      	adds	r6, #1
 8004056:	1064      	asrs	r4, r4, #1
 8004058:	3508      	adds	r5, #8
 800405a:	e73f      	b.n	8003edc <_dtoa_r+0x394>
 800405c:	2602      	movs	r6, #2
 800405e:	e742      	b.n	8003ee6 <_dtoa_r+0x39e>
 8004060:	9c07      	ldr	r4, [sp, #28]
 8004062:	9704      	str	r7, [sp, #16]
 8004064:	e761      	b.n	8003f2a <_dtoa_r+0x3e2>
 8004066:	bf00      	nop
 8004068:	08005c80 	.word	0x08005c80
 800406c:	08005c58 	.word	0x08005c58
 8004070:	3ff00000 	.word	0x3ff00000
 8004074:	40240000 	.word	0x40240000
 8004078:	401c0000 	.word	0x401c0000
 800407c:	40140000 	.word	0x40140000
 8004080:	4b70      	ldr	r3, [pc, #448]	@ (8004244 <_dtoa_r+0x6fc>)
 8004082:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004084:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800408c:	4454      	add	r4, sl
 800408e:	2900      	cmp	r1, #0
 8004090:	d045      	beq.n	800411e <_dtoa_r+0x5d6>
 8004092:	2000      	movs	r0, #0
 8004094:	496c      	ldr	r1, [pc, #432]	@ (8004248 <_dtoa_r+0x700>)
 8004096:	f7fc fb61 	bl	800075c <__aeabi_ddiv>
 800409a:	4633      	mov	r3, r6
 800409c:	462a      	mov	r2, r5
 800409e:	f7fc f87b 	bl	8000198 <__aeabi_dsub>
 80040a2:	4656      	mov	r6, sl
 80040a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040ac:	f7fc fcdc 	bl	8000a68 <__aeabi_d2iz>
 80040b0:	4605      	mov	r5, r0
 80040b2:	f7fc f9bf 	bl	8000434 <__aeabi_i2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	f7fc f86b 	bl	8000198 <__aeabi_dsub>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	3530      	adds	r5, #48	@ 0x30
 80040c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040d0:	f806 5b01 	strb.w	r5, [r6], #1
 80040d4:	f7fc fc8a 	bl	80009ec <__aeabi_dcmplt>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d163      	bne.n	80041a4 <_dtoa_r+0x65c>
 80040dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040e0:	2000      	movs	r0, #0
 80040e2:	495a      	ldr	r1, [pc, #360]	@ (800424c <_dtoa_r+0x704>)
 80040e4:	f7fc f858 	bl	8000198 <__aeabi_dsub>
 80040e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040ec:	f7fc fc7e 	bl	80009ec <__aeabi_dcmplt>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f040 8087 	bne.w	8004204 <_dtoa_r+0x6bc>
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	f43f af43 	beq.w	8003f82 <_dtoa_r+0x43a>
 80040fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004100:	2200      	movs	r2, #0
 8004102:	4b53      	ldr	r3, [pc, #332]	@ (8004250 <_dtoa_r+0x708>)
 8004104:	f7fc fa00 	bl	8000508 <__aeabi_dmul>
 8004108:	2200      	movs	r2, #0
 800410a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800410e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004112:	4b4f      	ldr	r3, [pc, #316]	@ (8004250 <_dtoa_r+0x708>)
 8004114:	f7fc f9f8 	bl	8000508 <__aeabi_dmul>
 8004118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800411c:	e7c4      	b.n	80040a8 <_dtoa_r+0x560>
 800411e:	4631      	mov	r1, r6
 8004120:	4628      	mov	r0, r5
 8004122:	f7fc f9f1 	bl	8000508 <__aeabi_dmul>
 8004126:	4656      	mov	r6, sl
 8004128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800412c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800412e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004132:	f7fc fc99 	bl	8000a68 <__aeabi_d2iz>
 8004136:	4605      	mov	r5, r0
 8004138:	f7fc f97c 	bl	8000434 <__aeabi_i2d>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004144:	f7fc f828 	bl	8000198 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	3530      	adds	r5, #48	@ 0x30
 800414e:	f806 5b01 	strb.w	r5, [r6], #1
 8004152:	42a6      	cmp	r6, r4
 8004154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	d124      	bne.n	80041a8 <_dtoa_r+0x660>
 800415e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004162:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <_dtoa_r+0x700>)
 8004164:	f7fc f81a 	bl	800019c <__adddf3>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004170:	f7fc fc5a 	bl	8000a28 <__aeabi_dcmpgt>
 8004174:	2800      	cmp	r0, #0
 8004176:	d145      	bne.n	8004204 <_dtoa_r+0x6bc>
 8004178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800417c:	2000      	movs	r0, #0
 800417e:	4932      	ldr	r1, [pc, #200]	@ (8004248 <_dtoa_r+0x700>)
 8004180:	f7fc f80a 	bl	8000198 <__aeabi_dsub>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800418c:	f7fc fc2e 	bl	80009ec <__aeabi_dcmplt>
 8004190:	2800      	cmp	r0, #0
 8004192:	f43f aef6 	beq.w	8003f82 <_dtoa_r+0x43a>
 8004196:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004198:	1e73      	subs	r3, r6, #1
 800419a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800419c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80041a0:	2b30      	cmp	r3, #48	@ 0x30
 80041a2:	d0f8      	beq.n	8004196 <_dtoa_r+0x64e>
 80041a4:	9f04      	ldr	r7, [sp, #16]
 80041a6:	e73f      	b.n	8004028 <_dtoa_r+0x4e0>
 80041a8:	4b29      	ldr	r3, [pc, #164]	@ (8004250 <_dtoa_r+0x708>)
 80041aa:	f7fc f9ad 	bl	8000508 <__aeabi_dmul>
 80041ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b2:	e7bc      	b.n	800412e <_dtoa_r+0x5e6>
 80041b4:	d10c      	bne.n	80041d0 <_dtoa_r+0x688>
 80041b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ba:	2200      	movs	r2, #0
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <_dtoa_r+0x70c>)
 80041be:	f7fc f9a3 	bl	8000508 <__aeabi_dmul>
 80041c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041c6:	f7fc fc25 	bl	8000a14 <__aeabi_dcmpge>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	f000 815b 	beq.w	8004486 <_dtoa_r+0x93e>
 80041d0:	2400      	movs	r4, #0
 80041d2:	4625      	mov	r5, r4
 80041d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041d6:	4656      	mov	r6, sl
 80041d8:	43db      	mvns	r3, r3
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	2700      	movs	r7, #0
 80041de:	4621      	mov	r1, r4
 80041e0:	4658      	mov	r0, fp
 80041e2:	f000 fbb7 	bl	8004954 <_Bfree>
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	d0dc      	beq.n	80041a4 <_dtoa_r+0x65c>
 80041ea:	b12f      	cbz	r7, 80041f8 <_dtoa_r+0x6b0>
 80041ec:	42af      	cmp	r7, r5
 80041ee:	d003      	beq.n	80041f8 <_dtoa_r+0x6b0>
 80041f0:	4639      	mov	r1, r7
 80041f2:	4658      	mov	r0, fp
 80041f4:	f000 fbae 	bl	8004954 <_Bfree>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4658      	mov	r0, fp
 80041fc:	f000 fbaa 	bl	8004954 <_Bfree>
 8004200:	e7d0      	b.n	80041a4 <_dtoa_r+0x65c>
 8004202:	9704      	str	r7, [sp, #16]
 8004204:	4633      	mov	r3, r6
 8004206:	461e      	mov	r6, r3
 8004208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800420c:	2a39      	cmp	r2, #57	@ 0x39
 800420e:	d107      	bne.n	8004220 <_dtoa_r+0x6d8>
 8004210:	459a      	cmp	sl, r3
 8004212:	d1f8      	bne.n	8004206 <_dtoa_r+0x6be>
 8004214:	9a04      	ldr	r2, [sp, #16]
 8004216:	3201      	adds	r2, #1
 8004218:	9204      	str	r2, [sp, #16]
 800421a:	2230      	movs	r2, #48	@ 0x30
 800421c:	f88a 2000 	strb.w	r2, [sl]
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	3201      	adds	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e7bd      	b.n	80041a4 <_dtoa_r+0x65c>
 8004228:	2200      	movs	r2, #0
 800422a:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <_dtoa_r+0x708>)
 800422c:	f7fc f96c 	bl	8000508 <__aeabi_dmul>
 8004230:	2200      	movs	r2, #0
 8004232:	2300      	movs	r3, #0
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	f7fc fbce 	bl	80009d8 <__aeabi_dcmpeq>
 800423c:	2800      	cmp	r0, #0
 800423e:	f43f aebc 	beq.w	8003fba <_dtoa_r+0x472>
 8004242:	e6f1      	b.n	8004028 <_dtoa_r+0x4e0>
 8004244:	08005c80 	.word	0x08005c80
 8004248:	3fe00000 	.word	0x3fe00000
 800424c:	3ff00000 	.word	0x3ff00000
 8004250:	40240000 	.word	0x40240000
 8004254:	40140000 	.word	0x40140000
 8004258:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800425a:	2a00      	cmp	r2, #0
 800425c:	f000 80db 	beq.w	8004416 <_dtoa_r+0x8ce>
 8004260:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004262:	2a01      	cmp	r2, #1
 8004264:	f300 80bf 	bgt.w	80043e6 <_dtoa_r+0x89e>
 8004268:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800426a:	2a00      	cmp	r2, #0
 800426c:	f000 80b7 	beq.w	80043de <_dtoa_r+0x896>
 8004270:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004274:	4646      	mov	r6, r8
 8004276:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800427a:	2101      	movs	r1, #1
 800427c:	441a      	add	r2, r3
 800427e:	4658      	mov	r0, fp
 8004280:	4498      	add	r8, r3
 8004282:	9209      	str	r2, [sp, #36]	@ 0x24
 8004284:	f000 fc1a 	bl	8004abc <__i2b>
 8004288:	4605      	mov	r5, r0
 800428a:	b15e      	cbz	r6, 80042a4 <_dtoa_r+0x75c>
 800428c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	dd08      	ble.n	80042a4 <_dtoa_r+0x75c>
 8004292:	42b3      	cmp	r3, r6
 8004294:	bfa8      	it	ge
 8004296:	4633      	movge	r3, r6
 8004298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800429a:	eba8 0803 	sub.w	r8, r8, r3
 800429e:	1af6      	subs	r6, r6, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042a6:	b1f3      	cbz	r3, 80042e6 <_dtoa_r+0x79e>
 80042a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80b7 	beq.w	800441e <_dtoa_r+0x8d6>
 80042b0:	b18c      	cbz	r4, 80042d6 <_dtoa_r+0x78e>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4622      	mov	r2, r4
 80042b6:	4658      	mov	r0, fp
 80042b8:	f000 fcbe 	bl	8004c38 <__pow5mult>
 80042bc:	464a      	mov	r2, r9
 80042be:	4601      	mov	r1, r0
 80042c0:	4605      	mov	r5, r0
 80042c2:	4658      	mov	r0, fp
 80042c4:	f000 fc10 	bl	8004ae8 <__multiply>
 80042c8:	4649      	mov	r1, r9
 80042ca:	9004      	str	r0, [sp, #16]
 80042cc:	4658      	mov	r0, fp
 80042ce:	f000 fb41 	bl	8004954 <_Bfree>
 80042d2:	9b04      	ldr	r3, [sp, #16]
 80042d4:	4699      	mov	r9, r3
 80042d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042d8:	1b1a      	subs	r2, r3, r4
 80042da:	d004      	beq.n	80042e6 <_dtoa_r+0x79e>
 80042dc:	4649      	mov	r1, r9
 80042de:	4658      	mov	r0, fp
 80042e0:	f000 fcaa 	bl	8004c38 <__pow5mult>
 80042e4:	4681      	mov	r9, r0
 80042e6:	2101      	movs	r1, #1
 80042e8:	4658      	mov	r0, fp
 80042ea:	f000 fbe7 	bl	8004abc <__i2b>
 80042ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042f0:	4604      	mov	r4, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 81c9 	beq.w	800468a <_dtoa_r+0xb42>
 80042f8:	461a      	mov	r2, r3
 80042fa:	4601      	mov	r1, r0
 80042fc:	4658      	mov	r0, fp
 80042fe:	f000 fc9b 	bl	8004c38 <__pow5mult>
 8004302:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004304:	4604      	mov	r4, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	f300 808f 	bgt.w	800442a <_dtoa_r+0x8e2>
 800430c:	9b02      	ldr	r3, [sp, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 8087 	bne.w	8004422 <_dtoa_r+0x8da>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8083 	bne.w	8004426 <_dtoa_r+0x8de>
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	0d1b      	lsrs	r3, r3, #20
 8004328:	051b      	lsls	r3, r3, #20
 800432a:	b12b      	cbz	r3, 8004338 <_dtoa_r+0x7f0>
 800432c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	3301      	adds	r3, #1
 8004334:	9309      	str	r3, [sp, #36]	@ 0x24
 8004336:	2301      	movs	r3, #1
 8004338:	930a      	str	r3, [sp, #40]	@ 0x28
 800433a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 81aa 	beq.w	8004696 <_dtoa_r+0xb4e>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004348:	6918      	ldr	r0, [r3, #16]
 800434a:	f000 fb6b 	bl	8004a24 <__hi0bits>
 800434e:	f1c0 0020 	rsb	r0, r0, #32
 8004352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004354:	4418      	add	r0, r3
 8004356:	f010 001f 	ands.w	r0, r0, #31
 800435a:	d071      	beq.n	8004440 <_dtoa_r+0x8f8>
 800435c:	f1c0 0320 	rsb	r3, r0, #32
 8004360:	2b04      	cmp	r3, #4
 8004362:	dd65      	ble.n	8004430 <_dtoa_r+0x8e8>
 8004364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004366:	f1c0 001c 	rsb	r0, r0, #28
 800436a:	4403      	add	r3, r0
 800436c:	4480      	add	r8, r0
 800436e:	4406      	add	r6, r0
 8004370:	9309      	str	r3, [sp, #36]	@ 0x24
 8004372:	f1b8 0f00 	cmp.w	r8, #0
 8004376:	dd05      	ble.n	8004384 <_dtoa_r+0x83c>
 8004378:	4649      	mov	r1, r9
 800437a:	4642      	mov	r2, r8
 800437c:	4658      	mov	r0, fp
 800437e:	f000 fcb5 	bl	8004cec <__lshift>
 8004382:	4681      	mov	r9, r0
 8004384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd05      	ble.n	8004396 <_dtoa_r+0x84e>
 800438a:	4621      	mov	r1, r4
 800438c:	461a      	mov	r2, r3
 800438e:	4658      	mov	r0, fp
 8004390:	f000 fcac 	bl	8004cec <__lshift>
 8004394:	4604      	mov	r4, r0
 8004396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d053      	beq.n	8004444 <_dtoa_r+0x8fc>
 800439c:	4621      	mov	r1, r4
 800439e:	4648      	mov	r0, r9
 80043a0:	f000 fd10 	bl	8004dc4 <__mcmp>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	da4d      	bge.n	8004444 <_dtoa_r+0x8fc>
 80043a8:	1e7b      	subs	r3, r7, #1
 80043aa:	4649      	mov	r1, r9
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	220a      	movs	r2, #10
 80043b0:	2300      	movs	r3, #0
 80043b2:	4658      	mov	r0, fp
 80043b4:	f000 faf0 	bl	8004998 <__multadd>
 80043b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043ba:	4681      	mov	r9, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 816c 	beq.w	800469a <_dtoa_r+0xb52>
 80043c2:	2300      	movs	r3, #0
 80043c4:	4629      	mov	r1, r5
 80043c6:	220a      	movs	r2, #10
 80043c8:	4658      	mov	r0, fp
 80043ca:	f000 fae5 	bl	8004998 <__multadd>
 80043ce:	9b08      	ldr	r3, [sp, #32]
 80043d0:	4605      	mov	r5, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dc61      	bgt.n	800449a <_dtoa_r+0x952>
 80043d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043d8:	2b02      	cmp	r3, #2
 80043da:	dc3b      	bgt.n	8004454 <_dtoa_r+0x90c>
 80043dc:	e05d      	b.n	800449a <_dtoa_r+0x952>
 80043de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80043e4:	e746      	b.n	8004274 <_dtoa_r+0x72c>
 80043e6:	9b07      	ldr	r3, [sp, #28]
 80043e8:	1e5c      	subs	r4, r3, #1
 80043ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	bfbf      	itttt	lt
 80043f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80043f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80043f4:	1ae3      	sublt	r3, r4, r3
 80043f6:	18d2      	addlt	r2, r2, r3
 80043f8:	bfa8      	it	ge
 80043fa:	1b1c      	subge	r4, r3, r4
 80043fc:	9b07      	ldr	r3, [sp, #28]
 80043fe:	bfbe      	ittt	lt
 8004400:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004402:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004404:	2400      	movlt	r4, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfb5      	itete	lt
 800440a:	eba8 0603 	sublt.w	r6, r8, r3
 800440e:	4646      	movge	r6, r8
 8004410:	2300      	movlt	r3, #0
 8004412:	9b07      	ldrge	r3, [sp, #28]
 8004414:	e730      	b.n	8004278 <_dtoa_r+0x730>
 8004416:	4646      	mov	r6, r8
 8004418:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800441a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800441c:	e735      	b.n	800428a <_dtoa_r+0x742>
 800441e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004420:	e75c      	b.n	80042dc <_dtoa_r+0x794>
 8004422:	2300      	movs	r3, #0
 8004424:	e788      	b.n	8004338 <_dtoa_r+0x7f0>
 8004426:	9b02      	ldr	r3, [sp, #8]
 8004428:	e786      	b.n	8004338 <_dtoa_r+0x7f0>
 800442a:	2300      	movs	r3, #0
 800442c:	930a      	str	r3, [sp, #40]	@ 0x28
 800442e:	e788      	b.n	8004342 <_dtoa_r+0x7fa>
 8004430:	d09f      	beq.n	8004372 <_dtoa_r+0x82a>
 8004432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004434:	331c      	adds	r3, #28
 8004436:	441a      	add	r2, r3
 8004438:	4498      	add	r8, r3
 800443a:	441e      	add	r6, r3
 800443c:	9209      	str	r2, [sp, #36]	@ 0x24
 800443e:	e798      	b.n	8004372 <_dtoa_r+0x82a>
 8004440:	4603      	mov	r3, r0
 8004442:	e7f6      	b.n	8004432 <_dtoa_r+0x8ea>
 8004444:	9b07      	ldr	r3, [sp, #28]
 8004446:	9704      	str	r7, [sp, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	dc20      	bgt.n	800448e <_dtoa_r+0x946>
 800444c:	9308      	str	r3, [sp, #32]
 800444e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004450:	2b02      	cmp	r3, #2
 8004452:	dd1e      	ble.n	8004492 <_dtoa_r+0x94a>
 8004454:	9b08      	ldr	r3, [sp, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f47f aebc 	bne.w	80041d4 <_dtoa_r+0x68c>
 800445c:	4621      	mov	r1, r4
 800445e:	2205      	movs	r2, #5
 8004460:	4658      	mov	r0, fp
 8004462:	f000 fa99 	bl	8004998 <__multadd>
 8004466:	4601      	mov	r1, r0
 8004468:	4604      	mov	r4, r0
 800446a:	4648      	mov	r0, r9
 800446c:	f000 fcaa 	bl	8004dc4 <__mcmp>
 8004470:	2800      	cmp	r0, #0
 8004472:	f77f aeaf 	ble.w	80041d4 <_dtoa_r+0x68c>
 8004476:	2331      	movs	r3, #49	@ 0x31
 8004478:	4656      	mov	r6, sl
 800447a:	f806 3b01 	strb.w	r3, [r6], #1
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	3301      	adds	r3, #1
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	e6aa      	b.n	80041dc <_dtoa_r+0x694>
 8004486:	9c07      	ldr	r4, [sp, #28]
 8004488:	9704      	str	r7, [sp, #16]
 800448a:	4625      	mov	r5, r4
 800448c:	e7f3      	b.n	8004476 <_dtoa_r+0x92e>
 800448e:	9b07      	ldr	r3, [sp, #28]
 8004490:	9308      	str	r3, [sp, #32]
 8004492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8104 	beq.w	80046a2 <_dtoa_r+0xb5a>
 800449a:	2e00      	cmp	r6, #0
 800449c:	dd05      	ble.n	80044aa <_dtoa_r+0x962>
 800449e:	4629      	mov	r1, r5
 80044a0:	4632      	mov	r2, r6
 80044a2:	4658      	mov	r0, fp
 80044a4:	f000 fc22 	bl	8004cec <__lshift>
 80044a8:	4605      	mov	r5, r0
 80044aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05a      	beq.n	8004566 <_dtoa_r+0xa1e>
 80044b0:	4658      	mov	r0, fp
 80044b2:	6869      	ldr	r1, [r5, #4]
 80044b4:	f000 fa0e 	bl	80048d4 <_Balloc>
 80044b8:	4606      	mov	r6, r0
 80044ba:	b928      	cbnz	r0, 80044c8 <_dtoa_r+0x980>
 80044bc:	4602      	mov	r2, r0
 80044be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80044c2:	4b83      	ldr	r3, [pc, #524]	@ (80046d0 <_dtoa_r+0xb88>)
 80044c4:	f7ff bb54 	b.w	8003b70 <_dtoa_r+0x28>
 80044c8:	692a      	ldr	r2, [r5, #16]
 80044ca:	f105 010c 	add.w	r1, r5, #12
 80044ce:	3202      	adds	r2, #2
 80044d0:	0092      	lsls	r2, r2, #2
 80044d2:	300c      	adds	r0, #12
 80044d4:	f000 ffa8 	bl	8005428 <memcpy>
 80044d8:	2201      	movs	r2, #1
 80044da:	4631      	mov	r1, r6
 80044dc:	4658      	mov	r0, fp
 80044de:	f000 fc05 	bl	8004cec <__lshift>
 80044e2:	462f      	mov	r7, r5
 80044e4:	4605      	mov	r5, r0
 80044e6:	f10a 0301 	add.w	r3, sl, #1
 80044ea:	9307      	str	r3, [sp, #28]
 80044ec:	9b08      	ldr	r3, [sp, #32]
 80044ee:	4453      	add	r3, sl
 80044f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80044fa:	9b07      	ldr	r3, [sp, #28]
 80044fc:	4621      	mov	r1, r4
 80044fe:	3b01      	subs	r3, #1
 8004500:	4648      	mov	r0, r9
 8004502:	9302      	str	r3, [sp, #8]
 8004504:	f7ff fa95 	bl	8003a32 <quorem>
 8004508:	4639      	mov	r1, r7
 800450a:	9008      	str	r0, [sp, #32]
 800450c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004510:	4648      	mov	r0, r9
 8004512:	f000 fc57 	bl	8004dc4 <__mcmp>
 8004516:	462a      	mov	r2, r5
 8004518:	9009      	str	r0, [sp, #36]	@ 0x24
 800451a:	4621      	mov	r1, r4
 800451c:	4658      	mov	r0, fp
 800451e:	f000 fc6d 	bl	8004dfc <__mdiff>
 8004522:	68c2      	ldr	r2, [r0, #12]
 8004524:	4606      	mov	r6, r0
 8004526:	bb02      	cbnz	r2, 800456a <_dtoa_r+0xa22>
 8004528:	4601      	mov	r1, r0
 800452a:	4648      	mov	r0, r9
 800452c:	f000 fc4a 	bl	8004dc4 <__mcmp>
 8004530:	4602      	mov	r2, r0
 8004532:	4631      	mov	r1, r6
 8004534:	4658      	mov	r0, fp
 8004536:	920c      	str	r2, [sp, #48]	@ 0x30
 8004538:	f000 fa0c 	bl	8004954 <_Bfree>
 800453c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800453e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004540:	9e07      	ldr	r6, [sp, #28]
 8004542:	ea43 0102 	orr.w	r1, r3, r2
 8004546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004548:	4319      	orrs	r1, r3
 800454a:	d110      	bne.n	800456e <_dtoa_r+0xa26>
 800454c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004550:	d029      	beq.n	80045a6 <_dtoa_r+0xa5e>
 8004552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	dd02      	ble.n	800455e <_dtoa_r+0xa16>
 8004558:	9b08      	ldr	r3, [sp, #32]
 800455a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	f883 8000 	strb.w	r8, [r3]
 8004564:	e63b      	b.n	80041de <_dtoa_r+0x696>
 8004566:	4628      	mov	r0, r5
 8004568:	e7bb      	b.n	80044e2 <_dtoa_r+0x99a>
 800456a:	2201      	movs	r2, #1
 800456c:	e7e1      	b.n	8004532 <_dtoa_r+0x9ea>
 800456e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	db04      	blt.n	800457e <_dtoa_r+0xa36>
 8004574:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004576:	430b      	orrs	r3, r1
 8004578:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800457a:	430b      	orrs	r3, r1
 800457c:	d120      	bne.n	80045c0 <_dtoa_r+0xa78>
 800457e:	2a00      	cmp	r2, #0
 8004580:	dded      	ble.n	800455e <_dtoa_r+0xa16>
 8004582:	4649      	mov	r1, r9
 8004584:	2201      	movs	r2, #1
 8004586:	4658      	mov	r0, fp
 8004588:	f000 fbb0 	bl	8004cec <__lshift>
 800458c:	4621      	mov	r1, r4
 800458e:	4681      	mov	r9, r0
 8004590:	f000 fc18 	bl	8004dc4 <__mcmp>
 8004594:	2800      	cmp	r0, #0
 8004596:	dc03      	bgt.n	80045a0 <_dtoa_r+0xa58>
 8004598:	d1e1      	bne.n	800455e <_dtoa_r+0xa16>
 800459a:	f018 0f01 	tst.w	r8, #1
 800459e:	d0de      	beq.n	800455e <_dtoa_r+0xa16>
 80045a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045a4:	d1d8      	bne.n	8004558 <_dtoa_r+0xa10>
 80045a6:	2339      	movs	r3, #57	@ 0x39
 80045a8:	9a02      	ldr	r2, [sp, #8]
 80045aa:	7013      	strb	r3, [r2, #0]
 80045ac:	4633      	mov	r3, r6
 80045ae:	461e      	mov	r6, r3
 80045b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	2a39      	cmp	r2, #57	@ 0x39
 80045b8:	d052      	beq.n	8004660 <_dtoa_r+0xb18>
 80045ba:	3201      	adds	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e60e      	b.n	80041de <_dtoa_r+0x696>
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	dd07      	ble.n	80045d4 <_dtoa_r+0xa8c>
 80045c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045c8:	d0ed      	beq.n	80045a6 <_dtoa_r+0xa5e>
 80045ca:	9a02      	ldr	r2, [sp, #8]
 80045cc:	f108 0301 	add.w	r3, r8, #1
 80045d0:	7013      	strb	r3, [r2, #0]
 80045d2:	e604      	b.n	80041de <_dtoa_r+0x696>
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	9a07      	ldr	r2, [sp, #28]
 80045d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80045dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045de:	4293      	cmp	r3, r2
 80045e0:	d028      	beq.n	8004634 <_dtoa_r+0xaec>
 80045e2:	4649      	mov	r1, r9
 80045e4:	2300      	movs	r3, #0
 80045e6:	220a      	movs	r2, #10
 80045e8:	4658      	mov	r0, fp
 80045ea:	f000 f9d5 	bl	8004998 <__multadd>
 80045ee:	42af      	cmp	r7, r5
 80045f0:	4681      	mov	r9, r0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	f04f 020a 	mov.w	r2, #10
 80045fa:	4639      	mov	r1, r7
 80045fc:	4658      	mov	r0, fp
 80045fe:	d107      	bne.n	8004610 <_dtoa_r+0xac8>
 8004600:	f000 f9ca 	bl	8004998 <__multadd>
 8004604:	4607      	mov	r7, r0
 8004606:	4605      	mov	r5, r0
 8004608:	9b07      	ldr	r3, [sp, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	9307      	str	r3, [sp, #28]
 800460e:	e774      	b.n	80044fa <_dtoa_r+0x9b2>
 8004610:	f000 f9c2 	bl	8004998 <__multadd>
 8004614:	4629      	mov	r1, r5
 8004616:	4607      	mov	r7, r0
 8004618:	2300      	movs	r3, #0
 800461a:	220a      	movs	r2, #10
 800461c:	4658      	mov	r0, fp
 800461e:	f000 f9bb 	bl	8004998 <__multadd>
 8004622:	4605      	mov	r5, r0
 8004624:	e7f0      	b.n	8004608 <_dtoa_r+0xac0>
 8004626:	9b08      	ldr	r3, [sp, #32]
 8004628:	2700      	movs	r7, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfcc      	ite	gt
 800462e:	461e      	movgt	r6, r3
 8004630:	2601      	movle	r6, #1
 8004632:	4456      	add	r6, sl
 8004634:	4649      	mov	r1, r9
 8004636:	2201      	movs	r2, #1
 8004638:	4658      	mov	r0, fp
 800463a:	f000 fb57 	bl	8004cec <__lshift>
 800463e:	4621      	mov	r1, r4
 8004640:	4681      	mov	r9, r0
 8004642:	f000 fbbf 	bl	8004dc4 <__mcmp>
 8004646:	2800      	cmp	r0, #0
 8004648:	dcb0      	bgt.n	80045ac <_dtoa_r+0xa64>
 800464a:	d102      	bne.n	8004652 <_dtoa_r+0xb0a>
 800464c:	f018 0f01 	tst.w	r8, #1
 8004650:	d1ac      	bne.n	80045ac <_dtoa_r+0xa64>
 8004652:	4633      	mov	r3, r6
 8004654:	461e      	mov	r6, r3
 8004656:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800465a:	2a30      	cmp	r2, #48	@ 0x30
 800465c:	d0fa      	beq.n	8004654 <_dtoa_r+0xb0c>
 800465e:	e5be      	b.n	80041de <_dtoa_r+0x696>
 8004660:	459a      	cmp	sl, r3
 8004662:	d1a4      	bne.n	80045ae <_dtoa_r+0xa66>
 8004664:	9b04      	ldr	r3, [sp, #16]
 8004666:	3301      	adds	r3, #1
 8004668:	9304      	str	r3, [sp, #16]
 800466a:	2331      	movs	r3, #49	@ 0x31
 800466c:	f88a 3000 	strb.w	r3, [sl]
 8004670:	e5b5      	b.n	80041de <_dtoa_r+0x696>
 8004672:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004674:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80046d4 <_dtoa_r+0xb8c>
 8004678:	b11b      	cbz	r3, 8004682 <_dtoa_r+0xb3a>
 800467a:	f10a 0308 	add.w	r3, sl, #8
 800467e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4650      	mov	r0, sl
 8004684:	b017      	add	sp, #92	@ 0x5c
 8004686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800468c:	2b01      	cmp	r3, #1
 800468e:	f77f ae3d 	ble.w	800430c <_dtoa_r+0x7c4>
 8004692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004694:	930a      	str	r3, [sp, #40]	@ 0x28
 8004696:	2001      	movs	r0, #1
 8004698:	e65b      	b.n	8004352 <_dtoa_r+0x80a>
 800469a:	9b08      	ldr	r3, [sp, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f77f aed6 	ble.w	800444e <_dtoa_r+0x906>
 80046a2:	4656      	mov	r6, sl
 80046a4:	4621      	mov	r1, r4
 80046a6:	4648      	mov	r0, r9
 80046a8:	f7ff f9c3 	bl	8003a32 <quorem>
 80046ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80046b0:	9b08      	ldr	r3, [sp, #32]
 80046b2:	f806 8b01 	strb.w	r8, [r6], #1
 80046b6:	eba6 020a 	sub.w	r2, r6, sl
 80046ba:	4293      	cmp	r3, r2
 80046bc:	ddb3      	ble.n	8004626 <_dtoa_r+0xade>
 80046be:	4649      	mov	r1, r9
 80046c0:	2300      	movs	r3, #0
 80046c2:	220a      	movs	r2, #10
 80046c4:	4658      	mov	r0, fp
 80046c6:	f000 f967 	bl	8004998 <__multadd>
 80046ca:	4681      	mov	r9, r0
 80046cc:	e7ea      	b.n	80046a4 <_dtoa_r+0xb5c>
 80046ce:	bf00      	nop
 80046d0:	08005be0 	.word	0x08005be0
 80046d4:	08005b64 	.word	0x08005b64

080046d8 <_free_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4605      	mov	r5, r0
 80046dc:	2900      	cmp	r1, #0
 80046de:	d040      	beq.n	8004762 <_free_r+0x8a>
 80046e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e4:	1f0c      	subs	r4, r1, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	18e4      	addlt	r4, r4, r3
 80046ec:	f000 f8e6 	bl	80048bc <__malloc_lock>
 80046f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004764 <_free_r+0x8c>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	b933      	cbnz	r3, 8004704 <_free_r+0x2c>
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	4628      	mov	r0, r5
 80046fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004700:	f000 b8e2 	b.w	80048c8 <__malloc_unlock>
 8004704:	42a3      	cmp	r3, r4
 8004706:	d908      	bls.n	800471a <_free_r+0x42>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	1821      	adds	r1, r4, r0
 800470c:	428b      	cmp	r3, r1
 800470e:	bf01      	itttt	eq
 8004710:	6819      	ldreq	r1, [r3, #0]
 8004712:	685b      	ldreq	r3, [r3, #4]
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	e7ed      	b.n	80046f6 <_free_r+0x1e>
 800471a:	461a      	mov	r2, r3
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b10b      	cbz	r3, 8004724 <_free_r+0x4c>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d9fa      	bls.n	800471a <_free_r+0x42>
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	1850      	adds	r0, r2, r1
 8004728:	42a0      	cmp	r0, r4
 800472a:	d10b      	bne.n	8004744 <_free_r+0x6c>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	4401      	add	r1, r0
 8004730:	1850      	adds	r0, r2, r1
 8004732:	4283      	cmp	r3, r0
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	d1e0      	bne.n	80046fa <_free_r+0x22>
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4408      	add	r0, r1
 800473e:	6010      	str	r0, [r2, #0]
 8004740:	6053      	str	r3, [r2, #4]
 8004742:	e7da      	b.n	80046fa <_free_r+0x22>
 8004744:	d902      	bls.n	800474c <_free_r+0x74>
 8004746:	230c      	movs	r3, #12
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	e7d6      	b.n	80046fa <_free_r+0x22>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428b      	cmp	r3, r1
 8004752:	bf01      	itttt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6054      	str	r4, [r2, #4]
 8004760:	e7cb      	b.n	80046fa <_free_r+0x22>
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20000388 	.word	0x20000388

08004768 <malloc>:
 8004768:	4b02      	ldr	r3, [pc, #8]	@ (8004774 <malloc+0xc>)
 800476a:	4601      	mov	r1, r0
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	f000 b825 	b.w	80047bc <_malloc_r>
 8004772:	bf00      	nop
 8004774:	20000018 	.word	0x20000018

08004778 <sbrk_aligned>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4e0f      	ldr	r6, [pc, #60]	@ (80047b8 <sbrk_aligned+0x40>)
 800477c:	460c      	mov	r4, r1
 800477e:	6831      	ldr	r1, [r6, #0]
 8004780:	4605      	mov	r5, r0
 8004782:	b911      	cbnz	r1, 800478a <sbrk_aligned+0x12>
 8004784:	f000 fe40 	bl	8005408 <_sbrk_r>
 8004788:	6030      	str	r0, [r6, #0]
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 fe3b 	bl	8005408 <_sbrk_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d103      	bne.n	800479e <sbrk_aligned+0x26>
 8004796:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800479a:	4620      	mov	r0, r4
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d0f8      	beq.n	800479a <sbrk_aligned+0x22>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 fe2c 	bl	8005408 <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1f2      	bne.n	800479a <sbrk_aligned+0x22>
 80047b4:	e7ef      	b.n	8004796 <sbrk_aligned+0x1e>
 80047b6:	bf00      	nop
 80047b8:	20000384 	.word	0x20000384

080047bc <_malloc_r>:
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	1ccd      	adds	r5, r1, #3
 80047c2:	f025 0503 	bic.w	r5, r5, #3
 80047c6:	3508      	adds	r5, #8
 80047c8:	2d0c      	cmp	r5, #12
 80047ca:	bf38      	it	cc
 80047cc:	250c      	movcc	r5, #12
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	4606      	mov	r6, r0
 80047d2:	db01      	blt.n	80047d8 <_malloc_r+0x1c>
 80047d4:	42a9      	cmp	r1, r5
 80047d6:	d904      	bls.n	80047e2 <_malloc_r+0x26>
 80047d8:	230c      	movs	r3, #12
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048b8 <_malloc_r+0xfc>
 80047e6:	f000 f869 	bl	80048bc <__malloc_lock>
 80047ea:	f8d8 3000 	ldr.w	r3, [r8]
 80047ee:	461c      	mov	r4, r3
 80047f0:	bb44      	cbnz	r4, 8004844 <_malloc_r+0x88>
 80047f2:	4629      	mov	r1, r5
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ffbf 	bl	8004778 <sbrk_aligned>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	4604      	mov	r4, r0
 80047fe:	d158      	bne.n	80048b2 <_malloc_r+0xf6>
 8004800:	f8d8 4000 	ldr.w	r4, [r8]
 8004804:	4627      	mov	r7, r4
 8004806:	2f00      	cmp	r7, #0
 8004808:	d143      	bne.n	8004892 <_malloc_r+0xd6>
 800480a:	2c00      	cmp	r4, #0
 800480c:	d04b      	beq.n	80048a6 <_malloc_r+0xea>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4639      	mov	r1, r7
 8004812:	4630      	mov	r0, r6
 8004814:	eb04 0903 	add.w	r9, r4, r3
 8004818:	f000 fdf6 	bl	8005408 <_sbrk_r>
 800481c:	4581      	cmp	r9, r0
 800481e:	d142      	bne.n	80048a6 <_malloc_r+0xea>
 8004820:	6821      	ldr	r1, [r4, #0]
 8004822:	4630      	mov	r0, r6
 8004824:	1a6d      	subs	r5, r5, r1
 8004826:	4629      	mov	r1, r5
 8004828:	f7ff ffa6 	bl	8004778 <sbrk_aligned>
 800482c:	3001      	adds	r0, #1
 800482e:	d03a      	beq.n	80048a6 <_malloc_r+0xea>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	442b      	add	r3, r5
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	bb62      	cbnz	r2, 8004898 <_malloc_r+0xdc>
 800483e:	f8c8 7000 	str.w	r7, [r8]
 8004842:	e00f      	b.n	8004864 <_malloc_r+0xa8>
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	1b52      	subs	r2, r2, r5
 8004848:	d420      	bmi.n	800488c <_malloc_r+0xd0>
 800484a:	2a0b      	cmp	r2, #11
 800484c:	d917      	bls.n	800487e <_malloc_r+0xc2>
 800484e:	1961      	adds	r1, r4, r5
 8004850:	42a3      	cmp	r3, r4
 8004852:	6025      	str	r5, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	6059      	strne	r1, [r3, #4]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	bf08      	it	eq
 800485c:	f8c8 1000 	streq.w	r1, [r8]
 8004860:	5162      	str	r2, [r4, r5]
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	4630      	mov	r0, r6
 8004866:	f000 f82f 	bl	80048c8 <__malloc_unlock>
 800486a:	f104 000b 	add.w	r0, r4, #11
 800486e:	1d23      	adds	r3, r4, #4
 8004870:	f020 0007 	bic.w	r0, r0, #7
 8004874:	1ac2      	subs	r2, r0, r3
 8004876:	bf1c      	itt	ne
 8004878:	1a1b      	subne	r3, r3, r0
 800487a:	50a3      	strne	r3, [r4, r2]
 800487c:	e7af      	b.n	80047de <_malloc_r+0x22>
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	42a3      	cmp	r3, r4
 8004882:	bf0c      	ite	eq
 8004884:	f8c8 2000 	streq.w	r2, [r8]
 8004888:	605a      	strne	r2, [r3, #4]
 800488a:	e7eb      	b.n	8004864 <_malloc_r+0xa8>
 800488c:	4623      	mov	r3, r4
 800488e:	6864      	ldr	r4, [r4, #4]
 8004890:	e7ae      	b.n	80047f0 <_malloc_r+0x34>
 8004892:	463c      	mov	r4, r7
 8004894:	687f      	ldr	r7, [r7, #4]
 8004896:	e7b6      	b.n	8004806 <_malloc_r+0x4a>
 8004898:	461a      	mov	r2, r3
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	42a3      	cmp	r3, r4
 800489e:	d1fb      	bne.n	8004898 <_malloc_r+0xdc>
 80048a0:	2300      	movs	r3, #0
 80048a2:	6053      	str	r3, [r2, #4]
 80048a4:	e7de      	b.n	8004864 <_malloc_r+0xa8>
 80048a6:	230c      	movs	r3, #12
 80048a8:	4630      	mov	r0, r6
 80048aa:	6033      	str	r3, [r6, #0]
 80048ac:	f000 f80c 	bl	80048c8 <__malloc_unlock>
 80048b0:	e794      	b.n	80047dc <_malloc_r+0x20>
 80048b2:	6005      	str	r5, [r0, #0]
 80048b4:	e7d6      	b.n	8004864 <_malloc_r+0xa8>
 80048b6:	bf00      	nop
 80048b8:	20000388 	.word	0x20000388

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	@ (80048c4 <__malloc_lock+0x8>)
 80048be:	f7ff b8a8 	b.w	8003a12 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	20000380 	.word	0x20000380

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f7ff b8a3 	b.w	8003a14 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	20000380 	.word	0x20000380

080048d4 <_Balloc>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	69c6      	ldr	r6, [r0, #28]
 80048d8:	4604      	mov	r4, r0
 80048da:	460d      	mov	r5, r1
 80048dc:	b976      	cbnz	r6, 80048fc <_Balloc+0x28>
 80048de:	2010      	movs	r0, #16
 80048e0:	f7ff ff42 	bl	8004768 <malloc>
 80048e4:	4602      	mov	r2, r0
 80048e6:	61e0      	str	r0, [r4, #28]
 80048e8:	b920      	cbnz	r0, 80048f4 <_Balloc+0x20>
 80048ea:	216b      	movs	r1, #107	@ 0x6b
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <_Balloc+0x78>)
 80048ee:	4818      	ldr	r0, [pc, #96]	@ (8004950 <_Balloc+0x7c>)
 80048f0:	f000 fda8 	bl	8005444 <__assert_func>
 80048f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048f8:	6006      	str	r6, [r0, #0]
 80048fa:	60c6      	str	r6, [r0, #12]
 80048fc:	69e6      	ldr	r6, [r4, #28]
 80048fe:	68f3      	ldr	r3, [r6, #12]
 8004900:	b183      	cbz	r3, 8004924 <_Balloc+0x50>
 8004902:	69e3      	ldr	r3, [r4, #28]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800490a:	b9b8      	cbnz	r0, 800493c <_Balloc+0x68>
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f605 	lsl.w	r6, r1, r5
 8004912:	1d72      	adds	r2, r6, #5
 8004914:	4620      	mov	r0, r4
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	f000 fdb2 	bl	8005480 <_calloc_r>
 800491c:	b160      	cbz	r0, 8004938 <_Balloc+0x64>
 800491e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004922:	e00e      	b.n	8004942 <_Balloc+0x6e>
 8004924:	2221      	movs	r2, #33	@ 0x21
 8004926:	2104      	movs	r1, #4
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fda9 	bl	8005480 <_calloc_r>
 800492e:	69e3      	ldr	r3, [r4, #28]
 8004930:	60f0      	str	r0, [r6, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e4      	bne.n	8004902 <_Balloc+0x2e>
 8004938:	2000      	movs	r0, #0
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	6802      	ldr	r2, [r0, #0]
 800493e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004942:	2300      	movs	r3, #0
 8004944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004948:	e7f7      	b.n	800493a <_Balloc+0x66>
 800494a:	bf00      	nop
 800494c:	08005b71 	.word	0x08005b71
 8004950:	08005bf1 	.word	0x08005bf1

08004954 <_Bfree>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	69c6      	ldr	r6, [r0, #28]
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b976      	cbnz	r6, 800497c <_Bfree+0x28>
 800495e:	2010      	movs	r0, #16
 8004960:	f7ff ff02 	bl	8004768 <malloc>
 8004964:	4602      	mov	r2, r0
 8004966:	61e8      	str	r0, [r5, #28]
 8004968:	b920      	cbnz	r0, 8004974 <_Bfree+0x20>
 800496a:	218f      	movs	r1, #143	@ 0x8f
 800496c:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <_Bfree+0x3c>)
 800496e:	4809      	ldr	r0, [pc, #36]	@ (8004994 <_Bfree+0x40>)
 8004970:	f000 fd68 	bl	8005444 <__assert_func>
 8004974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004978:	6006      	str	r6, [r0, #0]
 800497a:	60c6      	str	r6, [r0, #12]
 800497c:	b13c      	cbz	r4, 800498e <_Bfree+0x3a>
 800497e:	69eb      	ldr	r3, [r5, #28]
 8004980:	6862      	ldr	r2, [r4, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004988:	6021      	str	r1, [r4, #0]
 800498a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	08005b71 	.word	0x08005b71
 8004994:	08005bf1 	.word	0x08005bf1

08004998 <__multadd>:
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4607      	mov	r7, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	461e      	mov	r6, r3
 80049a2:	2000      	movs	r0, #0
 80049a4:	690d      	ldr	r5, [r1, #16]
 80049a6:	f101 0c14 	add.w	ip, r1, #20
 80049aa:	f8dc 3000 	ldr.w	r3, [ip]
 80049ae:	3001      	adds	r0, #1
 80049b0:	b299      	uxth	r1, r3
 80049b2:	fb02 6101 	mla	r1, r2, r1, r6
 80049b6:	0c1e      	lsrs	r6, r3, #16
 80049b8:	0c0b      	lsrs	r3, r1, #16
 80049ba:	fb02 3306 	mla	r3, r2, r6, r3
 80049be:	b289      	uxth	r1, r1
 80049c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049c4:	4285      	cmp	r5, r0
 80049c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049ca:	f84c 1b04 	str.w	r1, [ip], #4
 80049ce:	dcec      	bgt.n	80049aa <__multadd+0x12>
 80049d0:	b30e      	cbz	r6, 8004a16 <__multadd+0x7e>
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	42ab      	cmp	r3, r5
 80049d6:	dc19      	bgt.n	8004a0c <__multadd+0x74>
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	4638      	mov	r0, r7
 80049dc:	3101      	adds	r1, #1
 80049de:	f7ff ff79 	bl	80048d4 <_Balloc>
 80049e2:	4680      	mov	r8, r0
 80049e4:	b928      	cbnz	r0, 80049f2 <__multadd+0x5a>
 80049e6:	4602      	mov	r2, r0
 80049e8:	21ba      	movs	r1, #186	@ 0xba
 80049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <__multadd+0x84>)
 80049ec:	480c      	ldr	r0, [pc, #48]	@ (8004a20 <__multadd+0x88>)
 80049ee:	f000 fd29 	bl	8005444 <__assert_func>
 80049f2:	6922      	ldr	r2, [r4, #16]
 80049f4:	f104 010c 	add.w	r1, r4, #12
 80049f8:	3202      	adds	r2, #2
 80049fa:	0092      	lsls	r2, r2, #2
 80049fc:	300c      	adds	r0, #12
 80049fe:	f000 fd13 	bl	8005428 <memcpy>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ffa5 	bl	8004954 <_Bfree>
 8004a0a:	4644      	mov	r4, r8
 8004a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a10:	3501      	adds	r5, #1
 8004a12:	615e      	str	r6, [r3, #20]
 8004a14:	6125      	str	r5, [r4, #16]
 8004a16:	4620      	mov	r0, r4
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	08005be0 	.word	0x08005be0
 8004a20:	08005bf1 	.word	0x08005bf1

08004a24 <__hi0bits>:
 8004a24:	4603      	mov	r3, r0
 8004a26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004a2a:	bf3a      	itte	cc
 8004a2c:	0403      	lslcc	r3, r0, #16
 8004a2e:	2010      	movcc	r0, #16
 8004a30:	2000      	movcs	r0, #0
 8004a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a36:	bf3c      	itt	cc
 8004a38:	021b      	lslcc	r3, r3, #8
 8004a3a:	3008      	addcc	r0, #8
 8004a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a40:	bf3c      	itt	cc
 8004a42:	011b      	lslcc	r3, r3, #4
 8004a44:	3004      	addcc	r0, #4
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	bf3c      	itt	cc
 8004a4c:	009b      	lslcc	r3, r3, #2
 8004a4e:	3002      	addcc	r0, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db05      	blt.n	8004a60 <__hi0bits+0x3c>
 8004a54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004a58:	f100 0001 	add.w	r0, r0, #1
 8004a5c:	bf08      	it	eq
 8004a5e:	2020      	moveq	r0, #32
 8004a60:	4770      	bx	lr

08004a62 <__lo0bits>:
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	4602      	mov	r2, r0
 8004a66:	f013 0007 	ands.w	r0, r3, #7
 8004a6a:	d00b      	beq.n	8004a84 <__lo0bits+0x22>
 8004a6c:	07d9      	lsls	r1, r3, #31
 8004a6e:	d421      	bmi.n	8004ab4 <__lo0bits+0x52>
 8004a70:	0798      	lsls	r0, r3, #30
 8004a72:	bf49      	itett	mi
 8004a74:	085b      	lsrmi	r3, r3, #1
 8004a76:	089b      	lsrpl	r3, r3, #2
 8004a78:	2001      	movmi	r0, #1
 8004a7a:	6013      	strmi	r3, [r2, #0]
 8004a7c:	bf5c      	itt	pl
 8004a7e:	2002      	movpl	r0, #2
 8004a80:	6013      	strpl	r3, [r2, #0]
 8004a82:	4770      	bx	lr
 8004a84:	b299      	uxth	r1, r3
 8004a86:	b909      	cbnz	r1, 8004a8c <__lo0bits+0x2a>
 8004a88:	2010      	movs	r0, #16
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	b2d9      	uxtb	r1, r3
 8004a8e:	b909      	cbnz	r1, 8004a94 <__lo0bits+0x32>
 8004a90:	3008      	adds	r0, #8
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	0719      	lsls	r1, r3, #28
 8004a96:	bf04      	itt	eq
 8004a98:	091b      	lsreq	r3, r3, #4
 8004a9a:	3004      	addeq	r0, #4
 8004a9c:	0799      	lsls	r1, r3, #30
 8004a9e:	bf04      	itt	eq
 8004aa0:	089b      	lsreq	r3, r3, #2
 8004aa2:	3002      	addeq	r0, #2
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	d403      	bmi.n	8004ab0 <__lo0bits+0x4e>
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	f100 0001 	add.w	r0, r0, #1
 8004aae:	d003      	beq.n	8004ab8 <__lo0bits+0x56>
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4770      	bx	lr
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4770      	bx	lr
 8004ab8:	2020      	movs	r0, #32
 8004aba:	4770      	bx	lr

08004abc <__i2b>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	f7ff ff07 	bl	80048d4 <_Balloc>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	b928      	cbnz	r0, 8004ad6 <__i2b+0x1a>
 8004aca:	f240 1145 	movw	r1, #325	@ 0x145
 8004ace:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <__i2b+0x24>)
 8004ad0:	4804      	ldr	r0, [pc, #16]	@ (8004ae4 <__i2b+0x28>)
 8004ad2:	f000 fcb7 	bl	8005444 <__assert_func>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	6144      	str	r4, [r0, #20]
 8004ada:	6103      	str	r3, [r0, #16]
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	bf00      	nop
 8004ae0:	08005be0 	.word	0x08005be0
 8004ae4:	08005bf1 	.word	0x08005bf1

08004ae8 <__multiply>:
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	4614      	mov	r4, r2
 8004aee:	690a      	ldr	r2, [r1, #16]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	460f      	mov	r7, r1
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bfa2      	ittt	ge
 8004af8:	4623      	movge	r3, r4
 8004afa:	460c      	movge	r4, r1
 8004afc:	461f      	movge	r7, r3
 8004afe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004b02:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	6861      	ldr	r1, [r4, #4]
 8004b0a:	eb0a 0609 	add.w	r6, sl, r9
 8004b0e:	42b3      	cmp	r3, r6
 8004b10:	b085      	sub	sp, #20
 8004b12:	bfb8      	it	lt
 8004b14:	3101      	addlt	r1, #1
 8004b16:	f7ff fedd 	bl	80048d4 <_Balloc>
 8004b1a:	b930      	cbnz	r0, 8004b2a <__multiply+0x42>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b22:	4b43      	ldr	r3, [pc, #268]	@ (8004c30 <__multiply+0x148>)
 8004b24:	4843      	ldr	r0, [pc, #268]	@ (8004c34 <__multiply+0x14c>)
 8004b26:	f000 fc8d 	bl	8005444 <__assert_func>
 8004b2a:	f100 0514 	add.w	r5, r0, #20
 8004b2e:	462b      	mov	r3, r5
 8004b30:	2200      	movs	r2, #0
 8004b32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b36:	4543      	cmp	r3, r8
 8004b38:	d321      	bcc.n	8004b7e <__multiply+0x96>
 8004b3a:	f107 0114 	add.w	r1, r7, #20
 8004b3e:	f104 0214 	add.w	r2, r4, #20
 8004b42:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004b46:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004b4a:	9302      	str	r3, [sp, #8]
 8004b4c:	1b13      	subs	r3, r2, r4
 8004b4e:	3b15      	subs	r3, #21
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	3304      	adds	r3, #4
 8004b56:	f104 0715 	add.w	r7, r4, #21
 8004b5a:	42ba      	cmp	r2, r7
 8004b5c:	bf38      	it	cc
 8004b5e:	2304      	movcc	r3, #4
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9b02      	ldr	r3, [sp, #8]
 8004b64:	9103      	str	r1, [sp, #12]
 8004b66:	428b      	cmp	r3, r1
 8004b68:	d80c      	bhi.n	8004b84 <__multiply+0x9c>
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	dd03      	ble.n	8004b76 <__multiply+0x8e>
 8004b6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d05a      	beq.n	8004c2c <__multiply+0x144>
 8004b76:	6106      	str	r6, [r0, #16]
 8004b78:	b005      	add	sp, #20
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	f843 2b04 	str.w	r2, [r3], #4
 8004b82:	e7d8      	b.n	8004b36 <__multiply+0x4e>
 8004b84:	f8b1 a000 	ldrh.w	sl, [r1]
 8004b88:	f1ba 0f00 	cmp.w	sl, #0
 8004b8c:	d023      	beq.n	8004bd6 <__multiply+0xee>
 8004b8e:	46a9      	mov	r9, r5
 8004b90:	f04f 0c00 	mov.w	ip, #0
 8004b94:	f104 0e14 	add.w	lr, r4, #20
 8004b98:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b9c:	f8d9 3000 	ldr.w	r3, [r9]
 8004ba0:	fa1f fb87 	uxth.w	fp, r7
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	fb0a 330b 	mla	r3, sl, fp, r3
 8004baa:	4463      	add	r3, ip
 8004bac:	f8d9 c000 	ldr.w	ip, [r9]
 8004bb0:	0c3f      	lsrs	r7, r7, #16
 8004bb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004bb6:	fb0a c707 	mla	r7, sl, r7, ip
 8004bba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004bc4:	4572      	cmp	r2, lr
 8004bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004bca:	f849 3b04 	str.w	r3, [r9], #4
 8004bce:	d8e3      	bhi.n	8004b98 <__multiply+0xb0>
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	f845 c003 	str.w	ip, [r5, r3]
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	3104      	adds	r1, #4
 8004bda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004bde:	f1b9 0f00 	cmp.w	r9, #0
 8004be2:	d021      	beq.n	8004c28 <__multiply+0x140>
 8004be4:	46ae      	mov	lr, r5
 8004be6:	f04f 0a00 	mov.w	sl, #0
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	f104 0c14 	add.w	ip, r4, #20
 8004bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8004bf4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	fb09 770b 	mla	r7, r9, fp, r7
 8004bfe:	4457      	add	r7, sl
 8004c00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c04:	f84e 3b04 	str.w	r3, [lr], #4
 8004c08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c10:	f8be 3000 	ldrh.w	r3, [lr]
 8004c14:	4562      	cmp	r2, ip
 8004c16:	fb09 330a 	mla	r3, r9, sl, r3
 8004c1a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004c1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c22:	d8e5      	bhi.n	8004bf0 <__multiply+0x108>
 8004c24:	9f01      	ldr	r7, [sp, #4]
 8004c26:	51eb      	str	r3, [r5, r7]
 8004c28:	3504      	adds	r5, #4
 8004c2a:	e79a      	b.n	8004b62 <__multiply+0x7a>
 8004c2c:	3e01      	subs	r6, #1
 8004c2e:	e79c      	b.n	8004b6a <__multiply+0x82>
 8004c30:	08005be0 	.word	0x08005be0
 8004c34:	08005bf1 	.word	0x08005bf1

08004c38 <__pow5mult>:
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	4615      	mov	r5, r2
 8004c3e:	f012 0203 	ands.w	r2, r2, #3
 8004c42:	4607      	mov	r7, r0
 8004c44:	460e      	mov	r6, r1
 8004c46:	d007      	beq.n	8004c58 <__pow5mult+0x20>
 8004c48:	4c25      	ldr	r4, [pc, #148]	@ (8004ce0 <__pow5mult+0xa8>)
 8004c4a:	3a01      	subs	r2, #1
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c52:	f7ff fea1 	bl	8004998 <__multadd>
 8004c56:	4606      	mov	r6, r0
 8004c58:	10ad      	asrs	r5, r5, #2
 8004c5a:	d03d      	beq.n	8004cd8 <__pow5mult+0xa0>
 8004c5c:	69fc      	ldr	r4, [r7, #28]
 8004c5e:	b97c      	cbnz	r4, 8004c80 <__pow5mult+0x48>
 8004c60:	2010      	movs	r0, #16
 8004c62:	f7ff fd81 	bl	8004768 <malloc>
 8004c66:	4602      	mov	r2, r0
 8004c68:	61f8      	str	r0, [r7, #28]
 8004c6a:	b928      	cbnz	r0, 8004c78 <__pow5mult+0x40>
 8004c6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <__pow5mult+0xac>)
 8004c72:	481d      	ldr	r0, [pc, #116]	@ (8004ce8 <__pow5mult+0xb0>)
 8004c74:	f000 fbe6 	bl	8005444 <__assert_func>
 8004c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c7c:	6004      	str	r4, [r0, #0]
 8004c7e:	60c4      	str	r4, [r0, #12]
 8004c80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c88:	b94c      	cbnz	r4, 8004c9e <__pow5mult+0x66>
 8004c8a:	f240 2171 	movw	r1, #625	@ 0x271
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f7ff ff14 	bl	8004abc <__i2b>
 8004c94:	2300      	movs	r3, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	f04f 0900 	mov.w	r9, #0
 8004ca2:	07eb      	lsls	r3, r5, #31
 8004ca4:	d50a      	bpl.n	8004cbc <__pow5mult+0x84>
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff ff1c 	bl	8004ae8 <__multiply>
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	f7ff fe4d 	bl	8004954 <_Bfree>
 8004cba:	4646      	mov	r6, r8
 8004cbc:	106d      	asrs	r5, r5, #1
 8004cbe:	d00b      	beq.n	8004cd8 <__pow5mult+0xa0>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	b938      	cbnz	r0, 8004cd4 <__pow5mult+0x9c>
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ff0d 	bl	8004ae8 <__multiply>
 8004cce:	6020      	str	r0, [r4, #0]
 8004cd0:	f8c0 9000 	str.w	r9, [r0]
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	e7e4      	b.n	8004ca2 <__pow5mult+0x6a>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cde:	bf00      	nop
 8004ce0:	08005c4c 	.word	0x08005c4c
 8004ce4:	08005b71 	.word	0x08005b71
 8004ce8:	08005bf1 	.word	0x08005bf1

08004cec <__lshift>:
 8004cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	4691      	mov	r9, r2
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6849      	ldr	r1, [r1, #4]
 8004cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d04:	f108 0601 	add.w	r6, r8, #1
 8004d08:	42b3      	cmp	r3, r6
 8004d0a:	db0b      	blt.n	8004d24 <__lshift+0x38>
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff fde1 	bl	80048d4 <_Balloc>
 8004d12:	4605      	mov	r5, r0
 8004d14:	b948      	cbnz	r0, 8004d2a <__lshift+0x3e>
 8004d16:	4602      	mov	r2, r0
 8004d18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004d1c:	4b27      	ldr	r3, [pc, #156]	@ (8004dbc <__lshift+0xd0>)
 8004d1e:	4828      	ldr	r0, [pc, #160]	@ (8004dc0 <__lshift+0xd4>)
 8004d20:	f000 fb90 	bl	8005444 <__assert_func>
 8004d24:	3101      	adds	r1, #1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	e7ee      	b.n	8004d08 <__lshift+0x1c>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f100 0114 	add.w	r1, r0, #20
 8004d30:	f100 0210 	add.w	r2, r0, #16
 8004d34:	4618      	mov	r0, r3
 8004d36:	4553      	cmp	r3, sl
 8004d38:	db33      	blt.n	8004da2 <__lshift+0xb6>
 8004d3a:	6920      	ldr	r0, [r4, #16]
 8004d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d40:	f104 0314 	add.w	r3, r4, #20
 8004d44:	f019 091f 	ands.w	r9, r9, #31
 8004d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d50:	d02b      	beq.n	8004daa <__lshift+0xbe>
 8004d52:	468a      	mov	sl, r1
 8004d54:	2200      	movs	r2, #0
 8004d56:	f1c9 0e20 	rsb	lr, r9, #32
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8004d60:	4310      	orrs	r0, r2
 8004d62:	f84a 0b04 	str.w	r0, [sl], #4
 8004d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d6a:	459c      	cmp	ip, r3
 8004d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d70:	d8f3      	bhi.n	8004d5a <__lshift+0x6e>
 8004d72:	ebac 0304 	sub.w	r3, ip, r4
 8004d76:	3b15      	subs	r3, #21
 8004d78:	f023 0303 	bic.w	r3, r3, #3
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	f104 0015 	add.w	r0, r4, #21
 8004d82:	4584      	cmp	ip, r0
 8004d84:	bf38      	it	cc
 8004d86:	2304      	movcc	r3, #4
 8004d88:	50ca      	str	r2, [r1, r3]
 8004d8a:	b10a      	cbz	r2, 8004d90 <__lshift+0xa4>
 8004d8c:	f108 0602 	add.w	r6, r8, #2
 8004d90:	3e01      	subs	r6, #1
 8004d92:	4638      	mov	r0, r7
 8004d94:	4621      	mov	r1, r4
 8004d96:	612e      	str	r6, [r5, #16]
 8004d98:	f7ff fddc 	bl	8004954 <_Bfree>
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004da6:	3301      	adds	r3, #1
 8004da8:	e7c5      	b.n	8004d36 <__lshift+0x4a>
 8004daa:	3904      	subs	r1, #4
 8004dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db0:	459c      	cmp	ip, r3
 8004db2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004db6:	d8f9      	bhi.n	8004dac <__lshift+0xc0>
 8004db8:	e7ea      	b.n	8004d90 <__lshift+0xa4>
 8004dba:	bf00      	nop
 8004dbc:	08005be0 	.word	0x08005be0
 8004dc0:	08005bf1 	.word	0x08005bf1

08004dc4 <__mcmp>:
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	690a      	ldr	r2, [r1, #16]
 8004dc8:	6900      	ldr	r0, [r0, #16]
 8004dca:	b530      	push	{r4, r5, lr}
 8004dcc:	1a80      	subs	r0, r0, r2
 8004dce:	d10e      	bne.n	8004dee <__mcmp+0x2a>
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	3114      	adds	r1, #20
 8004dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004dd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004de4:	4295      	cmp	r5, r2
 8004de6:	d003      	beq.n	8004df0 <__mcmp+0x2c>
 8004de8:	d205      	bcs.n	8004df6 <__mcmp+0x32>
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dee:	bd30      	pop	{r4, r5, pc}
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	d3f3      	bcc.n	8004ddc <__mcmp+0x18>
 8004df4:	e7fb      	b.n	8004dee <__mcmp+0x2a>
 8004df6:	2001      	movs	r0, #1
 8004df8:	e7f9      	b.n	8004dee <__mcmp+0x2a>
	...

08004dfc <__mdiff>:
 8004dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e00:	4689      	mov	r9, r1
 8004e02:	4606      	mov	r6, r0
 8004e04:	4611      	mov	r1, r2
 8004e06:	4648      	mov	r0, r9
 8004e08:	4614      	mov	r4, r2
 8004e0a:	f7ff ffdb 	bl	8004dc4 <__mcmp>
 8004e0e:	1e05      	subs	r5, r0, #0
 8004e10:	d112      	bne.n	8004e38 <__mdiff+0x3c>
 8004e12:	4629      	mov	r1, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7ff fd5d 	bl	80048d4 <_Balloc>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	b928      	cbnz	r0, 8004e2a <__mdiff+0x2e>
 8004e1e:	f240 2137 	movw	r1, #567	@ 0x237
 8004e22:	4b3e      	ldr	r3, [pc, #248]	@ (8004f1c <__mdiff+0x120>)
 8004e24:	483e      	ldr	r0, [pc, #248]	@ (8004f20 <__mdiff+0x124>)
 8004e26:	f000 fb0d 	bl	8005444 <__assert_func>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e30:	4610      	mov	r0, r2
 8004e32:	b003      	add	sp, #12
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e38:	bfbc      	itt	lt
 8004e3a:	464b      	movlt	r3, r9
 8004e3c:	46a1      	movlt	r9, r4
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e44:	bfba      	itte	lt
 8004e46:	461c      	movlt	r4, r3
 8004e48:	2501      	movlt	r5, #1
 8004e4a:	2500      	movge	r5, #0
 8004e4c:	f7ff fd42 	bl	80048d4 <_Balloc>
 8004e50:	4602      	mov	r2, r0
 8004e52:	b918      	cbnz	r0, 8004e5c <__mdiff+0x60>
 8004e54:	f240 2145 	movw	r1, #581	@ 0x245
 8004e58:	4b30      	ldr	r3, [pc, #192]	@ (8004f1c <__mdiff+0x120>)
 8004e5a:	e7e3      	b.n	8004e24 <__mdiff+0x28>
 8004e5c:	f100 0b14 	add.w	fp, r0, #20
 8004e60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e64:	f109 0310 	add.w	r3, r9, #16
 8004e68:	60c5      	str	r5, [r0, #12]
 8004e6a:	f04f 0c00 	mov.w	ip, #0
 8004e6e:	f109 0514 	add.w	r5, r9, #20
 8004e72:	46d9      	mov	r9, fp
 8004e74:	6926      	ldr	r6, [r4, #16]
 8004e76:	f104 0e14 	add.w	lr, r4, #20
 8004e7a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004e7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e8e:	b281      	uxth	r1, r0
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	fa1f f38a 	uxth.w	r3, sl
 8004e96:	1a5b      	subs	r3, r3, r1
 8004e98:	0c00      	lsrs	r0, r0, #16
 8004e9a:	4463      	add	r3, ip
 8004e9c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004ea0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004eaa:	4576      	cmp	r6, lr
 8004eac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004eb0:	f849 3b04 	str.w	r3, [r9], #4
 8004eb4:	d8e6      	bhi.n	8004e84 <__mdiff+0x88>
 8004eb6:	1b33      	subs	r3, r6, r4
 8004eb8:	3b15      	subs	r3, #21
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	3415      	adds	r4, #21
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	bf38      	it	cc
 8004ec6:	2304      	movcc	r3, #4
 8004ec8:	441d      	add	r5, r3
 8004eca:	445b      	add	r3, fp
 8004ecc:	461e      	mov	r6, r3
 8004ece:	462c      	mov	r4, r5
 8004ed0:	4544      	cmp	r4, r8
 8004ed2:	d30e      	bcc.n	8004ef2 <__mdiff+0xf6>
 8004ed4:	f108 0103 	add.w	r1, r8, #3
 8004ed8:	1b49      	subs	r1, r1, r5
 8004eda:	f021 0103 	bic.w	r1, r1, #3
 8004ede:	3d03      	subs	r5, #3
 8004ee0:	45a8      	cmp	r8, r5
 8004ee2:	bf38      	it	cc
 8004ee4:	2100      	movcc	r1, #0
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004eec:	b199      	cbz	r1, 8004f16 <__mdiff+0x11a>
 8004eee:	6117      	str	r7, [r2, #16]
 8004ef0:	e79e      	b.n	8004e30 <__mdiff+0x34>
 8004ef2:	46e6      	mov	lr, ip
 8004ef4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ef8:	fa1f fc81 	uxth.w	ip, r1
 8004efc:	44f4      	add	ip, lr
 8004efe:	0c08      	lsrs	r0, r1, #16
 8004f00:	4471      	add	r1, lr
 8004f02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f06:	b289      	uxth	r1, r1
 8004f08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f10:	f846 1b04 	str.w	r1, [r6], #4
 8004f14:	e7dc      	b.n	8004ed0 <__mdiff+0xd4>
 8004f16:	3f01      	subs	r7, #1
 8004f18:	e7e6      	b.n	8004ee8 <__mdiff+0xec>
 8004f1a:	bf00      	nop
 8004f1c:	08005be0 	.word	0x08005be0
 8004f20:	08005bf1 	.word	0x08005bf1

08004f24 <__d2b>:
 8004f24:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	9e08      	ldr	r6, [sp, #32]
 8004f30:	f7ff fcd0 	bl	80048d4 <_Balloc>
 8004f34:	4604      	mov	r4, r0
 8004f36:	b930      	cbnz	r0, 8004f46 <__d2b+0x22>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f240 310f 	movw	r1, #783	@ 0x30f
 8004f3e:	4b23      	ldr	r3, [pc, #140]	@ (8004fcc <__d2b+0xa8>)
 8004f40:	4823      	ldr	r0, [pc, #140]	@ (8004fd0 <__d2b+0xac>)
 8004f42:	f000 fa7f 	bl	8005444 <__assert_func>
 8004f46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f4e:	b10d      	cbz	r5, 8004f54 <__d2b+0x30>
 8004f50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	f1b8 0300 	subs.w	r3, r8, #0
 8004f5a:	d024      	beq.n	8004fa6 <__d2b+0x82>
 8004f5c:	4668      	mov	r0, sp
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	f7ff fd7f 	bl	8004a62 <__lo0bits>
 8004f64:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004f68:	b1d8      	cbz	r0, 8004fa2 <__d2b+0x7e>
 8004f6a:	f1c0 0320 	rsb	r3, r0, #32
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	430b      	orrs	r3, r1
 8004f74:	40c2      	lsrs	r2, r0
 8004f76:	6163      	str	r3, [r4, #20]
 8004f78:	9201      	str	r2, [sp, #4]
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2201      	moveq	r2, #1
 8004f82:	2202      	movne	r2, #2
 8004f84:	61a3      	str	r3, [r4, #24]
 8004f86:	6122      	str	r2, [r4, #16]
 8004f88:	b1ad      	cbz	r5, 8004fb6 <__d2b+0x92>
 8004f8a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f8e:	4405      	add	r5, r0
 8004f90:	6035      	str	r5, [r6, #0]
 8004f92:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f98:	6018      	str	r0, [r3, #0]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	b002      	add	sp, #8
 8004f9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004fa2:	6161      	str	r1, [r4, #20]
 8004fa4:	e7e9      	b.n	8004f7a <__d2b+0x56>
 8004fa6:	a801      	add	r0, sp, #4
 8004fa8:	f7ff fd5b 	bl	8004a62 <__lo0bits>
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	6163      	str	r3, [r4, #20]
 8004fb2:	3020      	adds	r0, #32
 8004fb4:	e7e7      	b.n	8004f86 <__d2b+0x62>
 8004fb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004fba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004fbe:	6030      	str	r0, [r6, #0]
 8004fc0:	6918      	ldr	r0, [r3, #16]
 8004fc2:	f7ff fd2f 	bl	8004a24 <__hi0bits>
 8004fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004fca:	e7e4      	b.n	8004f96 <__d2b+0x72>
 8004fcc:	08005be0 	.word	0x08005be0
 8004fd0:	08005bf1 	.word	0x08005bf1

08004fd4 <__ssputs_r>:
 8004fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	461f      	mov	r7, r3
 8004fda:	688e      	ldr	r6, [r1, #8]
 8004fdc:	4682      	mov	sl, r0
 8004fde:	42be      	cmp	r6, r7
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	d82d      	bhi.n	8005044 <__ssputs_r+0x70>
 8004fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ff0:	d026      	beq.n	8005040 <__ssputs_r+0x6c>
 8004ff2:	6965      	ldr	r5, [r4, #20]
 8004ff4:	6909      	ldr	r1, [r1, #16]
 8004ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ffa:	eba3 0901 	sub.w	r9, r3, r1
 8004ffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005002:	1c7b      	adds	r3, r7, #1
 8005004:	444b      	add	r3, r9
 8005006:	106d      	asrs	r5, r5, #1
 8005008:	429d      	cmp	r5, r3
 800500a:	bf38      	it	cc
 800500c:	461d      	movcc	r5, r3
 800500e:	0553      	lsls	r3, r2, #21
 8005010:	d527      	bpl.n	8005062 <__ssputs_r+0x8e>
 8005012:	4629      	mov	r1, r5
 8005014:	f7ff fbd2 	bl	80047bc <_malloc_r>
 8005018:	4606      	mov	r6, r0
 800501a:	b360      	cbz	r0, 8005076 <__ssputs_r+0xa2>
 800501c:	464a      	mov	r2, r9
 800501e:	6921      	ldr	r1, [r4, #16]
 8005020:	f000 fa02 	bl	8005428 <memcpy>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800502a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	6126      	str	r6, [r4, #16]
 8005032:	444e      	add	r6, r9
 8005034:	6026      	str	r6, [r4, #0]
 8005036:	463e      	mov	r6, r7
 8005038:	6165      	str	r5, [r4, #20]
 800503a:	eba5 0509 	sub.w	r5, r5, r9
 800503e:	60a5      	str	r5, [r4, #8]
 8005040:	42be      	cmp	r6, r7
 8005042:	d900      	bls.n	8005046 <__ssputs_r+0x72>
 8005044:	463e      	mov	r6, r7
 8005046:	4632      	mov	r2, r6
 8005048:	4641      	mov	r1, r8
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	f000 f9c2 	bl	80053d4 <memmove>
 8005050:	2000      	movs	r0, #0
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	1b9b      	subs	r3, r3, r6
 8005056:	60a3      	str	r3, [r4, #8]
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	4433      	add	r3, r6
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	462a      	mov	r2, r5
 8005064:	f000 fa32 	bl	80054cc <_realloc_r>
 8005068:	4606      	mov	r6, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d1e0      	bne.n	8005030 <__ssputs_r+0x5c>
 800506e:	4650      	mov	r0, sl
 8005070:	6921      	ldr	r1, [r4, #16]
 8005072:	f7ff fb31 	bl	80046d8 <_free_r>
 8005076:	230c      	movs	r3, #12
 8005078:	f8ca 3000 	str.w	r3, [sl]
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	e7e9      	b.n	800505e <__ssputs_r+0x8a>
	...

0800508c <_svfiprintf_r>:
 800508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005090:	4698      	mov	r8, r3
 8005092:	898b      	ldrh	r3, [r1, #12]
 8005094:	4607      	mov	r7, r0
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	460d      	mov	r5, r1
 800509a:	4614      	mov	r4, r2
 800509c:	b09d      	sub	sp, #116	@ 0x74
 800509e:	d510      	bpl.n	80050c2 <_svfiprintf_r+0x36>
 80050a0:	690b      	ldr	r3, [r1, #16]
 80050a2:	b973      	cbnz	r3, 80050c2 <_svfiprintf_r+0x36>
 80050a4:	2140      	movs	r1, #64	@ 0x40
 80050a6:	f7ff fb89 	bl	80047bc <_malloc_r>
 80050aa:	6028      	str	r0, [r5, #0]
 80050ac:	6128      	str	r0, [r5, #16]
 80050ae:	b930      	cbnz	r0, 80050be <_svfiprintf_r+0x32>
 80050b0:	230c      	movs	r3, #12
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050b8:	b01d      	add	sp, #116	@ 0x74
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	2340      	movs	r3, #64	@ 0x40
 80050c0:	616b      	str	r3, [r5, #20]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050c6:	2320      	movs	r3, #32
 80050c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050cc:	2330      	movs	r3, #48	@ 0x30
 80050ce:	f04f 0901 	mov.w	r9, #1
 80050d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005270 <_svfiprintf_r+0x1e4>
 80050da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050de:	4623      	mov	r3, r4
 80050e0:	469a      	mov	sl, r3
 80050e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050e6:	b10a      	cbz	r2, 80050ec <_svfiprintf_r+0x60>
 80050e8:	2a25      	cmp	r2, #37	@ 0x25
 80050ea:	d1f9      	bne.n	80050e0 <_svfiprintf_r+0x54>
 80050ec:	ebba 0b04 	subs.w	fp, sl, r4
 80050f0:	d00b      	beq.n	800510a <_svfiprintf_r+0x7e>
 80050f2:	465b      	mov	r3, fp
 80050f4:	4622      	mov	r2, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ff6b 	bl	8004fd4 <__ssputs_r>
 80050fe:	3001      	adds	r0, #1
 8005100:	f000 80a7 	beq.w	8005252 <_svfiprintf_r+0x1c6>
 8005104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005106:	445a      	add	r2, fp
 8005108:	9209      	str	r2, [sp, #36]	@ 0x24
 800510a:	f89a 3000 	ldrb.w	r3, [sl]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 809f 	beq.w	8005252 <_svfiprintf_r+0x1c6>
 8005114:	2300      	movs	r3, #0
 8005116:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800511a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800511e:	f10a 0a01 	add.w	sl, sl, #1
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	9307      	str	r3, [sp, #28]
 8005126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800512a:	931a      	str	r3, [sp, #104]	@ 0x68
 800512c:	4654      	mov	r4, sl
 800512e:	2205      	movs	r2, #5
 8005130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005134:	484e      	ldr	r0, [pc, #312]	@ (8005270 <_svfiprintf_r+0x1e4>)
 8005136:	f7fe fc6e 	bl	8003a16 <memchr>
 800513a:	9a04      	ldr	r2, [sp, #16]
 800513c:	b9d8      	cbnz	r0, 8005176 <_svfiprintf_r+0xea>
 800513e:	06d0      	lsls	r0, r2, #27
 8005140:	bf44      	itt	mi
 8005142:	2320      	movmi	r3, #32
 8005144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005148:	0711      	lsls	r1, r2, #28
 800514a:	bf44      	itt	mi
 800514c:	232b      	movmi	r3, #43	@ 0x2b
 800514e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005152:	f89a 3000 	ldrb.w	r3, [sl]
 8005156:	2b2a      	cmp	r3, #42	@ 0x2a
 8005158:	d015      	beq.n	8005186 <_svfiprintf_r+0xfa>
 800515a:	4654      	mov	r4, sl
 800515c:	2000      	movs	r0, #0
 800515e:	f04f 0c0a 	mov.w	ip, #10
 8005162:	9a07      	ldr	r2, [sp, #28]
 8005164:	4621      	mov	r1, r4
 8005166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800516a:	3b30      	subs	r3, #48	@ 0x30
 800516c:	2b09      	cmp	r3, #9
 800516e:	d94b      	bls.n	8005208 <_svfiprintf_r+0x17c>
 8005170:	b1b0      	cbz	r0, 80051a0 <_svfiprintf_r+0x114>
 8005172:	9207      	str	r2, [sp, #28]
 8005174:	e014      	b.n	80051a0 <_svfiprintf_r+0x114>
 8005176:	eba0 0308 	sub.w	r3, r0, r8
 800517a:	fa09 f303 	lsl.w	r3, r9, r3
 800517e:	4313      	orrs	r3, r2
 8005180:	46a2      	mov	sl, r4
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	e7d2      	b.n	800512c <_svfiprintf_r+0xa0>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	1d19      	adds	r1, r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	9103      	str	r1, [sp, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfbb      	ittet	lt
 8005192:	425b      	neglt	r3, r3
 8005194:	f042 0202 	orrlt.w	r2, r2, #2
 8005198:	9307      	strge	r3, [sp, #28]
 800519a:	9307      	strlt	r3, [sp, #28]
 800519c:	bfb8      	it	lt
 800519e:	9204      	strlt	r2, [sp, #16]
 80051a0:	7823      	ldrb	r3, [r4, #0]
 80051a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80051a4:	d10a      	bne.n	80051bc <_svfiprintf_r+0x130>
 80051a6:	7863      	ldrb	r3, [r4, #1]
 80051a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051aa:	d132      	bne.n	8005212 <_svfiprintf_r+0x186>
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	3402      	adds	r4, #2
 80051b0:	1d1a      	adds	r2, r3, #4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	9203      	str	r2, [sp, #12]
 80051b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005274 <_svfiprintf_r+0x1e8>
 80051c0:	2203      	movs	r2, #3
 80051c2:	4650      	mov	r0, sl
 80051c4:	7821      	ldrb	r1, [r4, #0]
 80051c6:	f7fe fc26 	bl	8003a16 <memchr>
 80051ca:	b138      	cbz	r0, 80051dc <_svfiprintf_r+0x150>
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	eba0 000a 	sub.w	r0, r0, sl
 80051d4:	4082      	lsls	r2, r0
 80051d6:	4313      	orrs	r3, r2
 80051d8:	3401      	adds	r4, #1
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e0:	2206      	movs	r2, #6
 80051e2:	4825      	ldr	r0, [pc, #148]	@ (8005278 <_svfiprintf_r+0x1ec>)
 80051e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051e8:	f7fe fc15 	bl	8003a16 <memchr>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d036      	beq.n	800525e <_svfiprintf_r+0x1d2>
 80051f0:	4b22      	ldr	r3, [pc, #136]	@ (800527c <_svfiprintf_r+0x1f0>)
 80051f2:	bb1b      	cbnz	r3, 800523c <_svfiprintf_r+0x1b0>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	3307      	adds	r3, #7
 80051f8:	f023 0307 	bic.w	r3, r3, #7
 80051fc:	3308      	adds	r3, #8
 80051fe:	9303      	str	r3, [sp, #12]
 8005200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005202:	4433      	add	r3, r6
 8005204:	9309      	str	r3, [sp, #36]	@ 0x24
 8005206:	e76a      	b.n	80050de <_svfiprintf_r+0x52>
 8005208:	460c      	mov	r4, r1
 800520a:	2001      	movs	r0, #1
 800520c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005210:	e7a8      	b.n	8005164 <_svfiprintf_r+0xd8>
 8005212:	2300      	movs	r3, #0
 8005214:	f04f 0c0a 	mov.w	ip, #10
 8005218:	4619      	mov	r1, r3
 800521a:	3401      	adds	r4, #1
 800521c:	9305      	str	r3, [sp, #20]
 800521e:	4620      	mov	r0, r4
 8005220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005224:	3a30      	subs	r2, #48	@ 0x30
 8005226:	2a09      	cmp	r2, #9
 8005228:	d903      	bls.n	8005232 <_svfiprintf_r+0x1a6>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0c6      	beq.n	80051bc <_svfiprintf_r+0x130>
 800522e:	9105      	str	r1, [sp, #20]
 8005230:	e7c4      	b.n	80051bc <_svfiprintf_r+0x130>
 8005232:	4604      	mov	r4, r0
 8005234:	2301      	movs	r3, #1
 8005236:	fb0c 2101 	mla	r1, ip, r1, r2
 800523a:	e7f0      	b.n	800521e <_svfiprintf_r+0x192>
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	462a      	mov	r2, r5
 8005242:	4638      	mov	r0, r7
 8005244:	4b0e      	ldr	r3, [pc, #56]	@ (8005280 <_svfiprintf_r+0x1f4>)
 8005246:	a904      	add	r1, sp, #16
 8005248:	f7fd fe6e 	bl	8002f28 <_printf_float>
 800524c:	1c42      	adds	r2, r0, #1
 800524e:	4606      	mov	r6, r0
 8005250:	d1d6      	bne.n	8005200 <_svfiprintf_r+0x174>
 8005252:	89ab      	ldrh	r3, [r5, #12]
 8005254:	065b      	lsls	r3, r3, #25
 8005256:	f53f af2d 	bmi.w	80050b4 <_svfiprintf_r+0x28>
 800525a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800525c:	e72c      	b.n	80050b8 <_svfiprintf_r+0x2c>
 800525e:	ab03      	add	r3, sp, #12
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	462a      	mov	r2, r5
 8005264:	4638      	mov	r0, r7
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <_svfiprintf_r+0x1f4>)
 8005268:	a904      	add	r1, sp, #16
 800526a:	f7fe f8fb 	bl	8003464 <_printf_i>
 800526e:	e7ed      	b.n	800524c <_svfiprintf_r+0x1c0>
 8005270:	08005d48 	.word	0x08005d48
 8005274:	08005d4e 	.word	0x08005d4e
 8005278:	08005d52 	.word	0x08005d52
 800527c:	08002f29 	.word	0x08002f29
 8005280:	08004fd5 	.word	0x08004fd5

08005284 <__sflush_r>:
 8005284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	0716      	lsls	r6, r2, #28
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	d454      	bmi.n	800533c <__sflush_r+0xb8>
 8005292:	684b      	ldr	r3, [r1, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dc02      	bgt.n	800529e <__sflush_r+0x1a>
 8005298:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd48      	ble.n	8005330 <__sflush_r+0xac>
 800529e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052a0:	2e00      	cmp	r6, #0
 80052a2:	d045      	beq.n	8005330 <__sflush_r+0xac>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052aa:	682f      	ldr	r7, [r5, #0]
 80052ac:	6a21      	ldr	r1, [r4, #32]
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	d030      	beq.n	8005314 <__sflush_r+0x90>
 80052b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	0759      	lsls	r1, r3, #29
 80052b8:	d505      	bpl.n	80052c6 <__sflush_r+0x42>
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052c0:	b10b      	cbz	r3, 80052c6 <__sflush_r+0x42>
 80052c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	2300      	movs	r3, #0
 80052c8:	4628      	mov	r0, r5
 80052ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052cc:	6a21      	ldr	r1, [r4, #32]
 80052ce:	47b0      	blx	r6
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	d106      	bne.n	80052e4 <__sflush_r+0x60>
 80052d6:	6829      	ldr	r1, [r5, #0]
 80052d8:	291d      	cmp	r1, #29
 80052da:	d82b      	bhi.n	8005334 <__sflush_r+0xb0>
 80052dc:	4a28      	ldr	r2, [pc, #160]	@ (8005380 <__sflush_r+0xfc>)
 80052de:	410a      	asrs	r2, r1
 80052e0:	07d6      	lsls	r6, r2, #31
 80052e2:	d427      	bmi.n	8005334 <__sflush_r+0xb0>
 80052e4:	2200      	movs	r2, #0
 80052e6:	6062      	str	r2, [r4, #4]
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	04d9      	lsls	r1, r3, #19
 80052ec:	6022      	str	r2, [r4, #0]
 80052ee:	d504      	bpl.n	80052fa <__sflush_r+0x76>
 80052f0:	1c42      	adds	r2, r0, #1
 80052f2:	d101      	bne.n	80052f8 <__sflush_r+0x74>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b903      	cbnz	r3, 80052fa <__sflush_r+0x76>
 80052f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80052fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052fc:	602f      	str	r7, [r5, #0]
 80052fe:	b1b9      	cbz	r1, 8005330 <__sflush_r+0xac>
 8005300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__sflush_r+0x8a>
 8005308:	4628      	mov	r0, r5
 800530a:	f7ff f9e5 	bl	80046d8 <_free_r>
 800530e:	2300      	movs	r3, #0
 8005310:	6363      	str	r3, [r4, #52]	@ 0x34
 8005312:	e00d      	b.n	8005330 <__sflush_r+0xac>
 8005314:	2301      	movs	r3, #1
 8005316:	4628      	mov	r0, r5
 8005318:	47b0      	blx	r6
 800531a:	4602      	mov	r2, r0
 800531c:	1c50      	adds	r0, r2, #1
 800531e:	d1c9      	bne.n	80052b4 <__sflush_r+0x30>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0c6      	beq.n	80052b4 <__sflush_r+0x30>
 8005326:	2b1d      	cmp	r3, #29
 8005328:	d001      	beq.n	800532e <__sflush_r+0xaa>
 800532a:	2b16      	cmp	r3, #22
 800532c:	d11d      	bne.n	800536a <__sflush_r+0xe6>
 800532e:	602f      	str	r7, [r5, #0]
 8005330:	2000      	movs	r0, #0
 8005332:	e021      	b.n	8005378 <__sflush_r+0xf4>
 8005334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005338:	b21b      	sxth	r3, r3
 800533a:	e01a      	b.n	8005372 <__sflush_r+0xee>
 800533c:	690f      	ldr	r7, [r1, #16]
 800533e:	2f00      	cmp	r7, #0
 8005340:	d0f6      	beq.n	8005330 <__sflush_r+0xac>
 8005342:	0793      	lsls	r3, r2, #30
 8005344:	bf18      	it	ne
 8005346:	2300      	movne	r3, #0
 8005348:	680e      	ldr	r6, [r1, #0]
 800534a:	bf08      	it	eq
 800534c:	694b      	ldreq	r3, [r1, #20]
 800534e:	1bf6      	subs	r6, r6, r7
 8005350:	600f      	str	r7, [r1, #0]
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	2e00      	cmp	r6, #0
 8005356:	ddeb      	ble.n	8005330 <__sflush_r+0xac>
 8005358:	4633      	mov	r3, r6
 800535a:	463a      	mov	r2, r7
 800535c:	4628      	mov	r0, r5
 800535e:	6a21      	ldr	r1, [r4, #32]
 8005360:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005364:	47e0      	blx	ip
 8005366:	2800      	cmp	r0, #0
 8005368:	dc07      	bgt.n	800537a <__sflush_r+0xf6>
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005376:	81a3      	strh	r3, [r4, #12]
 8005378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537a:	4407      	add	r7, r0
 800537c:	1a36      	subs	r6, r6, r0
 800537e:	e7e9      	b.n	8005354 <__sflush_r+0xd0>
 8005380:	dfbffffe 	.word	0xdfbffffe

08005384 <_fflush_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	690b      	ldr	r3, [r1, #16]
 8005388:	4605      	mov	r5, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b913      	cbnz	r3, 8005394 <_fflush_r+0x10>
 800538e:	2500      	movs	r5, #0
 8005390:	4628      	mov	r0, r5
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	b118      	cbz	r0, 800539e <_fflush_r+0x1a>
 8005396:	6a03      	ldr	r3, [r0, #32]
 8005398:	b90b      	cbnz	r3, 800539e <_fflush_r+0x1a>
 800539a:	f7fe fa0f 	bl	80037bc <__sinit>
 800539e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f3      	beq.n	800538e <_fflush_r+0xa>
 80053a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053a8:	07d0      	lsls	r0, r2, #31
 80053aa:	d404      	bmi.n	80053b6 <_fflush_r+0x32>
 80053ac:	0599      	lsls	r1, r3, #22
 80053ae:	d402      	bmi.n	80053b6 <_fflush_r+0x32>
 80053b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053b2:	f7fe fb2e 	bl	8003a12 <__retarget_lock_acquire_recursive>
 80053b6:	4628      	mov	r0, r5
 80053b8:	4621      	mov	r1, r4
 80053ba:	f7ff ff63 	bl	8005284 <__sflush_r>
 80053be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053c0:	4605      	mov	r5, r0
 80053c2:	07da      	lsls	r2, r3, #31
 80053c4:	d4e4      	bmi.n	8005390 <_fflush_r+0xc>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	059b      	lsls	r3, r3, #22
 80053ca:	d4e1      	bmi.n	8005390 <_fflush_r+0xc>
 80053cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ce:	f7fe fb21 	bl	8003a14 <__retarget_lock_release_recursive>
 80053d2:	e7dd      	b.n	8005390 <_fflush_r+0xc>

080053d4 <memmove>:
 80053d4:	4288      	cmp	r0, r1
 80053d6:	b510      	push	{r4, lr}
 80053d8:	eb01 0402 	add.w	r4, r1, r2
 80053dc:	d902      	bls.n	80053e4 <memmove+0x10>
 80053de:	4284      	cmp	r4, r0
 80053e0:	4623      	mov	r3, r4
 80053e2:	d807      	bhi.n	80053f4 <memmove+0x20>
 80053e4:	1e43      	subs	r3, r0, #1
 80053e6:	42a1      	cmp	r1, r4
 80053e8:	d008      	beq.n	80053fc <memmove+0x28>
 80053ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053f2:	e7f8      	b.n	80053e6 <memmove+0x12>
 80053f4:	4601      	mov	r1, r0
 80053f6:	4402      	add	r2, r0
 80053f8:	428a      	cmp	r2, r1
 80053fa:	d100      	bne.n	80053fe <memmove+0x2a>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005406:	e7f7      	b.n	80053f8 <memmove+0x24>

08005408 <_sbrk_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	2300      	movs	r3, #0
 800540c:	4d05      	ldr	r5, [pc, #20]	@ (8005424 <_sbrk_r+0x1c>)
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fc f938 	bl	8001688 <_sbrk>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_sbrk_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_sbrk_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	2000037c 	.word	0x2000037c

08005428 <memcpy>:
 8005428:	440a      	add	r2, r1
 800542a:	4291      	cmp	r1, r2
 800542c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005430:	d100      	bne.n	8005434 <memcpy+0xc>
 8005432:	4770      	bx	lr
 8005434:	b510      	push	{r4, lr}
 8005436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800543a:	4291      	cmp	r1, r2
 800543c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005440:	d1f9      	bne.n	8005436 <memcpy+0xe>
 8005442:	bd10      	pop	{r4, pc}

08005444 <__assert_func>:
 8005444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005446:	4614      	mov	r4, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <__assert_func+0x2c>)
 800544c:	4605      	mov	r5, r0
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68d8      	ldr	r0, [r3, #12]
 8005452:	b954      	cbnz	r4, 800546a <__assert_func+0x26>
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <__assert_func+0x30>)
 8005456:	461c      	mov	r4, r3
 8005458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800545c:	9100      	str	r1, [sp, #0]
 800545e:	462b      	mov	r3, r5
 8005460:	4905      	ldr	r1, [pc, #20]	@ (8005478 <__assert_func+0x34>)
 8005462:	f000 f86f 	bl	8005544 <fiprintf>
 8005466:	f000 f87f 	bl	8005568 <abort>
 800546a:	4b04      	ldr	r3, [pc, #16]	@ (800547c <__assert_func+0x38>)
 800546c:	e7f4      	b.n	8005458 <__assert_func+0x14>
 800546e:	bf00      	nop
 8005470:	20000018 	.word	0x20000018
 8005474:	08005d9e 	.word	0x08005d9e
 8005478:	08005d70 	.word	0x08005d70
 800547c:	08005d63 	.word	0x08005d63

08005480 <_calloc_r>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	fba1 5402 	umull	r5, r4, r1, r2
 8005486:	b93c      	cbnz	r4, 8005498 <_calloc_r+0x18>
 8005488:	4629      	mov	r1, r5
 800548a:	f7ff f997 	bl	80047bc <_malloc_r>
 800548e:	4606      	mov	r6, r0
 8005490:	b928      	cbnz	r0, 800549e <_calloc_r+0x1e>
 8005492:	2600      	movs	r6, #0
 8005494:	4630      	mov	r0, r6
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	220c      	movs	r2, #12
 800549a:	6002      	str	r2, [r0, #0]
 800549c:	e7f9      	b.n	8005492 <_calloc_r+0x12>
 800549e:	462a      	mov	r2, r5
 80054a0:	4621      	mov	r1, r4
 80054a2:	f7fe fa38 	bl	8003916 <memset>
 80054a6:	e7f5      	b.n	8005494 <_calloc_r+0x14>

080054a8 <__ascii_mbtowc>:
 80054a8:	b082      	sub	sp, #8
 80054aa:	b901      	cbnz	r1, 80054ae <__ascii_mbtowc+0x6>
 80054ac:	a901      	add	r1, sp, #4
 80054ae:	b142      	cbz	r2, 80054c2 <__ascii_mbtowc+0x1a>
 80054b0:	b14b      	cbz	r3, 80054c6 <__ascii_mbtowc+0x1e>
 80054b2:	7813      	ldrb	r3, [r2, #0]
 80054b4:	600b      	str	r3, [r1, #0]
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	1e10      	subs	r0, r2, #0
 80054ba:	bf18      	it	ne
 80054bc:	2001      	movne	r0, #1
 80054be:	b002      	add	sp, #8
 80054c0:	4770      	bx	lr
 80054c2:	4610      	mov	r0, r2
 80054c4:	e7fb      	b.n	80054be <__ascii_mbtowc+0x16>
 80054c6:	f06f 0001 	mvn.w	r0, #1
 80054ca:	e7f8      	b.n	80054be <__ascii_mbtowc+0x16>

080054cc <_realloc_r>:
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d0:	4680      	mov	r8, r0
 80054d2:	4615      	mov	r5, r2
 80054d4:	460c      	mov	r4, r1
 80054d6:	b921      	cbnz	r1, 80054e2 <_realloc_r+0x16>
 80054d8:	4611      	mov	r1, r2
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f7ff b96d 	b.w	80047bc <_malloc_r>
 80054e2:	b92a      	cbnz	r2, 80054f0 <_realloc_r+0x24>
 80054e4:	f7ff f8f8 	bl	80046d8 <_free_r>
 80054e8:	2400      	movs	r4, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f0:	f000 f841 	bl	8005576 <_malloc_usable_size_r>
 80054f4:	4285      	cmp	r5, r0
 80054f6:	4606      	mov	r6, r0
 80054f8:	d802      	bhi.n	8005500 <_realloc_r+0x34>
 80054fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054fe:	d8f4      	bhi.n	80054ea <_realloc_r+0x1e>
 8005500:	4629      	mov	r1, r5
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff f95a 	bl	80047bc <_malloc_r>
 8005508:	4607      	mov	r7, r0
 800550a:	2800      	cmp	r0, #0
 800550c:	d0ec      	beq.n	80054e8 <_realloc_r+0x1c>
 800550e:	42b5      	cmp	r5, r6
 8005510:	462a      	mov	r2, r5
 8005512:	4621      	mov	r1, r4
 8005514:	bf28      	it	cs
 8005516:	4632      	movcs	r2, r6
 8005518:	f7ff ff86 	bl	8005428 <memcpy>
 800551c:	4621      	mov	r1, r4
 800551e:	4640      	mov	r0, r8
 8005520:	f7ff f8da 	bl	80046d8 <_free_r>
 8005524:	463c      	mov	r4, r7
 8005526:	e7e0      	b.n	80054ea <_realloc_r+0x1e>

08005528 <__ascii_wctomb>:
 8005528:	4603      	mov	r3, r0
 800552a:	4608      	mov	r0, r1
 800552c:	b141      	cbz	r1, 8005540 <__ascii_wctomb+0x18>
 800552e:	2aff      	cmp	r2, #255	@ 0xff
 8005530:	d904      	bls.n	800553c <__ascii_wctomb+0x14>
 8005532:	228a      	movs	r2, #138	@ 0x8a
 8005534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4770      	bx	lr
 800553c:	2001      	movs	r0, #1
 800553e:	700a      	strb	r2, [r1, #0]
 8005540:	4770      	bx	lr
	...

08005544 <fiprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	b503      	push	{r0, r1, lr}
 8005548:	4601      	mov	r1, r0
 800554a:	ab03      	add	r3, sp, #12
 800554c:	4805      	ldr	r0, [pc, #20]	@ (8005564 <fiprintf+0x20>)
 800554e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	f000 f83d 	bl	80055d4 <_vfiprintf_r>
 800555a:	b002      	add	sp, #8
 800555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005560:	b003      	add	sp, #12
 8005562:	4770      	bx	lr
 8005564:	20000018 	.word	0x20000018

08005568 <abort>:
 8005568:	2006      	movs	r0, #6
 800556a:	b508      	push	{r3, lr}
 800556c:	f000 fa06 	bl	800597c <raise>
 8005570:	2001      	movs	r0, #1
 8005572:	f7fc f814 	bl	800159e <_exit>

08005576 <_malloc_usable_size_r>:
 8005576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557a:	1f18      	subs	r0, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfbc      	itt	lt
 8005580:	580b      	ldrlt	r3, [r1, r0]
 8005582:	18c0      	addlt	r0, r0, r3
 8005584:	4770      	bx	lr

08005586 <__sfputc_r>:
 8005586:	6893      	ldr	r3, [r2, #8]
 8005588:	b410      	push	{r4}
 800558a:	3b01      	subs	r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	6093      	str	r3, [r2, #8]
 8005590:	da07      	bge.n	80055a2 <__sfputc_r+0x1c>
 8005592:	6994      	ldr	r4, [r2, #24]
 8005594:	42a3      	cmp	r3, r4
 8005596:	db01      	blt.n	800559c <__sfputc_r+0x16>
 8005598:	290a      	cmp	r1, #10
 800559a:	d102      	bne.n	80055a2 <__sfputc_r+0x1c>
 800559c:	bc10      	pop	{r4}
 800559e:	f000 b931 	b.w	8005804 <__swbuf_r>
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	1c58      	adds	r0, r3, #1
 80055a6:	6010      	str	r0, [r2, #0]
 80055a8:	7019      	strb	r1, [r3, #0]
 80055aa:	4608      	mov	r0, r1
 80055ac:	bc10      	pop	{r4}
 80055ae:	4770      	bx	lr

080055b0 <__sfputs_r>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	4606      	mov	r6, r0
 80055b4:	460f      	mov	r7, r1
 80055b6:	4614      	mov	r4, r2
 80055b8:	18d5      	adds	r5, r2, r3
 80055ba:	42ac      	cmp	r4, r5
 80055bc:	d101      	bne.n	80055c2 <__sfputs_r+0x12>
 80055be:	2000      	movs	r0, #0
 80055c0:	e007      	b.n	80055d2 <__sfputs_r+0x22>
 80055c2:	463a      	mov	r2, r7
 80055c4:	4630      	mov	r0, r6
 80055c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ca:	f7ff ffdc 	bl	8005586 <__sfputc_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	d1f3      	bne.n	80055ba <__sfputs_r+0xa>
 80055d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055d4 <_vfiprintf_r>:
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	460d      	mov	r5, r1
 80055da:	4614      	mov	r4, r2
 80055dc:	4698      	mov	r8, r3
 80055de:	4606      	mov	r6, r0
 80055e0:	b09d      	sub	sp, #116	@ 0x74
 80055e2:	b118      	cbz	r0, 80055ec <_vfiprintf_r+0x18>
 80055e4:	6a03      	ldr	r3, [r0, #32]
 80055e6:	b90b      	cbnz	r3, 80055ec <_vfiprintf_r+0x18>
 80055e8:	f7fe f8e8 	bl	80037bc <__sinit>
 80055ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055ee:	07d9      	lsls	r1, r3, #31
 80055f0:	d405      	bmi.n	80055fe <_vfiprintf_r+0x2a>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	059a      	lsls	r2, r3, #22
 80055f6:	d402      	bmi.n	80055fe <_vfiprintf_r+0x2a>
 80055f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055fa:	f7fe fa0a 	bl	8003a12 <__retarget_lock_acquire_recursive>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	071b      	lsls	r3, r3, #28
 8005602:	d501      	bpl.n	8005608 <_vfiprintf_r+0x34>
 8005604:	692b      	ldr	r3, [r5, #16]
 8005606:	b99b      	cbnz	r3, 8005630 <_vfiprintf_r+0x5c>
 8005608:	4629      	mov	r1, r5
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f938 	bl	8005880 <__swsetup_r>
 8005610:	b170      	cbz	r0, 8005630 <_vfiprintf_r+0x5c>
 8005612:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005614:	07dc      	lsls	r4, r3, #31
 8005616:	d504      	bpl.n	8005622 <_vfiprintf_r+0x4e>
 8005618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800561c:	b01d      	add	sp, #116	@ 0x74
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d4f7      	bmi.n	8005618 <_vfiprintf_r+0x44>
 8005628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800562a:	f7fe f9f3 	bl	8003a14 <__retarget_lock_release_recursive>
 800562e:	e7f3      	b.n	8005618 <_vfiprintf_r+0x44>
 8005630:	2300      	movs	r3, #0
 8005632:	9309      	str	r3, [sp, #36]	@ 0x24
 8005634:	2320      	movs	r3, #32
 8005636:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800563a:	2330      	movs	r3, #48	@ 0x30
 800563c:	f04f 0901 	mov.w	r9, #1
 8005640:	f8cd 800c 	str.w	r8, [sp, #12]
 8005644:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80057f0 <_vfiprintf_r+0x21c>
 8005648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800564c:	4623      	mov	r3, r4
 800564e:	469a      	mov	sl, r3
 8005650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005654:	b10a      	cbz	r2, 800565a <_vfiprintf_r+0x86>
 8005656:	2a25      	cmp	r2, #37	@ 0x25
 8005658:	d1f9      	bne.n	800564e <_vfiprintf_r+0x7a>
 800565a:	ebba 0b04 	subs.w	fp, sl, r4
 800565e:	d00b      	beq.n	8005678 <_vfiprintf_r+0xa4>
 8005660:	465b      	mov	r3, fp
 8005662:	4622      	mov	r2, r4
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ffa2 	bl	80055b0 <__sfputs_r>
 800566c:	3001      	adds	r0, #1
 800566e:	f000 80a7 	beq.w	80057c0 <_vfiprintf_r+0x1ec>
 8005672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005674:	445a      	add	r2, fp
 8005676:	9209      	str	r2, [sp, #36]	@ 0x24
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 809f 	beq.w	80057c0 <_vfiprintf_r+0x1ec>
 8005682:	2300      	movs	r3, #0
 8005684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568c:	f10a 0a01 	add.w	sl, sl, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9307      	str	r3, [sp, #28]
 8005694:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005698:	931a      	str	r3, [sp, #104]	@ 0x68
 800569a:	4654      	mov	r4, sl
 800569c:	2205      	movs	r2, #5
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4853      	ldr	r0, [pc, #332]	@ (80057f0 <_vfiprintf_r+0x21c>)
 80056a4:	f7fe f9b7 	bl	8003a16 <memchr>
 80056a8:	9a04      	ldr	r2, [sp, #16]
 80056aa:	b9d8      	cbnz	r0, 80056e4 <_vfiprintf_r+0x110>
 80056ac:	06d1      	lsls	r1, r2, #27
 80056ae:	bf44      	itt	mi
 80056b0:	2320      	movmi	r3, #32
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	bf44      	itt	mi
 80056ba:	232b      	movmi	r3, #43	@ 0x2b
 80056bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c0:	f89a 3000 	ldrb.w	r3, [sl]
 80056c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c6:	d015      	beq.n	80056f4 <_vfiprintf_r+0x120>
 80056c8:	4654      	mov	r4, sl
 80056ca:	2000      	movs	r0, #0
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	9a07      	ldr	r2, [sp, #28]
 80056d2:	4621      	mov	r1, r4
 80056d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d8:	3b30      	subs	r3, #48	@ 0x30
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d94b      	bls.n	8005776 <_vfiprintf_r+0x1a2>
 80056de:	b1b0      	cbz	r0, 800570e <_vfiprintf_r+0x13a>
 80056e0:	9207      	str	r2, [sp, #28]
 80056e2:	e014      	b.n	800570e <_vfiprintf_r+0x13a>
 80056e4:	eba0 0308 	sub.w	r3, r0, r8
 80056e8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	46a2      	mov	sl, r4
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	e7d2      	b.n	800569a <_vfiprintf_r+0xc6>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1d19      	adds	r1, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfbb      	ittet	lt
 8005700:	425b      	neglt	r3, r3
 8005702:	f042 0202 	orrlt.w	r2, r2, #2
 8005706:	9307      	strge	r3, [sp, #28]
 8005708:	9307      	strlt	r3, [sp, #28]
 800570a:	bfb8      	it	lt
 800570c:	9204      	strlt	r2, [sp, #16]
 800570e:	7823      	ldrb	r3, [r4, #0]
 8005710:	2b2e      	cmp	r3, #46	@ 0x2e
 8005712:	d10a      	bne.n	800572a <_vfiprintf_r+0x156>
 8005714:	7863      	ldrb	r3, [r4, #1]
 8005716:	2b2a      	cmp	r3, #42	@ 0x2a
 8005718:	d132      	bne.n	8005780 <_vfiprintf_r+0x1ac>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	3402      	adds	r4, #2
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80057f4 <_vfiprintf_r+0x220>
 800572e:	2203      	movs	r2, #3
 8005730:	4650      	mov	r0, sl
 8005732:	7821      	ldrb	r1, [r4, #0]
 8005734:	f7fe f96f 	bl	8003a16 <memchr>
 8005738:	b138      	cbz	r0, 800574a <_vfiprintf_r+0x176>
 800573a:	2240      	movs	r2, #64	@ 0x40
 800573c:	9b04      	ldr	r3, [sp, #16]
 800573e:	eba0 000a 	sub.w	r0, r0, sl
 8005742:	4082      	lsls	r2, r0
 8005744:	4313      	orrs	r3, r2
 8005746:	3401      	adds	r4, #1
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574e:	2206      	movs	r2, #6
 8005750:	4829      	ldr	r0, [pc, #164]	@ (80057f8 <_vfiprintf_r+0x224>)
 8005752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005756:	f7fe f95e 	bl	8003a16 <memchr>
 800575a:	2800      	cmp	r0, #0
 800575c:	d03f      	beq.n	80057de <_vfiprintf_r+0x20a>
 800575e:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <_vfiprintf_r+0x228>)
 8005760:	bb1b      	cbnz	r3, 80057aa <_vfiprintf_r+0x1d6>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	3307      	adds	r3, #7
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	3308      	adds	r3, #8
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005770:	443b      	add	r3, r7
 8005772:	9309      	str	r3, [sp, #36]	@ 0x24
 8005774:	e76a      	b.n	800564c <_vfiprintf_r+0x78>
 8005776:	460c      	mov	r4, r1
 8005778:	2001      	movs	r0, #1
 800577a:	fb0c 3202 	mla	r2, ip, r2, r3
 800577e:	e7a8      	b.n	80056d2 <_vfiprintf_r+0xfe>
 8005780:	2300      	movs	r3, #0
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	4619      	mov	r1, r3
 8005788:	3401      	adds	r4, #1
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	4620      	mov	r0, r4
 800578e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005792:	3a30      	subs	r2, #48	@ 0x30
 8005794:	2a09      	cmp	r2, #9
 8005796:	d903      	bls.n	80057a0 <_vfiprintf_r+0x1cc>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0c6      	beq.n	800572a <_vfiprintf_r+0x156>
 800579c:	9105      	str	r1, [sp, #20]
 800579e:	e7c4      	b.n	800572a <_vfiprintf_r+0x156>
 80057a0:	4604      	mov	r4, r0
 80057a2:	2301      	movs	r3, #1
 80057a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a8:	e7f0      	b.n	800578c <_vfiprintf_r+0x1b8>
 80057aa:	ab03      	add	r3, sp, #12
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	462a      	mov	r2, r5
 80057b0:	4630      	mov	r0, r6
 80057b2:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <_vfiprintf_r+0x22c>)
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	f7fd fbb7 	bl	8002f28 <_printf_float>
 80057ba:	4607      	mov	r7, r0
 80057bc:	1c78      	adds	r0, r7, #1
 80057be:	d1d6      	bne.n	800576e <_vfiprintf_r+0x19a>
 80057c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057c2:	07d9      	lsls	r1, r3, #31
 80057c4:	d405      	bmi.n	80057d2 <_vfiprintf_r+0x1fe>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	059a      	lsls	r2, r3, #22
 80057ca:	d402      	bmi.n	80057d2 <_vfiprintf_r+0x1fe>
 80057cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ce:	f7fe f921 	bl	8003a14 <__retarget_lock_release_recursive>
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	065b      	lsls	r3, r3, #25
 80057d6:	f53f af1f 	bmi.w	8005618 <_vfiprintf_r+0x44>
 80057da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057dc:	e71e      	b.n	800561c <_vfiprintf_r+0x48>
 80057de:	ab03      	add	r3, sp, #12
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	462a      	mov	r2, r5
 80057e4:	4630      	mov	r0, r6
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <_vfiprintf_r+0x22c>)
 80057e8:	a904      	add	r1, sp, #16
 80057ea:	f7fd fe3b 	bl	8003464 <_printf_i>
 80057ee:	e7e4      	b.n	80057ba <_vfiprintf_r+0x1e6>
 80057f0:	08005d48 	.word	0x08005d48
 80057f4:	08005d4e 	.word	0x08005d4e
 80057f8:	08005d52 	.word	0x08005d52
 80057fc:	08002f29 	.word	0x08002f29
 8005800:	080055b1 	.word	0x080055b1

08005804 <__swbuf_r>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	460e      	mov	r6, r1
 8005808:	4614      	mov	r4, r2
 800580a:	4605      	mov	r5, r0
 800580c:	b118      	cbz	r0, 8005816 <__swbuf_r+0x12>
 800580e:	6a03      	ldr	r3, [r0, #32]
 8005810:	b90b      	cbnz	r3, 8005816 <__swbuf_r+0x12>
 8005812:	f7fd ffd3 	bl	80037bc <__sinit>
 8005816:	69a3      	ldr	r3, [r4, #24]
 8005818:	60a3      	str	r3, [r4, #8]
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	071a      	lsls	r2, r3, #28
 800581e:	d501      	bpl.n	8005824 <__swbuf_r+0x20>
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	b943      	cbnz	r3, 8005836 <__swbuf_r+0x32>
 8005824:	4621      	mov	r1, r4
 8005826:	4628      	mov	r0, r5
 8005828:	f000 f82a 	bl	8005880 <__swsetup_r>
 800582c:	b118      	cbz	r0, 8005836 <__swbuf_r+0x32>
 800582e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005832:	4638      	mov	r0, r7
 8005834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	b2f6      	uxtb	r6, r6
 800583c:	1a98      	subs	r0, r3, r2
 800583e:	6963      	ldr	r3, [r4, #20]
 8005840:	4637      	mov	r7, r6
 8005842:	4283      	cmp	r3, r0
 8005844:	dc05      	bgt.n	8005852 <__swbuf_r+0x4e>
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff fd9b 	bl	8005384 <_fflush_r>
 800584e:	2800      	cmp	r0, #0
 8005850:	d1ed      	bne.n	800582e <__swbuf_r+0x2a>
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	3b01      	subs	r3, #1
 8005856:	60a3      	str	r3, [r4, #8]
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	701e      	strb	r6, [r3, #0]
 8005860:	6962      	ldr	r2, [r4, #20]
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	429a      	cmp	r2, r3
 8005866:	d004      	beq.n	8005872 <__swbuf_r+0x6e>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	07db      	lsls	r3, r3, #31
 800586c:	d5e1      	bpl.n	8005832 <__swbuf_r+0x2e>
 800586e:	2e0a      	cmp	r6, #10
 8005870:	d1df      	bne.n	8005832 <__swbuf_r+0x2e>
 8005872:	4621      	mov	r1, r4
 8005874:	4628      	mov	r0, r5
 8005876:	f7ff fd85 	bl	8005384 <_fflush_r>
 800587a:	2800      	cmp	r0, #0
 800587c:	d0d9      	beq.n	8005832 <__swbuf_r+0x2e>
 800587e:	e7d6      	b.n	800582e <__swbuf_r+0x2a>

08005880 <__swsetup_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4b29      	ldr	r3, [pc, #164]	@ (8005928 <__swsetup_r+0xa8>)
 8005884:	4605      	mov	r5, r0
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	460c      	mov	r4, r1
 800588a:	b118      	cbz	r0, 8005894 <__swsetup_r+0x14>
 800588c:	6a03      	ldr	r3, [r0, #32]
 800588e:	b90b      	cbnz	r3, 8005894 <__swsetup_r+0x14>
 8005890:	f7fd ff94 	bl	80037bc <__sinit>
 8005894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	d422      	bmi.n	80058e2 <__swsetup_r+0x62>
 800589c:	06da      	lsls	r2, r3, #27
 800589e:	d407      	bmi.n	80058b0 <__swsetup_r+0x30>
 80058a0:	2209      	movs	r2, #9
 80058a2:	602a      	str	r2, [r5, #0]
 80058a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e033      	b.n	8005918 <__swsetup_r+0x98>
 80058b0:	0758      	lsls	r0, r3, #29
 80058b2:	d512      	bpl.n	80058da <__swsetup_r+0x5a>
 80058b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058b6:	b141      	cbz	r1, 80058ca <__swsetup_r+0x4a>
 80058b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058bc:	4299      	cmp	r1, r3
 80058be:	d002      	beq.n	80058c6 <__swsetup_r+0x46>
 80058c0:	4628      	mov	r0, r5
 80058c2:	f7fe ff09 	bl	80046d8 <_free_r>
 80058c6:	2300      	movs	r3, #0
 80058c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	2300      	movs	r3, #0
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f043 0308 	orr.w	r3, r3, #8
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	b94b      	cbnz	r3, 80058fa <__swsetup_r+0x7a>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f0:	d003      	beq.n	80058fa <__swsetup_r+0x7a>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 f882 	bl	80059fe <__smakebuf_r>
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	f013 0201 	ands.w	r2, r3, #1
 8005902:	d00a      	beq.n	800591a <__swsetup_r+0x9a>
 8005904:	2200      	movs	r2, #0
 8005906:	60a2      	str	r2, [r4, #8]
 8005908:	6962      	ldr	r2, [r4, #20]
 800590a:	4252      	negs	r2, r2
 800590c:	61a2      	str	r2, [r4, #24]
 800590e:	6922      	ldr	r2, [r4, #16]
 8005910:	b942      	cbnz	r2, 8005924 <__swsetup_r+0xa4>
 8005912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005916:	d1c5      	bne.n	80058a4 <__swsetup_r+0x24>
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	0799      	lsls	r1, r3, #30
 800591c:	bf58      	it	pl
 800591e:	6962      	ldrpl	r2, [r4, #20]
 8005920:	60a2      	str	r2, [r4, #8]
 8005922:	e7f4      	b.n	800590e <__swsetup_r+0x8e>
 8005924:	2000      	movs	r0, #0
 8005926:	e7f7      	b.n	8005918 <__swsetup_r+0x98>
 8005928:	20000018 	.word	0x20000018

0800592c <_raise_r>:
 800592c:	291f      	cmp	r1, #31
 800592e:	b538      	push	{r3, r4, r5, lr}
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	d904      	bls.n	8005940 <_raise_r+0x14>
 8005936:	2316      	movs	r3, #22
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005942:	b112      	cbz	r2, 800594a <_raise_r+0x1e>
 8005944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005948:	b94b      	cbnz	r3, 800595e <_raise_r+0x32>
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f830 	bl	80059b0 <_getpid_r>
 8005950:	4622      	mov	r2, r4
 8005952:	4601      	mov	r1, r0
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800595a:	f000 b817 	b.w	800598c <_kill_r>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00a      	beq.n	8005978 <_raise_r+0x4c>
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	d103      	bne.n	800596e <_raise_r+0x42>
 8005966:	2316      	movs	r3, #22
 8005968:	6003      	str	r3, [r0, #0]
 800596a:	2001      	movs	r0, #1
 800596c:	e7e7      	b.n	800593e <_raise_r+0x12>
 800596e:	2100      	movs	r1, #0
 8005970:	4620      	mov	r0, r4
 8005972:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005976:	4798      	blx	r3
 8005978:	2000      	movs	r0, #0
 800597a:	e7e0      	b.n	800593e <_raise_r+0x12>

0800597c <raise>:
 800597c:	4b02      	ldr	r3, [pc, #8]	@ (8005988 <raise+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f7ff bfd3 	b.w	800592c <_raise_r>
 8005986:	bf00      	nop
 8005988:	20000018 	.word	0x20000018

0800598c <_kill_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	2300      	movs	r3, #0
 8005990:	4d06      	ldr	r5, [pc, #24]	@ (80059ac <_kill_r+0x20>)
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	f7fb fdf0 	bl	800157e <_kill>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d102      	bne.n	80059a8 <_kill_r+0x1c>
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	b103      	cbz	r3, 80059a8 <_kill_r+0x1c>
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	2000037c 	.word	0x2000037c

080059b0 <_getpid_r>:
 80059b0:	f7fb bdde 	b.w	8001570 <_getpid>

080059b4 <__swhatbuf_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	4615      	mov	r5, r2
 80059be:	2900      	cmp	r1, #0
 80059c0:	461e      	mov	r6, r3
 80059c2:	b096      	sub	sp, #88	@ 0x58
 80059c4:	da0c      	bge.n	80059e0 <__swhatbuf_r+0x2c>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	2100      	movs	r1, #0
 80059ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059ce:	bf14      	ite	ne
 80059d0:	2340      	movne	r3, #64	@ 0x40
 80059d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059d6:	2000      	movs	r0, #0
 80059d8:	6031      	str	r1, [r6, #0]
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	b016      	add	sp, #88	@ 0x58
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	466a      	mov	r2, sp
 80059e2:	f000 f849 	bl	8005a78 <_fstat_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	dbed      	blt.n	80059c6 <__swhatbuf_r+0x12>
 80059ea:	9901      	ldr	r1, [sp, #4]
 80059ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059f4:	4259      	negs	r1, r3
 80059f6:	4159      	adcs	r1, r3
 80059f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059fc:	e7eb      	b.n	80059d6 <__swhatbuf_r+0x22>

080059fe <__smakebuf_r>:
 80059fe:	898b      	ldrh	r3, [r1, #12]
 8005a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a02:	079d      	lsls	r5, r3, #30
 8005a04:	4606      	mov	r6, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	d507      	bpl.n	8005a1a <__smakebuf_r+0x1c>
 8005a0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2301      	movs	r3, #1
 8005a14:	6163      	str	r3, [r4, #20]
 8005a16:	b003      	add	sp, #12
 8005a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a1a:	466a      	mov	r2, sp
 8005a1c:	ab01      	add	r3, sp, #4
 8005a1e:	f7ff ffc9 	bl	80059b4 <__swhatbuf_r>
 8005a22:	9f00      	ldr	r7, [sp, #0]
 8005a24:	4605      	mov	r5, r0
 8005a26:	4639      	mov	r1, r7
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7fe fec7 	bl	80047bc <_malloc_r>
 8005a2e:	b948      	cbnz	r0, 8005a44 <__smakebuf_r+0x46>
 8005a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a34:	059a      	lsls	r2, r3, #22
 8005a36:	d4ee      	bmi.n	8005a16 <__smakebuf_r+0x18>
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	f043 0302 	orr.w	r3, r3, #2
 8005a40:	81a3      	strh	r3, [r4, #12]
 8005a42:	e7e2      	b.n	8005a0a <__smakebuf_r+0xc>
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	6020      	str	r0, [r4, #0]
 8005a54:	b15b      	cbz	r3, 8005a6e <__smakebuf_r+0x70>
 8005a56:	4630      	mov	r0, r6
 8005a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a5c:	f000 f81e 	bl	8005a9c <_isatty_r>
 8005a60:	b128      	cbz	r0, 8005a6e <__smakebuf_r+0x70>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	431d      	orrs	r5, r3
 8005a72:	81a5      	strh	r5, [r4, #12]
 8005a74:	e7cf      	b.n	8005a16 <__smakebuf_r+0x18>
	...

08005a78 <_fstat_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4d06      	ldr	r5, [pc, #24]	@ (8005a98 <_fstat_r+0x20>)
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	f7fb fdd9 	bl	800163c <_fstat>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d102      	bne.n	8005a94 <_fstat_r+0x1c>
 8005a8e:	682b      	ldr	r3, [r5, #0]
 8005a90:	b103      	cbz	r3, 8005a94 <_fstat_r+0x1c>
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	bd38      	pop	{r3, r4, r5, pc}
 8005a96:	bf00      	nop
 8005a98:	2000037c 	.word	0x2000037c

08005a9c <_isatty_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4d05      	ldr	r5, [pc, #20]	@ (8005ab8 <_isatty_r+0x1c>)
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f7fb fdd7 	bl	800165a <_isatty>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_isatty_r+0x1a>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_isatty_r+0x1a>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	2000037c 	.word	0x2000037c

08005abc <_init>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr

08005ac8 <_fini>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr
